
build/zephyr/zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	b0 d2 00 20 f9 b1 00 00 97 a0 01 00 91 b1 00 00     ... ............
    8010:	91 b1 00 00 91 b1 00 00 91 b1 00 00 91 b1 00 00     ................
	...
    802c:	bd a5 00 00 91 b1 00 00 00 00 00 00 49 a5 00 00     ............I...
    803c:	91 b1 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    8050:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    8060:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    8070:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    8080:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    8090:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    80a0:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    80b0:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    80c0:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    80d0:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    80e0:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    80f0:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    8100:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    8110:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    8120:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    8130:	a9 a6 00 00 a9 a6 00 00 a9 a6 00 00 a9 a6 00 00     ................
    8140:	a9 a6 00 00                                         ....

Disassembly of section text:

00008144 <__aeabi_uldivmod>:
    8144:	b953      	cbnz	r3, 815c <__aeabi_uldivmod+0x18>
    8146:	b94a      	cbnz	r2, 815c <__aeabi_uldivmod+0x18>
    8148:	2900      	cmp	r1, #0
    814a:	bf08      	it	eq
    814c:	2800      	cmpeq	r0, #0
    814e:	bf1c      	itt	ne
    8150:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    8154:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    8158:	f000 b80c 	b.w	8174 <__aeabi_idiv0>
    815c:	f1ad 0c08 	sub.w	ip, sp, #8
    8160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8164:	f000 f808 	bl	8178 <__udivmoddi4>
    8168:	f8dd e004 	ldr.w	lr, [sp, #4]
    816c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8170:	b004      	add	sp, #16
    8172:	4770      	bx	lr

00008174 <__aeabi_idiv0>:
    8174:	4770      	bx	lr
    8176:	bf00      	nop

00008178 <__udivmoddi4>:
    8178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    817c:	4686      	mov	lr, r0
    817e:	468c      	mov	ip, r1
    8180:	4608      	mov	r0, r1
    8182:	9e08      	ldr	r6, [sp, #32]
    8184:	4615      	mov	r5, r2
    8186:	4674      	mov	r4, lr
    8188:	4619      	mov	r1, r3
    818a:	2b00      	cmp	r3, #0
    818c:	f040 80c1 	bne.w	8312 <__udivmoddi4+0x19a>
    8190:	4285      	cmp	r5, r0
    8192:	fab2 f282 	clz	r2, r2
    8196:	d945      	bls.n	8224 <__udivmoddi4+0xac>
    8198:	b14a      	cbz	r2, 81ae <__udivmoddi4+0x36>
    819a:	f1c2 0320 	rsb	r3, r2, #32
    819e:	fa00 fc02 	lsl.w	ip, r0, r2
    81a2:	4095      	lsls	r5, r2
    81a4:	4094      	lsls	r4, r2
    81a6:	fa2e f303 	lsr.w	r3, lr, r3
    81aa:	ea43 0c0c 	orr.w	ip, r3, ip
    81ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81b2:	b2a8      	uxth	r0, r5
    81b4:	0c23      	lsrs	r3, r4, #16
    81b6:	fbbc f8fe 	udiv	r8, ip, lr
    81ba:	fb0e cc18 	mls	ip, lr, r8, ip
    81be:	fb08 f900 	mul.w	r9, r8, r0
    81c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    81c6:	4599      	cmp	r9, r3
    81c8:	d928      	bls.n	821c <__udivmoddi4+0xa4>
    81ca:	18eb      	adds	r3, r5, r3
    81cc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    81d0:	d204      	bcs.n	81dc <__udivmoddi4+0x64>
    81d2:	4599      	cmp	r9, r3
    81d4:	d902      	bls.n	81dc <__udivmoddi4+0x64>
    81d6:	f1a8 0702 	sub.w	r7, r8, #2
    81da:	442b      	add	r3, r5
    81dc:	eba3 0309 	sub.w	r3, r3, r9
    81e0:	b2a4      	uxth	r4, r4
    81e2:	fbb3 fcfe 	udiv	ip, r3, lr
    81e6:	fb0e 331c 	mls	r3, lr, ip, r3
    81ea:	fb0c f000 	mul.w	r0, ip, r0
    81ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    81f2:	42a0      	cmp	r0, r4
    81f4:	d914      	bls.n	8220 <__udivmoddi4+0xa8>
    81f6:	192c      	adds	r4, r5, r4
    81f8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    81fc:	d204      	bcs.n	8208 <__udivmoddi4+0x90>
    81fe:	42a0      	cmp	r0, r4
    8200:	d902      	bls.n	8208 <__udivmoddi4+0x90>
    8202:	f1ac 0302 	sub.w	r3, ip, #2
    8206:	442c      	add	r4, r5
    8208:	1a24      	subs	r4, r4, r0
    820a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    820e:	b11e      	cbz	r6, 8218 <__udivmoddi4+0xa0>
    8210:	40d4      	lsrs	r4, r2
    8212:	2300      	movs	r3, #0
    8214:	6034      	str	r4, [r6, #0]
    8216:	6073      	str	r3, [r6, #4]
    8218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    821c:	4647      	mov	r7, r8
    821e:	e7dd      	b.n	81dc <__udivmoddi4+0x64>
    8220:	4663      	mov	r3, ip
    8222:	e7f1      	b.n	8208 <__udivmoddi4+0x90>
    8224:	bb92      	cbnz	r2, 828c <__udivmoddi4+0x114>
    8226:	1b43      	subs	r3, r0, r5
    8228:	2101      	movs	r1, #1
    822a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    822e:	b2af      	uxth	r7, r5
    8230:	0c20      	lsrs	r0, r4, #16
    8232:	fbb3 fcfe 	udiv	ip, r3, lr
    8236:	fb0e 331c 	mls	r3, lr, ip, r3
    823a:	fb0c f807 	mul.w	r8, ip, r7
    823e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8242:	4598      	cmp	r8, r3
    8244:	d961      	bls.n	830a <__udivmoddi4+0x192>
    8246:	18eb      	adds	r3, r5, r3
    8248:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    824c:	d204      	bcs.n	8258 <__udivmoddi4+0xe0>
    824e:	4598      	cmp	r8, r3
    8250:	d902      	bls.n	8258 <__udivmoddi4+0xe0>
    8252:	f1ac 0002 	sub.w	r0, ip, #2
    8256:	442b      	add	r3, r5
    8258:	eba3 0308 	sub.w	r3, r3, r8
    825c:	b2a4      	uxth	r4, r4
    825e:	fbb3 fcfe 	udiv	ip, r3, lr
    8262:	fb0e 331c 	mls	r3, lr, ip, r3
    8266:	fb0c f707 	mul.w	r7, ip, r7
    826a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    826e:	42a7      	cmp	r7, r4
    8270:	d94d      	bls.n	830e <__udivmoddi4+0x196>
    8272:	192c      	adds	r4, r5, r4
    8274:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    8278:	d204      	bcs.n	8284 <__udivmoddi4+0x10c>
    827a:	42a7      	cmp	r7, r4
    827c:	d902      	bls.n	8284 <__udivmoddi4+0x10c>
    827e:	f1ac 0302 	sub.w	r3, ip, #2
    8282:	442c      	add	r4, r5
    8284:	1be4      	subs	r4, r4, r7
    8286:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    828a:	e7c0      	b.n	820e <__udivmoddi4+0x96>
    828c:	f1c2 0320 	rsb	r3, r2, #32
    8290:	4095      	lsls	r5, r2
    8292:	4094      	lsls	r4, r2
    8294:	fa20 f103 	lsr.w	r1, r0, r3
    8298:	fa2e f303 	lsr.w	r3, lr, r3
    829c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82a0:	4090      	lsls	r0, r2
    82a2:	b2af      	uxth	r7, r5
    82a4:	4303      	orrs	r3, r0
    82a6:	fbb1 fcfe 	udiv	ip, r1, lr
    82aa:	fb0e 101c 	mls	r0, lr, ip, r1
    82ae:	0c19      	lsrs	r1, r3, #16
    82b0:	fb0c f807 	mul.w	r8, ip, r7
    82b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    82b8:	4588      	cmp	r8, r1
    82ba:	d922      	bls.n	8302 <__udivmoddi4+0x18a>
    82bc:	1869      	adds	r1, r5, r1
    82be:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    82c2:	d204      	bcs.n	82ce <__udivmoddi4+0x156>
    82c4:	4588      	cmp	r8, r1
    82c6:	d902      	bls.n	82ce <__udivmoddi4+0x156>
    82c8:	f1ac 0002 	sub.w	r0, ip, #2
    82cc:	4429      	add	r1, r5
    82ce:	eba1 0108 	sub.w	r1, r1, r8
    82d2:	b29b      	uxth	r3, r3
    82d4:	fbb1 fcfe 	udiv	ip, r1, lr
    82d8:	fb0e 111c 	mls	r1, lr, ip, r1
    82dc:	fb0c f707 	mul.w	r7, ip, r7
    82e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    82e4:	429f      	cmp	r7, r3
    82e6:	d90e      	bls.n	8306 <__udivmoddi4+0x18e>
    82e8:	18eb      	adds	r3, r5, r3
    82ea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    82ee:	d204      	bcs.n	82fa <__udivmoddi4+0x182>
    82f0:	429f      	cmp	r7, r3
    82f2:	d902      	bls.n	82fa <__udivmoddi4+0x182>
    82f4:	f1ac 0102 	sub.w	r1, ip, #2
    82f8:	442b      	add	r3, r5
    82fa:	1bdb      	subs	r3, r3, r7
    82fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8300:	e793      	b.n	822a <__udivmoddi4+0xb2>
    8302:	4660      	mov	r0, ip
    8304:	e7e3      	b.n	82ce <__udivmoddi4+0x156>
    8306:	4661      	mov	r1, ip
    8308:	e7f7      	b.n	82fa <__udivmoddi4+0x182>
    830a:	4660      	mov	r0, ip
    830c:	e7a4      	b.n	8258 <__udivmoddi4+0xe0>
    830e:	4663      	mov	r3, ip
    8310:	e7b8      	b.n	8284 <__udivmoddi4+0x10c>
    8312:	4283      	cmp	r3, r0
    8314:	d906      	bls.n	8324 <__udivmoddi4+0x1ac>
    8316:	b916      	cbnz	r6, 831e <__udivmoddi4+0x1a6>
    8318:	2100      	movs	r1, #0
    831a:	4608      	mov	r0, r1
    831c:	e77c      	b.n	8218 <__udivmoddi4+0xa0>
    831e:	e9c6 e000 	strd	lr, r0, [r6]
    8322:	e7f9      	b.n	8318 <__udivmoddi4+0x1a0>
    8324:	fab3 f783 	clz	r7, r3
    8328:	b98f      	cbnz	r7, 834e <__udivmoddi4+0x1d6>
    832a:	4283      	cmp	r3, r0
    832c:	d301      	bcc.n	8332 <__udivmoddi4+0x1ba>
    832e:	4572      	cmp	r2, lr
    8330:	d808      	bhi.n	8344 <__udivmoddi4+0x1cc>
    8332:	ebbe 0402 	subs.w	r4, lr, r2
    8336:	eb60 0303 	sbc.w	r3, r0, r3
    833a:	2001      	movs	r0, #1
    833c:	469c      	mov	ip, r3
    833e:	b91e      	cbnz	r6, 8348 <__udivmoddi4+0x1d0>
    8340:	2100      	movs	r1, #0
    8342:	e769      	b.n	8218 <__udivmoddi4+0xa0>
    8344:	4638      	mov	r0, r7
    8346:	e7fa      	b.n	833e <__udivmoddi4+0x1c6>
    8348:	e9c6 4c00 	strd	r4, ip, [r6]
    834c:	e7f8      	b.n	8340 <__udivmoddi4+0x1c8>
    834e:	f1c7 0c20 	rsb	ip, r7, #32
    8352:	40bb      	lsls	r3, r7
    8354:	fa0e f507 	lsl.w	r5, lr, r7
    8358:	fa22 f40c 	lsr.w	r4, r2, ip
    835c:	fa2e f10c 	lsr.w	r1, lr, ip
    8360:	40ba      	lsls	r2, r7
    8362:	431c      	orrs	r4, r3
    8364:	fa20 f30c 	lsr.w	r3, r0, ip
    8368:	40b8      	lsls	r0, r7
    836a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    836e:	4301      	orrs	r1, r0
    8370:	fa1f fe84 	uxth.w	lr, r4
    8374:	fbb3 f8f9 	udiv	r8, r3, r9
    8378:	fb09 3018 	mls	r0, r9, r8, r3
    837c:	0c0b      	lsrs	r3, r1, #16
    837e:	fb08 fa0e 	mul.w	sl, r8, lr
    8382:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8386:	459a      	cmp	sl, r3
    8388:	d940      	bls.n	840c <__udivmoddi4+0x294>
    838a:	18e3      	adds	r3, r4, r3
    838c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    8390:	d204      	bcs.n	839c <__udivmoddi4+0x224>
    8392:	459a      	cmp	sl, r3
    8394:	d902      	bls.n	839c <__udivmoddi4+0x224>
    8396:	f1a8 0002 	sub.w	r0, r8, #2
    839a:	4423      	add	r3, r4
    839c:	eba3 030a 	sub.w	r3, r3, sl
    83a0:	b289      	uxth	r1, r1
    83a2:	fbb3 f8f9 	udiv	r8, r3, r9
    83a6:	fb09 3318 	mls	r3, r9, r8, r3
    83aa:	fb08 fe0e 	mul.w	lr, r8, lr
    83ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    83b2:	458e      	cmp	lr, r1
    83b4:	d92c      	bls.n	8410 <__udivmoddi4+0x298>
    83b6:	1861      	adds	r1, r4, r1
    83b8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    83bc:	d204      	bcs.n	83c8 <__udivmoddi4+0x250>
    83be:	458e      	cmp	lr, r1
    83c0:	d902      	bls.n	83c8 <__udivmoddi4+0x250>
    83c2:	f1a8 0302 	sub.w	r3, r8, #2
    83c6:	4421      	add	r1, r4
    83c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83cc:	eba1 010e 	sub.w	r1, r1, lr
    83d0:	fba0 9802 	umull	r9, r8, r0, r2
    83d4:	4541      	cmp	r1, r8
    83d6:	46ce      	mov	lr, r9
    83d8:	4643      	mov	r3, r8
    83da:	d302      	bcc.n	83e2 <__udivmoddi4+0x26a>
    83dc:	d106      	bne.n	83ec <__udivmoddi4+0x274>
    83de:	454d      	cmp	r5, r9
    83e0:	d204      	bcs.n	83ec <__udivmoddi4+0x274>
    83e2:	3801      	subs	r0, #1
    83e4:	ebb9 0e02 	subs.w	lr, r9, r2
    83e8:	eb68 0304 	sbc.w	r3, r8, r4
    83ec:	2e00      	cmp	r6, #0
    83ee:	d0a7      	beq.n	8340 <__udivmoddi4+0x1c8>
    83f0:	ebb5 020e 	subs.w	r2, r5, lr
    83f4:	eb61 0103 	sbc.w	r1, r1, r3
    83f8:	fa01 fc0c 	lsl.w	ip, r1, ip
    83fc:	fa22 f307 	lsr.w	r3, r2, r7
    8400:	40f9      	lsrs	r1, r7
    8402:	ea4c 0303 	orr.w	r3, ip, r3
    8406:	e9c6 3100 	strd	r3, r1, [r6]
    840a:	e799      	b.n	8340 <__udivmoddi4+0x1c8>
    840c:	4640      	mov	r0, r8
    840e:	e7c5      	b.n	839c <__udivmoddi4+0x224>
    8410:	4643      	mov	r3, r8
    8412:	e7d9      	b.n	83c8 <__udivmoddi4+0x250>

00008414 <strlen>:
    8414:	4603      	mov	r3, r0
    8416:	f813 2b01 	ldrb.w	r2, [r3], #1
    841a:	2a00      	cmp	r2, #0
    841c:	d1fb      	bne.n	8416 <strlen+0x2>
    841e:	1a18      	subs	r0, r3, r0
    8420:	3801      	subs	r0, #1
    8422:	4770      	bx	lr

00008424 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
    8424:	b580      	push	{r7, lr}
    8426:	b088      	sub	sp, #32
    8428:	af00      	add	r7, sp, #0
    842a:	60f8      	str	r0, [r7, #12]
    842c:	460b      	mov	r3, r1
    842e:	607a      	str	r2, [r7, #4]
    8430:	72fb      	strb	r3, [r7, #11]
	const struct gpio_driver_api *api =
    8432:	68fb      	ldr	r3, [r7, #12]
    8434:	689b      	ldr	r3, [r3, #8]
    8436:	61fb      	str	r3, [r7, #28]
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
    8438:	68fb      	ldr	r3, [r7, #12]
    843a:	685b      	ldr	r3, [r3, #4]
    843c:	61bb      	str	r3, [r7, #24]
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    843e:	68fb      	ldr	r3, [r7, #12]
    8440:	691b      	ldr	r3, [r3, #16]
    8442:	617b      	str	r3, [r7, #20]
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
    8444:	687b      	ldr	r3, [r7, #4]
    8446:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
    844a:	2b00      	cmp	r3, #0
    844c:	d00e      	beq.n	846c <z_impl_gpio_pin_configure+0x48>
    844e:	f240 33c7 	movw	r3, #967	; 0x3c7
    8452:	4a6b      	ldr	r2, [pc, #428]	; (8600 <z_impl_gpio_pin_configure+0x1dc>)
    8454:	496b      	ldr	r1, [pc, #428]	; (8604 <z_impl_gpio_pin_configure+0x1e0>)
    8456:	486c      	ldr	r0, [pc, #432]	; (8608 <z_impl_gpio_pin_configure+0x1e4>)
    8458:	f011 fdac 	bl	19fb4 <assert_print>
    845c:	486b      	ldr	r0, [pc, #428]	; (860c <z_impl_gpio_pin_configure+0x1e8>)
    845e:	f011 fda9 	bl	19fb4 <assert_print>
    8462:	f240 31c7 	movw	r1, #967	; 0x3c7
    8466:	4866      	ldr	r0, [pc, #408]	; (8600 <z_impl_gpio_pin_configure+0x1dc>)
    8468:	f011 fd94 	bl	19f94 <assert_post_action>
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    846c:	687b      	ldr	r3, [r7, #4]
    846e:	f003 0330 	and.w	r3, r3, #48	; 0x30
    8472:	2b30      	cmp	r3, #48	; 0x30
    8474:	d10e      	bne.n	8494 <z_impl_gpio_pin_configure+0x70>
    8476:	f240 33ca 	movw	r3, #970	; 0x3ca
    847a:	4a61      	ldr	r2, [pc, #388]	; (8600 <z_impl_gpio_pin_configure+0x1dc>)
    847c:	4964      	ldr	r1, [pc, #400]	; (8610 <z_impl_gpio_pin_configure+0x1ec>)
    847e:	4862      	ldr	r0, [pc, #392]	; (8608 <z_impl_gpio_pin_configure+0x1e4>)
    8480:	f011 fd98 	bl	19fb4 <assert_print>
    8484:	4863      	ldr	r0, [pc, #396]	; (8614 <z_impl_gpio_pin_configure+0x1f0>)
    8486:	f011 fd95 	bl	19fb4 <assert_print>
    848a:	f240 31ca 	movw	r1, #970	; 0x3ca
    848e:	485c      	ldr	r0, [pc, #368]	; (8600 <z_impl_gpio_pin_configure+0x1dc>)
    8490:	f011 fd80 	bl	19f94 <assert_post_action>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT(!((flags & GPIO_INPUT) && !(flags & GPIO_OUTPUT) && (flags & GPIO_SINGLE_ENDED)),
    8494:	687b      	ldr	r3, [r7, #4]
    8496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    849a:	2b00      	cmp	r3, #0
    849c:	d018      	beq.n	84d0 <z_impl_gpio_pin_configure+0xac>
    849e:	687b      	ldr	r3, [r7, #4]
    84a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    84a4:	2b00      	cmp	r3, #0
    84a6:	d113      	bne.n	84d0 <z_impl_gpio_pin_configure+0xac>
    84a8:	687b      	ldr	r3, [r7, #4]
    84aa:	f003 0302 	and.w	r3, r3, #2
    84ae:	2b00      	cmp	r3, #0
    84b0:	d00e      	beq.n	84d0 <z_impl_gpio_pin_configure+0xac>
    84b2:	f240 33ce 	movw	r3, #974	; 0x3ce
    84b6:	4a52      	ldr	r2, [pc, #328]	; (8600 <z_impl_gpio_pin_configure+0x1dc>)
    84b8:	4957      	ldr	r1, [pc, #348]	; (8618 <z_impl_gpio_pin_configure+0x1f4>)
    84ba:	4853      	ldr	r0, [pc, #332]	; (8608 <z_impl_gpio_pin_configure+0x1e4>)
    84bc:	f011 fd7a 	bl	19fb4 <assert_print>
    84c0:	4856      	ldr	r0, [pc, #344]	; (861c <z_impl_gpio_pin_configure+0x1f8>)
    84c2:	f011 fd77 	bl	19fb4 <assert_print>
    84c6:	f240 31ce 	movw	r1, #974	; 0x3ce
    84ca:	484d      	ldr	r0, [pc, #308]	; (8600 <z_impl_gpio_pin_configure+0x1dc>)
    84cc:	f011 fd62 	bl	19f94 <assert_post_action>
		 "Input cannot be enabled for 'Open Drain', 'Open Source' modes without Output");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    84d0:	687b      	ldr	r3, [r7, #4]
    84d2:	f003 0302 	and.w	r3, r3, #2
    84d6:	2b00      	cmp	r3, #0
    84d8:	d110      	bne.n	84fc <z_impl_gpio_pin_configure+0xd8>
    84da:	687b      	ldr	r3, [r7, #4]
    84dc:	f003 0304 	and.w	r3, r3, #4
    84e0:	2b00      	cmp	r3, #0
    84e2:	d00b      	beq.n	84fc <z_impl_gpio_pin_configure+0xd8>
    84e4:	f240 33d1 	movw	r3, #977	; 0x3d1
    84e8:	4a45      	ldr	r2, [pc, #276]	; (8600 <z_impl_gpio_pin_configure+0x1dc>)
    84ea:	494d      	ldr	r1, [pc, #308]	; (8620 <z_impl_gpio_pin_configure+0x1fc>)
    84ec:	4846      	ldr	r0, [pc, #280]	; (8608 <z_impl_gpio_pin_configure+0x1e4>)
    84ee:	f011 fd61 	bl	19fb4 <assert_print>
    84f2:	f240 31d1 	movw	r1, #977	; 0x3d1
    84f6:	4842      	ldr	r0, [pc, #264]	; (8600 <z_impl_gpio_pin_configure+0x1dc>)
    84f8:	f011 fd4c 	bl	19f94 <assert_post_action>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    84fc:	687b      	ldr	r3, [r7, #4]
    84fe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    8502:	2b00      	cmp	r3, #0
    8504:	d013      	beq.n	852e <z_impl_gpio_pin_configure+0x10a>
    8506:	687b      	ldr	r3, [r7, #4]
    8508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    850c:	2b00      	cmp	r3, #0
    850e:	d10e      	bne.n	852e <z_impl_gpio_pin_configure+0x10a>
    8510:	f44f 7375 	mov.w	r3, #980	; 0x3d4
    8514:	4a3a      	ldr	r2, [pc, #232]	; (8600 <z_impl_gpio_pin_configure+0x1dc>)
    8516:	4943      	ldr	r1, [pc, #268]	; (8624 <z_impl_gpio_pin_configure+0x200>)
    8518:	483b      	ldr	r0, [pc, #236]	; (8608 <z_impl_gpio_pin_configure+0x1e4>)
    851a:	f011 fd4b 	bl	19fb4 <assert_print>
    851e:	4842      	ldr	r0, [pc, #264]	; (8628 <z_impl_gpio_pin_configure+0x204>)
    8520:	f011 fd48 	bl	19fb4 <assert_print>
    8524:	f44f 7175 	mov.w	r1, #980	; 0x3d4
    8528:	4835      	ldr	r0, [pc, #212]	; (8600 <z_impl_gpio_pin_configure+0x1dc>)
    852a:	f011 fd33 	bl	19f94 <assert_post_action>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    852e:	687b      	ldr	r3, [r7, #4]
    8530:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    8534:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
    8538:	d10e      	bne.n	8558 <z_impl_gpio_pin_configure+0x134>
    853a:	f44f 7376 	mov.w	r3, #984	; 0x3d8
    853e:	4a30      	ldr	r2, [pc, #192]	; (8600 <z_impl_gpio_pin_configure+0x1dc>)
    8540:	493a      	ldr	r1, [pc, #232]	; (862c <z_impl_gpio_pin_configure+0x208>)
    8542:	4831      	ldr	r0, [pc, #196]	; (8608 <z_impl_gpio_pin_configure+0x1e4>)
    8544:	f011 fd36 	bl	19fb4 <assert_print>
    8548:	4839      	ldr	r0, [pc, #228]	; (8630 <z_impl_gpio_pin_configure+0x20c>)
    854a:	f011 fd33 	bl	19fb4 <assert_print>
    854e:	f44f 7176 	mov.w	r1, #984	; 0x3d8
    8552:	482b      	ldr	r0, [pc, #172]	; (8600 <z_impl_gpio_pin_configure+0x1dc>)
    8554:	f011 fd1e 	bl	19f94 <assert_post_action>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    8558:	687b      	ldr	r3, [r7, #4]
    855a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    855e:	2b00      	cmp	r3, #0
    8560:	d00d      	beq.n	857e <z_impl_gpio_pin_configure+0x15a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    8562:	687b      	ldr	r3, [r7, #4]
    8564:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    8568:	2b00      	cmp	r3, #0
    856a:	d008      	beq.n	857e <z_impl_gpio_pin_configure+0x15a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    856c:	687b      	ldr	r3, [r7, #4]
    856e:	f003 0301 	and.w	r3, r3, #1
    8572:	2b00      	cmp	r3, #0
    8574:	d003      	beq.n	857e <z_impl_gpio_pin_configure+0x15a>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    8576:	687b      	ldr	r3, [r7, #4]
    8578:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
    857c:	607b      	str	r3, [r7, #4]
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    857e:	687b      	ldr	r3, [r7, #4]
    8580:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    8584:	607b      	str	r3, [r7, #4]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8586:	69bb      	ldr	r3, [r7, #24]
    8588:	681a      	ldr	r2, [r3, #0]
    858a:	7afb      	ldrb	r3, [r7, #11]
    858c:	2101      	movs	r1, #1
    858e:	fa01 f303 	lsl.w	r3, r1, r3
    8592:	4013      	ands	r3, r2
    8594:	2b00      	cmp	r3, #0
    8596:	d10e      	bne.n	85b6 <z_impl_gpio_pin_configure+0x192>
    8598:	f44f 7379 	mov.w	r3, #996	; 0x3e4
    859c:	4a18      	ldr	r2, [pc, #96]	; (8600 <z_impl_gpio_pin_configure+0x1dc>)
    859e:	4925      	ldr	r1, [pc, #148]	; (8634 <z_impl_gpio_pin_configure+0x210>)
    85a0:	4819      	ldr	r0, [pc, #100]	; (8608 <z_impl_gpio_pin_configure+0x1e4>)
    85a2:	f011 fd07 	bl	19fb4 <assert_print>
    85a6:	4824      	ldr	r0, [pc, #144]	; (8638 <z_impl_gpio_pin_configure+0x214>)
    85a8:	f011 fd04 	bl	19fb4 <assert_print>
    85ac:	f44f 7179 	mov.w	r1, #996	; 0x3e4
    85b0:	4813      	ldr	r0, [pc, #76]	; (8600 <z_impl_gpio_pin_configure+0x1dc>)
    85b2:	f011 fcef 	bl	19f94 <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    85b6:	687b      	ldr	r3, [r7, #4]
    85b8:	f003 0301 	and.w	r3, r3, #1
    85bc:	2b00      	cmp	r3, #0
    85be:	d009      	beq.n	85d4 <z_impl_gpio_pin_configure+0x1b0>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    85c0:	697b      	ldr	r3, [r7, #20]
    85c2:	681a      	ldr	r2, [r3, #0]
    85c4:	7afb      	ldrb	r3, [r7, #11]
    85c6:	2101      	movs	r1, #1
    85c8:	fa01 f303 	lsl.w	r3, r1, r3
    85cc:	431a      	orrs	r2, r3
    85ce:	697b      	ldr	r3, [r7, #20]
    85d0:	601a      	str	r2, [r3, #0]
    85d2:	e009      	b.n	85e8 <z_impl_gpio_pin_configure+0x1c4>
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    85d4:	697b      	ldr	r3, [r7, #20]
    85d6:	681a      	ldr	r2, [r3, #0]
    85d8:	7afb      	ldrb	r3, [r7, #11]
    85da:	2101      	movs	r1, #1
    85dc:	fa01 f303 	lsl.w	r3, r1, r3
    85e0:	43db      	mvns	r3, r3
    85e2:	401a      	ands	r2, r3
    85e4:	697b      	ldr	r3, [r7, #20]
    85e6:	601a      	str	r2, [r3, #0]
	}

	return api->pin_configure(port, pin, flags);
    85e8:	69fb      	ldr	r3, [r7, #28]
    85ea:	681b      	ldr	r3, [r3, #0]
    85ec:	7af9      	ldrb	r1, [r7, #11]
    85ee:	687a      	ldr	r2, [r7, #4]
    85f0:	68f8      	ldr	r0, [r7, #12]
    85f2:	4798      	blx	r3
    85f4:	4603      	mov	r3, r0
}
    85f6:	4618      	mov	r0, r3
    85f8:	3720      	adds	r7, #32
    85fa:	46bd      	mov	sp, r7
    85fc:	bd80      	pop	{r7, pc}
    85fe:	bf00      	nop
    8600:	0001fc50 	.word	0x0001fc50
    8604:	0001fc84 	.word	0x0001fc84
    8608:	0001fce4 	.word	0x0001fce4
    860c:	0001fd04 	.word	0x0001fd04
    8610:	0001fd28 	.word	0x0001fd28
    8614:	0001fd64 	.word	0x0001fd64
    8618:	0001fda4 	.word	0x0001fda4
    861c:	0001fdec 	.word	0x0001fdec
    8620:	0001fe3c 	.word	0x0001fe3c
    8624:	0001fe70 	.word	0x0001fe70
    8628:	0001feb8 	.word	0x0001feb8
    862c:	0001fef4 	.word	0x0001fef4
    8630:	0001ff38 	.word	0x0001ff38
    8634:	0001ff64 	.word	0x0001ff64
    8638:	0001ffa4 	.word	0x0001ffa4

0000863c <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
    863c:	b580      	push	{r7, lr}
    863e:	b086      	sub	sp, #24
    8640:	af00      	add	r7, sp, #0
    8642:	60f8      	str	r0, [r7, #12]
    8644:	460b      	mov	r3, r1
    8646:	607a      	str	r2, [r7, #4]
    8648:	72fb      	strb	r3, [r7, #11]
	__unused const struct gpio_driver_config *const cfg =
    864a:	68fb      	ldr	r3, [r7, #12]
    864c:	685b      	ldr	r3, [r3, #4]
    864e:	613b      	str	r3, [r7, #16]
		(const struct gpio_driver_config *)port->config;
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8650:	693b      	ldr	r3, [r7, #16]
    8652:	681a      	ldr	r2, [r3, #0]
    8654:	7afb      	ldrb	r3, [r7, #11]
    8656:	2101      	movs	r1, #1
    8658:	fa01 f303 	lsl.w	r3, r1, r3
    865c:	4013      	ands	r3, r2
    865e:	2b00      	cmp	r3, #0
    8660:	d10e      	bne.n	8680 <gpio_pin_set_raw+0x44>
    8662:	f240 6326 	movw	r3, #1574	; 0x626
    8666:	4a14      	ldr	r2, [pc, #80]	; (86b8 <gpio_pin_set_raw+0x7c>)
    8668:	4914      	ldr	r1, [pc, #80]	; (86bc <gpio_pin_set_raw+0x80>)
    866a:	4815      	ldr	r0, [pc, #84]	; (86c0 <gpio_pin_set_raw+0x84>)
    866c:	f011 fca2 	bl	19fb4 <assert_print>
    8670:	4814      	ldr	r0, [pc, #80]	; (86c4 <gpio_pin_set_raw+0x88>)
    8672:	f011 fc9f 	bl	19fb4 <assert_print>
    8676:	f240 6126 	movw	r1, #1574	; 0x626
    867a:	480f      	ldr	r0, [pc, #60]	; (86b8 <gpio_pin_set_raw+0x7c>)
    867c:	f011 fc8a 	bl	19f94 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
    8680:	687b      	ldr	r3, [r7, #4]
    8682:	2b00      	cmp	r3, #0
    8684:	d009      	beq.n	869a <gpio_pin_set_raw+0x5e>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    8686:	7afb      	ldrb	r3, [r7, #11]
    8688:	2201      	movs	r2, #1
    868a:	fa02 f303 	lsl.w	r3, r2, r3
    868e:	4619      	mov	r1, r3
    8690:	68f8      	ldr	r0, [r7, #12]
    8692:	f010 fc15 	bl	18ec0 <gpio_port_set_bits_raw>
    8696:	6178      	str	r0, [r7, #20]
    8698:	e008      	b.n	86ac <gpio_pin_set_raw+0x70>
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    869a:	7afb      	ldrb	r3, [r7, #11]
    869c:	2201      	movs	r2, #1
    869e:	fa02 f303 	lsl.w	r3, r2, r3
    86a2:	4619      	mov	r1, r3
    86a4:	68f8      	ldr	r0, [r7, #12]
    86a6:	f010 fc19 	bl	18edc <gpio_port_clear_bits_raw>
    86aa:	6178      	str	r0, [r7, #20]
	}

	return ret;
    86ac:	697b      	ldr	r3, [r7, #20]
}
    86ae:	4618      	mov	r0, r3
    86b0:	3718      	adds	r7, #24
    86b2:	46bd      	mov	sp, r7
    86b4:	bd80      	pop	{r7, pc}
    86b6:	bf00      	nop
    86b8:	0001fc50 	.word	0x0001fc50
    86bc:	0001ff64 	.word	0x0001ff64
    86c0:	0001fce4 	.word	0x0001fce4
    86c4:	0001ffa4 	.word	0x0001ffa4

000086c8 <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
    86c8:	b580      	push	{r7, lr}
    86ca:	b086      	sub	sp, #24
    86cc:	af00      	add	r7, sp, #0
    86ce:	60f8      	str	r0, [r7, #12]
    86d0:	460b      	mov	r3, r1
    86d2:	607a      	str	r2, [r7, #4]
    86d4:	72fb      	strb	r3, [r7, #11]
	__unused const struct gpio_driver_config *const cfg =
    86d6:	68fb      	ldr	r3, [r7, #12]
    86d8:	685b      	ldr	r3, [r3, #4]
    86da:	617b      	str	r3, [r7, #20]
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
    86dc:	68fb      	ldr	r3, [r7, #12]
    86de:	691b      	ldr	r3, [r3, #16]
    86e0:	613b      	str	r3, [r7, #16]
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    86e2:	697b      	ldr	r3, [r7, #20]
    86e4:	681a      	ldr	r2, [r3, #0]
    86e6:	7afb      	ldrb	r3, [r7, #11]
    86e8:	2101      	movs	r1, #1
    86ea:	fa01 f303 	lsl.w	r3, r1, r3
    86ee:	4013      	ands	r3, r2
    86f0:	2b00      	cmp	r3, #0
    86f2:	d10e      	bne.n	8712 <gpio_pin_set+0x4a>
    86f4:	f240 634f 	movw	r3, #1615	; 0x64f
    86f8:	4a13      	ldr	r2, [pc, #76]	; (8748 <gpio_pin_set+0x80>)
    86fa:	4914      	ldr	r1, [pc, #80]	; (874c <gpio_pin_set+0x84>)
    86fc:	4814      	ldr	r0, [pc, #80]	; (8750 <gpio_pin_set+0x88>)
    86fe:	f011 fc59 	bl	19fb4 <assert_print>
    8702:	4814      	ldr	r0, [pc, #80]	; (8754 <gpio_pin_set+0x8c>)
    8704:	f011 fc56 	bl	19fb4 <assert_print>
    8708:	f240 614f 	movw	r1, #1615	; 0x64f
    870c:	480e      	ldr	r0, [pc, #56]	; (8748 <gpio_pin_set+0x80>)
    870e:	f011 fc41 	bl	19f94 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8712:	693b      	ldr	r3, [r7, #16]
    8714:	681a      	ldr	r2, [r3, #0]
    8716:	7afb      	ldrb	r3, [r7, #11]
    8718:	2101      	movs	r1, #1
    871a:	fa01 f303 	lsl.w	r3, r1, r3
    871e:	4013      	ands	r3, r2
    8720:	2b00      	cmp	r3, #0
    8722:	d006      	beq.n	8732 <gpio_pin_set+0x6a>
		value = (value != 0) ? 0 : 1;
    8724:	687b      	ldr	r3, [r7, #4]
    8726:	2b00      	cmp	r3, #0
    8728:	bf0c      	ite	eq
    872a:	2301      	moveq	r3, #1
    872c:	2300      	movne	r3, #0
    872e:	b2db      	uxtb	r3, r3
    8730:	607b      	str	r3, [r7, #4]
	}

	return gpio_pin_set_raw(port, pin, value);
    8732:	7afb      	ldrb	r3, [r7, #11]
    8734:	687a      	ldr	r2, [r7, #4]
    8736:	4619      	mov	r1, r3
    8738:	68f8      	ldr	r0, [r7, #12]
    873a:	f7ff ff7f 	bl	863c <gpio_pin_set_raw>
    873e:	4603      	mov	r3, r0
}
    8740:	4618      	mov	r0, r3
    8742:	3718      	adds	r7, #24
    8744:	46bd      	mov	sp, r7
    8746:	bd80      	pop	{r7, pc}
    8748:	0001fc50 	.word	0x0001fc50
    874c:	0001ff64 	.word	0x0001ff64
    8750:	0001fce4 	.word	0x0001fce4
    8754:	0001ffa4 	.word	0x0001ffa4

00008758 <z_log_minimal_level_to_char>:
	z_log_minimal_vprintk(fmt, valist); \
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
    8758:	b480      	push	{r7}
    875a:	b083      	sub	sp, #12
    875c:	af00      	add	r7, sp, #0
    875e:	6078      	str	r0, [r7, #4]
	switch (level) {
    8760:	687b      	ldr	r3, [r7, #4]
    8762:	3b01      	subs	r3, #1
    8764:	2b03      	cmp	r3, #3
    8766:	d813      	bhi.n	8790 <z_log_minimal_level_to_char+0x38>
    8768:	a201      	add	r2, pc, #4	; (adr r2, 8770 <z_log_minimal_level_to_char+0x18>)
    876a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    876e:	bf00      	nop
    8770:	00008781 	.word	0x00008781
    8774:	00008785 	.word	0x00008785
    8778:	00008789 	.word	0x00008789
    877c:	0000878d 	.word	0x0000878d
	case LOG_LEVEL_ERR:
		return 'E';
    8780:	2345      	movs	r3, #69	; 0x45
    8782:	e006      	b.n	8792 <z_log_minimal_level_to_char+0x3a>
	case LOG_LEVEL_WRN:
		return 'W';
    8784:	2357      	movs	r3, #87	; 0x57
    8786:	e004      	b.n	8792 <z_log_minimal_level_to_char+0x3a>
	case LOG_LEVEL_INF:
		return 'I';
    8788:	2349      	movs	r3, #73	; 0x49
    878a:	e002      	b.n	8792 <z_log_minimal_level_to_char+0x3a>
	case LOG_LEVEL_DBG:
		return 'D';
    878c:	2344      	movs	r3, #68	; 0x44
    878e:	e000      	b.n	8792 <z_log_minimal_level_to_char+0x3a>
	default:
		return '?';
    8790:	233f      	movs	r3, #63	; 0x3f
	}
}
    8792:	4618      	mov	r0, r3
    8794:	370c      	adds	r7, #12
    8796:	46bd      	mov	sp, r7
    8798:	bc80      	pop	{r7}
    879a:	4770      	bx	lr

0000879c <pyd1598_init>:
};


// Initialize the sensor device, do not configure the sensor here
static int pyd1598_init(const struct device *dev)
{
    879c:	b580      	push	{r7, lr}
    879e:	b088      	sub	sp, #32
    87a0:	af00      	add	r7, sp, #0
    87a2:	6078      	str	r0, [r7, #4]
    // Declare variables
	const struct pyd1598_config *cfg; 
    struct pyd1598_data *data;
    uint32_t sensor_conf = 0;
    87a4:	2300      	movs	r3, #0
    87a6:	61fb      	str	r3, [r7, #28]
    uint32_t measurement = 0;
    87a8:	2300      	movs	r3, #0
    87aa:	60fb      	str	r3, [r7, #12]
    int ret = 0;
    87ac:	2300      	movs	r3, #0
    87ae:	61bb      	str	r3, [r7, #24]

    // Check that the device is not null, and that the data and configuration is not null
    LOG_DBG("Initialising pyd1598");
    87b0:	2303      	movs	r3, #3
    87b2:	2b03      	cmp	r3, #3
    87b4:	d907      	bls.n	87c6 <pyd1598_init+0x2a>
    87b6:	2004      	movs	r0, #4
    87b8:	f7ff ffce 	bl	8758 <z_log_minimal_level_to_char>
    87bc:	4603      	mov	r3, r0
    87be:	4619      	mov	r1, r3
    87c0:	4850      	ldr	r0, [pc, #320]	; (8904 <pyd1598_init+0x168>)
    87c2:	f011 fc1a 	bl	19ffa <z_log_minimal_printk>
    if (dev == NULL || dev->data == NULL || dev->config == NULL) {
    87c6:	687b      	ldr	r3, [r7, #4]
    87c8:	2b00      	cmp	r3, #0
    87ca:	d007      	beq.n	87dc <pyd1598_init+0x40>
    87cc:	687b      	ldr	r3, [r7, #4]
    87ce:	691b      	ldr	r3, [r3, #16]
    87d0:	2b00      	cmp	r3, #0
    87d2:	d003      	beq.n	87dc <pyd1598_init+0x40>
    87d4:	687b      	ldr	r3, [r7, #4]
    87d6:	685b      	ldr	r3, [r3, #4]
    87d8:	2b00      	cmp	r3, #0
    87da:	d102      	bne.n	87e2 <pyd1598_init+0x46>
        return -EINVAL;
    87dc:	f06f 0315 	mvn.w	r3, #21
    87e0:	e08b      	b.n	88fa <pyd1598_init+0x15e>
    }

    // Define the variables
    cfg = dev->config;
    87e2:	687b      	ldr	r3, [r7, #4]
    87e4:	685b      	ldr	r3, [r3, #4]
    87e6:	617b      	str	r3, [r7, #20]
    data = dev->data; 
    87e8:	687b      	ldr	r3, [r7, #4]
    87ea:	691b      	ldr	r3, [r3, #16]
    87ec:	613b      	str	r3, [r7, #16]

    // Check if the GPIO pins are ready
    if (!gpio_is_ready_dt(&cfg->serial_in)) {
    87ee:	697b      	ldr	r3, [r7, #20]
    87f0:	3304      	adds	r3, #4
    87f2:	4618      	mov	r0, r3
    87f4:	f010 faf8 	bl	18de8 <gpio_is_ready_dt>
    87f8:	4603      	mov	r3, r0
    87fa:	f083 0301 	eor.w	r3, r3, #1
    87fe:	b2db      	uxtb	r3, r3
    8800:	2b00      	cmp	r3, #0
    8802:	d010      	beq.n	8826 <pyd1598_init+0x8a>
        LOG_ERR("Serial in GPIO pin %d is not ready", cfg->serial_in.pin);
    8804:	2303      	movs	r3, #3
    8806:	2b00      	cmp	r3, #0
    8808:	d00a      	beq.n	8820 <pyd1598_init+0x84>
    880a:	2001      	movs	r0, #1
    880c:	f7ff ffa4 	bl	8758 <z_log_minimal_level_to_char>
    8810:	4603      	mov	r3, r0
    8812:	4619      	mov	r1, r3
    8814:	697b      	ldr	r3, [r7, #20]
    8816:	7a1b      	ldrb	r3, [r3, #8]
    8818:	461a      	mov	r2, r3
    881a:	483b      	ldr	r0, [pc, #236]	; (8908 <pyd1598_init+0x16c>)
    881c:	f011 fbed 	bl	19ffa <z_log_minimal_printk>
        return -ENODEV;
    8820:	f06f 0312 	mvn.w	r3, #18
    8824:	e069      	b.n	88fa <pyd1598_init+0x15e>
    }
    if (!gpio_is_ready_dt(&cfg->direct_link)) {
    8826:	697b      	ldr	r3, [r7, #20]
    8828:	330c      	adds	r3, #12
    882a:	4618      	mov	r0, r3
    882c:	f010 fadc 	bl	18de8 <gpio_is_ready_dt>
    8830:	4603      	mov	r3, r0
    8832:	f083 0301 	eor.w	r3, r3, #1
    8836:	b2db      	uxtb	r3, r3
    8838:	2b00      	cmp	r3, #0
    883a:	d010      	beq.n	885e <pyd1598_init+0xc2>
        LOG_ERR("Direct link GPIO pin %d is not ready", cfg->direct_link.pin);
    883c:	2303      	movs	r3, #3
    883e:	2b00      	cmp	r3, #0
    8840:	d00a      	beq.n	8858 <pyd1598_init+0xbc>
    8842:	2001      	movs	r0, #1
    8844:	f7ff ff88 	bl	8758 <z_log_minimal_level_to_char>
    8848:	4603      	mov	r3, r0
    884a:	4619      	mov	r1, r3
    884c:	697b      	ldr	r3, [r7, #20]
    884e:	7c1b      	ldrb	r3, [r3, #16]
    8850:	461a      	mov	r2, r3
    8852:	482e      	ldr	r0, [pc, #184]	; (890c <pyd1598_init+0x170>)
    8854:	f011 fbd1 	bl	19ffa <z_log_minimal_printk>
        return -ENODEV;
    8858:	f06f 0312 	mvn.w	r3, #18
    885c:	e04d      	b.n	88fa <pyd1598_init+0x15e>
    }

    // Configure the GPIO pins Serial in and Direct link
    ret = gpio_pin_configure_dt(&cfg->serial_in, GPIO_INPUT | cfg->serial_in.dt_flags);
    885e:	697b      	ldr	r3, [r7, #20]
    8860:	1d1a      	adds	r2, r3, #4
    8862:	697b      	ldr	r3, [r7, #20]
    8864:	895b      	ldrh	r3, [r3, #10]
    8866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    886a:	4619      	mov	r1, r3
    886c:	4610      	mov	r0, r2
    886e:	f010 fac9 	bl	18e04 <gpio_pin_configure_dt>
    8872:	61b8      	str	r0, [r7, #24]
    if (ret != 0) {
    8874:	69bb      	ldr	r3, [r7, #24]
    8876:	2b00      	cmp	r3, #0
    8878:	d00f      	beq.n	889a <pyd1598_init+0xfe>
        LOG_ERR("Failed to configure serial in GPIO pin %d", cfg->serial_in.pin);
    887a:	2303      	movs	r3, #3
    887c:	2b00      	cmp	r3, #0
    887e:	d00a      	beq.n	8896 <pyd1598_init+0xfa>
    8880:	2001      	movs	r0, #1
    8882:	f7ff ff69 	bl	8758 <z_log_minimal_level_to_char>
    8886:	4603      	mov	r3, r0
    8888:	4619      	mov	r1, r3
    888a:	697b      	ldr	r3, [r7, #20]
    888c:	7a1b      	ldrb	r3, [r3, #8]
    888e:	461a      	mov	r2, r3
    8890:	481f      	ldr	r0, [pc, #124]	; (8910 <pyd1598_init+0x174>)
    8892:	f011 fbb2 	bl	19ffa <z_log_minimal_printk>
        return ret;
    8896:	69bb      	ldr	r3, [r7, #24]
    8898:	e02f      	b.n	88fa <pyd1598_init+0x15e>
    }

    ret = gpio_pin_configure_dt(&cfg->direct_link, GPIO_INPUT | cfg->direct_link.dt_flags);
    889a:	697b      	ldr	r3, [r7, #20]
    889c:	f103 020c 	add.w	r2, r3, #12
    88a0:	697b      	ldr	r3, [r7, #20]
    88a2:	8a5b      	ldrh	r3, [r3, #18]
    88a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    88a8:	4619      	mov	r1, r3
    88aa:	4610      	mov	r0, r2
    88ac:	f010 faaa 	bl	18e04 <gpio_pin_configure_dt>
    88b0:	61b8      	str	r0, [r7, #24]
    if (ret != 0) {
    88b2:	69bb      	ldr	r3, [r7, #24]
    88b4:	2b00      	cmp	r3, #0
    88b6:	d00f      	beq.n	88d8 <pyd1598_init+0x13c>
        LOG_ERR("Failed to configure direct link GPIO pin %d", cfg->direct_link.pin);
    88b8:	2303      	movs	r3, #3
    88ba:	2b00      	cmp	r3, #0
    88bc:	d00a      	beq.n	88d4 <pyd1598_init+0x138>
    88be:	2001      	movs	r0, #1
    88c0:	f7ff ff4a 	bl	8758 <z_log_minimal_level_to_char>
    88c4:	4603      	mov	r3, r0
    88c6:	4619      	mov	r1, r3
    88c8:	697b      	ldr	r3, [r7, #20]
    88ca:	7c1b      	ldrb	r3, [r3, #16]
    88cc:	461a      	mov	r2, r3
    88ce:	4811      	ldr	r0, [pc, #68]	; (8914 <pyd1598_init+0x178>)
    88d0:	f011 fb93 	bl	19ffa <z_log_minimal_printk>
        return ret;
    88d4:	69bb      	ldr	r3, [r7, #24]
    88d6:	e010      	b.n	88fa <pyd1598_init+0x15e>
    }

    // Set reserved bits in desired configuration, to allow for user to not set them even if encouraged 
    sensor_conf = (sensor_conf & ~(PYD1598_RESERVED_2_MASK << PYD1598_RESERVED_2_SHIFT)) | (PYD1598_RESERVED_2_DEC_VALUE << PYD1598_RESERVED_2_SHIFT);
    88d8:	69fb      	ldr	r3, [r7, #28]
    88da:	f023 0318 	bic.w	r3, r3, #24
    88de:	f043 0310 	orr.w	r3, r3, #16
    88e2:	61fb      	str	r3, [r7, #28]
    sensor_conf = (sensor_conf & ~(PYD1598_RESERVED_1_MASK << PYD1598_RESERVED_1_SHIFT)) | (PYD1598_RESERVED_1_DEC_VALUE << PYD1598_RESERVED_1_SHIFT);
    88e4:	69fb      	ldr	r3, [r7, #28]
    88e6:	f023 0302 	bic.w	r3, r3, #2
    88ea:	61fb      	str	r3, [r7, #28]

    // Set the sensor configuration and measurement data in ram
    data->sensor_conf = sensor_conf;
    88ec:	693b      	ldr	r3, [r7, #16]
    88ee:	69fa      	ldr	r2, [r7, #28]
    88f0:	601a      	str	r2, [r3, #0]
    data->measurement = measurement;
    88f2:	693b      	ldr	r3, [r7, #16]
    88f4:	68fa      	ldr	r2, [r7, #12]
    88f6:	605a      	str	r2, [r3, #4]

	return 0;
    88f8:	2300      	movs	r3, #0
}
    88fa:	4618      	mov	r0, r3
    88fc:	3720      	adds	r7, #32
    88fe:	46bd      	mov	sp, r7
    8900:	bd80      	pop	{r7, pc}
    8902:	bf00      	nop
    8904:	0001ffc0 	.word	0x0001ffc0
    8908:	0001ffdc 	.word	0x0001ffdc
    890c:	00020004 	.word	0x00020004
    8910:	00020030 	.word	0x00020030
    8914:	00020060 	.word	0x00020060

00008918 <pyd1598_push>:
 * 
 * @param dev Pointer to the sensor device
 *
 * @return 0 if successful, negative errno code if failure.
 */
int pyd1598_push(const struct device *dev){
    8918:	b580      	push	{r7, lr}
    891a:	b092      	sub	sp, #72	; 0x48
    891c:	af00      	add	r7, sp, #0
    891e:	6078      	str	r0, [r7, #4]
    // Variables
    const struct pyd1598_config *cfg; // Get the configuration
    struct pyd1598_data *data; // pyd1598_data
    uint32_t sensor_conf; // Raw bits of the configuration
    uint32_t reg_mask; // Reg mask 
    int key = 0; // Interupt key
    8920:	2300      	movs	r3, #0
    8922:	643b      	str	r3, [r7, #64]	; 0x40
    int bit = 0; // Each bit
    8924:	2300      	movs	r3, #0
    8926:	633b      	str	r3, [r7, #48]	; 0x30
    int ret = 0; // Return value
    8928:	2300      	movs	r3, #0
    892a:	647b      	str	r3, [r7, #68]	; 0x44

    // Check if the device is null
    LOG_DBG("pyd1598_push");
    892c:	2303      	movs	r3, #3
    892e:	2b03      	cmp	r3, #3
    8930:	d907      	bls.n	8942 <pyd1598_push+0x2a>
    8932:	2004      	movs	r0, #4
    8934:	f7ff ff10 	bl	8758 <z_log_minimal_level_to_char>
    8938:	4603      	mov	r3, r0
    893a:	4619      	mov	r1, r3
    893c:	4882      	ldr	r0, [pc, #520]	; (8b48 <pyd1598_push+0x230>)
    893e:	f011 fb5c 	bl	19ffa <z_log_minimal_printk>
    if (dev == NULL || dev->data == NULL) {
    8942:	687b      	ldr	r3, [r7, #4]
    8944:	2b00      	cmp	r3, #0
    8946:	d003      	beq.n	8950 <pyd1598_push+0x38>
    8948:	687b      	ldr	r3, [r7, #4]
    894a:	691b      	ldr	r3, [r3, #16]
    894c:	2b00      	cmp	r3, #0
    894e:	d102      	bne.n	8956 <pyd1598_push+0x3e>
        return -EINVAL;
    8950:	f06f 0315 	mvn.w	r3, #21
    8954:	e0f4      	b.n	8b40 <pyd1598_push+0x228>
    }

    // Declare the variables
    cfg = dev->config;
    8956:	687b      	ldr	r3, [r7, #4]
    8958:	685b      	ldr	r3, [r3, #4]
    895a:	63bb      	str	r3, [r7, #56]	; 0x38
    data = dev->data;
    895c:	687b      	ldr	r3, [r7, #4]
    895e:	691b      	ldr	r3, [r3, #16]
    8960:	637b      	str	r3, [r7, #52]	; 0x34
    sensor_conf = data->sensor_conf;
    8962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8964:	681b      	ldr	r3, [r3, #0]
    8966:	63fb      	str	r3, [r7, #60]	; 0x3c
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    8968:	f04f 0320 	mov.w	r3, #32
    896c:	f3ef 8211 	mrs	r2, BASEPRI
    8970:	f383 8812 	msr	BASEPRI_MAX, r3
    8974:	f3bf 8f6f 	isb	sy
    8978:	627a      	str	r2, [r7, #36]	; 0x24
    897a:	623b      	str	r3, [r7, #32]
		: "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return key;
    897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    key = irq_lock();
    897e:	643b      	str	r3, [r7, #64]	; 0x40

    // beggining condition 
    // Set both direct link and serial in to output value 0
    ret = gpio_pin_configure_dt(&cfg->serial_in, GPIO_OUTPUT);
    8980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8982:	3304      	adds	r3, #4
    8984:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    8988:	4618      	mov	r0, r3
    898a:	f010 fa3b 	bl	18e04 <gpio_pin_configure_dt>
    898e:	6478      	str	r0, [r7, #68]	; 0x44
    if (ret != 0) {
    8990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8992:	2b00      	cmp	r3, #0
    8994:	d017      	beq.n	89c6 <pyd1598_push+0xae>
        irq_unlock(key);
    8996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8998:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    899a:	69fb      	ldr	r3, [r7, #28]
    899c:	f383 8811 	msr	BASEPRI, r3
    89a0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    89a4:	bf00      	nop
        LOG_ERR("Failed to configure serial in GPIO pin %d", cfg->serial_in.pin);
    89a6:	2303      	movs	r3, #3
    89a8:	2b00      	cmp	r3, #0
    89aa:	d00a      	beq.n	89c2 <pyd1598_push+0xaa>
    89ac:	2001      	movs	r0, #1
    89ae:	f7ff fed3 	bl	8758 <z_log_minimal_level_to_char>
    89b2:	4603      	mov	r3, r0
    89b4:	4619      	mov	r1, r3
    89b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    89b8:	7a1b      	ldrb	r3, [r3, #8]
    89ba:	461a      	mov	r2, r3
    89bc:	4863      	ldr	r0, [pc, #396]	; (8b4c <pyd1598_push+0x234>)
    89be:	f011 fb1c 	bl	19ffa <z_log_minimal_printk>
        return ret;
    89c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    89c4:	e0bc      	b.n	8b40 <pyd1598_push+0x228>
    }
    ret = gpio_pin_configure_dt(&cfg->direct_link, GPIO_OUTPUT);
    89c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    89c8:	330c      	adds	r3, #12
    89ca:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    89ce:	4618      	mov	r0, r3
    89d0:	f010 fa18 	bl	18e04 <gpio_pin_configure_dt>
    89d4:	6478      	str	r0, [r7, #68]	; 0x44
    if (ret != 0) {
    89d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    89d8:	2b00      	cmp	r3, #0
    89da:	d017      	beq.n	8a0c <pyd1598_push+0xf4>
        irq_unlock(key);
    89dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    89de:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    89e0:	69bb      	ldr	r3, [r7, #24]
    89e2:	f383 8811 	msr	BASEPRI, r3
    89e6:	f3bf 8f6f 	isb	sy
}
    89ea:	bf00      	nop
        LOG_ERR("Failed to configure direct link GPIO pin %d", cfg->direct_link.pin);
    89ec:	2303      	movs	r3, #3
    89ee:	2b00      	cmp	r3, #0
    89f0:	d00a      	beq.n	8a08 <pyd1598_push+0xf0>
    89f2:	2001      	movs	r0, #1
    89f4:	f7ff feb0 	bl	8758 <z_log_minimal_level_to_char>
    89f8:	4603      	mov	r3, r0
    89fa:	4619      	mov	r1, r3
    89fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    89fe:	7c1b      	ldrb	r3, [r3, #16]
    8a00:	461a      	mov	r2, r3
    8a02:	4853      	ldr	r0, [pc, #332]	; (8b50 <pyd1598_push+0x238>)
    8a04:	f011 faf9 	bl	19ffa <z_log_minimal_printk>
        return ret;
    8a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8a0a:	e099      	b.n	8b40 <pyd1598_push+0x228>
    }
    gpio_pin_set_dt(&cfg->serial_in, 0);
    8a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8a0e:	3304      	adds	r3, #4
    8a10:	2100      	movs	r1, #0
    8a12:	4618      	mov	r0, r3
    8a14:	f010 fa30 	bl	18e78 <gpio_pin_set_dt>
    gpio_pin_set_dt(&cfg->direct_link, 0);
    8a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8a1a:	330c      	adds	r3, #12
    8a1c:	2100      	movs	r1, #0
    8a1e:	4618      	mov	r0, r3
    8a20:	f010 fa2a 	bl	18e78 <gpio_pin_set_dt>

    // Sleep for 200 ns - 2000 ns
    k_busy_wait(1);
    8a24:	2001      	movs	r0, #1
    8a26:	f010 fa67 	bl	18ef8 <k_busy_wait>

    // Loop through all bits (25)
    for (int i = 24; i >= 0; i--) {
    8a2a:	2318      	movs	r3, #24
    8a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    8a2e:	e02b      	b.n	8a88 <pyd1598_push+0x170>
        reg_mask = (uint32_t)(1) << i;
    8a30:	2201      	movs	r2, #1
    8a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8a34:	fa02 f303 	lsl.w	r3, r2, r3
    8a38:	62bb      	str	r3, [r7, #40]	; 0x28
        bit = ((sensor_conf & reg_mask) != 0) ? 1 : 0;    
    8a3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8a3e:	4013      	ands	r3, r2
    8a40:	2b00      	cmp	r3, #0
    8a42:	bf14      	ite	ne
    8a44:	2301      	movne	r3, #1
    8a46:	2300      	moveq	r3, #0
    8a48:	b2db      	uxtb	r3, r3
    8a4a:	633b      	str	r3, [r7, #48]	; 0x30
        gpio_pin_set_dt(&cfg->serial_in, 0);
    8a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8a4e:	3304      	adds	r3, #4
    8a50:	2100      	movs	r1, #0
    8a52:	4618      	mov	r0, r3
    8a54:	f010 fa10 	bl	18e78 <gpio_pin_set_dt>
        k_busy_wait(1);
    8a58:	2001      	movs	r0, #1
    8a5a:	f010 fa4d 	bl	18ef8 <k_busy_wait>
        gpio_pin_set_dt(&cfg->serial_in, 1);
    8a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8a60:	3304      	adds	r3, #4
    8a62:	2101      	movs	r1, #1
    8a64:	4618      	mov	r0, r3
    8a66:	f010 fa07 	bl	18e78 <gpio_pin_set_dt>
        k_busy_wait(1);
    8a6a:	2001      	movs	r0, #1
    8a6c:	f010 fa44 	bl	18ef8 <k_busy_wait>
        gpio_pin_set_dt(&cfg->serial_in, bit);
    8a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8a72:	3304      	adds	r3, #4
    8a74:	6b39      	ldr	r1, [r7, #48]	; 0x30
    8a76:	4618      	mov	r0, r3
    8a78:	f010 f9fe 	bl	18e78 <gpio_pin_set_dt>

        //sleep for atleast 80 us + 20%
        k_busy_wait(96);        
    8a7c:	2060      	movs	r0, #96	; 0x60
    8a7e:	f010 fa3b 	bl	18ef8 <k_busy_wait>
    for (int i = 24; i >= 0; i--) {
    8a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8a84:	3b01      	subs	r3, #1
    8a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    8a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8a8a:	2b00      	cmp	r3, #0
    8a8c:	dad0      	bge.n	8a30 <pyd1598_push+0x118>
    } 
    // pull the pin low for 650 us + 20%
    gpio_pin_set_dt(&cfg->direct_link, 0);
    8a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8a90:	330c      	adds	r3, #12
    8a92:	2100      	movs	r1, #0
    8a94:	4618      	mov	r0, r3
    8a96:	f010 f9ef 	bl	18e78 <gpio_pin_set_dt>
    k_busy_wait(780);
    8a9a:	f44f 7043 	mov.w	r0, #780	; 0x30c
    8a9e:	f010 fa2b 	bl	18ef8 <k_busy_wait>

    // after condition, set both direct link and serial in to input
    ret = gpio_pin_configure_dt(&cfg->serial_in, GPIO_INPUT);
    8aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8aa4:	3304      	adds	r3, #4
    8aa6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    8aaa:	4618      	mov	r0, r3
    8aac:	f010 f9aa 	bl	18e04 <gpio_pin_configure_dt>
    8ab0:	6478      	str	r0, [r7, #68]	; 0x44
    if (ret != 0) {
    8ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8ab4:	2b00      	cmp	r3, #0
    8ab6:	d017      	beq.n	8ae8 <pyd1598_push+0x1d0>
        irq_unlock(key);
    8ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8aba:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    8abc:	697b      	ldr	r3, [r7, #20]
    8abe:	f383 8811 	msr	BASEPRI, r3
    8ac2:	f3bf 8f6f 	isb	sy
}
    8ac6:	bf00      	nop
        LOG_ERR("Failed to configure serial in GPIO pin %d", cfg->serial_in.pin);
    8ac8:	2303      	movs	r3, #3
    8aca:	2b00      	cmp	r3, #0
    8acc:	d00a      	beq.n	8ae4 <pyd1598_push+0x1cc>
    8ace:	2001      	movs	r0, #1
    8ad0:	f7ff fe42 	bl	8758 <z_log_minimal_level_to_char>
    8ad4:	4603      	mov	r3, r0
    8ad6:	4619      	mov	r1, r3
    8ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8ada:	7a1b      	ldrb	r3, [r3, #8]
    8adc:	461a      	mov	r2, r3
    8ade:	481b      	ldr	r0, [pc, #108]	; (8b4c <pyd1598_push+0x234>)
    8ae0:	f011 fa8b 	bl	19ffa <z_log_minimal_printk>
        return ret;
    8ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8ae6:	e02b      	b.n	8b40 <pyd1598_push+0x228>
    }
    ret = gpio_pin_configure_dt(&cfg->direct_link, GPIO_INPUT);
    8ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8aea:	330c      	adds	r3, #12
    8aec:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    8af0:	4618      	mov	r0, r3
    8af2:	f010 f987 	bl	18e04 <gpio_pin_configure_dt>
    8af6:	6478      	str	r0, [r7, #68]	; 0x44
    if (ret != 0) {
    8af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8afa:	2b00      	cmp	r3, #0
    8afc:	d017      	beq.n	8b2e <pyd1598_push+0x216>
        irq_unlock(key);
    8afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8b00:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
    8b02:	693b      	ldr	r3, [r7, #16]
    8b04:	f383 8811 	msr	BASEPRI, r3
    8b08:	f3bf 8f6f 	isb	sy
}
    8b0c:	bf00      	nop
        LOG_ERR("Failed to configure direct link GPIO pin %d", cfg->direct_link.pin);
    8b0e:	2303      	movs	r3, #3
    8b10:	2b00      	cmp	r3, #0
    8b12:	d00a      	beq.n	8b2a <pyd1598_push+0x212>
    8b14:	2001      	movs	r0, #1
    8b16:	f7ff fe1f 	bl	8758 <z_log_minimal_level_to_char>
    8b1a:	4603      	mov	r3, r0
    8b1c:	4619      	mov	r1, r3
    8b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8b20:	7c1b      	ldrb	r3, [r3, #16]
    8b22:	461a      	mov	r2, r3
    8b24:	480a      	ldr	r0, [pc, #40]	; (8b50 <pyd1598_push+0x238>)
    8b26:	f011 fa68 	bl	19ffa <z_log_minimal_printk>
        return ret;
    8b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8b2c:	e008      	b.n	8b40 <pyd1598_push+0x228>
    }

    // Unlock irq
    irq_unlock(key);
    8b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8b30:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
    8b32:	68fb      	ldr	r3, [r7, #12]
    8b34:	f383 8811 	msr	BASEPRI, r3
    8b38:	f3bf 8f6f 	isb	sy
}
    8b3c:	bf00      	nop
    
    return 0;
    8b3e:	2300      	movs	r3, #0
}
    8b40:	4618      	mov	r0, r3
    8b42:	3748      	adds	r7, #72	; 0x48
    8b44:	46bd      	mov	sp, r7
    8b46:	bd80      	pop	{r7, pc}
    8b48:	00020094 	.word	0x00020094
    8b4c:	00020030 	.word	0x00020030
    8b50:	00020060 	.word	0x00020060

00008b54 <pyd1598_set_reserved_bits>:
*
* @param dev Pointer to the sensor device
*
* @return 0 if successful, negative errno code if failure.
*/
int pyd1598_set_reserved_bits(const struct device *dev){
    8b54:	b580      	push	{r7, lr}
    8b56:	b086      	sub	sp, #24
    8b58:	af00      	add	r7, sp, #0
    8b5a:	6078      	str	r0, [r7, #4]
    const struct pyd1598_config *cfg;
    struct pyd1598_data *data;
    uint32_t sensor_conf;

    // Check if the device is null
    LOG_DBG("pyd1598_set_reserved_bits");
    8b5c:	2303      	movs	r3, #3
    8b5e:	2b03      	cmp	r3, #3
    8b60:	d907      	bls.n	8b72 <pyd1598_set_reserved_bits+0x1e>
    8b62:	2004      	movs	r0, #4
    8b64:	f7ff fdf8 	bl	8758 <z_log_minimal_level_to_char>
    8b68:	4603      	mov	r3, r0
    8b6a:	4619      	mov	r1, r3
    8b6c:	4813      	ldr	r0, [pc, #76]	; (8bbc <pyd1598_set_reserved_bits+0x68>)
    8b6e:	f011 fa44 	bl	19ffa <z_log_minimal_printk>
    if (dev == NULL || dev->data == NULL) {
    8b72:	687b      	ldr	r3, [r7, #4]
    8b74:	2b00      	cmp	r3, #0
    8b76:	d003      	beq.n	8b80 <pyd1598_set_reserved_bits+0x2c>
    8b78:	687b      	ldr	r3, [r7, #4]
    8b7a:	691b      	ldr	r3, [r3, #16]
    8b7c:	2b00      	cmp	r3, #0
    8b7e:	d102      	bne.n	8b86 <pyd1598_set_reserved_bits+0x32>
        return -EINVAL;
    8b80:	f06f 0315 	mvn.w	r3, #21
    8b84:	e016      	b.n	8bb4 <pyd1598_set_reserved_bits+0x60>
    }

    // Cast the data to the correct type
    cfg = dev->config;
    8b86:	687b      	ldr	r3, [r7, #4]
    8b88:	685b      	ldr	r3, [r3, #4]
    8b8a:	617b      	str	r3, [r7, #20]
    data = dev->data;
    8b8c:	687b      	ldr	r3, [r7, #4]
    8b8e:	691b      	ldr	r3, [r3, #16]
    8b90:	613b      	str	r3, [r7, #16]
    sensor_conf = data->sensor_conf;
    8b92:	693b      	ldr	r3, [r7, #16]
    8b94:	681b      	ldr	r3, [r3, #0]
    8b96:	60fb      	str	r3, [r7, #12]

    // Set reserved bits in desired configuration, to allow for user to not set them even if encouraged
    sensor_conf = (sensor_conf & ~(PYD1598_RESERVED_2_MASK << PYD1598_RESERVED_2_SHIFT)) | (PYD1598_RESERVED_2_DEC_VALUE << PYD1598_RESERVED_2_SHIFT);
    8b98:	68fb      	ldr	r3, [r7, #12]
    8b9a:	f023 0318 	bic.w	r3, r3, #24
    8b9e:	f043 0310 	orr.w	r3, r3, #16
    8ba2:	60fb      	str	r3, [r7, #12]
    sensor_conf = (sensor_conf & ~(PYD1598_RESERVED_1_MASK << PYD1598_RESERVED_1_SHIFT)) | (PYD1598_RESERVED_1_DEC_VALUE << PYD1598_RESERVED_1_SHIFT);
    8ba4:	68fb      	ldr	r3, [r7, #12]
    8ba6:	f023 0302 	bic.w	r3, r3, #2
    8baa:	60fb      	str	r3, [r7, #12]

    // Save the configuration to the internal buffer
    data->sensor_conf = sensor_conf;
    8bac:	693b      	ldr	r3, [r7, #16]
    8bae:	68fa      	ldr	r2, [r7, #12]
    8bb0:	601a      	str	r2, [r3, #0]

    return 0;
    8bb2:	2300      	movs	r3, #0
}
    8bb4:	4618      	mov	r0, r3
    8bb6:	3718      	adds	r7, #24
    8bb8:	46bd      	mov	sp, r7
    8bba:	bd80      	pop	{r7, pc}
    8bbc:	0002012c 	.word	0x0002012c

00008bc0 <pyd1598_set_threshold>:
* @param threshold Threshold value to set (range 0-255)
* @param dev Pointer to the sensor device
*
* @return 0 if successful, negative errno code if failure.
**/
int pyd1598_set_threshold(const struct device *dev, uint8_t threshold){
    8bc0:	b580      	push	{r7, lr}
    8bc2:	b086      	sub	sp, #24
    8bc4:	af00      	add	r7, sp, #0
    8bc6:	6078      	str	r0, [r7, #4]
    8bc8:	460b      	mov	r3, r1
    8bca:	70fb      	strb	r3, [r7, #3]
    const struct pyd1598_config *cfg;
    struct pyd1598_data *data;
    uint32_t sensor_conf;

    // Check if the threshold is out of range, or if the device is null
    LOG_DBG("pyd1598_set_threshold");
    8bcc:	2303      	movs	r3, #3
    8bce:	2b03      	cmp	r3, #3
    8bd0:	d907      	bls.n	8be2 <pyd1598_set_threshold+0x22>
    8bd2:	2004      	movs	r0, #4
    8bd4:	f7ff fdc0 	bl	8758 <z_log_minimal_level_to_char>
    8bd8:	4603      	mov	r3, r0
    8bda:	4619      	mov	r1, r3
    8bdc:	4812      	ldr	r0, [pc, #72]	; (8c28 <pyd1598_set_threshold+0x68>)
    8bde:	f011 fa0c 	bl	19ffa <z_log_minimal_printk>
    if (threshold > 255 || dev == NULL || dev->data == NULL) {
    8be2:	687b      	ldr	r3, [r7, #4]
    8be4:	2b00      	cmp	r3, #0
    8be6:	d003      	beq.n	8bf0 <pyd1598_set_threshold+0x30>
    8be8:	687b      	ldr	r3, [r7, #4]
    8bea:	691b      	ldr	r3, [r3, #16]
    8bec:	2b00      	cmp	r3, #0
    8bee:	d102      	bne.n	8bf6 <pyd1598_set_threshold+0x36>
        return -EINVAL;
    8bf0:	f06f 0315 	mvn.w	r3, #21
    8bf4:	e013      	b.n	8c1e <pyd1598_set_threshold+0x5e>
    }

    // Declare the variables
    cfg = dev->config;
    8bf6:	687b      	ldr	r3, [r7, #4]
    8bf8:	685b      	ldr	r3, [r3, #4]
    8bfa:	617b      	str	r3, [r7, #20]
    data = dev->data;
    8bfc:	687b      	ldr	r3, [r7, #4]
    8bfe:	691b      	ldr	r3, [r3, #16]
    8c00:	613b      	str	r3, [r7, #16]
    sensor_conf = data->sensor_conf;
    8c02:	693b      	ldr	r3, [r7, #16]
    8c04:	681b      	ldr	r3, [r3, #0]
    8c06:	60fb      	str	r3, [r7, #12]

    // Set raw bits in configuration at 24-17 to threshold, leave the rest of the bits as they are
    sensor_conf = (sensor_conf & ~(PYD1598_THRESHOLD_MASK << PYD1598_THRESHOLD_SHIFT)) | ((uint32_t)(threshold) << PYD1598_THRESHOLD_SHIFT);
    8c08:	68fb      	ldr	r3, [r7, #12]
    8c0a:	f023 72ff 	bic.w	r2, r3, #33423360	; 0x1fe0000
    8c0e:	78fb      	ldrb	r3, [r7, #3]
    8c10:	045b      	lsls	r3, r3, #17
    8c12:	4313      	orrs	r3, r2
    8c14:	60fb      	str	r3, [r7, #12]

    // Save the configuration to the internal buffer
    data->sensor_conf = sensor_conf;
    8c16:	693b      	ldr	r3, [r7, #16]
    8c18:	68fa      	ldr	r2, [r7, #12]
    8c1a:	601a      	str	r2, [r3, #0]

    return 0;
    8c1c:	2300      	movs	r3, #0
}
    8c1e:	4618      	mov	r0, r3
    8c20:	3718      	adds	r7, #24
    8c22:	46bd      	mov	sp, r7
    8c24:	bd80      	pop	{r7, pc}
    8c26:	bf00      	nop
    8c28:	0002014c 	.word	0x0002014c

00008c2c <pyd1598_set_blind_time>:
* @param dev Pointer to the sensor device
* @param blind_time Blind time value to set (0.5 s + 0.5 s * blind_time, range 0-15)
*
* @return 0 if successful, negative errno code if failure.
*/
int pyd1598_set_blind_time(const struct device *dev, uint8_t blind_time){
    8c2c:	b580      	push	{r7, lr}
    8c2e:	b086      	sub	sp, #24
    8c30:	af00      	add	r7, sp, #0
    8c32:	6078      	str	r0, [r7, #4]
    8c34:	460b      	mov	r3, r1
    8c36:	70fb      	strb	r3, [r7, #3]
    const struct pyd1598_config *cfg;
    struct pyd1598_data *data;
    uint32_t sensor_conf;

    // Check if the blind time is out of range, or if the device is null
    LOG_DBG("pyd1598_set_blind_time");
    8c38:	2303      	movs	r3, #3
    8c3a:	2b03      	cmp	r3, #3
    8c3c:	d907      	bls.n	8c4e <pyd1598_set_blind_time+0x22>
    8c3e:	2004      	movs	r0, #4
    8c40:	f7ff fd8a 	bl	8758 <z_log_minimal_level_to_char>
    8c44:	4603      	mov	r3, r0
    8c46:	4619      	mov	r1, r3
    8c48:	4813      	ldr	r0, [pc, #76]	; (8c98 <pyd1598_set_blind_time+0x6c>)
    8c4a:	f011 f9d6 	bl	19ffa <z_log_minimal_printk>
    if (blind_time > 15 || dev == NULL || dev->data == NULL) {
    8c4e:	78fb      	ldrb	r3, [r7, #3]
    8c50:	2b0f      	cmp	r3, #15
    8c52:	d806      	bhi.n	8c62 <pyd1598_set_blind_time+0x36>
    8c54:	687b      	ldr	r3, [r7, #4]
    8c56:	2b00      	cmp	r3, #0
    8c58:	d003      	beq.n	8c62 <pyd1598_set_blind_time+0x36>
    8c5a:	687b      	ldr	r3, [r7, #4]
    8c5c:	691b      	ldr	r3, [r3, #16]
    8c5e:	2b00      	cmp	r3, #0
    8c60:	d102      	bne.n	8c68 <pyd1598_set_blind_time+0x3c>
        return -EINVAL;
    8c62:	f06f 0315 	mvn.w	r3, #21
    8c66:	e013      	b.n	8c90 <pyd1598_set_blind_time+0x64>
    }

    // Declare the variables
    cfg = dev->config;
    8c68:	687b      	ldr	r3, [r7, #4]
    8c6a:	685b      	ldr	r3, [r3, #4]
    8c6c:	617b      	str	r3, [r7, #20]
    data = dev->data;
    8c6e:	687b      	ldr	r3, [r7, #4]
    8c70:	691b      	ldr	r3, [r3, #16]
    8c72:	613b      	str	r3, [r7, #16]
    sensor_conf = data->sensor_conf;
    8c74:	693b      	ldr	r3, [r7, #16]
    8c76:	681b      	ldr	r3, [r3, #0]
    8c78:	60fb      	str	r3, [r7, #12]

    // Set raw bits in configuration at 16-13 to blind time, leave the rest of the bits as they are
    sensor_conf = (sensor_conf & ~(PYD1598_BLIND_TIME_MASK << PYD1598_BLIND_TIME_SHIFT)) | ((uint32_t)(blind_time) << PYD1598_BLIND_TIME_SHIFT);
    8c7a:	68fb      	ldr	r3, [r7, #12]
    8c7c:	f423 32f0 	bic.w	r2, r3, #122880	; 0x1e000
    8c80:	78fb      	ldrb	r3, [r7, #3]
    8c82:	035b      	lsls	r3, r3, #13
    8c84:	4313      	orrs	r3, r2
    8c86:	60fb      	str	r3, [r7, #12]

    // Save the configuration to the internal buffer
    data->sensor_conf = sensor_conf;
    8c88:	693b      	ldr	r3, [r7, #16]
    8c8a:	68fa      	ldr	r2, [r7, #12]
    8c8c:	601a      	str	r2, [r3, #0]

    return 0;
    8c8e:	2300      	movs	r3, #0
}
    8c90:	4618      	mov	r0, r3
    8c92:	3718      	adds	r7, #24
    8c94:	46bd      	mov	sp, r7
    8c96:	bd80      	pop	{r7, pc}
    8c98:	00020184 	.word	0x00020184

00008c9c <pyd1598_set_pulse_counter>:
 * @param dev Pointer to the sensor device
 * @param pulse_counter Pulse counter value to set (range 0-3)
 * 
 * @return 0 if successful, negative errno code if failure.
 */
int pyd1598_set_pulse_counter(const struct device *dev, uint8_t pulse_counter){
    8c9c:	b580      	push	{r7, lr}
    8c9e:	b086      	sub	sp, #24
    8ca0:	af00      	add	r7, sp, #0
    8ca2:	6078      	str	r0, [r7, #4]
    8ca4:	460b      	mov	r3, r1
    8ca6:	70fb      	strb	r3, [r7, #3]
    const struct pyd1598_config *cfg;
    struct pyd1598_data *data;
    uint32_t sensor_conf;

    // Check if the pulse counter is out of range, or if the device is null
    LOG_DBG("pyd1598_set_pulse_counter");
    8ca8:	2303      	movs	r3, #3
    8caa:	2b03      	cmp	r3, #3
    8cac:	d907      	bls.n	8cbe <pyd1598_set_pulse_counter+0x22>
    8cae:	2004      	movs	r0, #4
    8cb0:	f7ff fd52 	bl	8758 <z_log_minimal_level_to_char>
    8cb4:	4603      	mov	r3, r0
    8cb6:	4619      	mov	r1, r3
    8cb8:	4813      	ldr	r0, [pc, #76]	; (8d08 <pyd1598_set_pulse_counter+0x6c>)
    8cba:	f011 f99e 	bl	19ffa <z_log_minimal_printk>
    if (pulse_counter > 3 || dev == NULL || dev->data == NULL) {
    8cbe:	78fb      	ldrb	r3, [r7, #3]
    8cc0:	2b03      	cmp	r3, #3
    8cc2:	d806      	bhi.n	8cd2 <pyd1598_set_pulse_counter+0x36>
    8cc4:	687b      	ldr	r3, [r7, #4]
    8cc6:	2b00      	cmp	r3, #0
    8cc8:	d003      	beq.n	8cd2 <pyd1598_set_pulse_counter+0x36>
    8cca:	687b      	ldr	r3, [r7, #4]
    8ccc:	691b      	ldr	r3, [r3, #16]
    8cce:	2b00      	cmp	r3, #0
    8cd0:	d102      	bne.n	8cd8 <pyd1598_set_pulse_counter+0x3c>
        return -EINVAL;
    8cd2:	f06f 0315 	mvn.w	r3, #21
    8cd6:	e013      	b.n	8d00 <pyd1598_set_pulse_counter+0x64>
    }

    // Declare the variables
    cfg = dev->config;
    8cd8:	687b      	ldr	r3, [r7, #4]
    8cda:	685b      	ldr	r3, [r3, #4]
    8cdc:	617b      	str	r3, [r7, #20]
    data = dev->data;
    8cde:	687b      	ldr	r3, [r7, #4]
    8ce0:	691b      	ldr	r3, [r3, #16]
    8ce2:	613b      	str	r3, [r7, #16]
    sensor_conf = data->sensor_conf;
    8ce4:	693b      	ldr	r3, [r7, #16]
    8ce6:	681b      	ldr	r3, [r3, #0]
    8ce8:	60fb      	str	r3, [r7, #12]

    // Set raw bits in configuration at 12-11 to pulse counter, leave the rest of the bits as they are
    sensor_conf = (sensor_conf & ~(PYD1598_PULSE_COUNTER_MASK << PYD1598_PULSE_COUNTER_SHIFT)) | ((uint32_t)(pulse_counter) << PYD1598_PULSE_COUNTER_SHIFT);
    8cea:	68fb      	ldr	r3, [r7, #12]
    8cec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
    8cf0:	78fb      	ldrb	r3, [r7, #3]
    8cf2:	02db      	lsls	r3, r3, #11
    8cf4:	4313      	orrs	r3, r2
    8cf6:	60fb      	str	r3, [r7, #12]

    // Save the configuration to the internal buffer
    data->sensor_conf = sensor_conf;
    8cf8:	693b      	ldr	r3, [r7, #16]
    8cfa:	68fa      	ldr	r2, [r7, #12]
    8cfc:	601a      	str	r2, [r3, #0]

    return 0;
    8cfe:	2300      	movs	r3, #0
}
    8d00:	4618      	mov	r0, r3
    8d02:	3718      	adds	r7, #24
    8d04:	46bd      	mov	sp, r7
    8d06:	bd80      	pop	{r7, pc}
    8d08:	000201bc 	.word	0x000201bc

00008d0c <pyd1598_set_window_time>:
 * @param dev Pointer to the sensor device
 * @param window_time Window time value to set (2s + 2s * window_time, range 0-3)
 * 
 * @return 0 if successful, negative errno code if failure.
 */
int pyd1598_set_window_time(const struct device *dev, uint8_t window_time){
    8d0c:	b580      	push	{r7, lr}
    8d0e:	b086      	sub	sp, #24
    8d10:	af00      	add	r7, sp, #0
    8d12:	6078      	str	r0, [r7, #4]
    8d14:	460b      	mov	r3, r1
    8d16:	70fb      	strb	r3, [r7, #3]
    const struct pyd1598_config *cfg;
    struct pyd1598_data *data;
    uint32_t sensor_conf;

    // Check if the window time is out of range, or if the device is null
    LOG_DBG("pyd1598_set_window_time");
    8d18:	2303      	movs	r3, #3
    8d1a:	2b03      	cmp	r3, #3
    8d1c:	d907      	bls.n	8d2e <pyd1598_set_window_time+0x22>
    8d1e:	2004      	movs	r0, #4
    8d20:	f7ff fd1a 	bl	8758 <z_log_minimal_level_to_char>
    8d24:	4603      	mov	r3, r0
    8d26:	4619      	mov	r1, r3
    8d28:	4813      	ldr	r0, [pc, #76]	; (8d78 <pyd1598_set_window_time+0x6c>)
    8d2a:	f011 f966 	bl	19ffa <z_log_minimal_printk>
    if (window_time > 3 || dev == NULL || dev->data == NULL) {
    8d2e:	78fb      	ldrb	r3, [r7, #3]
    8d30:	2b03      	cmp	r3, #3
    8d32:	d806      	bhi.n	8d42 <pyd1598_set_window_time+0x36>
    8d34:	687b      	ldr	r3, [r7, #4]
    8d36:	2b00      	cmp	r3, #0
    8d38:	d003      	beq.n	8d42 <pyd1598_set_window_time+0x36>
    8d3a:	687b      	ldr	r3, [r7, #4]
    8d3c:	691b      	ldr	r3, [r3, #16]
    8d3e:	2b00      	cmp	r3, #0
    8d40:	d102      	bne.n	8d48 <pyd1598_set_window_time+0x3c>
        return -EINVAL;
    8d42:	f06f 0315 	mvn.w	r3, #21
    8d46:	e013      	b.n	8d70 <pyd1598_set_window_time+0x64>
    }

    // Declare the variables
    cfg = dev->config;
    8d48:	687b      	ldr	r3, [r7, #4]
    8d4a:	685b      	ldr	r3, [r3, #4]
    8d4c:	617b      	str	r3, [r7, #20]
    data = dev->data;
    8d4e:	687b      	ldr	r3, [r7, #4]
    8d50:	691b      	ldr	r3, [r3, #16]
    8d52:	613b      	str	r3, [r7, #16]
    sensor_conf = data->sensor_conf;
    8d54:	693b      	ldr	r3, [r7, #16]
    8d56:	681b      	ldr	r3, [r3, #0]
    8d58:	60fb      	str	r3, [r7, #12]

    // Set raw bits in configuration at 10-9 to window time, leave the rest of the bits as they are
    sensor_conf = (sensor_conf & ~(PYD1598_WINDOW_TIME_MASK << PYD1598_WINDOW_TIME_SHIFT)) | ((uint32_t)(window_time) << PYD1598_WINDOW_TIME_SHIFT);
    8d5a:	68fb      	ldr	r3, [r7, #12]
    8d5c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
    8d60:	78fb      	ldrb	r3, [r7, #3]
    8d62:	025b      	lsls	r3, r3, #9
    8d64:	4313      	orrs	r3, r2
    8d66:	60fb      	str	r3, [r7, #12]

    // Save the configuration to the internal buffer
    data->sensor_conf = sensor_conf;
    8d68:	693b      	ldr	r3, [r7, #16]
    8d6a:	68fa      	ldr	r2, [r7, #12]
    8d6c:	601a      	str	r2, [r3, #0]

    return 0;
    8d6e:	2300      	movs	r3, #0
}
    8d70:	4618      	mov	r0, r3
    8d72:	3718      	adds	r7, #24
    8d74:	46bd      	mov	sp, r7
    8d76:	bd80      	pop	{r7, pc}
    8d78:	000201fc 	.word	0x000201fc

00008d7c <pyd1598_set_operation_mode>:
 * @param dev Pointer to the sensor device
 * @param operation_mode Operation mode (PYD1598_FORCED_READOUT, PYD1598_WAKE_UP)
 * 
 * @return 0 if successful, negative errno code if failure.
 */
int pyd1598_set_operation_mode(const struct device *dev, enum pyd1598_operation_mode operation_mode){
    8d7c:	b580      	push	{r7, lr}
    8d7e:	b086      	sub	sp, #24
    8d80:	af00      	add	r7, sp, #0
    8d82:	6078      	str	r0, [r7, #4]
    8d84:	460b      	mov	r3, r1
    8d86:	70fb      	strb	r3, [r7, #3]
    const struct pyd1598_config *cfg;
    struct pyd1598_data *data;
    uint32_t sensor_conf;

    // Check if the device is null
    LOG_DBG("pyd1598_set_operation_mode");
    8d88:	2303      	movs	r3, #3
    8d8a:	2b03      	cmp	r3, #3
    8d8c:	d907      	bls.n	8d9e <pyd1598_set_operation_mode+0x22>
    8d8e:	2004      	movs	r0, #4
    8d90:	f7ff fce2 	bl	8758 <z_log_minimal_level_to_char>
    8d94:	4603      	mov	r3, r0
    8d96:	4619      	mov	r1, r3
    8d98:	4812      	ldr	r0, [pc, #72]	; (8de4 <pyd1598_set_operation_mode+0x68>)
    8d9a:	f011 f92e 	bl	19ffa <z_log_minimal_printk>
    if (dev == NULL || dev->data == NULL) {
    8d9e:	687b      	ldr	r3, [r7, #4]
    8da0:	2b00      	cmp	r3, #0
    8da2:	d003      	beq.n	8dac <pyd1598_set_operation_mode+0x30>
    8da4:	687b      	ldr	r3, [r7, #4]
    8da6:	691b      	ldr	r3, [r3, #16]
    8da8:	2b00      	cmp	r3, #0
    8daa:	d102      	bne.n	8db2 <pyd1598_set_operation_mode+0x36>
        return -EINVAL;
    8dac:	f06f 0315 	mvn.w	r3, #21
    8db0:	e013      	b.n	8dda <pyd1598_set_operation_mode+0x5e>
    }

    // Declare the variables
    cfg = dev->config;
    8db2:	687b      	ldr	r3, [r7, #4]
    8db4:	685b      	ldr	r3, [r3, #4]
    8db6:	617b      	str	r3, [r7, #20]
    data = dev->data;
    8db8:	687b      	ldr	r3, [r7, #4]
    8dba:	691b      	ldr	r3, [r3, #16]
    8dbc:	613b      	str	r3, [r7, #16]
    sensor_conf = data->sensor_conf;
    8dbe:	693b      	ldr	r3, [r7, #16]
    8dc0:	681b      	ldr	r3, [r3, #0]
    8dc2:	60fb      	str	r3, [r7, #12]

    // Set raw bits in configuration at 8-7 to operation mode, leave the rest of the bits as they are
    sensor_conf = (sensor_conf & ~(PYD1598_OPERATION_MODE_MASK << PYD1598_OPERATION_MODE_SHIFT)) | ((uint32_t)(operation_mode) << PYD1598_OPERATION_MODE_SHIFT);
    8dc4:	68fb      	ldr	r3, [r7, #12]
    8dc6:	f423 72c0 	bic.w	r2, r3, #384	; 0x180
    8dca:	78fb      	ldrb	r3, [r7, #3]
    8dcc:	01db      	lsls	r3, r3, #7
    8dce:	4313      	orrs	r3, r2
    8dd0:	60fb      	str	r3, [r7, #12]
    // se

    // Save the configuration to the internal buffer
    data->sensor_conf = sensor_conf;
    8dd2:	693b      	ldr	r3, [r7, #16]
    8dd4:	68fa      	ldr	r2, [r7, #12]
    8dd6:	601a      	str	r2, [r3, #0]

    return 0;
    8dd8:	2300      	movs	r3, #0
}
    8dda:	4618      	mov	r0, r3
    8ddc:	3718      	adds	r7, #24
    8dde:	46bd      	mov	sp, r7
    8de0:	bd80      	pop	{r7, pc}
    8de2:	bf00      	nop
    8de4:	0002023c 	.word	0x0002023c

00008de8 <pyd1598_set_signal_source>:
 * @param dev Pointer to the sensor device
 * @param signal_source Signal source (PYD1598_PIR_BPF, PYD1598_PIR_LPF, PYD1598_TEMPERATURE_SENSOR)
 * 
 * @return 0 if successful, negative errno code if failure.
 */
int pyd1598_set_signal_source(const struct device *dev, enum pyd1598_signal_source signal_source){
    8de8:	b580      	push	{r7, lr}
    8dea:	b086      	sub	sp, #24
    8dec:	af00      	add	r7, sp, #0
    8dee:	6078      	str	r0, [r7, #4]
    8df0:	460b      	mov	r3, r1
    8df2:	70fb      	strb	r3, [r7, #3]
    const struct pyd1598_config *cfg;
    struct pyd1598_data *data;
    uint32_t sensor_conf;

    // Check if the device is null
    LOG_DBG("pyd1598_set_signal_source");
    8df4:	2303      	movs	r3, #3
    8df6:	2b03      	cmp	r3, #3
    8df8:	d907      	bls.n	8e0a <pyd1598_set_signal_source+0x22>
    8dfa:	2004      	movs	r0, #4
    8dfc:	f7ff fcac 	bl	8758 <z_log_minimal_level_to_char>
    8e00:	4603      	mov	r3, r0
    8e02:	4619      	mov	r1, r3
    8e04:	4812      	ldr	r0, [pc, #72]	; (8e50 <pyd1598_set_signal_source+0x68>)
    8e06:	f011 f8f8 	bl	19ffa <z_log_minimal_printk>
    if (dev == NULL || dev->data == NULL) {
    8e0a:	687b      	ldr	r3, [r7, #4]
    8e0c:	2b00      	cmp	r3, #0
    8e0e:	d003      	beq.n	8e18 <pyd1598_set_signal_source+0x30>
    8e10:	687b      	ldr	r3, [r7, #4]
    8e12:	691b      	ldr	r3, [r3, #16]
    8e14:	2b00      	cmp	r3, #0
    8e16:	d102      	bne.n	8e1e <pyd1598_set_signal_source+0x36>
        return -EINVAL;
    8e18:	f06f 0315 	mvn.w	r3, #21
    8e1c:	e013      	b.n	8e46 <pyd1598_set_signal_source+0x5e>
    }

    // Declare the variables
    cfg = dev->config;
    8e1e:	687b      	ldr	r3, [r7, #4]
    8e20:	685b      	ldr	r3, [r3, #4]
    8e22:	617b      	str	r3, [r7, #20]
    data = dev->data;
    8e24:	687b      	ldr	r3, [r7, #4]
    8e26:	691b      	ldr	r3, [r3, #16]
    8e28:	613b      	str	r3, [r7, #16]
    sensor_conf = data->sensor_conf;
    8e2a:	693b      	ldr	r3, [r7, #16]
    8e2c:	681b      	ldr	r3, [r3, #0]
    8e2e:	60fb      	str	r3, [r7, #12]

    // Set raw bits in configuration at 6-5 to signal source, leave the rest of the bits as they are
    sensor_conf = (sensor_conf & ~(PYD1598_SIGNAL_SOURCE_MASK << PYD1598_SIGNAL_SOURCE_SHIFT)) | ((uint32_t)(signal_source) << PYD1598_SIGNAL_SOURCE_SHIFT);
    8e30:	68fb      	ldr	r3, [r7, #12]
    8e32:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    8e36:	78fb      	ldrb	r3, [r7, #3]
    8e38:	015b      	lsls	r3, r3, #5
    8e3a:	4313      	orrs	r3, r2
    8e3c:	60fb      	str	r3, [r7, #12]

    // Save the configuration to the internal buffer
    data->sensor_conf = sensor_conf;
    8e3e:	693b      	ldr	r3, [r7, #16]
    8e40:	68fa      	ldr	r2, [r7, #12]
    8e42:	601a      	str	r2, [r3, #0]

    return 0;
    8e44:	2300      	movs	r3, #0
}
    8e46:	4618      	mov	r0, r3
    8e48:	3718      	adds	r7, #24
    8e4a:	46bd      	mov	sp, r7
    8e4c:	bd80      	pop	{r7, pc}
    8e4e:	bf00      	nop
    8e50:	000202b8 	.word	0x000202b8

00008e54 <pyd1598_set_hpf_cutoff>:
 * @param dev Pointer to the sensor device
 * @param hpf_cut_off HPF Cut Off (PYD1598_HPF_CUTOFF_0_4HZ, PYD1598_HPF_CUTOFF_0_2HZ)
 * 
 * @return 0 if successful, negative errno code if failure.
 */
int pyd1598_set_hpf_cutoff(const struct device *dev, enum pyd1598_hpf_cutoff hpf_cut_off){
    8e54:	b580      	push	{r7, lr}
    8e56:	b086      	sub	sp, #24
    8e58:	af00      	add	r7, sp, #0
    8e5a:	6078      	str	r0, [r7, #4]
    8e5c:	460b      	mov	r3, r1
    8e5e:	70fb      	strb	r3, [r7, #3]
    const struct pyd1598_config *cfg;
    struct pyd1598_data *data;
    uint32_t sensor_conf;

    // Check if the device is null
    LOG_DBG("pyd1598_set_hpf_cut_off");
    8e60:	2303      	movs	r3, #3
    8e62:	2b03      	cmp	r3, #3
    8e64:	d907      	bls.n	8e76 <pyd1598_set_hpf_cutoff+0x22>
    8e66:	2004      	movs	r0, #4
    8e68:	f7ff fc76 	bl	8758 <z_log_minimal_level_to_char>
    8e6c:	4603      	mov	r3, r0
    8e6e:	4619      	mov	r1, r3
    8e70:	4812      	ldr	r0, [pc, #72]	; (8ebc <pyd1598_set_hpf_cutoff+0x68>)
    8e72:	f011 f8c2 	bl	19ffa <z_log_minimal_printk>
    if (dev == NULL || dev->data == NULL) {
    8e76:	687b      	ldr	r3, [r7, #4]
    8e78:	2b00      	cmp	r3, #0
    8e7a:	d003      	beq.n	8e84 <pyd1598_set_hpf_cutoff+0x30>
    8e7c:	687b      	ldr	r3, [r7, #4]
    8e7e:	691b      	ldr	r3, [r3, #16]
    8e80:	2b00      	cmp	r3, #0
    8e82:	d102      	bne.n	8e8a <pyd1598_set_hpf_cutoff+0x36>
        return -EINVAL;
    8e84:	f06f 0315 	mvn.w	r3, #21
    8e88:	e013      	b.n	8eb2 <pyd1598_set_hpf_cutoff+0x5e>
    }

    // Declare the variables
    cfg = dev->config;
    8e8a:	687b      	ldr	r3, [r7, #4]
    8e8c:	685b      	ldr	r3, [r3, #4]
    8e8e:	617b      	str	r3, [r7, #20]
    data = dev->data;
    8e90:	687b      	ldr	r3, [r7, #4]
    8e92:	691b      	ldr	r3, [r3, #16]
    8e94:	613b      	str	r3, [r7, #16]
    sensor_conf = data->sensor_conf;
    8e96:	693b      	ldr	r3, [r7, #16]
    8e98:	681b      	ldr	r3, [r3, #0]
    8e9a:	60fb      	str	r3, [r7, #12]

    // Set raw bits in configuration at 2 to hpf cut off, leave the rest of the bits as they are
    sensor_conf = (sensor_conf & ~(PYD1598_HPF_CUT_OFF_MASK << PYD1598_HPF_CUT_OFF_SHIFT)) | ((uint32_t)(hpf_cut_off) << PYD1598_HPF_CUT_OFF_SHIFT);
    8e9c:	68fb      	ldr	r3, [r7, #12]
    8e9e:	f023 0204 	bic.w	r2, r3, #4
    8ea2:	78fb      	ldrb	r3, [r7, #3]
    8ea4:	009b      	lsls	r3, r3, #2
    8ea6:	4313      	orrs	r3, r2
    8ea8:	60fb      	str	r3, [r7, #12]

    // Save the configuration to the internal buffer
    data->sensor_conf = sensor_conf;
    8eaa:	693b      	ldr	r3, [r7, #16]
    8eac:	68fa      	ldr	r2, [r7, #12]
    8eae:	601a      	str	r2, [r3, #0]

    return 0;
    8eb0:	2300      	movs	r3, #0
}
    8eb2:	4618      	mov	r0, r3
    8eb4:	3718      	adds	r7, #24
    8eb6:	46bd      	mov	sp, r7
    8eb8:	bd80      	pop	{r7, pc}
    8eba:	bf00      	nop
    8ebc:	00020334 	.word	0x00020334

00008ec0 <pyd1598_set_count_mode>:
 * @param dev Pointer to the sensor device
 * @param count_mode Count Mode (PYD1598_COUNT_SIGN_CHANGE, PYD1598_COUNT_ALL)
 * 
 * @return 0 if successful, negative errno code if failure.
 */
int pyd1598_set_count_mode(const struct device *dev, enum pyd1598_count_mode count_mode){
    8ec0:	b580      	push	{r7, lr}
    8ec2:	b086      	sub	sp, #24
    8ec4:	af00      	add	r7, sp, #0
    8ec6:	6078      	str	r0, [r7, #4]
    8ec8:	460b      	mov	r3, r1
    8eca:	70fb      	strb	r3, [r7, #3]
    const struct pyd1598_config *cfg;
    struct pyd1598_data *data;
    uint32_t sensor_conf;

    // Check if the device is null
    LOG_DBG("pyd1598_set_count_mode");
    8ecc:	2303      	movs	r3, #3
    8ece:	2b03      	cmp	r3, #3
    8ed0:	d907      	bls.n	8ee2 <pyd1598_set_count_mode+0x22>
    8ed2:	2004      	movs	r0, #4
    8ed4:	f7ff fc40 	bl	8758 <z_log_minimal_level_to_char>
    8ed8:	4603      	mov	r3, r0
    8eda:	4619      	mov	r1, r3
    8edc:	4811      	ldr	r0, [pc, #68]	; (8f24 <pyd1598_set_count_mode+0x64>)
    8ede:	f011 f88c 	bl	19ffa <z_log_minimal_printk>
    if (dev == NULL || dev->data == NULL) {
    8ee2:	687b      	ldr	r3, [r7, #4]
    8ee4:	2b00      	cmp	r3, #0
    8ee6:	d003      	beq.n	8ef0 <pyd1598_set_count_mode+0x30>
    8ee8:	687b      	ldr	r3, [r7, #4]
    8eea:	691b      	ldr	r3, [r3, #16]
    8eec:	2b00      	cmp	r3, #0
    8eee:	d102      	bne.n	8ef6 <pyd1598_set_count_mode+0x36>
        return -EINVAL;
    8ef0:	f06f 0315 	mvn.w	r3, #21
    8ef4:	e012      	b.n	8f1c <pyd1598_set_count_mode+0x5c>
    }

    // Declare the variables
    cfg = dev->config;
    8ef6:	687b      	ldr	r3, [r7, #4]
    8ef8:	685b      	ldr	r3, [r3, #4]
    8efa:	617b      	str	r3, [r7, #20]
    data = dev->data;
    8efc:	687b      	ldr	r3, [r7, #4]
    8efe:	691b      	ldr	r3, [r3, #16]
    8f00:	613b      	str	r3, [r7, #16]
    sensor_conf = data->sensor_conf;
    8f02:	693b      	ldr	r3, [r7, #16]
    8f04:	681b      	ldr	r3, [r3, #0]
    8f06:	60fb      	str	r3, [r7, #12]

    // Set raw bits in configuration at 0 to count mode, leave the rest of the bits as they are
    sensor_conf = (sensor_conf & ~(PYD1598_COUNT_MODE_MASK << PYD1598_COUNT_MODE_SHIFT)) | ((uint32_t)(count_mode) << PYD1598_COUNT_MODE_SHIFT);
    8f08:	68fb      	ldr	r3, [r7, #12]
    8f0a:	f023 0201 	bic.w	r2, r3, #1
    8f0e:	78fb      	ldrb	r3, [r7, #3]
    8f10:	4313      	orrs	r3, r2
    8f12:	60fb      	str	r3, [r7, #12]

    // Save the configuration to the internal buffer
    data->sensor_conf = sensor_conf;
    8f14:	693b      	ldr	r3, [r7, #16]
    8f16:	68fa      	ldr	r2, [r7, #12]
    8f18:	601a      	str	r2, [r3, #0]

    return 0;
    8f1a:	2300      	movs	r3, #0
}
    8f1c:	4618      	mov	r0, r3
    8f1e:	3718      	adds	r7, #24
    8f20:	46bd      	mov	sp, r7
    8f22:	bd80      	pop	{r7, pc}
    8f24:	000203ac 	.word	0x000203ac

00008f28 <z_log_minimal_level_to_char>:
{
    8f28:	b480      	push	{r7}
    8f2a:	b083      	sub	sp, #12
    8f2c:	af00      	add	r7, sp, #0
    8f2e:	6078      	str	r0, [r7, #4]
	switch (level) {
    8f30:	687b      	ldr	r3, [r7, #4]
    8f32:	3b01      	subs	r3, #1
    8f34:	2b03      	cmp	r3, #3
    8f36:	d813      	bhi.n	8f60 <z_log_minimal_level_to_char+0x38>
    8f38:	a201      	add	r2, pc, #4	; (adr r2, 8f40 <z_log_minimal_level_to_char+0x18>)
    8f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8f3e:	bf00      	nop
    8f40:	00008f51 	.word	0x00008f51
    8f44:	00008f55 	.word	0x00008f55
    8f48:	00008f59 	.word	0x00008f59
    8f4c:	00008f5d 	.word	0x00008f5d
		return 'E';
    8f50:	2345      	movs	r3, #69	; 0x45
    8f52:	e006      	b.n	8f62 <z_log_minimal_level_to_char+0x3a>
		return 'W';
    8f54:	2357      	movs	r3, #87	; 0x57
    8f56:	e004      	b.n	8f62 <z_log_minimal_level_to_char+0x3a>
		return 'I';
    8f58:	2349      	movs	r3, #73	; 0x49
    8f5a:	e002      	b.n	8f62 <z_log_minimal_level_to_char+0x3a>
		return 'D';
    8f5c:	2344      	movs	r3, #68	; 0x44
    8f5e:	e000      	b.n	8f62 <z_log_minimal_level_to_char+0x3a>
		return '?';
    8f60:	233f      	movs	r3, #63	; 0x3f
}
    8f62:	4618      	mov	r0, r3
    8f64:	370c      	adds	r7, #12
    8f66:	46bd      	mov	sp, r7
    8f68:	bc80      	pop	{r7}
    8f6a:	4770      	bx	lr

00008f6c <z_impl_gpio_pin_configure>:
{
    8f6c:	b580      	push	{r7, lr}
    8f6e:	b088      	sub	sp, #32
    8f70:	af00      	add	r7, sp, #0
    8f72:	60f8      	str	r0, [r7, #12]
    8f74:	460b      	mov	r3, r1
    8f76:	607a      	str	r2, [r7, #4]
    8f78:	72fb      	strb	r3, [r7, #11]
	const struct gpio_driver_api *api =
    8f7a:	68fb      	ldr	r3, [r7, #12]
    8f7c:	689b      	ldr	r3, [r3, #8]
    8f7e:	61fb      	str	r3, [r7, #28]
	__unused const struct gpio_driver_config *const cfg =
    8f80:	68fb      	ldr	r3, [r7, #12]
    8f82:	685b      	ldr	r3, [r3, #4]
    8f84:	61bb      	str	r3, [r7, #24]
	struct gpio_driver_data *data =
    8f86:	68fb      	ldr	r3, [r7, #12]
    8f88:	691b      	ldr	r3, [r3, #16]
    8f8a:	617b      	str	r3, [r7, #20]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
    8f8c:	687b      	ldr	r3, [r7, #4]
    8f8e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
    8f92:	2b00      	cmp	r3, #0
    8f94:	d00e      	beq.n	8fb4 <z_impl_gpio_pin_configure+0x48>
    8f96:	f240 33c7 	movw	r3, #967	; 0x3c7
    8f9a:	4a6b      	ldr	r2, [pc, #428]	; (9148 <z_impl_gpio_pin_configure+0x1dc>)
    8f9c:	496b      	ldr	r1, [pc, #428]	; (914c <z_impl_gpio_pin_configure+0x1e0>)
    8f9e:	486c      	ldr	r0, [pc, #432]	; (9150 <z_impl_gpio_pin_configure+0x1e4>)
    8fa0:	f011 f808 	bl	19fb4 <assert_print>
    8fa4:	486b      	ldr	r0, [pc, #428]	; (9154 <z_impl_gpio_pin_configure+0x1e8>)
    8fa6:	f011 f805 	bl	19fb4 <assert_print>
    8faa:	f240 31c7 	movw	r1, #967	; 0x3c7
    8fae:	4866      	ldr	r0, [pc, #408]	; (9148 <z_impl_gpio_pin_configure+0x1dc>)
    8fb0:	f010 fff0 	bl	19f94 <assert_post_action>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    8fb4:	687b      	ldr	r3, [r7, #4]
    8fb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
    8fba:	2b30      	cmp	r3, #48	; 0x30
    8fbc:	d10e      	bne.n	8fdc <z_impl_gpio_pin_configure+0x70>
    8fbe:	f240 33ca 	movw	r3, #970	; 0x3ca
    8fc2:	4a61      	ldr	r2, [pc, #388]	; (9148 <z_impl_gpio_pin_configure+0x1dc>)
    8fc4:	4964      	ldr	r1, [pc, #400]	; (9158 <z_impl_gpio_pin_configure+0x1ec>)
    8fc6:	4862      	ldr	r0, [pc, #392]	; (9150 <z_impl_gpio_pin_configure+0x1e4>)
    8fc8:	f010 fff4 	bl	19fb4 <assert_print>
    8fcc:	4863      	ldr	r0, [pc, #396]	; (915c <z_impl_gpio_pin_configure+0x1f0>)
    8fce:	f010 fff1 	bl	19fb4 <assert_print>
    8fd2:	f240 31ca 	movw	r1, #970	; 0x3ca
    8fd6:	485c      	ldr	r0, [pc, #368]	; (9148 <z_impl_gpio_pin_configure+0x1dc>)
    8fd8:	f010 ffdc 	bl	19f94 <assert_post_action>
	__ASSERT(!((flags & GPIO_INPUT) && !(flags & GPIO_OUTPUT) && (flags & GPIO_SINGLE_ENDED)),
    8fdc:	687b      	ldr	r3, [r7, #4]
    8fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    8fe2:	2b00      	cmp	r3, #0
    8fe4:	d018      	beq.n	9018 <z_impl_gpio_pin_configure+0xac>
    8fe6:	687b      	ldr	r3, [r7, #4]
    8fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8fec:	2b00      	cmp	r3, #0
    8fee:	d113      	bne.n	9018 <z_impl_gpio_pin_configure+0xac>
    8ff0:	687b      	ldr	r3, [r7, #4]
    8ff2:	f003 0302 	and.w	r3, r3, #2
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	d00e      	beq.n	9018 <z_impl_gpio_pin_configure+0xac>
    8ffa:	f240 33ce 	movw	r3, #974	; 0x3ce
    8ffe:	4a52      	ldr	r2, [pc, #328]	; (9148 <z_impl_gpio_pin_configure+0x1dc>)
    9000:	4957      	ldr	r1, [pc, #348]	; (9160 <z_impl_gpio_pin_configure+0x1f4>)
    9002:	4853      	ldr	r0, [pc, #332]	; (9150 <z_impl_gpio_pin_configure+0x1e4>)
    9004:	f010 ffd6 	bl	19fb4 <assert_print>
    9008:	4856      	ldr	r0, [pc, #344]	; (9164 <z_impl_gpio_pin_configure+0x1f8>)
    900a:	f010 ffd3 	bl	19fb4 <assert_print>
    900e:	f240 31ce 	movw	r1, #974	; 0x3ce
    9012:	484d      	ldr	r0, [pc, #308]	; (9148 <z_impl_gpio_pin_configure+0x1dc>)
    9014:	f010 ffbe 	bl	19f94 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    9018:	687b      	ldr	r3, [r7, #4]
    901a:	f003 0302 	and.w	r3, r3, #2
    901e:	2b00      	cmp	r3, #0
    9020:	d110      	bne.n	9044 <z_impl_gpio_pin_configure+0xd8>
    9022:	687b      	ldr	r3, [r7, #4]
    9024:	f003 0304 	and.w	r3, r3, #4
    9028:	2b00      	cmp	r3, #0
    902a:	d00b      	beq.n	9044 <z_impl_gpio_pin_configure+0xd8>
    902c:	f240 33d1 	movw	r3, #977	; 0x3d1
    9030:	4a45      	ldr	r2, [pc, #276]	; (9148 <z_impl_gpio_pin_configure+0x1dc>)
    9032:	494d      	ldr	r1, [pc, #308]	; (9168 <z_impl_gpio_pin_configure+0x1fc>)
    9034:	4846      	ldr	r0, [pc, #280]	; (9150 <z_impl_gpio_pin_configure+0x1e4>)
    9036:	f010 ffbd 	bl	19fb4 <assert_print>
    903a:	f240 31d1 	movw	r1, #977	; 0x3d1
    903e:	4842      	ldr	r0, [pc, #264]	; (9148 <z_impl_gpio_pin_configure+0x1dc>)
    9040:	f010 ffa8 	bl	19f94 <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    9044:	687b      	ldr	r3, [r7, #4]
    9046:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    904a:	2b00      	cmp	r3, #0
    904c:	d013      	beq.n	9076 <z_impl_gpio_pin_configure+0x10a>
    904e:	687b      	ldr	r3, [r7, #4]
    9050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    9054:	2b00      	cmp	r3, #0
    9056:	d10e      	bne.n	9076 <z_impl_gpio_pin_configure+0x10a>
    9058:	f44f 7375 	mov.w	r3, #980	; 0x3d4
    905c:	4a3a      	ldr	r2, [pc, #232]	; (9148 <z_impl_gpio_pin_configure+0x1dc>)
    905e:	4943      	ldr	r1, [pc, #268]	; (916c <z_impl_gpio_pin_configure+0x200>)
    9060:	483b      	ldr	r0, [pc, #236]	; (9150 <z_impl_gpio_pin_configure+0x1e4>)
    9062:	f010 ffa7 	bl	19fb4 <assert_print>
    9066:	4842      	ldr	r0, [pc, #264]	; (9170 <z_impl_gpio_pin_configure+0x204>)
    9068:	f010 ffa4 	bl	19fb4 <assert_print>
    906c:	f44f 7175 	mov.w	r1, #980	; 0x3d4
    9070:	4835      	ldr	r0, [pc, #212]	; (9148 <z_impl_gpio_pin_configure+0x1dc>)
    9072:	f010 ff8f 	bl	19f94 <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    9076:	687b      	ldr	r3, [r7, #4]
    9078:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    907c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
    9080:	d10e      	bne.n	90a0 <z_impl_gpio_pin_configure+0x134>
    9082:	f44f 7376 	mov.w	r3, #984	; 0x3d8
    9086:	4a30      	ldr	r2, [pc, #192]	; (9148 <z_impl_gpio_pin_configure+0x1dc>)
    9088:	493a      	ldr	r1, [pc, #232]	; (9174 <z_impl_gpio_pin_configure+0x208>)
    908a:	4831      	ldr	r0, [pc, #196]	; (9150 <z_impl_gpio_pin_configure+0x1e4>)
    908c:	f010 ff92 	bl	19fb4 <assert_print>
    9090:	4839      	ldr	r0, [pc, #228]	; (9178 <z_impl_gpio_pin_configure+0x20c>)
    9092:	f010 ff8f 	bl	19fb4 <assert_print>
    9096:	f44f 7176 	mov.w	r1, #984	; 0x3d8
    909a:	482b      	ldr	r0, [pc, #172]	; (9148 <z_impl_gpio_pin_configure+0x1dc>)
    909c:	f010 ff7a 	bl	19f94 <assert_post_action>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    90a0:	687b      	ldr	r3, [r7, #4]
    90a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    90a6:	2b00      	cmp	r3, #0
    90a8:	d00d      	beq.n	90c6 <z_impl_gpio_pin_configure+0x15a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    90aa:	687b      	ldr	r3, [r7, #4]
    90ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    90b0:	2b00      	cmp	r3, #0
    90b2:	d008      	beq.n	90c6 <z_impl_gpio_pin_configure+0x15a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    90b4:	687b      	ldr	r3, [r7, #4]
    90b6:	f003 0301 	and.w	r3, r3, #1
    90ba:	2b00      	cmp	r3, #0
    90bc:	d003      	beq.n	90c6 <z_impl_gpio_pin_configure+0x15a>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    90be:	687b      	ldr	r3, [r7, #4]
    90c0:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
    90c4:	607b      	str	r3, [r7, #4]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    90c6:	687b      	ldr	r3, [r7, #4]
    90c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    90cc:	607b      	str	r3, [r7, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    90ce:	69bb      	ldr	r3, [r7, #24]
    90d0:	681a      	ldr	r2, [r3, #0]
    90d2:	7afb      	ldrb	r3, [r7, #11]
    90d4:	2101      	movs	r1, #1
    90d6:	fa01 f303 	lsl.w	r3, r1, r3
    90da:	4013      	ands	r3, r2
    90dc:	2b00      	cmp	r3, #0
    90de:	d10e      	bne.n	90fe <z_impl_gpio_pin_configure+0x192>
    90e0:	f44f 7379 	mov.w	r3, #996	; 0x3e4
    90e4:	4a18      	ldr	r2, [pc, #96]	; (9148 <z_impl_gpio_pin_configure+0x1dc>)
    90e6:	4925      	ldr	r1, [pc, #148]	; (917c <z_impl_gpio_pin_configure+0x210>)
    90e8:	4819      	ldr	r0, [pc, #100]	; (9150 <z_impl_gpio_pin_configure+0x1e4>)
    90ea:	f010 ff63 	bl	19fb4 <assert_print>
    90ee:	4824      	ldr	r0, [pc, #144]	; (9180 <z_impl_gpio_pin_configure+0x214>)
    90f0:	f010 ff60 	bl	19fb4 <assert_print>
    90f4:	f44f 7179 	mov.w	r1, #996	; 0x3e4
    90f8:	4813      	ldr	r0, [pc, #76]	; (9148 <z_impl_gpio_pin_configure+0x1dc>)
    90fa:	f010 ff4b 	bl	19f94 <assert_post_action>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    90fe:	687b      	ldr	r3, [r7, #4]
    9100:	f003 0301 	and.w	r3, r3, #1
    9104:	2b00      	cmp	r3, #0
    9106:	d009      	beq.n	911c <z_impl_gpio_pin_configure+0x1b0>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    9108:	697b      	ldr	r3, [r7, #20]
    910a:	681a      	ldr	r2, [r3, #0]
    910c:	7afb      	ldrb	r3, [r7, #11]
    910e:	2101      	movs	r1, #1
    9110:	fa01 f303 	lsl.w	r3, r1, r3
    9114:	431a      	orrs	r2, r3
    9116:	697b      	ldr	r3, [r7, #20]
    9118:	601a      	str	r2, [r3, #0]
    911a:	e009      	b.n	9130 <z_impl_gpio_pin_configure+0x1c4>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    911c:	697b      	ldr	r3, [r7, #20]
    911e:	681a      	ldr	r2, [r3, #0]
    9120:	7afb      	ldrb	r3, [r7, #11]
    9122:	2101      	movs	r1, #1
    9124:	fa01 f303 	lsl.w	r3, r1, r3
    9128:	43db      	mvns	r3, r3
    912a:	401a      	ands	r2, r3
    912c:	697b      	ldr	r3, [r7, #20]
    912e:	601a      	str	r2, [r3, #0]
	return api->pin_configure(port, pin, flags);
    9130:	69fb      	ldr	r3, [r7, #28]
    9132:	681b      	ldr	r3, [r3, #0]
    9134:	7af9      	ldrb	r1, [r7, #11]
    9136:	687a      	ldr	r2, [r7, #4]
    9138:	68f8      	ldr	r0, [r7, #12]
    913a:	4798      	blx	r3
    913c:	4603      	mov	r3, r0
}
    913e:	4618      	mov	r0, r3
    9140:	3720      	adds	r7, #32
    9142:	46bd      	mov	sp, r7
    9144:	bd80      	pop	{r7, pc}
    9146:	bf00      	nop
    9148:	00020674 	.word	0x00020674
    914c:	000206a8 	.word	0x000206a8
    9150:	00020708 	.word	0x00020708
    9154:	00020728 	.word	0x00020728
    9158:	0002074c 	.word	0x0002074c
    915c:	00020788 	.word	0x00020788
    9160:	000207c8 	.word	0x000207c8
    9164:	00020810 	.word	0x00020810
    9168:	00020860 	.word	0x00020860
    916c:	00020894 	.word	0x00020894
    9170:	000208dc 	.word	0x000208dc
    9174:	00020918 	.word	0x00020918
    9178:	0002095c 	.word	0x0002095c
    917c:	00020988 	.word	0x00020988
    9180:	000209c8 	.word	0x000209c8

00009184 <gpio_pin_get>:
{
    9184:	b580      	push	{r7, lr}
    9186:	b086      	sub	sp, #24
    9188:	af00      	add	r7, sp, #0
    918a:	6078      	str	r0, [r7, #4]
    918c:	460b      	mov	r3, r1
    918e:	70fb      	strb	r3, [r7, #3]
	__unused const struct gpio_driver_config *const cfg =
    9190:	687b      	ldr	r3, [r7, #4]
    9192:	685b      	ldr	r3, [r3, #4]
    9194:	613b      	str	r3, [r7, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    9196:	693b      	ldr	r3, [r7, #16]
    9198:	681a      	ldr	r2, [r3, #0]
    919a:	78fb      	ldrb	r3, [r7, #3]
    919c:	2101      	movs	r1, #1
    919e:	fa01 f303 	lsl.w	r3, r1, r3
    91a2:	4013      	ands	r3, r2
    91a4:	2b00      	cmp	r3, #0
    91a6:	d10e      	bne.n	91c6 <gpio_pin_get+0x42>
    91a8:	f240 53f6 	movw	r3, #1526	; 0x5f6
    91ac:	4a13      	ldr	r2, [pc, #76]	; (91fc <gpio_pin_get+0x78>)
    91ae:	4914      	ldr	r1, [pc, #80]	; (9200 <gpio_pin_get+0x7c>)
    91b0:	4814      	ldr	r0, [pc, #80]	; (9204 <gpio_pin_get+0x80>)
    91b2:	f010 feff 	bl	19fb4 <assert_print>
    91b6:	4814      	ldr	r0, [pc, #80]	; (9208 <gpio_pin_get+0x84>)
    91b8:	f010 fefc 	bl	19fb4 <assert_print>
    91bc:	f240 51f6 	movw	r1, #1526	; 0x5f6
    91c0:	480e      	ldr	r0, [pc, #56]	; (91fc <gpio_pin_get+0x78>)
    91c2:	f010 fee7 	bl	19f94 <assert_post_action>
	ret = gpio_port_get(port, &value);
    91c6:	f107 030c 	add.w	r3, r7, #12
    91ca:	4619      	mov	r1, r3
    91cc:	6878      	ldr	r0, [r7, #4]
    91ce:	f00f ff0a 	bl	18fe6 <gpio_port_get>
    91d2:	6178      	str	r0, [r7, #20]
	if (ret == 0) {
    91d4:	697b      	ldr	r3, [r7, #20]
    91d6:	2b00      	cmp	r3, #0
    91d8:	d10a      	bne.n	91f0 <gpio_pin_get+0x6c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    91da:	78fb      	ldrb	r3, [r7, #3]
    91dc:	2201      	movs	r2, #1
    91de:	409a      	lsls	r2, r3
    91e0:	68fb      	ldr	r3, [r7, #12]
    91e2:	4013      	ands	r3, r2
    91e4:	2b00      	cmp	r3, #0
    91e6:	d001      	beq.n	91ec <gpio_pin_get+0x68>
    91e8:	2301      	movs	r3, #1
    91ea:	e000      	b.n	91ee <gpio_pin_get+0x6a>
    91ec:	2300      	movs	r3, #0
    91ee:	617b      	str	r3, [r7, #20]
	return ret;
    91f0:	697b      	ldr	r3, [r7, #20]
}
    91f2:	4618      	mov	r0, r3
    91f4:	3718      	adds	r7, #24
    91f6:	46bd      	mov	sp, r7
    91f8:	bd80      	pop	{r7, pc}
    91fa:	bf00      	nop
    91fc:	00020674 	.word	0x00020674
    9200:	00020988 	.word	0x00020988
    9204:	00020708 	.word	0x00020708
    9208:	000209c8 	.word	0x000209c8

0000920c <gpio_pin_set_raw>:
{
    920c:	b580      	push	{r7, lr}
    920e:	b086      	sub	sp, #24
    9210:	af00      	add	r7, sp, #0
    9212:	60f8      	str	r0, [r7, #12]
    9214:	460b      	mov	r3, r1
    9216:	607a      	str	r2, [r7, #4]
    9218:	72fb      	strb	r3, [r7, #11]
	__unused const struct gpio_driver_config *const cfg =
    921a:	68fb      	ldr	r3, [r7, #12]
    921c:	685b      	ldr	r3, [r3, #4]
    921e:	613b      	str	r3, [r7, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    9220:	693b      	ldr	r3, [r7, #16]
    9222:	681a      	ldr	r2, [r3, #0]
    9224:	7afb      	ldrb	r3, [r7, #11]
    9226:	2101      	movs	r1, #1
    9228:	fa01 f303 	lsl.w	r3, r1, r3
    922c:	4013      	ands	r3, r2
    922e:	2b00      	cmp	r3, #0
    9230:	d10e      	bne.n	9250 <gpio_pin_set_raw+0x44>
    9232:	f240 6326 	movw	r3, #1574	; 0x626
    9236:	4a14      	ldr	r2, [pc, #80]	; (9288 <gpio_pin_set_raw+0x7c>)
    9238:	4914      	ldr	r1, [pc, #80]	; (928c <gpio_pin_set_raw+0x80>)
    923a:	4815      	ldr	r0, [pc, #84]	; (9290 <gpio_pin_set_raw+0x84>)
    923c:	f010 feba 	bl	19fb4 <assert_print>
    9240:	4814      	ldr	r0, [pc, #80]	; (9294 <gpio_pin_set_raw+0x88>)
    9242:	f010 feb7 	bl	19fb4 <assert_print>
    9246:	f240 6126 	movw	r1, #1574	; 0x626
    924a:	480f      	ldr	r0, [pc, #60]	; (9288 <gpio_pin_set_raw+0x7c>)
    924c:	f010 fea2 	bl	19f94 <assert_post_action>
	if (value != 0)	{
    9250:	687b      	ldr	r3, [r7, #4]
    9252:	2b00      	cmp	r3, #0
    9254:	d009      	beq.n	926a <gpio_pin_set_raw+0x5e>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    9256:	7afb      	ldrb	r3, [r7, #11]
    9258:	2201      	movs	r2, #1
    925a:	fa02 f303 	lsl.w	r3, r2, r3
    925e:	4619      	mov	r1, r3
    9260:	68f8      	ldr	r0, [r7, #12]
    9262:	f00f ff43 	bl	190ec <gpio_port_set_bits_raw>
    9266:	6178      	str	r0, [r7, #20]
    9268:	e008      	b.n	927c <gpio_pin_set_raw+0x70>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    926a:	7afb      	ldrb	r3, [r7, #11]
    926c:	2201      	movs	r2, #1
    926e:	fa02 f303 	lsl.w	r3, r2, r3
    9272:	4619      	mov	r1, r3
    9274:	68f8      	ldr	r0, [r7, #12]
    9276:	f00f ff47 	bl	19108 <gpio_port_clear_bits_raw>
    927a:	6178      	str	r0, [r7, #20]
	return ret;
    927c:	697b      	ldr	r3, [r7, #20]
}
    927e:	4618      	mov	r0, r3
    9280:	3718      	adds	r7, #24
    9282:	46bd      	mov	sp, r7
    9284:	bd80      	pop	{r7, pc}
    9286:	bf00      	nop
    9288:	00020674 	.word	0x00020674
    928c:	00020988 	.word	0x00020988
    9290:	00020708 	.word	0x00020708
    9294:	000209c8 	.word	0x000209c8

00009298 <gpio_pin_set>:
{
    9298:	b580      	push	{r7, lr}
    929a:	b086      	sub	sp, #24
    929c:	af00      	add	r7, sp, #0
    929e:	60f8      	str	r0, [r7, #12]
    92a0:	460b      	mov	r3, r1
    92a2:	607a      	str	r2, [r7, #4]
    92a4:	72fb      	strb	r3, [r7, #11]
	__unused const struct gpio_driver_config *const cfg =
    92a6:	68fb      	ldr	r3, [r7, #12]
    92a8:	685b      	ldr	r3, [r3, #4]
    92aa:	617b      	str	r3, [r7, #20]
	const struct gpio_driver_data *const data =
    92ac:	68fb      	ldr	r3, [r7, #12]
    92ae:	691b      	ldr	r3, [r3, #16]
    92b0:	613b      	str	r3, [r7, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    92b2:	697b      	ldr	r3, [r7, #20]
    92b4:	681a      	ldr	r2, [r3, #0]
    92b6:	7afb      	ldrb	r3, [r7, #11]
    92b8:	2101      	movs	r1, #1
    92ba:	fa01 f303 	lsl.w	r3, r1, r3
    92be:	4013      	ands	r3, r2
    92c0:	2b00      	cmp	r3, #0
    92c2:	d10e      	bne.n	92e2 <gpio_pin_set+0x4a>
    92c4:	f240 634f 	movw	r3, #1615	; 0x64f
    92c8:	4a13      	ldr	r2, [pc, #76]	; (9318 <gpio_pin_set+0x80>)
    92ca:	4914      	ldr	r1, [pc, #80]	; (931c <gpio_pin_set+0x84>)
    92cc:	4814      	ldr	r0, [pc, #80]	; (9320 <gpio_pin_set+0x88>)
    92ce:	f010 fe71 	bl	19fb4 <assert_print>
    92d2:	4814      	ldr	r0, [pc, #80]	; (9324 <gpio_pin_set+0x8c>)
    92d4:	f010 fe6e 	bl	19fb4 <assert_print>
    92d8:	f240 614f 	movw	r1, #1615	; 0x64f
    92dc:	480e      	ldr	r0, [pc, #56]	; (9318 <gpio_pin_set+0x80>)
    92de:	f010 fe59 	bl	19f94 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    92e2:	693b      	ldr	r3, [r7, #16]
    92e4:	681a      	ldr	r2, [r3, #0]
    92e6:	7afb      	ldrb	r3, [r7, #11]
    92e8:	2101      	movs	r1, #1
    92ea:	fa01 f303 	lsl.w	r3, r1, r3
    92ee:	4013      	ands	r3, r2
    92f0:	2b00      	cmp	r3, #0
    92f2:	d006      	beq.n	9302 <gpio_pin_set+0x6a>
		value = (value != 0) ? 0 : 1;
    92f4:	687b      	ldr	r3, [r7, #4]
    92f6:	2b00      	cmp	r3, #0
    92f8:	bf0c      	ite	eq
    92fa:	2301      	moveq	r3, #1
    92fc:	2300      	movne	r3, #0
    92fe:	b2db      	uxtb	r3, r3
    9300:	607b      	str	r3, [r7, #4]
	return gpio_pin_set_raw(port, pin, value);
    9302:	7afb      	ldrb	r3, [r7, #11]
    9304:	687a      	ldr	r2, [r7, #4]
    9306:	4619      	mov	r1, r3
    9308:	68f8      	ldr	r0, [r7, #12]
    930a:	f7ff ff7f 	bl	920c <gpio_pin_set_raw>
    930e:	4603      	mov	r3, r0
}
    9310:	4618      	mov	r0, r3
    9312:	3718      	adds	r7, #24
    9314:	46bd      	mov	sp, r7
    9316:	bd80      	pop	{r7, pc}
    9318:	00020674 	.word	0x00020674
    931c:	00020988 	.word	0x00020988
    9320:	00020708 	.word	0x00020708
    9324:	000209c8 	.word	0x000209c8

00009328 <main>:
    

}

int main(void)
{
    9328:	b580      	push	{r7, lr}
    932a:	b082      	sub	sp, #8
    932c:	af00      	add	r7, sp, #0

    const struct device *devices[NUM_PYD1598_OKAY] = {DT_FOREACH_CHILD_STATUS_OKAY_SEP(DT_ALIAS(pir_master), DEVICE_DT_GET,(,))};
    932e:	4b22      	ldr	r3, [pc, #136]	; (93b8 <main+0x90>)
    9330:	603b      	str	r3, [r7, #0]
    // * - signal_source: 1 (0: PIR(BRF), 1: PIR(LPF), 2: Not Allowed, 3: Temperature Sensor)
    // * - HPF_Cut_Off: 0 (0: 0.4 Hz, 1: 0.2 Hz)
    // * - Count_Mode: 1 (0: count with (0), or without (1) BPF sign change)


    int ret = 1;
    9332:	2301      	movs	r3, #1
    9334:	607b      	str	r3, [r7, #4]
    while (ret != 0)
    9336:	e022      	b.n	937e <main+0x56>
    {
        ret = pyd1598_set_default_config(devices[0]);
    9338:	683b      	ldr	r3, [r7, #0]
    933a:	4618      	mov	r0, r3
    933c:	f00f fde7 	bl	18f0e <pyd1598_set_default_config>
    9340:	6078      	str	r0, [r7, #4]
        if (ret != 0)
    9342:	687b      	ldr	r3, [r7, #4]
    9344:	2b00      	cmp	r3, #0
    9346:	d008      	beq.n	935a <main+0x32>
        {
            LOG_INF("pyd1598_set_default_configuration: %d", ret);
    9348:	2003      	movs	r0, #3
    934a:	f7ff fded 	bl	8f28 <z_log_minimal_level_to_char>
    934e:	4603      	mov	r3, r0
    9350:	687a      	ldr	r2, [r7, #4]
    9352:	4619      	mov	r1, r3
    9354:	4819      	ldr	r0, [pc, #100]	; (93bc <main+0x94>)
    9356:	f010 fe50 	bl	19ffa <z_log_minimal_printk>
        }
        // Set mode 
        ret = pyd1598_set_operation_mode(devices[0], PYD1598_FORCED_READOUT);
    935a:	683b      	ldr	r3, [r7, #0]
    935c:	2100      	movs	r1, #0
    935e:	4618      	mov	r0, r3
    9360:	f7ff fd0c 	bl	8d7c <pyd1598_set_operation_mode>
    9364:	6078      	str	r0, [r7, #4]
        if (ret != 0)
    9366:	687b      	ldr	r3, [r7, #4]
    9368:	2b00      	cmp	r3, #0
    936a:	d008      	beq.n	937e <main+0x56>
        {
            LOG_INF("pyd1598_get_operation_mode: %d", ret);
    936c:	2003      	movs	r0, #3
    936e:	f7ff fddb 	bl	8f28 <z_log_minimal_level_to_char>
    9372:	4603      	mov	r3, r0
    9374:	687a      	ldr	r2, [r7, #4]
    9376:	4619      	mov	r1, r3
    9378:	4811      	ldr	r0, [pc, #68]	; (93c0 <main+0x98>)
    937a:	f010 fe3e 	bl	19ffa <z_log_minimal_printk>
    while (ret != 0)
    937e:	687b      	ldr	r3, [r7, #4]
    9380:	2b00      	cmp	r3, #0
    9382:	d1d9      	bne.n	9338 <main+0x10>
        }
    }


    // Push the configuration to the sensor
    ret = pyd1598_push(devices[0]);
    9384:	683b      	ldr	r3, [r7, #0]
    9386:	4618      	mov	r0, r3
    9388:	f7ff fac6 	bl	8918 <pyd1598_push>
    938c:	6078      	str	r0, [r7, #4]
    if (ret != 0)
    938e:	687b      	ldr	r3, [r7, #4]
    9390:	2b00      	cmp	r3, #0
    9392:	d008      	beq.n	93a6 <main+0x7e>
    {
        LOG_INF("pyd1598_push: %d", ret);
    9394:	2003      	movs	r0, #3
    9396:	f7ff fdc7 	bl	8f28 <z_log_minimal_level_to_char>
    939a:	4603      	mov	r3, r0
    939c:	687a      	ldr	r2, [r7, #4]
    939e:	4619      	mov	r1, r3
    93a0:	4808      	ldr	r0, [pc, #32]	; (93c4 <main+0x9c>)
    93a2:	f010 fe2a 	bl	19ffa <z_log_minimal_printk>
    }
    switch_mode(devices[0]);
    93a6:	683b      	ldr	r3, [r7, #0]
    93a8:	4618      	mov	r0, r3
    93aa:	f00f febb 	bl	19124 <_Z11switch_modePK6device>





    return 0;
    93ae:	2300      	movs	r3, #0
}
    93b0:	4618      	mov	r0, r3
    93b2:	3708      	adds	r7, #8
    93b4:	46bd      	mov	sp, r7
    93b6:	bd80      	pop	{r7, pc}
    93b8:	0001f9cc 	.word	0x0001f9cc
    93bc:	000209e4 	.word	0x000209e4
    93c0:	00020a10 	.word	0x00020a10
    93c4:	00020a34 	.word	0x00020a34

000093c8 <__printk_hook_install>:
 * To be called by the platform's console driver at init time. Installs a
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
    93c8:	b480      	push	{r7}
    93ca:	b083      	sub	sp, #12
    93cc:	af00      	add	r7, sp, #0
    93ce:	6078      	str	r0, [r7, #4]
	_char_out = fn;
    93d0:	4a03      	ldr	r2, [pc, #12]	; (93e0 <__printk_hook_install+0x18>)
    93d2:	687b      	ldr	r3, [r7, #4]
    93d4:	6013      	str	r3, [r2, #0]
}
    93d6:	bf00      	nop
    93d8:	370c      	adds	r7, #12
    93da:	46bd      	mov	sp, r7
    93dc:	bc80      	pop	{r7}
    93de:	4770      	bx	lr
    93e0:	2000c650 	.word	0x2000c650

000093e4 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
    93e4:	b580      	push	{r7, lr}
    93e6:	b082      	sub	sp, #8
    93e8:	af00      	add	r7, sp, #0
    93ea:	6078      	str	r0, [r7, #4]
    93ec:	6039      	str	r1, [r7, #0]
	(void) ctx_p;
	return _char_out(c);
    93ee:	4b04      	ldr	r3, [pc, #16]	; (9400 <char_out+0x1c>)
    93f0:	681b      	ldr	r3, [r3, #0]
    93f2:	6878      	ldr	r0, [r7, #4]
    93f4:	4798      	blx	r3
    93f6:	4603      	mov	r3, r0
}
    93f8:	4618      	mov	r0, r3
    93fa:	3708      	adds	r7, #8
    93fc:	46bd      	mov	sp, r7
    93fe:	bd80      	pop	{r7, pc}
    9400:	2000c650 	.word	0x2000c650

00009404 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
    9404:	b580      	push	{r7, lr}
    9406:	b08c      	sub	sp, #48	; 0x30
    9408:	af00      	add	r7, sp, #0
    940a:	6078      	str	r0, [r7, #4]
    940c:	6039      	str	r1, [r7, #0]
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
		return;
	}

	if (k_is_user_context()) {
    940e:	f00f feda 	bl	191c6 <k_is_user_context>
    9412:	4603      	mov	r3, r0
    9414:	2b00      	cmp	r3, #0
    9416:	d01b      	beq.n	9450 <vprintk+0x4c>
		struct buf_out_context ctx = {
    9418:	f107 031c 	add.w	r3, r7, #28
    941c:	2200      	movs	r2, #0
    941e:	601a      	str	r2, [r3, #0]
    9420:	605a      	str	r2, [r3, #4]
    9422:	609a      	str	r2, [r3, #8]
    9424:	60da      	str	r2, [r3, #12]
    9426:	611a      	str	r2, [r3, #16]
    9428:	2302      	movs	r3, #2
    942a:	77bb      	strb	r3, [r7, #30]
    942c:	4b13      	ldr	r3, [pc, #76]	; (947c <vprintk+0x78>)
    942e:	623b      	str	r3, [r7, #32]
			0
#endif
		};

#ifdef CONFIG_PICOLIBC
		(void) vfprintf(&ctx.file, fmt, ap);
    9430:	f107 031c 	add.w	r3, r7, #28
    9434:	683a      	ldr	r2, [r7, #0]
    9436:	6879      	ldr	r1, [r7, #4]
    9438:	4618      	mov	r0, r3
    943a:	f00e fb3d 	bl	17ab8 <__d_vfprintf>
#else
		cbvprintf(buf_char_out, &ctx, fmt, ap);
#endif
		if (ctx.buf_count) {
    943e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9440:	2b00      	cmp	r3, #0
    9442:	d017      	beq.n	9474 <vprintk+0x70>
			buf_flush(&ctx);
    9444:	f107 031c 	add.w	r3, r7, #28
    9448:	4618      	mov	r0, r3
    944a:	f00f feda 	bl	19202 <buf_flush>
    944e:	e011      	b.n	9474 <vprintk+0x70>
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

#ifdef CONFIG_PICOLIBC
		FILE console = FDEV_SETUP_STREAM((int(*)(char, FILE *))char_out,
    9450:	f107 030c 	add.w	r3, r7, #12
    9454:	2200      	movs	r2, #0
    9456:	601a      	str	r2, [r3, #0]
    9458:	605a      	str	r2, [r3, #4]
    945a:	609a      	str	r2, [r3, #8]
    945c:	60da      	str	r2, [r3, #12]
    945e:	2302      	movs	r3, #2
    9460:	73bb      	strb	r3, [r7, #14]
    9462:	4b07      	ldr	r3, [pc, #28]	; (9480 <vprintk+0x7c>)
    9464:	613b      	str	r3, [r7, #16]
						 NULL, NULL, _FDEV_SETUP_WRITE);
		(void) vfprintf(&console, fmt, ap);
    9466:	f107 030c 	add.w	r3, r7, #12
    946a:	683a      	ldr	r2, [r7, #0]
    946c:	6879      	ldr	r1, [r7, #4]
    946e:	4618      	mov	r0, r3
    9470:	f00e fb22 	bl	17ab8 <__d_vfprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    9474:	3730      	adds	r7, #48	; 0x30
    9476:	46bd      	mov	sp, r7
    9478:	bd80      	pop	{r7, pc}
    947a:	bf00      	nop
    947c:	0001922b 	.word	0x0001922b
    9480:	000093e5 	.word	0x000093e5

00009484 <z_impl_k_str_out>:

void z_impl_k_str_out(char *c, size_t n)
{
    9484:	b580      	push	{r7, lr}
    9486:	b084      	sub	sp, #16
    9488:	af00      	add	r7, sp, #0
    948a:	6078      	str	r0, [r7, #4]
    948c:	6039      	str	r1, [r7, #0]
	size_t i;
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	for (i = 0; i < n; i++) {
    948e:	2300      	movs	r3, #0
    9490:	60fb      	str	r3, [r7, #12]
    9492:	e00a      	b.n	94aa <z_impl_k_str_out+0x26>
		_char_out(c[i]);
    9494:	4b09      	ldr	r3, [pc, #36]	; (94bc <z_impl_k_str_out+0x38>)
    9496:	681b      	ldr	r3, [r3, #0]
    9498:	6879      	ldr	r1, [r7, #4]
    949a:	68fa      	ldr	r2, [r7, #12]
    949c:	440a      	add	r2, r1
    949e:	7812      	ldrb	r2, [r2, #0]
    94a0:	4610      	mov	r0, r2
    94a2:	4798      	blx	r3
	for (i = 0; i < n; i++) {
    94a4:	68fb      	ldr	r3, [r7, #12]
    94a6:	3301      	adds	r3, #1
    94a8:	60fb      	str	r3, [r7, #12]
    94aa:	68fa      	ldr	r2, [r7, #12]
    94ac:	683b      	ldr	r3, [r7, #0]
    94ae:	429a      	cmp	r2, r3
    94b0:	d3f0      	bcc.n	9494 <z_impl_k_str_out+0x10>
	}

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    94b2:	bf00      	nop
    94b4:	bf00      	nop
    94b6:	3710      	adds	r7, #16
    94b8:	46bd      	mov	sp, r7
    94ba:	bd80      	pop	{r7, pc}
    94bc:	2000c650 	.word	0x2000c650

000094c0 <k_current_get>:
 * @return ID of current thread.
 *
 */
__attribute_const__
static inline k_tid_t k_current_get(void)
{
    94c0:	b580      	push	{r7, lr}
    94c2:	af00      	add	r7, sp, #0
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	return z_tls_current;
    94c4:	f016 fa20 	bl	1f908 <__aeabi_read_tp>
    94c8:	4603      	mov	r3, r0
    94ca:	4a02      	ldr	r2, [pc, #8]	; (94d4 <k_current_get+0x14>)
    94cc:	589b      	ldr	r3, [r3, r2]
#else
	return z_current_get();
#endif
}
    94ce:	4618      	mov	r0, r3
    94d0:	bd80      	pop	{r7, pc}
    94d2:	bf00      	nop
    94d4:	00000008 	.word	0x00000008

000094d8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    94d8:	b580      	push	{r7, lr}
    94da:	b084      	sub	sp, #16
    94dc:	af00      	add	r7, sp, #0
    94de:	60f8      	str	r0, [r7, #12]
    94e0:	60b9      	str	r1, [r7, #8]
    94e2:	607a      	str	r2, [r7, #4]
    94e4:	603b      	str	r3, [r7, #0]
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
    94e6:	f00f febe 	bl	19266 <z_current_get>
    94ea:	4602      	mov	r2, r0
    94ec:	f016 fa0c 	bl	1f908 <__aeabi_read_tp>
    94f0:	4603      	mov	r3, r0
    94f2:	4906      	ldr	r1, [pc, #24]	; (950c <z_thread_entry+0x34>)
    94f4:	505a      	str	r2, [r3, r1]

	sys_rand_get((uint8_t *)&stack_guard, sizeof(stack_guard));
	__stack_chk_guard = stack_guard;
	__stack_chk_guard <<= 8;
#endif	/* CONFIG_STACK_CANARIES */
	entry(p1, p2, p3);
    94f6:	68fb      	ldr	r3, [r7, #12]
    94f8:	683a      	ldr	r2, [r7, #0]
    94fa:	6879      	ldr	r1, [r7, #4]
    94fc:	68b8      	ldr	r0, [r7, #8]
    94fe:	4798      	blx	r3

	k_thread_abort(k_current_get());
    9500:	f7ff ffde 	bl	94c0 <k_current_get>
    9504:	4603      	mov	r3, r0
    9506:	4618      	mov	r0, r3
    9508:	f00f feb4 	bl	19274 <k_thread_abort>
    950c:	00000008 	.word	0x00000008

00009510 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    9510:	b580      	push	{r7, lr}
    9512:	b084      	sub	sp, #16
    9514:	af00      	add	r7, sp, #0
    9516:	6078      	str	r0, [r7, #4]
    9518:	6039      	str	r1, [r7, #0]
	if (mem == NULL) {
    951a:	683b      	ldr	r3, [r7, #0]
    951c:	2b00      	cmp	r3, #0
    951e:	d044      	beq.n	95aa <sys_heap_free+0x9a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    9520:	687b      	ldr	r3, [r7, #4]
    9522:	681b      	ldr	r3, [r3, #0]
    9524:	60fb      	str	r3, [r7, #12]
	chunkid_t c = mem_to_chunkid(h, mem);
    9526:	6839      	ldr	r1, [r7, #0]
    9528:	68f8      	ldr	r0, [r7, #12]
    952a:	f010 fa3c 	bl	199a6 <mem_to_chunkid>
    952e:	60b8      	str	r0, [r7, #8]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    9530:	68b9      	ldr	r1, [r7, #8]
    9532:	68f8      	ldr	r0, [r7, #12]
    9534:	f00f ff2e 	bl	19394 <chunk_used>
    9538:	4603      	mov	r3, r0
    953a:	f083 0301 	eor.w	r3, r3, #1
    953e:	b2db      	uxtb	r3, r3
    9540:	2b00      	cmp	r3, #0
    9542:	d00d      	beq.n	9560 <sys_heap_free+0x50>
    9544:	23af      	movs	r3, #175	; 0xaf
    9546:	4a1b      	ldr	r2, [pc, #108]	; (95b4 <sys_heap_free+0xa4>)
    9548:	491b      	ldr	r1, [pc, #108]	; (95b8 <sys_heap_free+0xa8>)
    954a:	481c      	ldr	r0, [pc, #112]	; (95bc <sys_heap_free+0xac>)
    954c:	f010 fd32 	bl	19fb4 <assert_print>
    9550:	6839      	ldr	r1, [r7, #0]
    9552:	481b      	ldr	r0, [pc, #108]	; (95c0 <sys_heap_free+0xb0>)
    9554:	f010 fd2e 	bl	19fb4 <assert_print>
    9558:	21af      	movs	r1, #175	; 0xaf
    955a:	4816      	ldr	r0, [pc, #88]	; (95b4 <sys_heap_free+0xa4>)
    955c:	f010 fd1a 	bl	19f94 <assert_post_action>
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    9560:	68b9      	ldr	r1, [r7, #8]
    9562:	68f8      	ldr	r0, [r7, #12]
    9564:	f00f ffe1 	bl	1952a <right_chunk>
    9568:	4603      	mov	r3, r0
    956a:	4619      	mov	r1, r3
    956c:	68f8      	ldr	r0, [r7, #12]
    956e:	f00f ffcb 	bl	19508 <left_chunk>
    9572:	4602      	mov	r2, r0
    9574:	68bb      	ldr	r3, [r7, #8]
    9576:	4293      	cmp	r3, r2
    9578:	d00d      	beq.n	9596 <sys_heap_free+0x86>
    957a:	23b7      	movs	r3, #183	; 0xb7
    957c:	4a0d      	ldr	r2, [pc, #52]	; (95b4 <sys_heap_free+0xa4>)
    957e:	4911      	ldr	r1, [pc, #68]	; (95c4 <sys_heap_free+0xb4>)
    9580:	480e      	ldr	r0, [pc, #56]	; (95bc <sys_heap_free+0xac>)
    9582:	f010 fd17 	bl	19fb4 <assert_print>
    9586:	6839      	ldr	r1, [r7, #0]
    9588:	480f      	ldr	r0, [pc, #60]	; (95c8 <sys_heap_free+0xb8>)
    958a:	f010 fd13 	bl	19fb4 <assert_print>
    958e:	21b7      	movs	r1, #183	; 0xb7
    9590:	4808      	ldr	r0, [pc, #32]	; (95b4 <sys_heap_free+0xa4>)
    9592:	f010 fcff 	bl	19f94 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    9596:	2200      	movs	r2, #0
    9598:	68b9      	ldr	r1, [r7, #8]
    959a:	68f8      	ldr	r0, [r7, #12]
    959c:	f00f ff20 	bl	193e0 <set_chunk_used>
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    95a0:	68b9      	ldr	r1, [r7, #8]
    95a2:	68f8      	ldr	r0, [r7, #12]
    95a4:	f010 f9a9 	bl	198fa <free_chunk>
    95a8:	e000      	b.n	95ac <sys_heap_free+0x9c>
		return; /* ISO C free() semantics */
    95aa:	bf00      	nop
}
    95ac:	3710      	adds	r7, #16
    95ae:	46bd      	mov	sp, r7
    95b0:	bd80      	pop	{r7, pc}
    95b2:	bf00      	nop
    95b4:	00020c40 	.word	0x00020c40
    95b8:	00020c64 	.word	0x00020c64
    95bc:	00020c78 	.word	0x00020c78
    95c0:	00020c98 	.word	0x00020c98
    95c4:	00020cd0 	.word	0x00020cd0
    95c8:	00020cf8 	.word	0x00020cf8

000095cc <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    95cc:	b580      	push	{r7, lr}
    95ce:	b08e      	sub	sp, #56	; 0x38
    95d0:	af00      	add	r7, sp, #0
    95d2:	60f8      	str	r0, [r7, #12]
    95d4:	60b9      	str	r1, [r7, #8]
    95d6:	607a      	str	r2, [r7, #4]
	struct z_heap *h = heap->heap;
    95d8:	68fb      	ldr	r3, [r7, #12]
    95da:	681b      	ldr	r3, [r3, #0]
    95dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    95de:	68bb      	ldr	r3, [r7, #8]
    95e0:	425b      	negs	r3, r3
    95e2:	68ba      	ldr	r2, [r7, #8]
    95e4:	4013      	ands	r3, r2
    95e6:	633b      	str	r3, [r7, #48]	; 0x30
	if (align != rew) {
    95e8:	68ba      	ldr	r2, [r7, #8]
    95ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    95ec:	429a      	cmp	r2, r3
    95ee:	d012      	beq.n	9616 <sys_heap_aligned_alloc+0x4a>
		align -= rew;
    95f0:	68ba      	ldr	r2, [r7, #8]
    95f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    95f4:	1ad3      	subs	r3, r2, r3
    95f6:	60bb      	str	r3, [r7, #8]
		gap = MIN(rew, chunk_header_bytes(h));
    95f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    95fa:	f00f ffd2 	bl	195a2 <chunk_header_bytes>
    95fe:	4602      	mov	r2, r0
    9600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9602:	4293      	cmp	r3, r2
    9604:	d304      	bcc.n	9610 <sys_heap_aligned_alloc+0x44>
    9606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9608:	f00f ffcb 	bl	195a2 <chunk_header_bytes>
    960c:	4603      	mov	r3, r0
    960e:	e000      	b.n	9612 <sys_heap_aligned_alloc+0x46>
    9610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9612:	637b      	str	r3, [r7, #52]	; 0x34
    9614:	e012      	b.n	963c <sys_heap_aligned_alloc+0x70>
	} else {
		if (align <= chunk_header_bytes(h)) {
    9616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9618:	f00f ffc3 	bl	195a2 <chunk_header_bytes>
    961c:	4602      	mov	r2, r0
    961e:	68bb      	ldr	r3, [r7, #8]
    9620:	4293      	cmp	r3, r2
    9622:	d805      	bhi.n	9630 <sys_heap_aligned_alloc+0x64>
			return sys_heap_alloc(heap, bytes);
    9624:	6879      	ldr	r1, [r7, #4]
    9626:	68f8      	ldr	r0, [r7, #12]
    9628:	f010 fa38 	bl	19a9c <sys_heap_alloc>
    962c:	4603      	mov	r3, r0
    962e:	e087      	b.n	9740 <sys_heap_aligned_alloc+0x174>
		}
		rew = 0;
    9630:	2300      	movs	r3, #0
    9632:	633b      	str	r3, [r7, #48]	; 0x30
		gap = chunk_header_bytes(h);
    9634:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9636:	f00f ffb4 	bl	195a2 <chunk_header_bytes>
    963a:	6378      	str	r0, [r7, #52]	; 0x34
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    963c:	68bb      	ldr	r3, [r7, #8]
    963e:	1e5a      	subs	r2, r3, #1
    9640:	68bb      	ldr	r3, [r7, #8]
    9642:	4013      	ands	r3, r2
    9644:	2b00      	cmp	r3, #0
    9646:	d00e      	beq.n	9666 <sys_heap_aligned_alloc+0x9a>
    9648:	f44f 73a2 	mov.w	r3, #324	; 0x144
    964c:	4a3e      	ldr	r2, [pc, #248]	; (9748 <sys_heap_aligned_alloc+0x17c>)
    964e:	493f      	ldr	r1, [pc, #252]	; (974c <sys_heap_aligned_alloc+0x180>)
    9650:	483f      	ldr	r0, [pc, #252]	; (9750 <sys_heap_aligned_alloc+0x184>)
    9652:	f010 fcaf 	bl	19fb4 <assert_print>
    9656:	483f      	ldr	r0, [pc, #252]	; (9754 <sys_heap_aligned_alloc+0x188>)
    9658:	f010 fcac 	bl	19fb4 <assert_print>
    965c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    9660:	4839      	ldr	r0, [pc, #228]	; (9748 <sys_heap_aligned_alloc+0x17c>)
    9662:	f010 fc97 	bl	19f94 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
    9666:	687b      	ldr	r3, [r7, #4]
    9668:	2b00      	cmp	r3, #0
    966a:	d006      	beq.n	967a <sys_heap_aligned_alloc+0xae>
    966c:	6879      	ldr	r1, [r7, #4]
    966e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9670:	f00f fffb 	bl	1966a <size_too_big>
    9674:	4603      	mov	r3, r0
    9676:	2b00      	cmp	r3, #0
    9678:	d001      	beq.n	967e <sys_heap_aligned_alloc+0xb2>
		return NULL;
    967a:	2300      	movs	r3, #0
    967c:	e060      	b.n	9740 <sys_heap_aligned_alloc+0x174>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
    967e:	687a      	ldr	r2, [r7, #4]
    9680:	68bb      	ldr	r3, [r7, #8]
    9682:	441a      	add	r2, r3
    9684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9686:	1ad3      	subs	r3, r2, r3
    9688:	4619      	mov	r1, r3
    968a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    968c:	f00f ffb7 	bl	195fe <bytes_to_chunksz>
    9690:	62b8      	str	r0, [r7, #40]	; 0x28
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    9692:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9696:	f010 f99f 	bl	199d8 <alloc_chunk>
    969a:	6278      	str	r0, [r7, #36]	; 0x24

	if (c0 == 0) {
    969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    969e:	2b00      	cmp	r3, #0
    96a0:	d101      	bne.n	96a6 <sys_heap_aligned_alloc+0xda>
		return NULL;
    96a2:	2300      	movs	r3, #0
    96a4:	e04c      	b.n	9740 <sys_heap_aligned_alloc+0x174>
	}
	uint8_t *mem = chunk_mem(h, c0);
    96a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    96a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    96aa:	f00f fff1 	bl	19690 <chunk_mem>
    96ae:	6238      	str	r0, [r7, #32]

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    96b0:	6a3a      	ldr	r2, [r7, #32]
    96b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    96b4:	4413      	add	r3, r2
    96b6:	461a      	mov	r2, r3
    96b8:	68bb      	ldr	r3, [r7, #8]
    96ba:	4413      	add	r3, r2
    96bc:	1e5a      	subs	r2, r3, #1
    96be:	68bb      	ldr	r3, [r7, #8]
    96c0:	fbb2 f3f3 	udiv	r3, r2, r3
    96c4:	68ba      	ldr	r2, [r7, #8]
    96c6:	fb03 f202 	mul.w	r2, r3, r2
    96ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    96cc:	1ad3      	subs	r3, r2, r3
    96ce:	623b      	str	r3, [r7, #32]
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    96d0:	6a3a      	ldr	r2, [r7, #32]
    96d2:	687b      	ldr	r3, [r7, #4]
    96d4:	4413      	add	r3, r2
    96d6:	3307      	adds	r3, #7
    96d8:	f023 0307 	bic.w	r3, r3, #7
    96dc:	61fb      	str	r3, [r7, #28]

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
    96de:	6a39      	ldr	r1, [r7, #32]
    96e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    96e2:	f010 f960 	bl	199a6 <mem_to_chunkid>
    96e6:	61b8      	str	r0, [r7, #24]
	chunkid_t c_end = end - chunk_buf(h);
    96e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    96ea:	f00f fdfb 	bl	192e4 <chunk_buf>
    96ee:	4602      	mov	r2, r0
    96f0:	69fb      	ldr	r3, [r7, #28]
    96f2:	1a9b      	subs	r3, r3, r2
    96f4:	10db      	asrs	r3, r3, #3
    96f6:	617b      	str	r3, [r7, #20]
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
    96f8:	69ba      	ldr	r2, [r7, #24]
    96fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    96fc:	429a      	cmp	r2, r3
    96fe:	d908      	bls.n	9712 <sys_heap_aligned_alloc+0x146>
		split_chunks(h, c0, c);
    9700:	69ba      	ldr	r2, [r7, #24]
    9702:	6a79      	ldr	r1, [r7, #36]	; 0x24
    9704:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9706:	f010 f8a3 	bl	19850 <split_chunks>
		free_list_add(h, c0);
    970a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    970c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    970e:	f010 f87d 	bl	1980c <free_list_add>
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
    9712:	69b9      	ldr	r1, [r7, #24]
    9714:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9716:	f00f ff08 	bl	1952a <right_chunk>
    971a:	4602      	mov	r2, r0
    971c:	697b      	ldr	r3, [r7, #20]
    971e:	4293      	cmp	r3, r2
    9720:	d208      	bcs.n	9734 <sys_heap_aligned_alloc+0x168>
		split_chunks(h, c, c_end);
    9722:	697a      	ldr	r2, [r7, #20]
    9724:	69b9      	ldr	r1, [r7, #24]
    9726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9728:	f010 f892 	bl	19850 <split_chunks>
		free_list_add(h, c_end);
    972c:	6979      	ldr	r1, [r7, #20]
    972e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9730:	f010 f86c 	bl	1980c <free_list_add>
	}

	set_chunk_used(h, c, true);
    9734:	2201      	movs	r2, #1
    9736:	69b9      	ldr	r1, [r7, #24]
    9738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    973a:	f00f fe51 	bl	193e0 <set_chunk_used>
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
    973e:	6a3b      	ldr	r3, [r7, #32]
}
    9740:	4618      	mov	r0, r3
    9742:	3738      	adds	r7, #56	; 0x38
    9744:	46bd      	mov	sp, r7
    9746:	bd80      	pop	{r7, pc}
    9748:	00020c40 	.word	0x00020c40
    974c:	00020d34 	.word	0x00020d34
    9750:	00020c78 	.word	0x00020c78
    9754:	00020d50 	.word	0x00020d50

00009758 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    9758:	b580      	push	{r7, lr}
    975a:	b08c      	sub	sp, #48	; 0x30
    975c:	af00      	add	r7, sp, #0
    975e:	60f8      	str	r0, [r7, #12]
    9760:	60b9      	str	r1, [r7, #8]
    9762:	607a      	str	r2, [r7, #4]
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    9764:	6878      	ldr	r0, [r7, #4]
    9766:	f00f ff2d 	bl	195c4 <heap_footer_bytes>
    976a:	4602      	mov	r2, r0
    976c:	687b      	ldr	r3, [r7, #4]
    976e:	4293      	cmp	r3, r2
    9770:	d80e      	bhi.n	9790 <sys_heap_init+0x38>
    9772:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    9776:	4a58      	ldr	r2, [pc, #352]	; (98d8 <sys_heap_init+0x180>)
    9778:	4958      	ldr	r1, [pc, #352]	; (98dc <sys_heap_init+0x184>)
    977a:	4859      	ldr	r0, [pc, #356]	; (98e0 <sys_heap_init+0x188>)
    977c:	f010 fc1a 	bl	19fb4 <assert_print>
    9780:	4858      	ldr	r0, [pc, #352]	; (98e4 <sys_heap_init+0x18c>)
    9782:	f010 fc17 	bl	19fb4 <assert_print>
    9786:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    978a:	4853      	ldr	r0, [pc, #332]	; (98d8 <sys_heap_init+0x180>)
    978c:	f010 fc02 	bl	19f94 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    9790:	6878      	ldr	r0, [r7, #4]
    9792:	f00f ff17 	bl	195c4 <heap_footer_bytes>
    9796:	4602      	mov	r2, r0
    9798:	687b      	ldr	r3, [r7, #4]
    979a:	1a9b      	subs	r3, r3, r2
    979c:	607b      	str	r3, [r7, #4]

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    979e:	68bb      	ldr	r3, [r7, #8]
    97a0:	3307      	adds	r3, #7
    97a2:	f023 0307 	bic.w	r3, r3, #7
    97a6:	62bb      	str	r3, [r7, #40]	; 0x28
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    97a8:	68ba      	ldr	r2, [r7, #8]
    97aa:	687b      	ldr	r3, [r7, #4]
    97ac:	4413      	add	r3, r2
    97ae:	f023 0307 	bic.w	r3, r3, #7
    97b2:	627b      	str	r3, [r7, #36]	; 0x24
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    97b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    97b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97b8:	1ad3      	subs	r3, r2, r3
    97ba:	08db      	lsrs	r3, r3, #3
    97bc:	623b      	str	r3, [r7, #32]

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    97be:	2010      	movs	r0, #16
    97c0:	f00f ff11 	bl	195e6 <chunksz>
    97c4:	4602      	mov	r2, r0
    97c6:	6a3b      	ldr	r3, [r7, #32]
    97c8:	4293      	cmp	r3, r2
    97ca:	d80e      	bhi.n	97ea <sys_heap_init+0x92>
    97cc:	f240 13fb 	movw	r3, #507	; 0x1fb
    97d0:	4a41      	ldr	r2, [pc, #260]	; (98d8 <sys_heap_init+0x180>)
    97d2:	4945      	ldr	r1, [pc, #276]	; (98e8 <sys_heap_init+0x190>)
    97d4:	4842      	ldr	r0, [pc, #264]	; (98e0 <sys_heap_init+0x188>)
    97d6:	f010 fbed 	bl	19fb4 <assert_print>
    97da:	4842      	ldr	r0, [pc, #264]	; (98e4 <sys_heap_init+0x18c>)
    97dc:	f010 fbea 	bl	19fb4 <assert_print>
    97e0:	f240 11fb 	movw	r1, #507	; 0x1fb
    97e4:	483c      	ldr	r0, [pc, #240]	; (98d8 <sys_heap_init+0x180>)
    97e6:	f010 fbd5 	bl	19f94 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
    97ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97ec:	61fb      	str	r3, [r7, #28]
	heap->heap = h;
    97ee:	68fb      	ldr	r3, [r7, #12]
    97f0:	69fa      	ldr	r2, [r7, #28]
    97f2:	601a      	str	r2, [r3, #0]
	h->end_chunk = heap_sz;
    97f4:	69fb      	ldr	r3, [r7, #28]
    97f6:	6a3a      	ldr	r2, [r7, #32]
    97f8:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
    97fa:	69fb      	ldr	r3, [r7, #28]
    97fc:	2200      	movs	r2, #0
    97fe:	60da      	str	r2, [r3, #12]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    9800:	6a39      	ldr	r1, [r7, #32]
    9802:	69f8      	ldr	r0, [r7, #28]
    9804:	f00f ff1b 	bl	1963e <bucket_idx>
    9808:	4603      	mov	r3, r0
    980a:	3301      	adds	r3, #1
    980c:	61bb      	str	r3, [r7, #24]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    980e:	69bb      	ldr	r3, [r7, #24]
    9810:	3304      	adds	r3, #4
    9812:	009b      	lsls	r3, r3, #2
    9814:	4618      	mov	r0, r3
    9816:	f00f fee6 	bl	195e6 <chunksz>
    981a:	6178      	str	r0, [r7, #20]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    981c:	69f8      	ldr	r0, [r7, #28]
    981e:	f00f ff01 	bl	19624 <min_chunk_size>
    9822:	4602      	mov	r2, r0
    9824:	697b      	ldr	r3, [r7, #20]
    9826:	4413      	add	r3, r2
    9828:	6a3a      	ldr	r2, [r7, #32]
    982a:	429a      	cmp	r2, r3
    982c:	d20e      	bcs.n	984c <sys_heap_init+0xf4>
    982e:	f44f 7303 	mov.w	r3, #524	; 0x20c
    9832:	4a29      	ldr	r2, [pc, #164]	; (98d8 <sys_heap_init+0x180>)
    9834:	492d      	ldr	r1, [pc, #180]	; (98ec <sys_heap_init+0x194>)
    9836:	482a      	ldr	r0, [pc, #168]	; (98e0 <sys_heap_init+0x188>)
    9838:	f010 fbbc 	bl	19fb4 <assert_print>
    983c:	4829      	ldr	r0, [pc, #164]	; (98e4 <sys_heap_init+0x18c>)
    983e:	f010 fbb9 	bl	19fb4 <assert_print>
    9842:	f44f 7103 	mov.w	r1, #524	; 0x20c
    9846:	4824      	ldr	r0, [pc, #144]	; (98d8 <sys_heap_init+0x180>)
    9848:	f010 fba4 	bl	19f94 <assert_post_action>

	for (int i = 0; i < nb_buckets; i++) {
    984c:	2300      	movs	r3, #0
    984e:	62fb      	str	r3, [r7, #44]	; 0x2c
    9850:	e008      	b.n	9864 <sys_heap_init+0x10c>
		h->buckets[i].next = 0;
    9852:	69fb      	ldr	r3, [r7, #28]
    9854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9856:	3204      	adds	r2, #4
    9858:	2100      	movs	r1, #0
    985a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    985e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9860:	3301      	adds	r3, #1
    9862:	62fb      	str	r3, [r7, #44]	; 0x2c
    9864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9866:	69bb      	ldr	r3, [r7, #24]
    9868:	429a      	cmp	r2, r3
    986a:	dbf2      	blt.n	9852 <sys_heap_init+0xfa>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    986c:	697a      	ldr	r2, [r7, #20]
    986e:	2100      	movs	r1, #0
    9870:	69f8      	ldr	r0, [r7, #28]
    9872:	f00f fdfa 	bl	1946a <set_chunk_size>
	set_left_chunk_size(h, 0, 0);
    9876:	2200      	movs	r2, #0
    9878:	2100      	movs	r1, #0
    987a:	69f8      	ldr	r0, [r7, #28]
    987c:	f00f fe65 	bl	1954a <set_left_chunk_size>
	set_chunk_used(h, 0, true);
    9880:	2201      	movs	r2, #1
    9882:	2100      	movs	r1, #0
    9884:	69f8      	ldr	r0, [r7, #28]
    9886:	f00f fdab 	bl	193e0 <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    988a:	6a3a      	ldr	r2, [r7, #32]
    988c:	697b      	ldr	r3, [r7, #20]
    988e:	1ad3      	subs	r3, r2, r3
    9890:	461a      	mov	r2, r3
    9892:	6979      	ldr	r1, [r7, #20]
    9894:	69f8      	ldr	r0, [r7, #28]
    9896:	f00f fde8 	bl	1946a <set_chunk_size>
	set_left_chunk_size(h, chunk0_size, chunk0_size);
    989a:	697a      	ldr	r2, [r7, #20]
    989c:	6979      	ldr	r1, [r7, #20]
    989e:	69f8      	ldr	r0, [r7, #28]
    98a0:	f00f fe53 	bl	1954a <set_left_chunk_size>

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
    98a4:	2200      	movs	r2, #0
    98a6:	6a39      	ldr	r1, [r7, #32]
    98a8:	69f8      	ldr	r0, [r7, #28]
    98aa:	f00f fdde 	bl	1946a <set_chunk_size>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
    98ae:	6a3a      	ldr	r2, [r7, #32]
    98b0:	697b      	ldr	r3, [r7, #20]
    98b2:	1ad3      	subs	r3, r2, r3
    98b4:	461a      	mov	r2, r3
    98b6:	6a39      	ldr	r1, [r7, #32]
    98b8:	69f8      	ldr	r0, [r7, #28]
    98ba:	f00f fe46 	bl	1954a <set_left_chunk_size>
	set_chunk_used(h, heap_sz, true);
    98be:	2201      	movs	r2, #1
    98c0:	6a39      	ldr	r1, [r7, #32]
    98c2:	69f8      	ldr	r0, [r7, #28]
    98c4:	f00f fd8c 	bl	193e0 <set_chunk_used>

	free_list_add(h, chunk0_size);
    98c8:	6979      	ldr	r1, [r7, #20]
    98ca:	69f8      	ldr	r0, [r7, #28]
    98cc:	f00f ff9e 	bl	1980c <free_list_add>
}
    98d0:	bf00      	nop
    98d2:	3730      	adds	r7, #48	; 0x30
    98d4:	46bd      	mov	sp, r7
    98d6:	bd80      	pop	{r7, pc}
    98d8:	00020c40 	.word	0x00020c40
    98dc:	00020d70 	.word	0x00020d70
    98e0:	00020c78 	.word	0x00020c78
    98e4:	00020d94 	.word	0x00020d94
    98e8:	00020db0 	.word	0x00020db0
    98ec:	00020ddc 	.word	0x00020ddc

000098f0 <transition_complete>:
			  int evt,
			  k_spinlock_key_t key);

static void transition_complete(struct onoff_manager *mgr,
				int res)
{
    98f0:	b580      	push	{r7, lr}
    98f2:	b08a      	sub	sp, #40	; 0x28
    98f4:	af00      	add	r7, sp, #0
    98f6:	6078      	str	r0, [r7, #4]
    98f8:	6039      	str	r1, [r7, #0]
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    98fa:	687b      	ldr	r3, [r7, #4]
    98fc:	3314      	adds	r3, #20
    98fe:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    9900:	f04f 0320 	mov.w	r3, #32
    9904:	f3ef 8211 	mrs	r2, BASEPRI
    9908:	f383 8812 	msr	BASEPRI_MAX, r3
    990c:	f3bf 8f6f 	isb	sy
    9910:	623a      	str	r2, [r7, #32]
    9912:	61fb      	str	r3, [r7, #28]
	return key;
    9914:	6a3b      	ldr	r3, [r7, #32]

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    9916:	60fb      	str	r3, [r7, #12]
    9918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    991a:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
    991c:	69b8      	ldr	r0, [r7, #24]
    991e:	f009 fffd 	bl	1391c <z_spin_lock_valid>
    9922:	4603      	mov	r3, r0
    9924:	f083 0301 	eor.w	r3, r3, #1
    9928:	b2db      	uxtb	r3, r3
    992a:	2b00      	cmp	r3, #0
    992c:	d00d      	beq.n	994a <transition_complete+0x5a>
    992e:	2372      	movs	r3, #114	; 0x72
    9930:	4a10      	ldr	r2, [pc, #64]	; (9974 <transition_complete+0x84>)
    9932:	4911      	ldr	r1, [pc, #68]	; (9978 <transition_complete+0x88>)
    9934:	4811      	ldr	r0, [pc, #68]	; (997c <transition_complete+0x8c>)
    9936:	f010 fb3d 	bl	19fb4 <assert_print>
    993a:	69b9      	ldr	r1, [r7, #24]
    993c:	4810      	ldr	r0, [pc, #64]	; (9980 <transition_complete+0x90>)
    993e:	f010 fb39 	bl	19fb4 <assert_print>
    9942:	2172      	movs	r1, #114	; 0x72
    9944:	480b      	ldr	r0, [pc, #44]	; (9974 <transition_complete+0x84>)
    9946:	f010 fb25 	bl	19f94 <assert_post_action>
}
    994a:	bf00      	nop
    994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    994e:	617b      	str	r3, [r7, #20]
	z_spin_lock_set_owner(l);
    9950:	6978      	ldr	r0, [r7, #20]
    9952:	f00a f81b 	bl	1398c <z_spin_lock_set_owner>
}
    9956:	bf00      	nop
		arch_spin_relax();
	}
#endif
	z_spinlock_validate_post(l);

	return k;
    9958:	68fb      	ldr	r3, [r7, #12]
    995a:	613b      	str	r3, [r7, #16]

	mgr->last_res = res;
    995c:	687b      	ldr	r3, [r7, #4]
    995e:	683a      	ldr	r2, [r7, #0]
    9960:	619a      	str	r2, [r3, #24]
	process_event(mgr, EVT_COMPLETE, key);
    9962:	693a      	ldr	r2, [r7, #16]
    9964:	2101      	movs	r1, #1
    9966:	6878      	ldr	r0, [r7, #4]
    9968:	f000 f8ba 	bl	9ae0 <process_event>
}
    996c:	bf00      	nop
    996e:	3728      	adds	r7, #40	; 0x28
    9970:	46bd      	mov	sp, r7
    9972:	bd80      	pop	{r7, pc}
    9974:	00020e08 	.word	0x00020e08
    9978:	00020e38 	.word	0x00020e38
    997c:	00020e50 	.word	0x00020e50
    9980:	00020e70 	.word	0x00020e70

00009984 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    9984:	b580      	push	{r7, lr}
    9986:	b086      	sub	sp, #24
    9988:	af00      	add	r7, sp, #0
    998a:	60f8      	str	r0, [r7, #12]
    998c:	60b9      	str	r1, [r7, #8]
    998e:	607a      	str	r2, [r7, #4]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9990:	68fb      	ldr	r3, [r7, #12]
    9992:	8b9b      	ldrh	r3, [r3, #28]
    9994:	f003 0307 	and.w	r3, r3, #7
    9998:	613b      	str	r3, [r7, #16]

	if (res < 0) {
    999a:	687b      	ldr	r3, [r7, #4]
    999c:	2b00      	cmp	r3, #0
    999e:	da0e      	bge.n	99be <process_complete+0x3a>
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
    99a0:	68bb      	ldr	r3, [r7, #8]
    99a2:	68fa      	ldr	r2, [r7, #12]
    99a4:	e892 0003 	ldmia.w	r2, {r0, r1}
    99a8:	e883 0003 	stmia.w	r3, {r0, r1}
		sys_slist_init(&mgr->clients);
    99ac:	68fb      	ldr	r3, [r7, #12]
    99ae:	4618      	mov	r0, r3
    99b0:	f010 f8bd 	bl	19b2e <sys_slist_init>
		set_state(mgr, ONOFF_STATE_ERROR);
    99b4:	2101      	movs	r1, #1
    99b6:	68f8      	ldr	r0, [r7, #12]
    99b8:	f010 f989 	bl	19cce <set_state>
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
	}
}
    99bc:	e084      	b.n	9ac8 <process_complete+0x144>
	} else if ((state == ONOFF_STATE_TO_ON)
    99be:	693b      	ldr	r3, [r7, #16]
    99c0:	2b06      	cmp	r3, #6
    99c2:	d002      	beq.n	99ca <process_complete+0x46>
		   || (state == ONOFF_STATE_RESETTING)) {
    99c4:	693b      	ldr	r3, [r7, #16]
    99c6:	2b05      	cmp	r3, #5
    99c8:	d15d      	bne.n	9a86 <process_complete+0x102>
		*clients = mgr->clients;
    99ca:	68bb      	ldr	r3, [r7, #8]
    99cc:	68fa      	ldr	r2, [r7, #12]
    99ce:	e892 0003 	ldmia.w	r2, {r0, r1}
    99d2:	e883 0003 	stmia.w	r3, {r0, r1}
		sys_slist_init(&mgr->clients);
    99d6:	68fb      	ldr	r3, [r7, #12]
    99d8:	4618      	mov	r0, r3
    99da:	f010 f8a8 	bl	19b2e <sys_slist_init>
		if (state == ONOFF_STATE_TO_ON) {
    99de:	693b      	ldr	r3, [r7, #16]
    99e0:	2b06      	cmp	r3, #6
    99e2:	d12f      	bne.n	9a44 <process_complete+0xc0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    99e4:	68b8      	ldr	r0, [r7, #8]
    99e6:	f010 f8e3 	bl	19bb0 <sys_slist_peek_head>
    99ea:	4603      	mov	r3, r0
    99ec:	2b00      	cmp	r3, #0
    99ee:	d004      	beq.n	99fa <process_complete+0x76>
    99f0:	68b8      	ldr	r0, [r7, #8]
    99f2:	f010 f8dd 	bl	19bb0 <sys_slist_peek_head>
    99f6:	4603      	mov	r3, r0
    99f8:	e000      	b.n	99fc <process_complete+0x78>
    99fa:	2300      	movs	r3, #0
    99fc:	617b      	str	r3, [r7, #20]
    99fe:	e019      	b.n	9a34 <process_complete+0xb0>
				mgr->refs += 1U;
    9a00:	68fb      	ldr	r3, [r7, #12]
    9a02:	8bdb      	ldrh	r3, [r3, #30]
    9a04:	3301      	adds	r3, #1
    9a06:	b29a      	uxth	r2, r3
    9a08:	68fb      	ldr	r3, [r7, #12]
    9a0a:	83da      	strh	r2, [r3, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9a0c:	697b      	ldr	r3, [r7, #20]
    9a0e:	2b00      	cmp	r3, #0
    9a10:	d00e      	beq.n	9a30 <process_complete+0xac>
    9a12:	697b      	ldr	r3, [r7, #20]
    9a14:	4618      	mov	r0, r3
    9a16:	f010 f8fe 	bl	19c16 <sys_slist_peek_next>
    9a1a:	4603      	mov	r3, r0
    9a1c:	2b00      	cmp	r3, #0
    9a1e:	d005      	beq.n	9a2c <process_complete+0xa8>
    9a20:	697b      	ldr	r3, [r7, #20]
    9a22:	4618      	mov	r0, r3
    9a24:	f010 f8f7 	bl	19c16 <sys_slist_peek_next>
    9a28:	4603      	mov	r3, r0
    9a2a:	e002      	b.n	9a32 <process_complete+0xae>
    9a2c:	2300      	movs	r3, #0
    9a2e:	e000      	b.n	9a32 <process_complete+0xae>
    9a30:	2300      	movs	r3, #0
    9a32:	617b      	str	r3, [r7, #20]
    9a34:	697b      	ldr	r3, [r7, #20]
    9a36:	2b00      	cmp	r3, #0
    9a38:	d1e2      	bne.n	9a00 <process_complete+0x7c>
			set_state(mgr, ONOFF_STATE_ON);
    9a3a:	2102      	movs	r1, #2
    9a3c:	68f8      	ldr	r0, [r7, #12]
    9a3e:	f010 f946 	bl	19cce <set_state>
    9a42:	e012      	b.n	9a6a <process_complete+0xe6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    9a44:	693b      	ldr	r3, [r7, #16]
    9a46:	2b05      	cmp	r3, #5
    9a48:	d00b      	beq.n	9a62 <process_complete+0xde>
    9a4a:	f240 1309 	movw	r3, #265	; 0x109
    9a4e:	4a20      	ldr	r2, [pc, #128]	; (9ad0 <process_complete+0x14c>)
    9a50:	4920      	ldr	r1, [pc, #128]	; (9ad4 <process_complete+0x150>)
    9a52:	4821      	ldr	r0, [pc, #132]	; (9ad8 <process_complete+0x154>)
    9a54:	f010 faae 	bl	19fb4 <assert_print>
    9a58:	f240 1109 	movw	r1, #265	; 0x109
    9a5c:	481c      	ldr	r0, [pc, #112]	; (9ad0 <process_complete+0x14c>)
    9a5e:	f010 fa99 	bl	19f94 <assert_post_action>
			set_state(mgr, ONOFF_STATE_OFF);
    9a62:	2100      	movs	r1, #0
    9a64:	68f8      	ldr	r0, [r7, #12]
    9a66:	f010 f932 	bl	19cce <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    9a6a:	68f8      	ldr	r0, [r7, #12]
    9a6c:	f010 fa1c 	bl	19ea8 <process_recheck>
    9a70:	4603      	mov	r3, r0
    9a72:	2b00      	cmp	r3, #0
    9a74:	d028      	beq.n	9ac8 <process_complete+0x144>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9a76:	68fb      	ldr	r3, [r7, #12]
    9a78:	8b9b      	ldrh	r3, [r3, #28]
    9a7a:	f043 0320 	orr.w	r3, r3, #32
    9a7e:	b29a      	uxth	r2, r3
    9a80:	68fb      	ldr	r3, [r7, #12]
    9a82:	839a      	strh	r2, [r3, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    9a84:	e020      	b.n	9ac8 <process_complete+0x144>
	} else if (state == ONOFF_STATE_TO_OFF) {
    9a86:	693b      	ldr	r3, [r7, #16]
    9a88:	2b04      	cmp	r3, #4
    9a8a:	d111      	bne.n	9ab0 <process_complete+0x12c>
		set_state(mgr, ONOFF_STATE_OFF);
    9a8c:	2100      	movs	r1, #0
    9a8e:	68f8      	ldr	r0, [r7, #12]
    9a90:	f010 f91d 	bl	19cce <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    9a94:	68f8      	ldr	r0, [r7, #12]
    9a96:	f010 fa07 	bl	19ea8 <process_recheck>
    9a9a:	4603      	mov	r3, r0
    9a9c:	2b00      	cmp	r3, #0
    9a9e:	d013      	beq.n	9ac8 <process_complete+0x144>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9aa0:	68fb      	ldr	r3, [r7, #12]
    9aa2:	8b9b      	ldrh	r3, [r3, #28]
    9aa4:	f043 0320 	orr.w	r3, r3, #32
    9aa8:	b29a      	uxth	r2, r3
    9aaa:	68fb      	ldr	r3, [r7, #12]
    9aac:	839a      	strh	r2, [r3, #28]
}
    9aae:	e00b      	b.n	9ac8 <process_complete+0x144>
		__ASSERT_NO_MSG(false);
    9ab0:	f240 131b 	movw	r3, #283	; 0x11b
    9ab4:	4a06      	ldr	r2, [pc, #24]	; (9ad0 <process_complete+0x14c>)
    9ab6:	4909      	ldr	r1, [pc, #36]	; (9adc <process_complete+0x158>)
    9ab8:	4807      	ldr	r0, [pc, #28]	; (9ad8 <process_complete+0x154>)
    9aba:	f010 fa7b 	bl	19fb4 <assert_print>
    9abe:	f240 111b 	movw	r1, #283	; 0x11b
    9ac2:	4803      	ldr	r0, [pc, #12]	; (9ad0 <process_complete+0x14c>)
    9ac4:	f010 fa66 	bl	19f94 <assert_post_action>
}
    9ac8:	bf00      	nop
    9aca:	3718      	adds	r7, #24
    9acc:	46bd      	mov	sp, r7
    9ace:	bd80      	pop	{r7, pc}
    9ad0:	00020e88 	.word	0x00020e88
    9ad4:	00020eac 	.word	0x00020eac
    9ad8:	00020e50 	.word	0x00020e50
    9adc:	00020ed4 	.word	0x00020ed4

00009ae0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    9ae0:	b580      	push	{r7, lr}
    9ae2:	b098      	sub	sp, #96	; 0x60
    9ae4:	af00      	add	r7, sp, #0
    9ae6:	60f8      	str	r0, [r7, #12]
    9ae8:	60b9      	str	r1, [r7, #8]
    9aea:	607a      	str	r2, [r7, #4]
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9aec:	68fb      	ldr	r3, [r7, #12]
    9aee:	8b9b      	ldrh	r3, [r3, #28]
    9af0:	f003 0307 	and.w	r3, r3, #7
    9af4:	65fb      	str	r3, [r7, #92]	; 0x5c
	int res = 0;
    9af6:	2300      	movs	r3, #0
    9af8:	65bb      	str	r3, [r7, #88]	; 0x58
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    9afa:	68fb      	ldr	r3, [r7, #12]
    9afc:	8b9b      	ldrh	r3, [r3, #28]
    9afe:	f003 0308 	and.w	r3, r3, #8
    9b02:	2b00      	cmp	r3, #0
    9b04:	bf14      	ite	ne
    9b06:	2301      	movne	r3, #1
    9b08:	2300      	moveq	r3, #0
    9b0a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	__ASSERT_NO_MSG(evt != EVT_NOP);
    9b0e:	68bb      	ldr	r3, [r7, #8]
    9b10:	2b00      	cmp	r3, #0
    9b12:	d10b      	bne.n	9b2c <process_event+0x4c>
    9b14:	f240 1333 	movw	r3, #307	; 0x133
    9b18:	4a92      	ldr	r2, [pc, #584]	; (9d64 <process_event+0x284>)
    9b1a:	4993      	ldr	r1, [pc, #588]	; (9d68 <process_event+0x288>)
    9b1c:	4893      	ldr	r0, [pc, #588]	; (9d6c <process_event+0x28c>)
    9b1e:	f010 fa49 	bl	19fb4 <assert_print>
    9b22:	f240 1133 	movw	r1, #307	; 0x133
    9b26:	488f      	ldr	r0, [pc, #572]	; (9d64 <process_event+0x284>)
    9b28:	f010 fa34 	bl	19f94 <assert_post_action>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    9b2c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
    9b30:	2b00      	cmp	r3, #0
    9b32:	d021      	beq.n	9b78 <process_event+0x98>
		if (evt == EVT_COMPLETE) {
    9b34:	68bb      	ldr	r3, [r7, #8]
    9b36:	2b01      	cmp	r3, #1
    9b38:	d107      	bne.n	9b4a <process_event+0x6a>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    9b3a:	68fb      	ldr	r3, [r7, #12]
    9b3c:	8b9b      	ldrh	r3, [r3, #28]
    9b3e:	f043 0310 	orr.w	r3, r3, #16
    9b42:	b29a      	uxth	r2, r3
    9b44:	68fb      	ldr	r3, [r7, #12]
    9b46:	839a      	strh	r2, [r3, #28]
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
		}

		goto out;
    9b48:	e1f7      	b.n	9f3a <process_event+0x45a>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    9b4a:	68bb      	ldr	r3, [r7, #8]
    9b4c:	2b02      	cmp	r3, #2
    9b4e:	d00b      	beq.n	9b68 <process_event+0x88>
    9b50:	f44f 739e 	mov.w	r3, #316	; 0x13c
    9b54:	4a83      	ldr	r2, [pc, #524]	; (9d64 <process_event+0x284>)
    9b56:	4986      	ldr	r1, [pc, #536]	; (9d70 <process_event+0x290>)
    9b58:	4884      	ldr	r0, [pc, #528]	; (9d6c <process_event+0x28c>)
    9b5a:	f010 fa2b 	bl	19fb4 <assert_print>
    9b5e:	f44f 719e 	mov.w	r1, #316	; 0x13c
    9b62:	4880      	ldr	r0, [pc, #512]	; (9d64 <process_event+0x284>)
    9b64:	f010 fa16 	bl	19f94 <assert_post_action>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9b68:	68fb      	ldr	r3, [r7, #12]
    9b6a:	8b9b      	ldrh	r3, [r3, #28]
    9b6c:	f043 0320 	orr.w	r3, r3, #32
    9b70:	b29a      	uxth	r2, r3
    9b72:	68fb      	ldr	r3, [r7, #12]
    9b74:	839a      	strh	r2, [r3, #28]
		goto out;
    9b76:	e1e0      	b.n	9f3a <process_event+0x45a>
	}

	sys_slist_init(&clients);
    9b78:	f107 0320 	add.w	r3, r7, #32
    9b7c:	4618      	mov	r0, r3
    9b7e:	f00f ffd6 	bl	19b2e <sys_slist_init>
	do {
		onoff_transition_fn transit = NULL;
    9b82:	2300      	movs	r3, #0
    9b84:	657b      	str	r3, [r7, #84]	; 0x54

		if (evt == EVT_RECHECK) {
    9b86:	68bb      	ldr	r3, [r7, #8]
    9b88:	2b02      	cmp	r3, #2
    9b8a:	d103      	bne.n	9b94 <process_event+0xb4>
			evt = process_recheck(mgr);
    9b8c:	68f8      	ldr	r0, [r7, #12]
    9b8e:	f010 f98b 	bl	19ea8 <process_recheck>
    9b92:	60b8      	str	r0, [r7, #8]
		}

		if (evt == EVT_NOP) {
    9b94:	68bb      	ldr	r3, [r7, #8]
    9b96:	2b00      	cmp	r3, #0
    9b98:	f000 81ce 	beq.w	9f38 <process_event+0x458>
			break;
		}

		res = 0;
    9b9c:	2300      	movs	r3, #0
    9b9e:	65bb      	str	r3, [r7, #88]	; 0x58
		if (evt == EVT_COMPLETE) {
    9ba0:	68bb      	ldr	r3, [r7, #8]
    9ba2:	2b01      	cmp	r3, #1
    9ba4:	d10a      	bne.n	9bbc <process_event+0xdc>
			res = mgr->last_res;
    9ba6:	68fb      	ldr	r3, [r7, #12]
    9ba8:	699b      	ldr	r3, [r3, #24]
    9baa:	65bb      	str	r3, [r7, #88]	; 0x58
			process_complete(mgr, &clients, res);
    9bac:	f107 0320 	add.w	r3, r7, #32
    9bb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
    9bb2:	4619      	mov	r1, r3
    9bb4:	68f8      	ldr	r0, [r7, #12]
    9bb6:	f7ff fee5 	bl	9984 <process_complete>
    9bba:	e0bf      	b.n	9d3c <process_event+0x25c>
			/* NB: This can trigger a RECHECK */
		} else if (evt == EVT_START) {
    9bbc:	68bb      	ldr	r3, [r7, #8]
    9bbe:	2b03      	cmp	r3, #3
    9bc0:	d139      	bne.n	9c36 <process_event+0x156>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    9bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    9bc4:	2b00      	cmp	r3, #0
    9bc6:	d00b      	beq.n	9be0 <process_event+0x100>
    9bc8:	f44f 73ab 	mov.w	r3, #342	; 0x156
    9bcc:	4a65      	ldr	r2, [pc, #404]	; (9d64 <process_event+0x284>)
    9bce:	4969      	ldr	r1, [pc, #420]	; (9d74 <process_event+0x294>)
    9bd0:	4866      	ldr	r0, [pc, #408]	; (9d6c <process_event+0x28c>)
    9bd2:	f010 f9ef 	bl	19fb4 <assert_print>
    9bd6:	f44f 71ab 	mov.w	r1, #342	; 0x156
    9bda:	4862      	ldr	r0, [pc, #392]	; (9d64 <process_event+0x284>)
    9bdc:	f010 f9da 	bl	19f94 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    9be0:	68fb      	ldr	r3, [r7, #12]
    9be2:	4618      	mov	r0, r3
    9be4:	f00f fffa 	bl	19bdc <sys_slist_is_empty>
    9be8:	4603      	mov	r3, r0
    9bea:	2b00      	cmp	r3, #0
    9bec:	d00b      	beq.n	9c06 <process_event+0x126>
    9bee:	f240 1357 	movw	r3, #343	; 0x157
    9bf2:	4a5c      	ldr	r2, [pc, #368]	; (9d64 <process_event+0x284>)
    9bf4:	4960      	ldr	r1, [pc, #384]	; (9d78 <process_event+0x298>)
    9bf6:	485d      	ldr	r0, [pc, #372]	; (9d6c <process_event+0x28c>)
    9bf8:	f010 f9dc 	bl	19fb4 <assert_print>
    9bfc:	f240 1157 	movw	r1, #343	; 0x157
    9c00:	4858      	ldr	r0, [pc, #352]	; (9d64 <process_event+0x284>)
    9c02:	f010 f9c7 	bl	19f94 <assert_post_action>

			transit = mgr->transitions->start;
    9c06:	68fb      	ldr	r3, [r7, #12]
    9c08:	691b      	ldr	r3, [r3, #16]
    9c0a:	681b      	ldr	r3, [r3, #0]
    9c0c:	657b      	str	r3, [r7, #84]	; 0x54
			__ASSERT_NO_MSG(transit != NULL);
    9c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9c10:	2b00      	cmp	r3, #0
    9c12:	d10b      	bne.n	9c2c <process_event+0x14c>
    9c14:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    9c18:	4a52      	ldr	r2, [pc, #328]	; (9d64 <process_event+0x284>)
    9c1a:	4958      	ldr	r1, [pc, #352]	; (9d7c <process_event+0x29c>)
    9c1c:	4853      	ldr	r0, [pc, #332]	; (9d6c <process_event+0x28c>)
    9c1e:	f010 f9c9 	bl	19fb4 <assert_print>
    9c22:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    9c26:	484f      	ldr	r0, [pc, #316]	; (9d64 <process_event+0x284>)
    9c28:	f010 f9b4 	bl	19f94 <assert_post_action>
			set_state(mgr, ONOFF_STATE_TO_ON);
    9c2c:	2106      	movs	r1, #6
    9c2e:	68f8      	ldr	r0, [r7, #12]
    9c30:	f010 f84d 	bl	19cce <set_state>
    9c34:	e082      	b.n	9d3c <process_event+0x25c>
		} else if (evt == EVT_STOP) {
    9c36:	68bb      	ldr	r3, [r7, #8]
    9c38:	2b04      	cmp	r3, #4
    9c3a:	d136      	bne.n	9caa <process_event+0x1ca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    9c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    9c3e:	2b02      	cmp	r3, #2
    9c40:	d00b      	beq.n	9c5a <process_event+0x17a>
    9c42:	f240 135d 	movw	r3, #349	; 0x15d
    9c46:	4a47      	ldr	r2, [pc, #284]	; (9d64 <process_event+0x284>)
    9c48:	494d      	ldr	r1, [pc, #308]	; (9d80 <process_event+0x2a0>)
    9c4a:	4848      	ldr	r0, [pc, #288]	; (9d6c <process_event+0x28c>)
    9c4c:	f010 f9b2 	bl	19fb4 <assert_print>
    9c50:	f240 115d 	movw	r1, #349	; 0x15d
    9c54:	4843      	ldr	r0, [pc, #268]	; (9d64 <process_event+0x284>)
    9c56:	f010 f99d 	bl	19f94 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    9c5a:	68fb      	ldr	r3, [r7, #12]
    9c5c:	8bdb      	ldrh	r3, [r3, #30]
    9c5e:	2b00      	cmp	r3, #0
    9c60:	d00b      	beq.n	9c7a <process_event+0x19a>
    9c62:	f44f 73af 	mov.w	r3, #350	; 0x15e
    9c66:	4a3f      	ldr	r2, [pc, #252]	; (9d64 <process_event+0x284>)
    9c68:	4946      	ldr	r1, [pc, #280]	; (9d84 <process_event+0x2a4>)
    9c6a:	4840      	ldr	r0, [pc, #256]	; (9d6c <process_event+0x28c>)
    9c6c:	f010 f9a2 	bl	19fb4 <assert_print>
    9c70:	f44f 71af 	mov.w	r1, #350	; 0x15e
    9c74:	483b      	ldr	r0, [pc, #236]	; (9d64 <process_event+0x284>)
    9c76:	f010 f98d 	bl	19f94 <assert_post_action>

			transit = mgr->transitions->stop;
    9c7a:	68fb      	ldr	r3, [r7, #12]
    9c7c:	691b      	ldr	r3, [r3, #16]
    9c7e:	685b      	ldr	r3, [r3, #4]
    9c80:	657b      	str	r3, [r7, #84]	; 0x54
			__ASSERT_NO_MSG(transit != NULL);
    9c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9c84:	2b00      	cmp	r3, #0
    9c86:	d10b      	bne.n	9ca0 <process_event+0x1c0>
    9c88:	f240 1361 	movw	r3, #353	; 0x161
    9c8c:	4a35      	ldr	r2, [pc, #212]	; (9d64 <process_event+0x284>)
    9c8e:	493b      	ldr	r1, [pc, #236]	; (9d7c <process_event+0x29c>)
    9c90:	4836      	ldr	r0, [pc, #216]	; (9d6c <process_event+0x28c>)
    9c92:	f010 f98f 	bl	19fb4 <assert_print>
    9c96:	f240 1161 	movw	r1, #353	; 0x161
    9c9a:	4832      	ldr	r0, [pc, #200]	; (9d64 <process_event+0x284>)
    9c9c:	f010 f97a 	bl	19f94 <assert_post_action>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    9ca0:	2104      	movs	r1, #4
    9ca2:	68f8      	ldr	r0, [r7, #12]
    9ca4:	f010 f813 	bl	19cce <set_state>
    9ca8:	e048      	b.n	9d3c <process_event+0x25c>
		} else if (evt == EVT_RESET) {
    9caa:	68bb      	ldr	r3, [r7, #8]
    9cac:	2b05      	cmp	r3, #5
    9cae:	d139      	bne.n	9d24 <process_event+0x244>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    9cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    9cb2:	2b01      	cmp	r3, #1
    9cb4:	d00b      	beq.n	9cce <process_event+0x1ee>
    9cb6:	f44f 73b2 	mov.w	r3, #356	; 0x164
    9cba:	4a2a      	ldr	r2, [pc, #168]	; (9d64 <process_event+0x284>)
    9cbc:	4932      	ldr	r1, [pc, #200]	; (9d88 <process_event+0x2a8>)
    9cbe:	482b      	ldr	r0, [pc, #172]	; (9d6c <process_event+0x28c>)
    9cc0:	f010 f978 	bl	19fb4 <assert_print>
    9cc4:	f44f 71b2 	mov.w	r1, #356	; 0x164
    9cc8:	4826      	ldr	r0, [pc, #152]	; (9d64 <process_event+0x284>)
    9cca:	f010 f963 	bl	19f94 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    9cce:	68fb      	ldr	r3, [r7, #12]
    9cd0:	4618      	mov	r0, r3
    9cd2:	f00f ff83 	bl	19bdc <sys_slist_is_empty>
    9cd6:	4603      	mov	r3, r0
    9cd8:	2b00      	cmp	r3, #0
    9cda:	d00b      	beq.n	9cf4 <process_event+0x214>
    9cdc:	f240 1365 	movw	r3, #357	; 0x165
    9ce0:	4a20      	ldr	r2, [pc, #128]	; (9d64 <process_event+0x284>)
    9ce2:	4925      	ldr	r1, [pc, #148]	; (9d78 <process_event+0x298>)
    9ce4:	4821      	ldr	r0, [pc, #132]	; (9d6c <process_event+0x28c>)
    9ce6:	f010 f965 	bl	19fb4 <assert_print>
    9cea:	f240 1165 	movw	r1, #357	; 0x165
    9cee:	481d      	ldr	r0, [pc, #116]	; (9d64 <process_event+0x284>)
    9cf0:	f010 f950 	bl	19f94 <assert_post_action>

			transit = mgr->transitions->reset;
    9cf4:	68fb      	ldr	r3, [r7, #12]
    9cf6:	691b      	ldr	r3, [r3, #16]
    9cf8:	689b      	ldr	r3, [r3, #8]
    9cfa:	657b      	str	r3, [r7, #84]	; 0x54
			__ASSERT_NO_MSG(transit != NULL);
    9cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9cfe:	2b00      	cmp	r3, #0
    9d00:	d10b      	bne.n	9d1a <process_event+0x23a>
    9d02:	f44f 73b4 	mov.w	r3, #360	; 0x168
    9d06:	4a17      	ldr	r2, [pc, #92]	; (9d64 <process_event+0x284>)
    9d08:	491c      	ldr	r1, [pc, #112]	; (9d7c <process_event+0x29c>)
    9d0a:	4818      	ldr	r0, [pc, #96]	; (9d6c <process_event+0x28c>)
    9d0c:	f010 f952 	bl	19fb4 <assert_print>
    9d10:	f44f 71b4 	mov.w	r1, #360	; 0x168
    9d14:	4813      	ldr	r0, [pc, #76]	; (9d64 <process_event+0x284>)
    9d16:	f010 f93d 	bl	19f94 <assert_post_action>
			set_state(mgr, ONOFF_STATE_RESETTING);
    9d1a:	2105      	movs	r1, #5
    9d1c:	68f8      	ldr	r0, [r7, #12]
    9d1e:	f00f ffd6 	bl	19cce <set_state>
    9d22:	e00b      	b.n	9d3c <process_event+0x25c>
		} else {
			__ASSERT_NO_MSG(false);
    9d24:	f240 136b 	movw	r3, #363	; 0x16b
    9d28:	4a0e      	ldr	r2, [pc, #56]	; (9d64 <process_event+0x284>)
    9d2a:	4918      	ldr	r1, [pc, #96]	; (9d8c <process_event+0x2ac>)
    9d2c:	480f      	ldr	r0, [pc, #60]	; (9d6c <process_event+0x28c>)
    9d2e:	f010 f941 	bl	19fb4 <assert_print>
    9d32:	f240 116b 	movw	r1, #363	; 0x16b
    9d36:	480b      	ldr	r0, [pc, #44]	; (9d64 <process_event+0x284>)
    9d38:	f010 f92c 	bl	19f94 <assert_post_action>
		/* Have to unlock and do something if any of:
		 * * We changed state and there are monitors;
		 * * We completed a transition and there are clients to notify;
		 * * We need to initiate a transition.
		 */
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9d3c:	68fb      	ldr	r3, [r7, #12]
    9d3e:	8b9b      	ldrh	r3, [r3, #28]
    9d40:	f003 0307 	and.w	r3, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    9d44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    9d46:	429a      	cmp	r2, r3
    9d48:	d022      	beq.n	9d90 <process_event+0x2b0>
    9d4a:	68fb      	ldr	r3, [r7, #12]
    9d4c:	3308      	adds	r3, #8
    9d4e:	4618      	mov	r0, r3
    9d50:	f00f ff44 	bl	19bdc <sys_slist_is_empty>
    9d54:	4603      	mov	r3, r0
    9d56:	f083 0301 	eor.w	r3, r3, #1
    9d5a:	b2db      	uxtb	r3, r3
    9d5c:	2b00      	cmp	r3, #0
    9d5e:	d017      	beq.n	9d90 <process_event+0x2b0>
    9d60:	2301      	movs	r3, #1
    9d62:	e016      	b.n	9d92 <process_event+0x2b2>
    9d64:	00020e88 	.word	0x00020e88
    9d68:	00020ed8 	.word	0x00020ed8
    9d6c:	00020e50 	.word	0x00020e50
    9d70:	00020ee8 	.word	0x00020ee8
    9d74:	00020efc 	.word	0x00020efc
    9d78:	00020f08 	.word	0x00020f08
    9d7c:	00020f2c 	.word	0x00020f2c
    9d80:	00020f44 	.word	0x00020f44
    9d84:	00020f5c 	.word	0x00020f5c
    9d88:	00020f6c 	.word	0x00020f6c
    9d8c:	00020ed4 	.word	0x00020ed4
    9d90:	2300      	movs	r3, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9d92:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
    9d96:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
    9d9a:	f003 0301 	and.w	r3, r3, #1
    9d9e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

		evt = EVT_NOP;
    9da2:	2300      	movs	r3, #0
    9da4:	60bb      	str	r3, [r7, #8]
		if (do_monitors
    9da6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
    9daa:	2b00      	cmp	r3, #0
    9dac:	d10e      	bne.n	9dcc <process_event+0x2ec>
		    || !sys_slist_is_empty(&clients)
    9dae:	f107 0320 	add.w	r3, r7, #32
    9db2:	4618      	mov	r0, r3
    9db4:	f00f ff12 	bl	19bdc <sys_slist_is_empty>
    9db8:	4603      	mov	r3, r0
    9dba:	f083 0301 	eor.w	r3, r3, #1
    9dbe:	b2db      	uxtb	r3, r3
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	d103      	bne.n	9dcc <process_event+0x2ec>
		    || (transit != NULL)) {
    9dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9dc6:	2b00      	cmp	r3, #0
    9dc8:	f000 808d 	beq.w	9ee6 <process_event+0x406>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    9dcc:	68fb      	ldr	r3, [r7, #12]
    9dce:	8b9b      	ldrh	r3, [r3, #28]
    9dd0:	f043 0308 	orr.w	r3, r3, #8
    9dd4:	b29b      	uxth	r3, r3
    9dd6:	64fb      	str	r3, [r7, #76]	; 0x4c

			mgr->flags = flags;
    9dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9dda:	b29a      	uxth	r2, r3
    9ddc:	68fb      	ldr	r3, [r7, #12]
    9dde:	839a      	strh	r2, [r3, #28]
			state = flags & ONOFF_STATE_MASK;
    9de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9de2:	f003 0307 	and.w	r3, r3, #7
    9de6:	65fb      	str	r3, [r7, #92]	; 0x5c

			k_spin_unlock(&mgr->lock, key);
    9de8:	68fb      	ldr	r3, [r7, #12]
    9dea:	3314      	adds	r3, #20
    9dec:	64bb      	str	r3, [r7, #72]	; 0x48
    9dee:	687b      	ldr	r3, [r7, #4]
    9df0:	617b      	str	r3, [r7, #20]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9df2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    9df4:	f009 fdae 	bl	13954 <z_spin_unlock_valid>
    9df8:	4603      	mov	r3, r0
    9dfa:	f083 0301 	eor.w	r3, r3, #1
    9dfe:	b2db      	uxtb	r3, r3
    9e00:	2b00      	cmp	r3, #0
    9e02:	d00d      	beq.n	9e20 <process_event+0x340>
    9e04:	23f0      	movs	r3, #240	; 0xf0
    9e06:	4a61      	ldr	r2, [pc, #388]	; (9f8c <process_event+0x4ac>)
    9e08:	4961      	ldr	r1, [pc, #388]	; (9f90 <process_event+0x4b0>)
    9e0a:	4862      	ldr	r0, [pc, #392]	; (9f94 <process_event+0x4b4>)
    9e0c:	f010 f8d2 	bl	19fb4 <assert_print>
    9e10:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    9e12:	4861      	ldr	r0, [pc, #388]	; (9f98 <process_event+0x4b8>)
    9e14:	f010 f8ce 	bl	19fb4 <assert_print>
    9e18:	21f0      	movs	r1, #240	; 0xf0
    9e1a:	485c      	ldr	r0, [pc, #368]	; (9f8c <process_event+0x4ac>)
    9e1c:	f010 f8ba 	bl	19f94 <assert_post_action>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    9e20:	697b      	ldr	r3, [r7, #20]
    9e22:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
    9e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9e26:	f383 8811 	msr	BASEPRI, r3
    9e2a:	f3bf 8f6f 	isb	sy
}
    9e2e:	bf00      	nop
}
    9e30:	bf00      	nop

			if (do_monitors) {
    9e32:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
    9e36:	2b00      	cmp	r3, #0
    9e38:	d004      	beq.n	9e44 <process_event+0x364>
				notify_monitors(mgr, state, res);
    9e3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    9e3c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    9e3e:	68f8      	ldr	r0, [r7, #12]
    9e40:	f00f ffa5 	bl	19d8e <notify_monitors>
			}

			if (!sys_slist_is_empty(&clients)) {
    9e44:	f107 0320 	add.w	r3, r7, #32
    9e48:	4618      	mov	r0, r3
    9e4a:	f00f fec7 	bl	19bdc <sys_slist_is_empty>
    9e4e:	4603      	mov	r3, r0
    9e50:	f083 0301 	eor.w	r3, r3, #1
    9e54:	b2db      	uxtb	r3, r3
    9e56:	2b00      	cmp	r3, #0
    9e58:	d006      	beq.n	9e68 <process_event+0x388>
				notify_all(mgr, &clients, state, res);
    9e5a:	f107 0120 	add.w	r1, r7, #32
    9e5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9e60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    9e62:	68f8      	ldr	r0, [r7, #12]
    9e64:	f00f fffe 	bl	19e64 <notify_all>
			}

			if (transit != NULL) {
    9e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9e6a:	2b00      	cmp	r3, #0
    9e6c:	d003      	beq.n	9e76 <process_event+0x396>
				transit(mgr, transition_complete);
    9e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9e70:	494a      	ldr	r1, [pc, #296]	; (9f9c <process_event+0x4bc>)
    9e72:	68f8      	ldr	r0, [r7, #12]
    9e74:	4798      	blx	r3
			}

			key = k_spin_lock(&mgr->lock);
    9e76:	68fb      	ldr	r3, [r7, #12]
    9e78:	3314      	adds	r3, #20
    9e7a:	643b      	str	r3, [r7, #64]	; 0x40
	__asm__ volatile(
    9e7c:	f04f 0320 	mov.w	r3, #32
    9e80:	f3ef 8211 	mrs	r2, BASEPRI
    9e84:	f383 8812 	msr	BASEPRI_MAX, r3
    9e88:	f3bf 8f6f 	isb	sy
    9e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
    9e8e:	63bb      	str	r3, [r7, #56]	; 0x38
	return key;
    9e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	k.key = arch_irq_lock();
    9e92:	61bb      	str	r3, [r7, #24]
    9e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9e96:	637b      	str	r3, [r7, #52]	; 0x34
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
    9e98:	6b78      	ldr	r0, [r7, #52]	; 0x34
    9e9a:	f009 fd3f 	bl	1391c <z_spin_lock_valid>
    9e9e:	4603      	mov	r3, r0
    9ea0:	f083 0301 	eor.w	r3, r3, #1
    9ea4:	b2db      	uxtb	r3, r3
    9ea6:	2b00      	cmp	r3, #0
    9ea8:	d00d      	beq.n	9ec6 <process_event+0x3e6>
    9eaa:	2372      	movs	r3, #114	; 0x72
    9eac:	4a37      	ldr	r2, [pc, #220]	; (9f8c <process_event+0x4ac>)
    9eae:	493c      	ldr	r1, [pc, #240]	; (9fa0 <process_event+0x4c0>)
    9eb0:	4838      	ldr	r0, [pc, #224]	; (9f94 <process_event+0x4b4>)
    9eb2:	f010 f87f 	bl	19fb4 <assert_print>
    9eb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
    9eb8:	483a      	ldr	r0, [pc, #232]	; (9fa4 <process_event+0x4c4>)
    9eba:	f010 f87b 	bl	19fb4 <assert_print>
    9ebe:	2172      	movs	r1, #114	; 0x72
    9ec0:	4832      	ldr	r0, [pc, #200]	; (9f8c <process_event+0x4ac>)
    9ec2:	f010 f867 	bl	19f94 <assert_post_action>
}
    9ec6:	bf00      	nop
    9ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9eca:	633b      	str	r3, [r7, #48]	; 0x30
	z_spin_lock_set_owner(l);
    9ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
    9ece:	f009 fd5d 	bl	1398c <z_spin_lock_set_owner>
}
    9ed2:	bf00      	nop
	return k;
    9ed4:	69bb      	ldr	r3, [r7, #24]
    9ed6:	607b      	str	r3, [r7, #4]
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    9ed8:	68fb      	ldr	r3, [r7, #12]
    9eda:	8b9b      	ldrh	r3, [r3, #28]
    9edc:	f023 0308 	bic.w	r3, r3, #8
    9ee0:	b29a      	uxth	r2, r3
    9ee2:	68fb      	ldr	r3, [r7, #12]
    9ee4:	839a      	strh	r2, [r3, #28]
		}

		/* Process deferred events.  Completion takes priority
		 * over recheck.
		 */
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    9ee6:	68fb      	ldr	r3, [r7, #12]
    9ee8:	8b9b      	ldrh	r3, [r3, #28]
    9eea:	f003 0310 	and.w	r3, r3, #16
    9eee:	2b00      	cmp	r3, #0
    9ef0:	d009      	beq.n	9f06 <process_event+0x426>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    9ef2:	68fb      	ldr	r3, [r7, #12]
    9ef4:	8b9b      	ldrh	r3, [r3, #28]
    9ef6:	f023 0310 	bic.w	r3, r3, #16
    9efa:	b29a      	uxth	r2, r3
    9efc:	68fb      	ldr	r3, [r7, #12]
    9efe:	839a      	strh	r2, [r3, #28]
			evt = EVT_COMPLETE;
    9f00:	2301      	movs	r3, #1
    9f02:	60bb      	str	r3, [r7, #8]
    9f04:	e00e      	b.n	9f24 <process_event+0x444>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    9f06:	68fb      	ldr	r3, [r7, #12]
    9f08:	8b9b      	ldrh	r3, [r3, #28]
    9f0a:	f003 0320 	and.w	r3, r3, #32
    9f0e:	2b00      	cmp	r3, #0
    9f10:	d008      	beq.n	9f24 <process_event+0x444>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    9f12:	68fb      	ldr	r3, [r7, #12]
    9f14:	8b9b      	ldrh	r3, [r3, #28]
    9f16:	f023 0320 	bic.w	r3, r3, #32
    9f1a:	b29a      	uxth	r2, r3
    9f1c:	68fb      	ldr	r3, [r7, #12]
    9f1e:	839a      	strh	r2, [r3, #28]
			evt = EVT_RECHECK;
    9f20:	2302      	movs	r3, #2
    9f22:	60bb      	str	r3, [r7, #8]
		} else {
			;
		}

		state = mgr->flags & ONOFF_STATE_MASK;
    9f24:	68fb      	ldr	r3, [r7, #12]
    9f26:	8b9b      	ldrh	r3, [r3, #28]
    9f28:	f003 0307 	and.w	r3, r3, #7
    9f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
	} while (evt != EVT_NOP);
    9f2e:	68bb      	ldr	r3, [r7, #8]
    9f30:	2b00      	cmp	r3, #0
    9f32:	f47f ae26 	bne.w	9b82 <process_event+0xa2>

out:
    9f36:	e000      	b.n	9f3a <process_event+0x45a>
			break;
    9f38:	bf00      	nop
	k_spin_unlock(&mgr->lock, key);
    9f3a:	68fb      	ldr	r3, [r7, #12]
    9f3c:	3314      	adds	r3, #20
    9f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    9f40:	687b      	ldr	r3, [r7, #4]
    9f42:	61fb      	str	r3, [r7, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9f46:	f009 fd05 	bl	13954 <z_spin_unlock_valid>
    9f4a:	4603      	mov	r3, r0
    9f4c:	f083 0301 	eor.w	r3, r3, #1
    9f50:	b2db      	uxtb	r3, r3
    9f52:	2b00      	cmp	r3, #0
    9f54:	d00d      	beq.n	9f72 <process_event+0x492>
    9f56:	23f0      	movs	r3, #240	; 0xf0
    9f58:	4a0c      	ldr	r2, [pc, #48]	; (9f8c <process_event+0x4ac>)
    9f5a:	490d      	ldr	r1, [pc, #52]	; (9f90 <process_event+0x4b0>)
    9f5c:	480d      	ldr	r0, [pc, #52]	; (9f94 <process_event+0x4b4>)
    9f5e:	f010 f829 	bl	19fb4 <assert_print>
    9f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    9f64:	480c      	ldr	r0, [pc, #48]	; (9f98 <process_event+0x4b8>)
    9f66:	f010 f825 	bl	19fb4 <assert_print>
    9f6a:	21f0      	movs	r1, #240	; 0xf0
    9f6c:	4807      	ldr	r0, [pc, #28]	; (9f8c <process_event+0x4ac>)
    9f6e:	f010 f811 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
    9f72:	69fb      	ldr	r3, [r7, #28]
    9f74:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
    9f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9f78:	f383 8811 	msr	BASEPRI, r3
    9f7c:	f3bf 8f6f 	isb	sy
}
    9f80:	bf00      	nop
}
    9f82:	bf00      	nop
}
    9f84:	bf00      	nop
    9f86:	3760      	adds	r7, #96	; 0x60
    9f88:	46bd      	mov	sp, r7
    9f8a:	bd80      	pop	{r7, pc}
    9f8c:	00020e08 	.word	0x00020e08
    9f90:	00020f84 	.word	0x00020f84
    9f94:	00020e50 	.word	0x00020e50
    9f98:	00020f9c 	.word	0x00020f9c
    9f9c:	000098f1 	.word	0x000098f1
    9fa0:	00020e38 	.word	0x00020e38
    9fa4:	00020e70 	.word	0x00020e70

00009fa8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    9fa8:	b580      	push	{r7, lr}
    9faa:	b090      	sub	sp, #64	; 0x40
    9fac:	af00      	add	r7, sp, #0
    9fae:	6078      	str	r0, [r7, #4]
    9fb0:	6039      	str	r1, [r7, #0]
	bool add_client = false;        /* add client to pending list */
    9fb2:	2300      	movs	r3, #0
    9fb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bool start = false;             /* trigger a start transition */
    9fb8:	2300      	movs	r3, #0
    9fba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	bool notify = false;            /* do client notification */
    9fbe:	2300      	movs	r3, #0
    9fc0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	int rv = validate_args(mgr, cli);
    9fc4:	6839      	ldr	r1, [r7, #0]
    9fc6:	6878      	ldr	r0, [r7, #4]
    9fc8:	f00f fe99 	bl	19cfe <validate_args>
    9fcc:	63b8      	str	r0, [r7, #56]	; 0x38

	if (rv < 0) {
    9fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9fd0:	2b00      	cmp	r3, #0
    9fd2:	da01      	bge.n	9fd8 <onoff_request+0x30>
		return rv;
    9fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9fd6:	e0bf      	b.n	a158 <onoff_request+0x1b0>
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    9fd8:	687b      	ldr	r3, [r7, #4]
    9fda:	3314      	adds	r3, #20
    9fdc:	633b      	str	r3, [r7, #48]	; 0x30
	__asm__ volatile(
    9fde:	f04f 0320 	mov.w	r3, #32
    9fe2:	f3ef 8211 	mrs	r2, BASEPRI
    9fe6:	f383 8812 	msr	BASEPRI_MAX, r3
    9fea:	f3bf 8f6f 	isb	sy
    9fee:	62fa      	str	r2, [r7, #44]	; 0x2c
    9ff0:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
    9ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = arch_irq_lock();
    9ff4:	60fb      	str	r3, [r7, #12]
    9ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9ff8:	627b      	str	r3, [r7, #36]	; 0x24
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
    9ffa:	6a78      	ldr	r0, [r7, #36]	; 0x24
    9ffc:	f009 fc8e 	bl	1391c <z_spin_lock_valid>
    a000:	4603      	mov	r3, r0
    a002:	f083 0301 	eor.w	r3, r3, #1
    a006:	b2db      	uxtb	r3, r3
    a008:	2b00      	cmp	r3, #0
    a00a:	d00d      	beq.n	a028 <onoff_request+0x80>
    a00c:	2372      	movs	r3, #114	; 0x72
    a00e:	4a54      	ldr	r2, [pc, #336]	; (a160 <onoff_request+0x1b8>)
    a010:	4954      	ldr	r1, [pc, #336]	; (a164 <onoff_request+0x1bc>)
    a012:	4855      	ldr	r0, [pc, #340]	; (a168 <onoff_request+0x1c0>)
    a014:	f00f ffce 	bl	19fb4 <assert_print>
    a018:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a01a:	4854      	ldr	r0, [pc, #336]	; (a16c <onoff_request+0x1c4>)
    a01c:	f00f ffca 	bl	19fb4 <assert_print>
    a020:	2172      	movs	r1, #114	; 0x72
    a022:	484f      	ldr	r0, [pc, #316]	; (a160 <onoff_request+0x1b8>)
    a024:	f00f ffb6 	bl	19f94 <assert_post_action>
}
    a028:	bf00      	nop
    a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a02c:	623b      	str	r3, [r7, #32]
	z_spin_lock_set_owner(l);
    a02e:	6a38      	ldr	r0, [r7, #32]
    a030:	f009 fcac 	bl	1398c <z_spin_lock_set_owner>
}
    a034:	bf00      	nop
	return k;
    a036:	68fb      	ldr	r3, [r7, #12]
    a038:	617b      	str	r3, [r7, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a03a:	687b      	ldr	r3, [r7, #4]
    a03c:	8b9b      	ldrh	r3, [r3, #28]
    a03e:	f003 0307 	and.w	r3, r3, #7
    a042:	637b      	str	r3, [r7, #52]	; 0x34

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a044:	687b      	ldr	r3, [r7, #4]
    a046:	8bdb      	ldrh	r3, [r3, #30]
    a048:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a04c:	4293      	cmp	r3, r2
    a04e:	d103      	bne.n	a058 <onoff_request+0xb0>
		rv = -EAGAIN;
    a050:	f06f 030a 	mvn.w	r3, #10
    a054:	63bb      	str	r3, [r7, #56]	; 0x38
		goto out;
    a056:	e03b      	b.n	a0d0 <onoff_request+0x128>
	}

	rv = state;
    a058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a05a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (state == ONOFF_STATE_ON) {
    a05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a05e:	2b02      	cmp	r3, #2
    a060:	d109      	bne.n	a076 <onoff_request+0xce>
		/* Increment reference count, notify in exit */
		notify = true;
    a062:	2301      	movs	r3, #1
    a064:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		mgr->refs += 1U;
    a068:	687b      	ldr	r3, [r7, #4]
    a06a:	8bdb      	ldrh	r3, [r3, #30]
    a06c:	3301      	adds	r3, #1
    a06e:	b29a      	uxth	r2, r3
    a070:	687b      	ldr	r3, [r7, #4]
    a072:	83da      	strh	r2, [r3, #30]
    a074:	e02c      	b.n	a0d0 <onoff_request+0x128>
	} else if ((state == ONOFF_STATE_OFF)
    a076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a078:	2b00      	cmp	r3, #0
    a07a:	d005      	beq.n	a088 <onoff_request+0xe0>
		   || (state == ONOFF_STATE_TO_OFF)
    a07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a07e:	2b04      	cmp	r3, #4
    a080:	d002      	beq.n	a088 <onoff_request+0xe0>
		   || (state == ONOFF_STATE_TO_ON)) {
    a082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a084:	2b06      	cmp	r3, #6
    a086:	d10a      	bne.n	a09e <onoff_request+0xf6>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
    a088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a08a:	2b00      	cmp	r3, #0
    a08c:	bf0c      	ite	eq
    a08e:	2301      	moveq	r3, #1
    a090:	2300      	movne	r3, #0
    a092:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		add_client = true;
    a096:	2301      	movs	r3, #1
    a098:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    a09c:	e018      	b.n	a0d0 <onoff_request+0x128>
	} else if (state == ONOFF_STATE_RESETTING) {
    a09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a0a0:	2b05      	cmp	r3, #5
    a0a2:	d103      	bne.n	a0ac <onoff_request+0x104>
		rv = -ENOTSUP;
    a0a4:	f06f 0385 	mvn.w	r3, #133	; 0x85
    a0a8:	63bb      	str	r3, [r7, #56]	; 0x38
    a0aa:	e011      	b.n	a0d0 <onoff_request+0x128>
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a0ae:	2b01      	cmp	r3, #1
    a0b0:	d00b      	beq.n	a0ca <onoff_request+0x122>
    a0b2:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    a0b6:	4a2e      	ldr	r2, [pc, #184]	; (a170 <onoff_request+0x1c8>)
    a0b8:	492e      	ldr	r1, [pc, #184]	; (a174 <onoff_request+0x1cc>)
    a0ba:	482b      	ldr	r0, [pc, #172]	; (a168 <onoff_request+0x1c0>)
    a0bc:	f00f ff7a 	bl	19fb4 <assert_print>
    a0c0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    a0c4:	482a      	ldr	r0, [pc, #168]	; (a170 <onoff_request+0x1c8>)
    a0c6:	f00f ff65 	bl	19f94 <assert_post_action>
		rv = -EIO;
    a0ca:	f06f 0304 	mvn.w	r3, #4
    a0ce:	63bb      	str	r3, [r7, #56]	; 0x38
	}

out:
	if (add_client) {
    a0d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    a0d4:	2b00      	cmp	r3, #0
    a0d6:	d005      	beq.n	a0e4 <onoff_request+0x13c>
		sys_slist_append(&mgr->clients, &cli->node);
    a0d8:	687b      	ldr	r3, [r7, #4]
    a0da:	683a      	ldr	r2, [r7, #0]
    a0dc:	4611      	mov	r1, r2
    a0de:	4618      	mov	r0, r3
    a0e0:	f00f fdaa 	bl	19c38 <sys_slist_append>
	}

	if (start) {
    a0e4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
    a0e8:	2b00      	cmp	r3, #0
    a0ea:	d005      	beq.n	a0f8 <onoff_request+0x150>
		process_event(mgr, EVT_RECHECK, key);
    a0ec:	697a      	ldr	r2, [r7, #20]
    a0ee:	2102      	movs	r1, #2
    a0f0:	6878      	ldr	r0, [r7, #4]
    a0f2:	f7ff fcf5 	bl	9ae0 <process_event>
    a0f6:	e02e      	b.n	a156 <onoff_request+0x1ae>
	} else {
		k_spin_unlock(&mgr->lock, key);
    a0f8:	687b      	ldr	r3, [r7, #4]
    a0fa:	3314      	adds	r3, #20
    a0fc:	61fb      	str	r3, [r7, #28]
    a0fe:	697b      	ldr	r3, [r7, #20]
    a100:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a102:	69f8      	ldr	r0, [r7, #28]
    a104:	f009 fc26 	bl	13954 <z_spin_unlock_valid>
    a108:	4603      	mov	r3, r0
    a10a:	f083 0301 	eor.w	r3, r3, #1
    a10e:	b2db      	uxtb	r3, r3
    a110:	2b00      	cmp	r3, #0
    a112:	d00d      	beq.n	a130 <onoff_request+0x188>
    a114:	23f0      	movs	r3, #240	; 0xf0
    a116:	4a12      	ldr	r2, [pc, #72]	; (a160 <onoff_request+0x1b8>)
    a118:	4917      	ldr	r1, [pc, #92]	; (a178 <onoff_request+0x1d0>)
    a11a:	4813      	ldr	r0, [pc, #76]	; (a168 <onoff_request+0x1c0>)
    a11c:	f00f ff4a 	bl	19fb4 <assert_print>
    a120:	69f9      	ldr	r1, [r7, #28]
    a122:	4816      	ldr	r0, [pc, #88]	; (a17c <onoff_request+0x1d4>)
    a124:	f00f ff46 	bl	19fb4 <assert_print>
    a128:	21f0      	movs	r1, #240	; 0xf0
    a12a:	480d      	ldr	r0, [pc, #52]	; (a160 <onoff_request+0x1b8>)
    a12c:	f00f ff32 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
    a130:	693b      	ldr	r3, [r7, #16]
    a132:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    a134:	69bb      	ldr	r3, [r7, #24]
    a136:	f383 8811 	msr	BASEPRI, r3
    a13a:	f3bf 8f6f 	isb	sy
}
    a13e:	bf00      	nop
}
    a140:	bf00      	nop

		if (notify) {
    a142:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    a146:	2b00      	cmp	r3, #0
    a148:	d005      	beq.n	a156 <onoff_request+0x1ae>
			notify_one(mgr, cli, state, 0);
    a14a:	2300      	movs	r3, #0
    a14c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    a14e:	6839      	ldr	r1, [r7, #0]
    a150:	6878      	ldr	r0, [r7, #4]
    a152:	f00f fe6c 	bl	19e2e <notify_one>
		}
	}

	return rv;
    a156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    a158:	4618      	mov	r0, r3
    a15a:	3740      	adds	r7, #64	; 0x40
    a15c:	46bd      	mov	sp, r7
    a15e:	bd80      	pop	{r7, pc}
    a160:	00020e08 	.word	0x00020e08
    a164:	00020e38 	.word	0x00020e38
    a168:	00020e50 	.word	0x00020e50
    a16c:	00020e70 	.word	0x00020e70
    a170:	00020e88 	.word	0x00020e88
    a174:	00020f6c 	.word	0x00020f6c
    a178:	00020f84 	.word	0x00020f84
    a17c:	00020f9c 	.word	0x00020f9c

0000a180 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    a180:	b580      	push	{r7, lr}
    a182:	b086      	sub	sp, #24
    a184:	af00      	add	r7, sp, #0
    a186:	6078      	str	r0, [r7, #4]
    a188:	6039      	str	r1, [r7, #0]
	struct k_poll_signal *sig = NULL;
    a18a:	2300      	movs	r3, #0
    a18c:	613b      	str	r3, [r7, #16]
	sys_notify_generic_callback rv = NULL;
    a18e:	2300      	movs	r3, #0
    a190:	617b      	str	r3, [r7, #20]
	uint32_t method = sys_notify_get_method(notify);
    a192:	6878      	ldr	r0, [r7, #4]
    a194:	f00f fec1 	bl	19f1a <sys_notify_get_method>
    a198:	60f8      	str	r0, [r7, #12]

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    a19a:	687b      	ldr	r3, [r7, #4]
    a19c:	683a      	ldr	r2, [r7, #0]
    a19e:	609a      	str	r2, [r3, #8]
	switch (method) {
    a1a0:	68fb      	ldr	r3, [r7, #12]
    a1a2:	2b03      	cmp	r3, #3
    a1a4:	d009      	beq.n	a1ba <sys_notify_finalize+0x3a>
    a1a6:	68fb      	ldr	r3, [r7, #12]
    a1a8:	2b03      	cmp	r3, #3
    a1aa:	d80e      	bhi.n	a1ca <sys_notify_finalize+0x4a>
    a1ac:	68fb      	ldr	r3, [r7, #12]
    a1ae:	2b01      	cmp	r3, #1
    a1b0:	d015      	beq.n	a1de <sys_notify_finalize+0x5e>
    a1b2:	68fb      	ldr	r3, [r7, #12]
    a1b4:	2b02      	cmp	r3, #2
    a1b6:	d004      	beq.n	a1c2 <sys_notify_finalize+0x42>
    a1b8:	e007      	b.n	a1ca <sys_notify_finalize+0x4a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    a1ba:	687b      	ldr	r3, [r7, #4]
    a1bc:	681b      	ldr	r3, [r3, #0]
    a1be:	617b      	str	r3, [r7, #20]
		break;
    a1c0:	e00e      	b.n	a1e0 <sys_notify_finalize+0x60>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
    a1c2:	687b      	ldr	r3, [r7, #4]
    a1c4:	681b      	ldr	r3, [r3, #0]
    a1c6:	613b      	str	r3, [r7, #16]
		break;
    a1c8:	e00a      	b.n	a1e0 <sys_notify_finalize+0x60>
	default:
		__ASSERT_NO_MSG(false);
    a1ca:	2345      	movs	r3, #69	; 0x45
    a1cc:	4a08      	ldr	r2, [pc, #32]	; (a1f0 <sys_notify_finalize+0x70>)
    a1ce:	4909      	ldr	r1, [pc, #36]	; (a1f4 <sys_notify_finalize+0x74>)
    a1d0:	4809      	ldr	r0, [pc, #36]	; (a1f8 <sys_notify_finalize+0x78>)
    a1d2:	f00f feef 	bl	19fb4 <assert_print>
    a1d6:	2145      	movs	r1, #69	; 0x45
    a1d8:	4805      	ldr	r0, [pc, #20]	; (a1f0 <sys_notify_finalize+0x70>)
    a1da:	f00f fedb 	bl	19f94 <assert_post_action>
		break;
    a1de:	bf00      	nop
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a1e0:	687b      	ldr	r3, [r7, #4]
    a1e2:	2200      	movs	r2, #0
    a1e4:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
    a1e6:	697b      	ldr	r3, [r7, #20]
}
    a1e8:	4618      	mov	r0, r3
    a1ea:	3718      	adds	r7, #24
    a1ec:	46bd      	mov	sp, r7
    a1ee:	bd80      	pop	{r7, pc}
    a1f0:	00021040 	.word	0x00021040
    a1f4:	00021064 	.word	0x00021064
    a1f8:	00021068 	.word	0x00021068

0000a1fc <nrfx_coredep_delay_us>:
}

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    a1fc:	b580      	push	{r7, lr}
    a1fe:	b084      	sub	sp, #16
    a200:	af00      	add	r7, sp, #0
    a202:	6078      	str	r0, [r7, #4]
    if (time_us == 0)
    a204:	687b      	ldr	r3, [r7, #4]
    a206:	2b00      	cmp	r3, #0
    a208:	d00a      	beq.n	a220 <nrfx_coredep_delay_us+0x24>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    a20a:	4b07      	ldr	r3, [pc, #28]	; (a228 <nrfx_coredep_delay_us+0x2c>)
    a20c:	f043 0301 	orr.w	r3, r3, #1
    const delay_func_t delay_cycles =
    a210:	60fb      	str	r3, [r7, #12]
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    a212:	687b      	ldr	r3, [r7, #4]
    a214:	019b      	lsls	r3, r3, #6
    a216:	60bb      	str	r3, [r7, #8]
    delay_cycles(cycles);
    a218:	68fb      	ldr	r3, [r7, #12]
    a21a:	68b8      	ldr	r0, [r7, #8]
    a21c:	4798      	blx	r3
    a21e:	e000      	b.n	a222 <nrfx_coredep_delay_us+0x26>
        return;
    a220:	bf00      	nop
    for (volatile uint32_t i = 0;
         i < ((NRFX_DELAY_CPU_FREQ_MHZ * time_us) / NRFX_DELAY_RISCV_SLOWDOWN);
         i++)
    {}
#endif
}
    a222:	3710      	adds	r7, #16
    a224:	46bd      	mov	sp, r7
    a226:	bd80      	pop	{r7, pc}
    a228:	00023d50 	.word	0x00023d50

0000a22c <nordicsemi_nrf91_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf91_init(void)
{
    a22c:	b480      	push	{r7}
    a22e:	af00      	add	r7, sp, #0
#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    a230:	4b04      	ldr	r3, [pc, #16]	; (a244 <nordicsemi_nrf91_init+0x18>)
    a232:	2201      	movs	r2, #1
    a234:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif

	return 0;
    a238:	2300      	movs	r3, #0
}
    a23a:	4618      	mov	r0, r3
    a23c:	46bd      	mov	sp, r7
    a23e:	bc80      	pop	{r7}
    a240:	4770      	bx	lr
    a242:	bf00      	nop
    a244:	40039000 	.word	0x40039000

0000a248 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    a248:	f012 bed5 	b.w	1cff6 <SystemInit>

0000a24c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    a24c:	4901      	ldr	r1, [pc, #4]	; (a254 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    a24e:	2210      	movs	r2, #16
	str	r2, [r1]
    a250:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    a252:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    a254:	e000ed10 	.word	0xe000ed10

0000a258 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    a258:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    a25a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    a25c:	f380 8811 	msr	BASEPRI, r0
	isb
    a260:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    a264:	f3bf 8f4f 	dsb	sy
    a268:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    a26a:	b662      	cpsie	i
	isb
    a26c:	f3bf 8f6f 	isb	sy

	bx	lr
    a270:	4770      	bx	lr
    a272:	bf00      	nop

0000a274 <arch_cpu_atomic_idle>:
#endif
	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    a274:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    a276:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    a278:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    a27c:	f3bf 8f4f 	dsb	sy
    a280:	bf20      	wfe

	msr	BASEPRI, r0
    a282:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    a286:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    a288:	4770      	bx	lr
    a28a:	bf00      	nop

0000a28c <z_log_minimal_level_to_char>:
{
    a28c:	b480      	push	{r7}
    a28e:	b083      	sub	sp, #12
    a290:	af00      	add	r7, sp, #0
    a292:	6078      	str	r0, [r7, #4]
	switch (level) {
    a294:	687b      	ldr	r3, [r7, #4]
    a296:	3b01      	subs	r3, #1
    a298:	2b03      	cmp	r3, #3
    a29a:	d813      	bhi.n	a2c4 <z_log_minimal_level_to_char+0x38>
    a29c:	a201      	add	r2, pc, #4	; (adr r2, a2a4 <z_log_minimal_level_to_char+0x18>)
    a29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a2a2:	bf00      	nop
    a2a4:	0000a2b5 	.word	0x0000a2b5
    a2a8:	0000a2b9 	.word	0x0000a2b9
    a2ac:	0000a2bd 	.word	0x0000a2bd
    a2b0:	0000a2c1 	.word	0x0000a2c1
		return 'E';
    a2b4:	2345      	movs	r3, #69	; 0x45
    a2b6:	e006      	b.n	a2c6 <z_log_minimal_level_to_char+0x3a>
		return 'W';
    a2b8:	2357      	movs	r3, #87	; 0x57
    a2ba:	e004      	b.n	a2c6 <z_log_minimal_level_to_char+0x3a>
		return 'I';
    a2bc:	2349      	movs	r3, #73	; 0x49
    a2be:	e002      	b.n	a2c6 <z_log_minimal_level_to_char+0x3a>
		return 'D';
    a2c0:	2344      	movs	r3, #68	; 0x44
    a2c2:	e000      	b.n	a2c6 <z_log_minimal_level_to_char+0x3a>
		return '?';
    a2c4:	233f      	movs	r3, #63	; 0x3f
}
    a2c6:	4618      	mov	r0, r3
    a2c8:	370c      	adds	r7, #12
    a2ca:	46bd      	mov	sp, r7
    a2cc:	bc80      	pop	{r7}
    a2ce:	4770      	bx	lr

0000a2d0 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    a2d0:	b580      	push	{r7, lr}
    a2d2:	b084      	sub	sp, #16
    a2d4:	af02      	add	r7, sp, #8
    a2d6:	6078      	str	r0, [r7, #4]
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    a2d8:	2303      	movs	r3, #3
    a2da:	2b00      	cmp	r3, #0
    a2dc:	d010      	beq.n	a300 <esf_dump+0x30>
    a2de:	2001      	movs	r0, #1
    a2e0:	f7ff ffd4 	bl	a28c <z_log_minimal_level_to_char>
    a2e4:	4603      	mov	r3, r0
    a2e6:	4618      	mov	r0, r3
    a2e8:	687b      	ldr	r3, [r7, #4]
    a2ea:	681a      	ldr	r2, [r3, #0]
    a2ec:	687b      	ldr	r3, [r7, #4]
    a2ee:	6859      	ldr	r1, [r3, #4]
    a2f0:	687b      	ldr	r3, [r7, #4]
    a2f2:	689b      	ldr	r3, [r3, #8]
    a2f4:	9300      	str	r3, [sp, #0]
    a2f6:	460b      	mov	r3, r1
    a2f8:	4601      	mov	r1, r0
    a2fa:	481b      	ldr	r0, [pc, #108]	; (a368 <esf_dump+0x98>)
    a2fc:	f00f fe7d 	bl	19ffa <z_log_minimal_printk>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    a300:	2303      	movs	r3, #3
    a302:	2b00      	cmp	r3, #0
    a304:	d010      	beq.n	a328 <esf_dump+0x58>
    a306:	2001      	movs	r0, #1
    a308:	f7ff ffc0 	bl	a28c <z_log_minimal_level_to_char>
    a30c:	4603      	mov	r3, r0
    a30e:	4618      	mov	r0, r3
    a310:	687b      	ldr	r3, [r7, #4]
    a312:	68da      	ldr	r2, [r3, #12]
    a314:	687b      	ldr	r3, [r7, #4]
    a316:	6919      	ldr	r1, [r3, #16]
    a318:	687b      	ldr	r3, [r7, #4]
    a31a:	695b      	ldr	r3, [r3, #20]
    a31c:	9300      	str	r3, [sp, #0]
    a31e:	460b      	mov	r3, r1
    a320:	4601      	mov	r1, r0
    a322:	4812      	ldr	r0, [pc, #72]	; (a36c <esf_dump+0x9c>)
    a324:	f00f fe69 	bl	19ffa <z_log_minimal_printk>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    a328:	2303      	movs	r3, #3
    a32a:	2b00      	cmp	r3, #0
    a32c:	d00a      	beq.n	a344 <esf_dump+0x74>
    a32e:	2001      	movs	r0, #1
    a330:	f7ff ffac 	bl	a28c <z_log_minimal_level_to_char>
    a334:	4603      	mov	r3, r0
    a336:	4619      	mov	r1, r3
    a338:	687b      	ldr	r3, [r7, #4]
    a33a:	69db      	ldr	r3, [r3, #28]
    a33c:	461a      	mov	r2, r3
    a33e:	480c      	ldr	r0, [pc, #48]	; (a370 <esf_dump+0xa0>)
    a340:	f00f fe5b 	bl	19ffa <z_log_minimal_printk>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    a344:	2303      	movs	r3, #3
    a346:	2b00      	cmp	r3, #0
    a348:	d00a      	beq.n	a360 <esf_dump+0x90>
    a34a:	2001      	movs	r0, #1
    a34c:	f7ff ff9e 	bl	a28c <z_log_minimal_level_to_char>
    a350:	4603      	mov	r3, r0
    a352:	4619      	mov	r1, r3
    a354:	687b      	ldr	r3, [r7, #4]
    a356:	699b      	ldr	r3, [r3, #24]
    a358:	461a      	mov	r2, r3
    a35a:	4806      	ldr	r0, [pc, #24]	; (a374 <esf_dump+0xa4>)
    a35c:	f00f fe4d 	bl	19ffa <z_log_minimal_printk>
		esf->basic.pc);
}
    a360:	bf00      	nop
    a362:	3708      	adds	r7, #8
    a364:	46bd      	mov	sp, r7
    a366:	bd80      	pop	{r7, pc}
    a368:	0002108c 	.word	0x0002108c
    a36c:	000210c0 	.word	0x000210c0
    a370:	000210f4 	.word	0x000210f4
    a374:	00021108 	.word	0x00021108

0000a378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    a378:	b480      	push	{r7}
    a37a:	b083      	sub	sp, #12
    a37c:	af00      	add	r7, sp, #0
    a37e:	4603      	mov	r3, r0
    a380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    a382:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a386:	2b00      	cmp	r3, #0
    a388:	db0b      	blt.n	a3a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a38a:	79fb      	ldrb	r3, [r7, #7]
    a38c:	f003 021f 	and.w	r2, r3, #31
    a390:	4906      	ldr	r1, [pc, #24]	; (a3ac <__NVIC_EnableIRQ+0x34>)
    a392:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a396:	095b      	lsrs	r3, r3, #5
    a398:	2001      	movs	r0, #1
    a39a:	fa00 f202 	lsl.w	r2, r0, r2
    a39e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    a3a2:	bf00      	nop
    a3a4:	370c      	adds	r7, #12
    a3a6:	46bd      	mov	sp, r7
    a3a8:	bc80      	pop	{r7}
    a3aa:	4770      	bx	lr
    a3ac:	e000e100 	.word	0xe000e100

0000a3b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    a3b0:	b480      	push	{r7}
    a3b2:	b083      	sub	sp, #12
    a3b4:	af00      	add	r7, sp, #0
    a3b6:	4603      	mov	r3, r0
    a3b8:	6039      	str	r1, [r7, #0]
    a3ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    a3bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a3c0:	2b00      	cmp	r3, #0
    a3c2:	db0a      	blt.n	a3da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a3c4:	683b      	ldr	r3, [r7, #0]
    a3c6:	b2da      	uxtb	r2, r3
    a3c8:	490c      	ldr	r1, [pc, #48]	; (a3fc <__NVIC_SetPriority+0x4c>)
    a3ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a3ce:	0152      	lsls	r2, r2, #5
    a3d0:	b2d2      	uxtb	r2, r2
    a3d2:	440b      	add	r3, r1
    a3d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    a3d8:	e00a      	b.n	a3f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a3da:	683b      	ldr	r3, [r7, #0]
    a3dc:	b2da      	uxtb	r2, r3
    a3de:	4908      	ldr	r1, [pc, #32]	; (a400 <__NVIC_SetPriority+0x50>)
    a3e0:	79fb      	ldrb	r3, [r7, #7]
    a3e2:	f003 030f 	and.w	r3, r3, #15
    a3e6:	3b04      	subs	r3, #4
    a3e8:	0152      	lsls	r2, r2, #5
    a3ea:	b2d2      	uxtb	r2, r2
    a3ec:	440b      	add	r3, r1
    a3ee:	761a      	strb	r2, [r3, #24]
}
    a3f0:	bf00      	nop
    a3f2:	370c      	adds	r7, #12
    a3f4:	46bd      	mov	sp, r7
    a3f6:	bc80      	pop	{r7}
    a3f8:	4770      	bx	lr
    a3fa:	bf00      	nop
    a3fc:	e000e100 	.word	0xe000e100
    a400:	e000ed00 	.word	0xe000ed00

0000a404 <arch_irq_is_enabled>:
{
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
    a404:	b480      	push	{r7}
    a406:	b083      	sub	sp, #12
    a408:	af00      	add	r7, sp, #0
    a40a:	6078      	str	r0, [r7, #4]
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    a40c:	4a08      	ldr	r2, [pc, #32]	; (a430 <arch_irq_is_enabled+0x2c>)
    a40e:	687b      	ldr	r3, [r7, #4]
    a410:	095b      	lsrs	r3, r3, #5
    a412:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a416:	687b      	ldr	r3, [r7, #4]
    a418:	f003 031f 	and.w	r3, r3, #31
    a41c:	2101      	movs	r1, #1
    a41e:	fa01 f303 	lsl.w	r3, r1, r3
    a422:	4013      	ands	r3, r2
}
    a424:	4618      	mov	r0, r3
    a426:	370c      	adds	r7, #12
    a428:	46bd      	mov	sp, r7
    a42a:	bc80      	pop	{r7}
    a42c:	4770      	bx	lr
    a42e:	bf00      	nop
    a430:	e000e100 	.word	0xe000e100

0000a434 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    a434:	b580      	push	{r7, lr}
    a436:	b084      	sub	sp, #16
    a438:	af00      	add	r7, sp, #0
    a43a:	60f8      	str	r0, [r7, #12]
    a43c:	60b9      	str	r1, [r7, #8]
    a43e:	607a      	str	r2, [r7, #4]
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    a440:	68bb      	ldr	r3, [r7, #8]
    a442:	3301      	adds	r3, #1
    a444:	60bb      	str	r3, [r7, #8]
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    a446:	68bb      	ldr	r3, [r7, #8]
    a448:	2b07      	cmp	r3, #7
    a44a:	d910      	bls.n	a46e <z_arm_irq_priority_set+0x3a>
    a44c:	235c      	movs	r3, #92	; 0x5c
    a44e:	4a0d      	ldr	r2, [pc, #52]	; (a484 <z_arm_irq_priority_set+0x50>)
    a450:	490d      	ldr	r1, [pc, #52]	; (a488 <z_arm_irq_priority_set+0x54>)
    a452:	480e      	ldr	r0, [pc, #56]	; (a48c <z_arm_irq_priority_set+0x58>)
    a454:	f00f fdae 	bl	19fb4 <assert_print>
    a458:	68bb      	ldr	r3, [r7, #8]
    a45a:	1e59      	subs	r1, r3, #1
    a45c:	2307      	movs	r3, #7
    a45e:	68fa      	ldr	r2, [r7, #12]
    a460:	480b      	ldr	r0, [pc, #44]	; (a490 <z_arm_irq_priority_set+0x5c>)
    a462:	f00f fda7 	bl	19fb4 <assert_print>
    a466:	215c      	movs	r1, #92	; 0x5c
    a468:	4806      	ldr	r0, [pc, #24]	; (a484 <z_arm_irq_priority_set+0x50>)
    a46a:	f00f fd93 	bl	19f94 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    a46e:	68fb      	ldr	r3, [r7, #12]
    a470:	b25b      	sxtb	r3, r3
    a472:	68b9      	ldr	r1, [r7, #8]
    a474:	4618      	mov	r0, r3
    a476:	f7ff ff9b 	bl	a3b0 <__NVIC_SetPriority>
}
    a47a:	bf00      	nop
    a47c:	3710      	adds	r7, #16
    a47e:	46bd      	mov	sp, r7
    a480:	bd80      	pop	{r7, pc}
    a482:	bf00      	nop
    a484:	0002113c 	.word	0x0002113c
    a488:	00021174 	.word	0x00021174
    a48c:	00021190 	.word	0x00021190
    a490:	000211b0 	.word	0x000211b0

0000a494 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    a494:	bf30      	wfi
    b z_SysNmiOnReset
    a496:	f7ff bffd 	b.w	a494 <z_SysNmiOnReset>
    a49a:	bf00      	nop

0000a49c <relocate_vector_table>:
#ifdef CONFIG_CPU_CORTEX_M_HAS_VTOR

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
    a49c:	b480      	push	{r7}
    a49e:	af00      	add	r7, sp, #0
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    a4a0:	4b09      	ldr	r3, [pc, #36]	; (a4c8 <relocate_vector_table+0x2c>)
    a4a2:	4a0a      	ldr	r2, [pc, #40]	; (a4cc <relocate_vector_table+0x30>)
    a4a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a4a8:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    a4aa:	f3bf 8f4f 	dsb	sy
}
    a4ae:	bf00      	nop
}

static ALWAYS_INLINE void z_barrier_dsync_fence_full(void)
{
	__DSB();
}
    a4b0:	bf00      	nop
static ALWAYS_INLINE void barrier_dsync_fence_full(void)
{
#if defined(CONFIG_BARRIER_OPERATIONS_ARCH) || defined(CONFIG_BARRIER_OPERATIONS_BUILTIN)
	z_barrier_dsync_fence_full();
#endif
}
    a4b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    a4b4:	f3bf 8f6f 	isb	sy
}
    a4b8:	bf00      	nop

static ALWAYS_INLINE void z_barrier_isync_fence_full(void)
{
	__ISB();
}
    a4ba:	bf00      	nop
static ALWAYS_INLINE void barrier_isync_fence_full(void)
{
#if defined(CONFIG_BARRIER_OPERATIONS_ARCH) || defined(CONFIG_BARRIER_OPERATIONS_BUILTIN)
	z_barrier_isync_fence_full();
#endif
}
    a4bc:	bf00      	nop
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
    a4be:	bf00      	nop
    a4c0:	46bd      	mov	sp, r7
    a4c2:	bc80      	pop	{r7}
    a4c4:	4770      	bx	lr
    a4c6:	bf00      	nop
    a4c8:	00008000 	.word	0x00008000
    a4cc:	e000ed00 	.word	0xe000ed00

0000a4d0 <z_arm_floating_point_init>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_VTOR */

#if defined(CONFIG_CPU_HAS_FPU)
#if defined(CONFIG_CPU_CORTEX_M)
static inline void z_arm_floating_point_init(void)
{
    a4d0:	b480      	push	{r7}
    a4d2:	af00      	add	r7, sp, #0
	/*
	 * Upon reset, the Co-Processor Access Control Register is, normally,
	 * 0x00000000. However, it might be left un-cleared by firmware running
	 * before Zephyr boot.
	 */
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    a4d4:	4b05      	ldr	r3, [pc, #20]	; (a4ec <z_arm_floating_point_init+0x1c>)
    a4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    a4da:	4a04      	ldr	r2, [pc, #16]	; (a4ec <z_arm_floating_point_init+0x1c>)
    a4dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    a4e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#if (!defined(CONFIG_FPU) || !defined(CONFIG_FPU_SHARING)) && \
	(!defined(CONFIG_INIT_ARCH_HW_AT_BOOT))

	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
#endif
}
    a4e4:	bf00      	nop
    a4e6:	46bd      	mov	sp, r7
    a4e8:	bc80      	pop	{r7}
    a4ea:	4770      	bx	lr
    a4ec:	e000ed00 	.word	0xe000ed00

0000a4f0 <arch_swap>:
 *
 * On ARMv6-M, the intlock key is represented by the PRIMASK register,
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
    a4f0:	b480      	push	{r7}
    a4f2:	b085      	sub	sp, #20
    a4f4:	af00      	add	r7, sp, #0
    a4f6:	6078      	str	r0, [r7, #4]
	/* store off key and return value */
	_current->arch.basepri = key;
    a4f8:	4b10      	ldr	r3, [pc, #64]	; (a53c <arch_swap+0x4c>)
    a4fa:	689b      	ldr	r3, [r3, #8]
    a4fc:	687a      	ldr	r2, [r7, #4]
    a4fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	_current->arch.swap_return_value = _k_neg_eagain;
    a502:	4b0f      	ldr	r3, [pc, #60]	; (a540 <arch_swap+0x50>)
    a504:	681a      	ldr	r2, [r3, #0]
    a506:	4b0d      	ldr	r3, [pc, #52]	; (a53c <arch_swap+0x4c>)
    a508:	689b      	ldr	r3, [r3, #8]
    a50a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    a50e:	4b0d      	ldr	r3, [pc, #52]	; (a544 <arch_swap+0x54>)
    a510:	685b      	ldr	r3, [r3, #4]
    a512:	4a0c      	ldr	r2, [pc, #48]	; (a544 <arch_swap+0x54>)
    a514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    a518:	6053      	str	r3, [r2, #4]
    a51a:	2300      	movs	r3, #0
    a51c:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
    a51e:	68fb      	ldr	r3, [r7, #12]
    a520:	f383 8811 	msr	BASEPRI, r3
    a524:	f3bf 8f6f 	isb	sy
}
    a528:	bf00      	nop
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    a52a:	4b04      	ldr	r3, [pc, #16]	; (a53c <arch_swap+0x4c>)
    a52c:	689b      	ldr	r3, [r3, #8]
    a52e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
}
    a532:	4618      	mov	r0, r3
    a534:	3714      	adds	r7, #20
    a536:	46bd      	mov	sp, r7
    a538:	bc80      	pop	{r7}
    a53a:	4770      	bx	lr
    a53c:	2000ce4c 	.word	0x2000ce4c
    a540:	00024324 	.word	0x00024324
    a544:	e000ed00 	.word	0xe000ed00

0000a548 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    a548:	4919      	ldr	r1, [pc, #100]	; (a5b0 <z_arm_pendsv+0x68>)
    ldr r2, [r1, #_kernel_offset_to_current]
    a54a:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    a54c:	f882 e09d 	strb.w	lr, [r2, #157]	; 0x9d
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    a550:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    a554:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    a556:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    a55a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    a55e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    a560:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    a564:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    a568:	4f12      	ldr	r7, [pc, #72]	; (a5b4 <z_arm_pendsv+0x6c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    a56a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    a56e:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
    a570:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    a572:	603e      	str	r6, [r7, #0]
#endif

#if defined(CONFIG_THREAD_LOCAL_STORAGE)
    /* Grab the TLS pointer */
    ldr r4, =_thread_offset_to_tls
    a574:	f04f 0490 	mov.w	r4, #144	; 0x90
    adds r4, r2, r4
    a578:	1914      	adds	r4, r2, r4
    ldr r0, [r4]
    a57a:	6820      	ldr	r0, [r4, #0]
#if defined(CONFIG_CPU_CORTEX_M)
    /* For Cortex-M, store TLS pointer in a global variable,
     * as it lacks the process ID or thread ID register
     * to be used by toolchain to access thread data.
     */
    ldr r4, =z_arm_tls_ptr
    a57c:	4c0e      	ldr	r4, [pc, #56]	; (a5b8 <z_arm_pendsv+0x70>)
    str r0, [r4]
    a57e:	6020      	str	r0, [r4, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    a580:	f992 e09d 	ldrsb.w	lr, [r2, #157]	; 0x9d

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    a584:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    movs r3, #0
    a588:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    a58a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    a58e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    a592:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    a596:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    a59a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    a59e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    a5a2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    a5a4:	f00f fd8d 	bl	1a0c2 <configure_builtin_stack_guard>
    pop {r2, lr}
    a5a8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    a5ac:	4770      	bx	lr
    a5ae:	0000      	.short	0x0000
    ldr r1, =_kernel
    a5b0:	2000ce4c 	.word	0x2000ce4c
    ldr v4, =_SCS_ICSR
    a5b4:	e000ed04 	.word	0xe000ed04
    ldr r4, =z_arm_tls_ptr
    a5b8:	2000c8f0 	.word	0x2000c8f0

0000a5bc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    a5bc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    a5c0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    a5c2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    a5c6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    a5ca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    a5cc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    a5d0:	2902      	cmp	r1, #2
    beq _oops
    a5d2:	d0ff      	beq.n	a5d4 <_oops>

0000a5d4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    a5d4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    a5d6:	f00f fd35 	bl	1a044 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    a5da:	bd01      	pop	{r0, pc}

0000a5dc <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    a5dc:	b480      	push	{r7}
    a5de:	b087      	sub	sp, #28
    a5e0:	af00      	add	r7, sp, #0
    a5e2:	60f8      	str	r0, [r7, #12]
    a5e4:	60b9      	str	r1, [r7, #8]
    a5e6:	607a      	str	r2, [r7, #4]
    a5e8:	603b      	str	r3, [r7, #0]
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    a5ea:	687b      	ldr	r3, [r7, #4]
    a5ec:	3b20      	subs	r3, #32
    a5ee:	617b      	str	r3, [r7, #20]
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    a5f0:	4a16      	ldr	r2, [pc, #88]	; (a64c <arch_new_thread+0x70>)
    a5f2:	697b      	ldr	r3, [r7, #20]
    a5f4:	619a      	str	r2, [r3, #24]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    a5f6:	697b      	ldr	r3, [r7, #20]
    a5f8:	699b      	ldr	r3, [r3, #24]
    a5fa:	f023 0201 	bic.w	r2, r3, #1
    a5fe:	697b      	ldr	r3, [r7, #20]
    a600:	619a      	str	r2, [r3, #24]
#endif
	iframe->a1 = (uint32_t)entry;
    a602:	683a      	ldr	r2, [r7, #0]
    a604:	697b      	ldr	r3, [r7, #20]
    a606:	601a      	str	r2, [r3, #0]
	iframe->a2 = (uint32_t)p1;
    a608:	6a3a      	ldr	r2, [r7, #32]
    a60a:	697b      	ldr	r3, [r7, #20]
    a60c:	605a      	str	r2, [r3, #4]
	iframe->a3 = (uint32_t)p2;
    a60e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a610:	697b      	ldr	r3, [r7, #20]
    a612:	609a      	str	r2, [r3, #8]
	iframe->a4 = (uint32_t)p3;
    a614:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a616:	697b      	ldr	r3, [r7, #20]
    a618:	60da      	str	r2, [r3, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    a61a:	697b      	ldr	r3, [r7, #20]
    a61c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    a620:	61da      	str	r2, [r3, #28]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    a622:	697a      	ldr	r2, [r7, #20]
    a624:	68fb      	ldr	r3, [r7, #12]
    a626:	651a      	str	r2, [r3, #80]	; 0x50
	thread->arch.basepri = 0;
    a628:	68fb      	ldr	r3, [r7, #12]
    a62a:	2200      	movs	r2, #0
    a62c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    a630:	68fb      	ldr	r3, [r7, #12]
    a632:	2200      	movs	r2, #0
    a634:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
    a638:	68fb      	ldr	r3, [r7, #12]
    a63a:	22bc      	movs	r2, #188	; 0xbc
    a63c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    a640:	bf00      	nop
    a642:	371c      	adds	r7, #28
    a644:	46bd      	mov	sp, r7
    a646:	bc80      	pop	{r7}
    a648:	4770      	bx	lr
    a64a:	bf00      	nop
    a64c:	000094d9 	.word	0x000094d9

0000a650 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    a650:	b580      	push	{r7, lr}
    a652:	b086      	sub	sp, #24
    a654:	af00      	add	r7, sp, #0
    a656:	60f8      	str	r0, [r7, #12]
    a658:	60b9      	str	r1, [r7, #8]
    a65a:	607a      	str	r2, [r7, #4]
	z_arm_prepare_switch_to_main();
    a65c:	f00f fd44 	bl	1a0e8 <z_arm_prepare_switch_to_main>

	_current = main_thread;
    a660:	4a0f      	ldr	r2, [pc, #60]	; (a6a0 <arch_switch_to_main_thread+0x50>)
    a662:	68fb      	ldr	r3, [r7, #12]
    a664:	6093      	str	r3, [r2, #8]
	 * thread for the first time, as the pointer is only set
	 * during context switching.
	 */
	extern uintptr_t z_arm_tls_ptr;

	z_arm_tls_ptr = main_thread->tls;
    a666:	68fb      	ldr	r3, [r7, #12]
    a668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    a66c:	4a0d      	ldr	r2, [pc, #52]	; (a6a4 <arch_switch_to_main_thread+0x54>)
    a66e:	6013      	str	r3, [r2, #0]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    a670:	68fb      	ldr	r3, [r7, #12]
    a672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    a676:	617b      	str	r3, [r7, #20]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    a678:	697b      	ldr	r3, [r7, #20]
    a67a:	f383 880b 	msr	PSPLIM, r3
#endif
}
    a67e:	bf00      	nop

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    a680:	687b      	ldr	r3, [r7, #4]
    a682:	68ba      	ldr	r2, [r7, #8]
    a684:	4618      	mov	r0, r3
    a686:	f382 8809 	msr	PSP, r2
    a68a:	2100      	movs	r1, #0
    a68c:	b663      	cpsie	if
    a68e:	f381 8811 	msr	BASEPRI, r1
    a692:	f3bf 8f6f 	isb	sy
    a696:	2200      	movs	r2, #0
    a698:	2300      	movs	r3, #0
    a69a:	f7fe ff1d 	bl	94d8 <z_thread_entry>
    a69e:	bf00      	nop
    a6a0:	2000ce4c 	.word	0x2000ce4c
    a6a4:	2000c8f0 	.word	0x2000c8f0

0000a6a8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    a6a8:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    a6aa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    a6ae:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    a6b2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    a6b6:	4904      	ldr	r1, [pc, #16]	; (a6c8 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    a6b8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    a6ba:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    a6bc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    a6be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    a6c2:	4902      	ldr	r1, [pc, #8]	; (a6cc <_isr_wrapper+0x24>)
	bx r1
    a6c4:	4708      	bx	r1
    a6c6:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    a6c8:	0001f9e0 	.word	0x0001f9e0
	ldr r1, =z_arm_int_exit
    a6cc:	0000a77d 	.word	0x0000a77d

0000a6d0 <z_tls_data_size>:
 * bits required for proper functionality of TLS.
 *
 * @return Total size of TLS data/bss areas
 */
static inline size_t z_tls_data_size(void)
{
    a6d0:	b480      	push	{r7}
    a6d2:	b083      	sub	sp, #12
    a6d4:	af00      	add	r7, sp, #0
	size_t tdata_size = ROUND_UP(__tdata_size, __tdata_align);
    a6d6:	4a0f      	ldr	r2, [pc, #60]	; (a714 <z_tls_data_size+0x44>)
    a6d8:	4b0f      	ldr	r3, [pc, #60]	; (a718 <z_tls_data_size+0x48>)
    a6da:	4413      	add	r3, r2
    a6dc:	3b01      	subs	r3, #1
    a6de:	4a0e      	ldr	r2, [pc, #56]	; (a718 <z_tls_data_size+0x48>)
    a6e0:	fbb3 f3f2 	udiv	r3, r3, r2
    a6e4:	4a0c      	ldr	r2, [pc, #48]	; (a718 <z_tls_data_size+0x48>)
    a6e6:	fb02 f303 	mul.w	r3, r2, r3
    a6ea:	607b      	str	r3, [r7, #4]
	size_t tbss_size = ROUND_UP(__tbss_size, __tbss_align);
    a6ec:	4a0b      	ldr	r2, [pc, #44]	; (a71c <z_tls_data_size+0x4c>)
    a6ee:	4b0c      	ldr	r3, [pc, #48]	; (a720 <z_tls_data_size+0x50>)
    a6f0:	4413      	add	r3, r2
    a6f2:	3b01      	subs	r3, #1
    a6f4:	4a0a      	ldr	r2, [pc, #40]	; (a720 <z_tls_data_size+0x50>)
    a6f6:	fbb3 f3f2 	udiv	r3, r3, r2
    a6fa:	4a09      	ldr	r2, [pc, #36]	; (a720 <z_tls_data_size+0x50>)
    a6fc:	fb02 f303 	mul.w	r3, r2, r3
    a700:	603b      	str	r3, [r7, #0]

	return tdata_size + tbss_size;
    a702:	687a      	ldr	r2, [r7, #4]
    a704:	683b      	ldr	r3, [r7, #0]
    a706:	4413      	add	r3, r2
}
    a708:	4618      	mov	r0, r3
    a70a:	370c      	adds	r7, #12
    a70c:	46bd      	mov	sp, r7
    a70e:	bc80      	pop	{r7}
    a710:	4770      	bx	lr
    a712:	bf00      	nop
    a714:	00000000 	.word	0x00000000
    a718:	00000001 	.word	0x00000001
    a71c:	00000008 	.word	0x00000008
    a720:	00000004 	.word	0x00000004

0000a724 <z_tls_copy>:
 * of TLS bss size after the data section.
 *
 * @param dest Pointer to destination
 */
static inline void z_tls_copy(char *dest)
{
    a724:	b580      	push	{r7, lr}
    a726:	b084      	sub	sp, #16
    a728:	af00      	add	r7, sp, #0
    a72a:	6078      	str	r0, [r7, #4]
	size_t tdata_size = (size_t)__tdata_size;
    a72c:	4b0f      	ldr	r3, [pc, #60]	; (a76c <z_tls_copy+0x48>)
    a72e:	60fb      	str	r3, [r7, #12]
	size_t tbss_size = (size_t)__tbss_size;
    a730:	4b0f      	ldr	r3, [pc, #60]	; (a770 <z_tls_copy+0x4c>)
    a732:	60bb      	str	r3, [r7, #8]

	/* Copy initialized data (tdata) */
	memcpy(dest, __tdata_start, tdata_size);
    a734:	68fa      	ldr	r2, [r7, #12]
    a736:	490f      	ldr	r1, [pc, #60]	; (a774 <z_tls_copy+0x50>)
    a738:	6878      	ldr	r0, [r7, #4]
    a73a:	f015 f8c8 	bl	1f8ce <__aeabi_memcpy>

	/* Clear BSS data (tbss) */
	dest += ROUND_UP(tdata_size, __tdata_align);
    a73e:	4b0e      	ldr	r3, [pc, #56]	; (a778 <z_tls_copy+0x54>)
    a740:	1e5a      	subs	r2, r3, #1
    a742:	68fb      	ldr	r3, [r7, #12]
    a744:	4413      	add	r3, r2
    a746:	4a0c      	ldr	r2, [pc, #48]	; (a778 <z_tls_copy+0x54>)
    a748:	fbb3 f3f2 	udiv	r3, r3, r2
    a74c:	4a0a      	ldr	r2, [pc, #40]	; (a778 <z_tls_copy+0x54>)
    a74e:	fb02 f303 	mul.w	r3, r2, r3
    a752:	687a      	ldr	r2, [r7, #4]
    a754:	4413      	add	r3, r2
    a756:	607b      	str	r3, [r7, #4]
	memset(dest, 0, tbss_size);
    a758:	68ba      	ldr	r2, [r7, #8]
    a75a:	2100      	movs	r1, #0
    a75c:	6878      	ldr	r0, [r7, #4]
    a75e:	f015 f8c3 	bl	1f8e8 <memset>
}
    a762:	bf00      	nop
    a764:	3710      	adds	r7, #16
    a766:	46bd      	mov	sp, r7
    a768:	bd80      	pop	{r7, pc}
    a76a:	bf00      	nop
    a76c:	00000000 	.word	0x00000000
    a770:	00000008 	.word	0x00000008
    a774:	0001fc50 	.word	0x0001fc50
    a778:	00000001 	.word	0x00000001

0000a77c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    a77c:	4b04      	ldr	r3, [pc, #16]	; (a790 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    a77e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    a780:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
    a782:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    a784:	d003      	beq.n	a78e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    a786:	4903      	ldr	r1, [pc, #12]	; (a794 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    a788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    a78c:	600a      	str	r2, [r1, #0]

0000a78e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    a78e:	4770      	bx	lr
	ldr r3, =_kernel
    a790:	2000ce4c 	.word	0x2000ce4c
	ldr r1, =_SCS_ICSR
    a794:	e000ed04 	.word	0xe000ed04

0000a798 <z_log_minimal_level_to_char>:
{
    a798:	b480      	push	{r7}
    a79a:	b083      	sub	sp, #12
    a79c:	af00      	add	r7, sp, #0
    a79e:	6078      	str	r0, [r7, #4]
	switch (level) {
    a7a0:	687b      	ldr	r3, [r7, #4]
    a7a2:	3b01      	subs	r3, #1
    a7a4:	2b03      	cmp	r3, #3
    a7a6:	d813      	bhi.n	a7d0 <z_log_minimal_level_to_char+0x38>
    a7a8:	a201      	add	r2, pc, #4	; (adr r2, a7b0 <z_log_minimal_level_to_char+0x18>)
    a7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a7ae:	bf00      	nop
    a7b0:	0000a7c1 	.word	0x0000a7c1
    a7b4:	0000a7c5 	.word	0x0000a7c5
    a7b8:	0000a7c9 	.word	0x0000a7c9
    a7bc:	0000a7cd 	.word	0x0000a7cd
		return 'E';
    a7c0:	2345      	movs	r3, #69	; 0x45
    a7c2:	e006      	b.n	a7d2 <z_log_minimal_level_to_char+0x3a>
		return 'W';
    a7c4:	2357      	movs	r3, #87	; 0x57
    a7c6:	e004      	b.n	a7d2 <z_log_minimal_level_to_char+0x3a>
		return 'I';
    a7c8:	2349      	movs	r3, #73	; 0x49
    a7ca:	e002      	b.n	a7d2 <z_log_minimal_level_to_char+0x3a>
		return 'D';
    a7cc:	2344      	movs	r3, #68	; 0x44
    a7ce:	e000      	b.n	a7d2 <z_log_minimal_level_to_char+0x3a>
		return '?';
    a7d0:	233f      	movs	r3, #63	; 0x3f
}
    a7d2:	4618      	mov	r0, r3
    a7d4:	370c      	adds	r7, #12
    a7d6:	46bd      	mov	sp, r7
    a7d8:	bc80      	pop	{r7}
    a7da:	4770      	bx	lr

0000a7dc <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    a7dc:	b580      	push	{r7, lr}
    a7de:	b088      	sub	sp, #32
    a7e0:	af00      	add	r7, sp, #0
    a7e2:	60f8      	str	r0, [r7, #12]
    a7e4:	60b9      	str	r1, [r7, #8]
    a7e6:	607a      	str	r2, [r7, #4]
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    a7e8:	2310      	movs	r3, #16
    a7ea:	61fb      	str	r3, [r7, #28]
	uint32_t mmfar = -EINVAL;
    a7ec:	f06f 0315 	mvn.w	r3, #21
    a7f0:	61bb      	str	r3, [r7, #24]

	PR_FAULT_INFO("***** MPU FAULT *****");
    a7f2:	2303      	movs	r3, #3
    a7f4:	2b00      	cmp	r3, #0
    a7f6:	d007      	beq.n	a808 <mem_manage_fault+0x2c>
    a7f8:	2001      	movs	r0, #1
    a7fa:	f7ff ffcd 	bl	a798 <z_log_minimal_level_to_char>
    a7fe:	4603      	mov	r3, r0
    a800:	4619      	mov	r1, r3
    a802:	4861      	ldr	r0, [pc, #388]	; (a988 <mem_manage_fault+0x1ac>)
    a804:	f00f fbf9 	bl	19ffa <z_log_minimal_printk>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    a808:	4b60      	ldr	r3, [pc, #384]	; (a98c <mem_manage_fault+0x1b0>)
    a80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a80c:	f003 0310 	and.w	r3, r3, #16
    a810:	2b00      	cmp	r3, #0
    a812:	d00c      	beq.n	a82e <mem_manage_fault+0x52>
		reason = K_ERR_ARM_MEM_STACKING;
    a814:	2311      	movs	r3, #17
    a816:	61fb      	str	r3, [r7, #28]
		PR_FAULT_INFO("  Stacking error (context area might be"
    a818:	2303      	movs	r3, #3
    a81a:	2b00      	cmp	r3, #0
    a81c:	d007      	beq.n	a82e <mem_manage_fault+0x52>
    a81e:	2001      	movs	r0, #1
    a820:	f7ff ffba 	bl	a798 <z_log_minimal_level_to_char>
    a824:	4603      	mov	r3, r0
    a826:	4619      	mov	r1, r3
    a828:	4859      	ldr	r0, [pc, #356]	; (a990 <mem_manage_fault+0x1b4>)
    a82a:	f00f fbe6 	bl	19ffa <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    a82e:	4b57      	ldr	r3, [pc, #348]	; (a98c <mem_manage_fault+0x1b0>)
    a830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a832:	f003 0308 	and.w	r3, r3, #8
    a836:	2b00      	cmp	r3, #0
    a838:	d00c      	beq.n	a854 <mem_manage_fault+0x78>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    a83a:	2312      	movs	r3, #18
    a83c:	61fb      	str	r3, [r7, #28]
		PR_FAULT_INFO("  Unstacking error");
    a83e:	2303      	movs	r3, #3
    a840:	2b00      	cmp	r3, #0
    a842:	d007      	beq.n	a854 <mem_manage_fault+0x78>
    a844:	2001      	movs	r0, #1
    a846:	f7ff ffa7 	bl	a798 <z_log_minimal_level_to_char>
    a84a:	4603      	mov	r3, r0
    a84c:	4619      	mov	r1, r3
    a84e:	4851      	ldr	r0, [pc, #324]	; (a994 <mem_manage_fault+0x1b8>)
    a850:	f00f fbd3 	bl	19ffa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    a854:	4b4d      	ldr	r3, [pc, #308]	; (a98c <mem_manage_fault+0x1b0>)
    a856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a858:	f003 0302 	and.w	r3, r3, #2
    a85c:	2b00      	cmp	r3, #0
    a85e:	d02c      	beq.n	a8ba <mem_manage_fault+0xde>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    a860:	2313      	movs	r3, #19
    a862:	61fb      	str	r3, [r7, #28]
		PR_FAULT_INFO("  Data Access Violation");
    a864:	2303      	movs	r3, #3
    a866:	2b00      	cmp	r3, #0
    a868:	d007      	beq.n	a87a <mem_manage_fault+0x9e>
    a86a:	2001      	movs	r0, #1
    a86c:	f7ff ff94 	bl	a798 <z_log_minimal_level_to_char>
    a870:	4603      	mov	r3, r0
    a872:	4619      	mov	r1, r3
    a874:	4848      	ldr	r0, [pc, #288]	; (a998 <mem_manage_fault+0x1bc>)
    a876:	f00f fbc0 	bl	19ffa <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    a87a:	4b44      	ldr	r3, [pc, #272]	; (a98c <mem_manage_fault+0x1b0>)
    a87c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a87e:	617b      	str	r3, [r7, #20]

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    a880:	4b42      	ldr	r3, [pc, #264]	; (a98c <mem_manage_fault+0x1b0>)
    a882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a884:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a888:	2b00      	cmp	r3, #0
    a88a:	d016      	beq.n	a8ba <mem_manage_fault+0xde>
			mmfar = temp;
    a88c:	697b      	ldr	r3, [r7, #20]
    a88e:	61bb      	str	r3, [r7, #24]
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    a890:	2303      	movs	r3, #3
    a892:	2b00      	cmp	r3, #0
    a894:	d008      	beq.n	a8a8 <mem_manage_fault+0xcc>
    a896:	2001      	movs	r0, #1
    a898:	f7ff ff7e 	bl	a798 <z_log_minimal_level_to_char>
    a89c:	4603      	mov	r3, r0
    a89e:	69ba      	ldr	r2, [r7, #24]
    a8a0:	4619      	mov	r1, r3
    a8a2:	483e      	ldr	r0, [pc, #248]	; (a99c <mem_manage_fault+0x1c0>)
    a8a4:	f00f fba9 	bl	19ffa <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    a8a8:	68bb      	ldr	r3, [r7, #8]
    a8aa:	2b00      	cmp	r3, #0
    a8ac:	d005      	beq.n	a8ba <mem_manage_fault+0xde>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    a8ae:	4b37      	ldr	r3, [pc, #220]	; (a98c <mem_manage_fault+0x1b0>)
    a8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a8b2:	4a36      	ldr	r2, [pc, #216]	; (a98c <mem_manage_fault+0x1b0>)
    a8b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    a8b8:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    a8ba:	4b34      	ldr	r3, [pc, #208]	; (a98c <mem_manage_fault+0x1b0>)
    a8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a8be:	f003 0301 	and.w	r3, r3, #1
    a8c2:	2b00      	cmp	r3, #0
    a8c4:	d00c      	beq.n	a8e0 <mem_manage_fault+0x104>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    a8c6:	2314      	movs	r3, #20
    a8c8:	61fb      	str	r3, [r7, #28]
		PR_FAULT_INFO("  Instruction Access Violation");
    a8ca:	2303      	movs	r3, #3
    a8cc:	2b00      	cmp	r3, #0
    a8ce:	d007      	beq.n	a8e0 <mem_manage_fault+0x104>
    a8d0:	2001      	movs	r0, #1
    a8d2:	f7ff ff61 	bl	a798 <z_log_minimal_level_to_char>
    a8d6:	4603      	mov	r3, r0
    a8d8:	4619      	mov	r1, r3
    a8da:	4831      	ldr	r0, [pc, #196]	; (a9a0 <mem_manage_fault+0x1c4>)
    a8dc:	f00f fb8d 	bl	19ffa <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    a8e0:	4b2a      	ldr	r3, [pc, #168]	; (a98c <mem_manage_fault+0x1b0>)
    a8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a8e4:	f003 0320 	and.w	r3, r3, #32
    a8e8:	2b00      	cmp	r3, #0
    a8ea:	d00c      	beq.n	a906 <mem_manage_fault+0x12a>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    a8ec:	2315      	movs	r3, #21
    a8ee:	61fb      	str	r3, [r7, #28]
		PR_FAULT_INFO(
    a8f0:	2303      	movs	r3, #3
    a8f2:	2b00      	cmp	r3, #0
    a8f4:	d007      	beq.n	a906 <mem_manage_fault+0x12a>
    a8f6:	2001      	movs	r0, #1
    a8f8:	f7ff ff4e 	bl	a798 <z_log_minimal_level_to_char>
    a8fc:	4603      	mov	r3, r0
    a8fe:	4619      	mov	r1, r3
    a900:	4828      	ldr	r0, [pc, #160]	; (a9a4 <mem_manage_fault+0x1c8>)
    a902:	f00f fb7a 	bl	19ffa <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    a906:	4b21      	ldr	r3, [pc, #132]	; (a98c <mem_manage_fault+0x1b0>)
    a908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a90a:	f003 0310 	and.w	r3, r3, #16
    a90e:	2b00      	cmp	r3, #0
    a910:	d105      	bne.n	a91e <mem_manage_fault+0x142>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    a912:	4b1e      	ldr	r3, [pc, #120]	; (a98c <mem_manage_fault+0x1b0>)
    a914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a916:	f003 0302 	and.w	r3, r3, #2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    a91a:	2b00      	cmp	r3, #0
    a91c:	d014      	beq.n	a948 <mem_manage_fault+0x16c>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    a91e:	4b1b      	ldr	r3, [pc, #108]	; (a98c <mem_manage_fault+0x1b0>)
    a920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a922:	f003 0310 	and.w	r3, r3, #16
    a926:	2b00      	cmp	r3, #0
    a928:	d00e      	beq.n	a948 <mem_manage_fault+0x16c>
    a92a:	f240 1363 	movw	r3, #355	; 0x163
    a92e:	4a1e      	ldr	r2, [pc, #120]	; (a9a8 <mem_manage_fault+0x1cc>)
    a930:	491e      	ldr	r1, [pc, #120]	; (a9ac <mem_manage_fault+0x1d0>)
    a932:	481f      	ldr	r0, [pc, #124]	; (a9b0 <mem_manage_fault+0x1d4>)
    a934:	f00f fb3e 	bl	19fb4 <assert_print>
    a938:	481e      	ldr	r0, [pc, #120]	; (a9b4 <mem_manage_fault+0x1d8>)
    a93a:	f00f fb3b 	bl	19fb4 <assert_print>
    a93e:	f240 1163 	movw	r1, #355	; 0x163
    a942:	4819      	ldr	r0, [pc, #100]	; (a9a8 <mem_manage_fault+0x1cc>)
    a944:	f00f fb26 	bl	19f94 <assert_post_action>
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    a948:	4b10      	ldr	r3, [pc, #64]	; (a98c <mem_manage_fault+0x1b0>)
    a94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a94c:	f003 0320 	and.w	r3, r3, #32
    a950:	2b00      	cmp	r3, #0
    a952:	d005      	beq.n	a960 <mem_manage_fault+0x184>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    a954:	4b0d      	ldr	r3, [pc, #52]	; (a98c <mem_manage_fault+0x1b0>)
    a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a958:	4a0c      	ldr	r2, [pc, #48]	; (a98c <mem_manage_fault+0x1b0>)
    a95a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    a95e:	6253      	str	r3, [r2, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    a960:	4b0a      	ldr	r3, [pc, #40]	; (a98c <mem_manage_fault+0x1b0>)
    a962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a964:	4a09      	ldr	r2, [pc, #36]	; (a98c <mem_manage_fault+0x1b0>)
    a966:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    a96a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    a96c:	2101      	movs	r1, #1
    a96e:	68f8      	ldr	r0, [r7, #12]
    a970:	f00f fbe8 	bl	1a144 <memory_fault_recoverable>
    a974:	4603      	mov	r3, r0
    a976:	461a      	mov	r2, r3
    a978:	687b      	ldr	r3, [r7, #4]
    a97a:	701a      	strb	r2, [r3, #0]

	return reason;
    a97c:	69fb      	ldr	r3, [r7, #28]
}
    a97e:	4618      	mov	r0, r3
    a980:	3720      	adds	r7, #32
    a982:	46bd      	mov	sp, r7
    a984:	bd80      	pop	{r7, pc}
    a986:	bf00      	nop
    a988:	000211f0 	.word	0x000211f0
    a98c:	e000ed00 	.word	0xe000ed00
    a990:	0002120c 	.word	0x0002120c
    a994:	00021244 	.word	0x00021244
    a998:	0002125c 	.word	0x0002125c
    a99c:	0002127c 	.word	0x0002127c
    a9a0:	00021298 	.word	0x00021298
    a9a4:	000212bc 	.word	0x000212bc
    a9a8:	000212f0 	.word	0x000212f0
    a9ac:	0002132c 	.word	0x0002132c
    a9b0:	00021378 	.word	0x00021378
    a9b4:	00021398 	.word	0x00021398

0000a9b8 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    a9b8:	b580      	push	{r7, lr}
    a9ba:	b086      	sub	sp, #24
    a9bc:	af00      	add	r7, sp, #0
    a9be:	60f8      	str	r0, [r7, #12]
    a9c0:	60b9      	str	r1, [r7, #8]
    a9c2:	607a      	str	r2, [r7, #4]
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    a9c4:	2316      	movs	r3, #22
    a9c6:	617b      	str	r3, [r7, #20]

	PR_FAULT_INFO("***** BUS FAULT *****");
    a9c8:	2303      	movs	r3, #3
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	d007      	beq.n	a9de <bus_fault+0x26>
    a9ce:	2001      	movs	r0, #1
    a9d0:	f7ff fee2 	bl	a798 <z_log_minimal_level_to_char>
    a9d4:	4603      	mov	r3, r0
    a9d6:	4619      	mov	r1, r3
    a9d8:	4853      	ldr	r0, [pc, #332]	; (ab28 <bus_fault+0x170>)
    a9da:	f00f fb0e 	bl	19ffa <z_log_minimal_printk>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    a9de:	4b53      	ldr	r3, [pc, #332]	; (ab2c <bus_fault+0x174>)
    a9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a9e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    a9e6:	2b00      	cmp	r3, #0
    a9e8:	d00c      	beq.n	aa04 <bus_fault+0x4c>
		reason = K_ERR_ARM_BUS_STACKING;
    a9ea:	2317      	movs	r3, #23
    a9ec:	617b      	str	r3, [r7, #20]
		PR_FAULT_INFO("  Stacking error");
    a9ee:	2303      	movs	r3, #3
    a9f0:	2b00      	cmp	r3, #0
    a9f2:	d007      	beq.n	aa04 <bus_fault+0x4c>
    a9f4:	2001      	movs	r0, #1
    a9f6:	f7ff fecf 	bl	a798 <z_log_minimal_level_to_char>
    a9fa:	4603      	mov	r3, r0
    a9fc:	4619      	mov	r1, r3
    a9fe:	484c      	ldr	r0, [pc, #304]	; (ab30 <bus_fault+0x178>)
    aa00:	f00f fafb 	bl	19ffa <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    aa04:	4b49      	ldr	r3, [pc, #292]	; (ab2c <bus_fault+0x174>)
    aa06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aa08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    aa0c:	2b00      	cmp	r3, #0
    aa0e:	d00c      	beq.n	aa2a <bus_fault+0x72>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    aa10:	2318      	movs	r3, #24
    aa12:	617b      	str	r3, [r7, #20]
		PR_FAULT_INFO("  Unstacking error");
    aa14:	2303      	movs	r3, #3
    aa16:	2b00      	cmp	r3, #0
    aa18:	d007      	beq.n	aa2a <bus_fault+0x72>
    aa1a:	2001      	movs	r0, #1
    aa1c:	f7ff febc 	bl	a798 <z_log_minimal_level_to_char>
    aa20:	4603      	mov	r3, r0
    aa22:	4619      	mov	r1, r3
    aa24:	4843      	ldr	r0, [pc, #268]	; (ab34 <bus_fault+0x17c>)
    aa26:	f00f fae8 	bl	19ffa <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    aa2a:	4b40      	ldr	r3, [pc, #256]	; (ab2c <bus_fault+0x174>)
    aa2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aa2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
    aa32:	2b00      	cmp	r3, #0
    aa34:	d02a      	beq.n	aa8c <bus_fault+0xd4>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    aa36:	2319      	movs	r3, #25
    aa38:	617b      	str	r3, [r7, #20]
		PR_FAULT_INFO("  Precise data bus error");
    aa3a:	2303      	movs	r3, #3
    aa3c:	2b00      	cmp	r3, #0
    aa3e:	d007      	beq.n	aa50 <bus_fault+0x98>
    aa40:	2001      	movs	r0, #1
    aa42:	f7ff fea9 	bl	a798 <z_log_minimal_level_to_char>
    aa46:	4603      	mov	r3, r0
    aa48:	4619      	mov	r1, r3
    aa4a:	483b      	ldr	r0, [pc, #236]	; (ab38 <bus_fault+0x180>)
    aa4c:	f00f fad5 	bl	19ffa <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    aa50:	4b36      	ldr	r3, [pc, #216]	; (ab2c <bus_fault+0x174>)
    aa52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    aa54:	613b      	str	r3, [r7, #16]

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    aa56:	4b35      	ldr	r3, [pc, #212]	; (ab2c <bus_fault+0x174>)
    aa58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aa5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    aa5e:	2b00      	cmp	r3, #0
    aa60:	d014      	beq.n	aa8c <bus_fault+0xd4>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    aa62:	2303      	movs	r3, #3
    aa64:	2b00      	cmp	r3, #0
    aa66:	d008      	beq.n	aa7a <bus_fault+0xc2>
    aa68:	2001      	movs	r0, #1
    aa6a:	f7ff fe95 	bl	a798 <z_log_minimal_level_to_char>
    aa6e:	4603      	mov	r3, r0
    aa70:	693a      	ldr	r2, [r7, #16]
    aa72:	4619      	mov	r1, r3
    aa74:	4831      	ldr	r0, [pc, #196]	; (ab3c <bus_fault+0x184>)
    aa76:	f00f fac0 	bl	19ffa <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    aa7a:	68bb      	ldr	r3, [r7, #8]
    aa7c:	2b00      	cmp	r3, #0
    aa7e:	d005      	beq.n	aa8c <bus_fault+0xd4>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    aa80:	4b2a      	ldr	r3, [pc, #168]	; (ab2c <bus_fault+0x174>)
    aa82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aa84:	4a29      	ldr	r2, [pc, #164]	; (ab2c <bus_fault+0x174>)
    aa86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    aa8a:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    aa8c:	4b27      	ldr	r3, [pc, #156]	; (ab2c <bus_fault+0x174>)
    aa8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aa90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    aa94:	2b00      	cmp	r3, #0
    aa96:	d00c      	beq.n	aab2 <bus_fault+0xfa>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    aa98:	231a      	movs	r3, #26
    aa9a:	617b      	str	r3, [r7, #20]
		PR_FAULT_INFO("  Imprecise data bus error");
    aa9c:	2303      	movs	r3, #3
    aa9e:	2b00      	cmp	r3, #0
    aaa0:	d007      	beq.n	aab2 <bus_fault+0xfa>
    aaa2:	2001      	movs	r0, #1
    aaa4:	f7ff fe78 	bl	a798 <z_log_minimal_level_to_char>
    aaa8:	4603      	mov	r3, r0
    aaaa:	4619      	mov	r1, r3
    aaac:	4824      	ldr	r0, [pc, #144]	; (ab40 <bus_fault+0x188>)
    aaae:	f00f faa4 	bl	19ffa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    aab2:	4b1e      	ldr	r3, [pc, #120]	; (ab2c <bus_fault+0x174>)
    aab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    aaba:	2b00      	cmp	r3, #0
    aabc:	d00d      	beq.n	aada <bus_fault+0x122>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    aabe:	231b      	movs	r3, #27
    aac0:	617b      	str	r3, [r7, #20]
		PR_FAULT_INFO("  Instruction bus error");
    aac2:	2303      	movs	r3, #3
    aac4:	2b00      	cmp	r3, #0
    aac6:	d01b      	beq.n	ab00 <bus_fault+0x148>
    aac8:	2001      	movs	r0, #1
    aaca:	f7ff fe65 	bl	a798 <z_log_minimal_level_to_char>
    aace:	4603      	mov	r3, r0
    aad0:	4619      	mov	r1, r3
    aad2:	481c      	ldr	r0, [pc, #112]	; (ab44 <bus_fault+0x18c>)
    aad4:	f00f fa91 	bl	19ffa <z_log_minimal_printk>
    aad8:	e012      	b.n	ab00 <bus_fault+0x148>
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    aada:	4b14      	ldr	r3, [pc, #80]	; (ab2c <bus_fault+0x174>)
    aadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    aae2:	2b00      	cmp	r3, #0
    aae4:	d00c      	beq.n	ab00 <bus_fault+0x148>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    aae6:	231c      	movs	r3, #28
    aae8:	617b      	str	r3, [r7, #20]
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    aaea:	2303      	movs	r3, #3
    aaec:	2b00      	cmp	r3, #0
    aaee:	d007      	beq.n	ab00 <bus_fault+0x148>
    aaf0:	2001      	movs	r0, #1
    aaf2:	f7ff fe51 	bl	a798 <z_log_minimal_level_to_char>
    aaf6:	4603      	mov	r3, r0
    aaf8:	4619      	mov	r1, r3
    aafa:	4813      	ldr	r0, [pc, #76]	; (ab48 <bus_fault+0x190>)
    aafc:	f00f fa7d 	bl	19ffa <z_log_minimal_printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    ab00:	4b0a      	ldr	r3, [pc, #40]	; (ab2c <bus_fault+0x174>)
    ab02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ab04:	4a09      	ldr	r2, [pc, #36]	; (ab2c <bus_fault+0x174>)
    ab06:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    ab0a:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    ab0c:	2101      	movs	r1, #1
    ab0e:	68f8      	ldr	r0, [r7, #12]
    ab10:	f00f fb18 	bl	1a144 <memory_fault_recoverable>
    ab14:	4603      	mov	r3, r0
    ab16:	461a      	mov	r2, r3
    ab18:	687b      	ldr	r3, [r7, #4]
    ab1a:	701a      	strb	r2, [r3, #0]

	return reason;
    ab1c:	697b      	ldr	r3, [r7, #20]
}
    ab1e:	4618      	mov	r0, r3
    ab20:	3718      	adds	r7, #24
    ab22:	46bd      	mov	sp, r7
    ab24:	bd80      	pop	{r7, pc}
    ab26:	bf00      	nop
    ab28:	000213fc 	.word	0x000213fc
    ab2c:	e000ed00 	.word	0xe000ed00
    ab30:	00021418 	.word	0x00021418
    ab34:	00021244 	.word	0x00021244
    ab38:	00021430 	.word	0x00021430
    ab3c:	00021450 	.word	0x00021450
    ab40:	0002146c 	.word	0x0002146c
    ab44:	0002148c 	.word	0x0002148c
    ab48:	000212bc 	.word	0x000212bc

0000ab4c <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    ab4c:	b580      	push	{r7, lr}
    ab4e:	b084      	sub	sp, #16
    ab50:	af00      	add	r7, sp, #0
    ab52:	6078      	str	r0, [r7, #4]
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    ab54:	231d      	movs	r3, #29
    ab56:	60fb      	str	r3, [r7, #12]

	PR_FAULT_INFO("***** USAGE FAULT *****");
    ab58:	2303      	movs	r3, #3
    ab5a:	2b00      	cmp	r3, #0
    ab5c:	d007      	beq.n	ab6e <usage_fault+0x22>
    ab5e:	2001      	movs	r0, #1
    ab60:	f7ff fe1a 	bl	a798 <z_log_minimal_level_to_char>
    ab64:	4603      	mov	r3, r0
    ab66:	4619      	mov	r1, r3
    ab68:	484b      	ldr	r0, [pc, #300]	; (ac98 <usage_fault+0x14c>)
    ab6a:	f00f fa46 	bl	19ffa <z_log_minimal_printk>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    ab6e:	4b4b      	ldr	r3, [pc, #300]	; (ac9c <usage_fault+0x150>)
    ab70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ab72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    ab76:	2b00      	cmp	r3, #0
    ab78:	d00c      	beq.n	ab94 <usage_fault+0x48>
		reason = K_ERR_ARM_USAGE_DIV_0;
    ab7a:	231e      	movs	r3, #30
    ab7c:	60fb      	str	r3, [r7, #12]
		PR_FAULT_INFO("  Division by zero");
    ab7e:	2303      	movs	r3, #3
    ab80:	2b00      	cmp	r3, #0
    ab82:	d007      	beq.n	ab94 <usage_fault+0x48>
    ab84:	2001      	movs	r0, #1
    ab86:	f7ff fe07 	bl	a798 <z_log_minimal_level_to_char>
    ab8a:	4603      	mov	r3, r0
    ab8c:	4619      	mov	r1, r3
    ab8e:	4844      	ldr	r0, [pc, #272]	; (aca0 <usage_fault+0x154>)
    ab90:	f00f fa33 	bl	19ffa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    ab94:	4b41      	ldr	r3, [pc, #260]	; (ac9c <usage_fault+0x150>)
    ab96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ab98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    ab9c:	2b00      	cmp	r3, #0
    ab9e:	d00c      	beq.n	abba <usage_fault+0x6e>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    aba0:	231f      	movs	r3, #31
    aba2:	60fb      	str	r3, [r7, #12]
		PR_FAULT_INFO("  Unaligned memory access");
    aba4:	2303      	movs	r3, #3
    aba6:	2b00      	cmp	r3, #0
    aba8:	d007      	beq.n	abba <usage_fault+0x6e>
    abaa:	2001      	movs	r0, #1
    abac:	f7ff fdf4 	bl	a798 <z_log_minimal_level_to_char>
    abb0:	4603      	mov	r3, r0
    abb2:	4619      	mov	r1, r3
    abb4:	483b      	ldr	r0, [pc, #236]	; (aca4 <usage_fault+0x158>)
    abb6:	f00f fa20 	bl	19ffa <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    abba:	4b38      	ldr	r3, [pc, #224]	; (ac9c <usage_fault+0x150>)
    abbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    abbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    abc2:	2b00      	cmp	r3, #0
    abc4:	d00e      	beq.n	abe4 <usage_fault+0x98>
		reason = K_ERR_ARM_USAGE_STACK_OVERFLOW;
    abc6:	2320      	movs	r3, #32
    abc8:	60fb      	str	r3, [r7, #12]
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    abca:	2303      	movs	r3, #3
    abcc:	2b00      	cmp	r3, #0
    abce:	d007      	beq.n	abe0 <usage_fault+0x94>
    abd0:	2001      	movs	r0, #1
    abd2:	f7ff fde1 	bl	a798 <z_log_minimal_level_to_char>
    abd6:	4603      	mov	r3, r0
    abd8:	4619      	mov	r1, r3
    abda:	4833      	ldr	r0, [pc, #204]	; (aca8 <usage_fault+0x15c>)
    abdc:	f00f fa0d 	bl	19ffa <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    abe0:	2302      	movs	r3, #2
    abe2:	60fb      	str	r3, [r7, #12]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    abe4:	4b2d      	ldr	r3, [pc, #180]	; (ac9c <usage_fault+0x150>)
    abe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    abe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    abec:	2b00      	cmp	r3, #0
    abee:	d00c      	beq.n	ac0a <usage_fault+0xbe>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    abf0:	2321      	movs	r3, #33	; 0x21
    abf2:	60fb      	str	r3, [r7, #12]
		PR_FAULT_INFO("  No coprocessor instructions");
    abf4:	2303      	movs	r3, #3
    abf6:	2b00      	cmp	r3, #0
    abf8:	d007      	beq.n	ac0a <usage_fault+0xbe>
    abfa:	2001      	movs	r0, #1
    abfc:	f7ff fdcc 	bl	a798 <z_log_minimal_level_to_char>
    ac00:	4603      	mov	r3, r0
    ac02:	4619      	mov	r1, r3
    ac04:	4829      	ldr	r0, [pc, #164]	; (acac <usage_fault+0x160>)
    ac06:	f00f f9f8 	bl	19ffa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    ac0a:	4b24      	ldr	r3, [pc, #144]	; (ac9c <usage_fault+0x150>)
    ac0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ac0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    ac12:	2b00      	cmp	r3, #0
    ac14:	d00c      	beq.n	ac30 <usage_fault+0xe4>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    ac16:	2322      	movs	r3, #34	; 0x22
    ac18:	60fb      	str	r3, [r7, #12]
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    ac1a:	2303      	movs	r3, #3
    ac1c:	2b00      	cmp	r3, #0
    ac1e:	d007      	beq.n	ac30 <usage_fault+0xe4>
    ac20:	2001      	movs	r0, #1
    ac22:	f7ff fdb9 	bl	a798 <z_log_minimal_level_to_char>
    ac26:	4603      	mov	r3, r0
    ac28:	4619      	mov	r1, r3
    ac2a:	4821      	ldr	r0, [pc, #132]	; (acb0 <usage_fault+0x164>)
    ac2c:	f00f f9e5 	bl	19ffa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    ac30:	4b1a      	ldr	r3, [pc, #104]	; (ac9c <usage_fault+0x150>)
    ac32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ac34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    ac38:	2b00      	cmp	r3, #0
    ac3a:	d00c      	beq.n	ac56 <usage_fault+0x10a>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    ac3c:	2323      	movs	r3, #35	; 0x23
    ac3e:	60fb      	str	r3, [r7, #12]
		PR_FAULT_INFO("  Illegal use of the EPSR");
    ac40:	2303      	movs	r3, #3
    ac42:	2b00      	cmp	r3, #0
    ac44:	d007      	beq.n	ac56 <usage_fault+0x10a>
    ac46:	2001      	movs	r0, #1
    ac48:	f7ff fda6 	bl	a798 <z_log_minimal_level_to_char>
    ac4c:	4603      	mov	r3, r0
    ac4e:	4619      	mov	r1, r3
    ac50:	4818      	ldr	r0, [pc, #96]	; (acb4 <usage_fault+0x168>)
    ac52:	f00f f9d2 	bl	19ffa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    ac56:	4b11      	ldr	r3, [pc, #68]	; (ac9c <usage_fault+0x150>)
    ac58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ac5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    ac5e:	2b00      	cmp	r3, #0
    ac60:	d00c      	beq.n	ac7c <usage_fault+0x130>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    ac62:	2324      	movs	r3, #36	; 0x24
    ac64:	60fb      	str	r3, [r7, #12]
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    ac66:	2303      	movs	r3, #3
    ac68:	2b00      	cmp	r3, #0
    ac6a:	d007      	beq.n	ac7c <usage_fault+0x130>
    ac6c:	2001      	movs	r0, #1
    ac6e:	f7ff fd93 	bl	a798 <z_log_minimal_level_to_char>
    ac72:	4603      	mov	r3, r0
    ac74:	4619      	mov	r1, r3
    ac76:	4810      	ldr	r0, [pc, #64]	; (acb8 <usage_fault+0x16c>)
    ac78:	f00f f9bf 	bl	19ffa <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    ac7c:	4b07      	ldr	r3, [pc, #28]	; (ac9c <usage_fault+0x150>)
    ac7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ac80:	4a06      	ldr	r2, [pc, #24]	; (ac9c <usage_fault+0x150>)
    ac82:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    ac86:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    ac8a:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
    ac8c:	68fb      	ldr	r3, [r7, #12]
}
    ac8e:	4618      	mov	r0, r3
    ac90:	3710      	adds	r7, #16
    ac92:	46bd      	mov	sp, r7
    ac94:	bd80      	pop	{r7, pc}
    ac96:	bf00      	nop
    ac98:	000214ac 	.word	0x000214ac
    ac9c:	e000ed00 	.word	0xe000ed00
    aca0:	000214cc 	.word	0x000214cc
    aca4:	000214e4 	.word	0x000214e4
    aca8:	00021504 	.word	0x00021504
    acac:	00021534 	.word	0x00021534
    acb0:	00021558 	.word	0x00021558
    acb4:	00021584 	.word	0x00021584
    acb8:	000215a4 	.word	0x000215a4

0000acbc <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    acbc:	b580      	push	{r7, lr}
    acbe:	b082      	sub	sp, #8
    acc0:	af00      	add	r7, sp, #0
    acc2:	6078      	str	r0, [r7, #4]
    acc4:	6039      	str	r1, [r7, #0]
	*recoverable = false;
    acc6:	683b      	ldr	r3, [r7, #0]
    acc8:	2200      	movs	r2, #0
    acca:	701a      	strb	r2, [r3, #0]

	PR_FAULT_INFO(
    accc:	2303      	movs	r3, #3
    acce:	2b00      	cmp	r3, #0
    acd0:	d007      	beq.n	ace2 <debug_monitor+0x26>
    acd2:	2001      	movs	r0, #1
    acd4:	f7ff fd60 	bl	a798 <z_log_minimal_level_to_char>
    acd8:	4603      	mov	r3, r0
    acda:	4619      	mov	r1, r3
    acdc:	4803      	ldr	r0, [pc, #12]	; (acec <debug_monitor+0x30>)
    acde:	f00f f98c 	bl	19ffa <z_log_minimal_printk>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    ace2:	bf00      	nop
    ace4:	3708      	adds	r7, #8
    ace6:	46bd      	mov	sp, r7
    ace8:	bd80      	pop	{r7, pc}
    acea:	bf00      	nop
    acec:	000215d4 	.word	0x000215d4

0000acf0 <z_arm_is_synchronous_svc>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
    acf0:	b480      	push	{r7}
    acf2:	b085      	sub	sp, #20
    acf4:	af00      	add	r7, sp, #0
    acf6:	6078      	str	r0, [r7, #4]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    acf8:	687b      	ldr	r3, [r7, #4]
    acfa:	699b      	ldr	r3, [r3, #24]
    acfc:	60fb      	str	r3, [r7, #12]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    acfe:	4b1b      	ldr	r3, [pc, #108]	; (ad6c <z_arm_is_synchronous_svc+0x7c>)
    ad00:	695b      	ldr	r3, [r3, #20]
    ad02:	4a1a      	ldr	r2, [pc, #104]	; (ad6c <z_arm_is_synchronous_svc+0x7c>)
    ad04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    ad08:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    ad0a:	f3bf 8f4f 	dsb	sy
}
    ad0e:	bf00      	nop
}
    ad10:	bf00      	nop
}
    ad12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    ad14:	f3bf 8f6f 	isb	sy
}
    ad18:	bf00      	nop
}
    ad1a:	bf00      	nop
}
    ad1c:	bf00      	nop
	barrier_dsync_fence_full();
	barrier_isync_fence_full();

	uint16_t fault_insn = *(ret_addr - 1);
    ad1e:	68fb      	ldr	r3, [r7, #12]
    ad20:	f833 3c02 	ldrh.w	r3, [r3, #-2]
    ad24:	817b      	strh	r3, [r7, #10]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    ad26:	4b11      	ldr	r3, [pc, #68]	; (ad6c <z_arm_is_synchronous_svc+0x7c>)
    ad28:	695b      	ldr	r3, [r3, #20]
    ad2a:	4a10      	ldr	r2, [pc, #64]	; (ad6c <z_arm_is_synchronous_svc+0x7c>)
    ad2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    ad30:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    ad32:	f3bf 8f4f 	dsb	sy
}
    ad36:	bf00      	nop
}
    ad38:	bf00      	nop
}
    ad3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    ad3c:	f3bf 8f6f 	isb	sy
}
    ad40:	bf00      	nop
}
    ad42:	bf00      	nop
}
    ad44:	bf00      	nop
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    ad46:	897b      	ldrh	r3, [r7, #10]
    ad48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    ad4c:	f5b3 4f5f 	cmp.w	r3, #57088	; 0xdf00
    ad50:	d105      	bne.n	ad5e <z_arm_is_synchronous_svc+0x6e>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
    ad52:	897b      	ldrh	r3, [r7, #10]
    ad54:	b2db      	uxtb	r3, r3
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    ad56:	2b02      	cmp	r3, #2
    ad58:	d101      	bne.n	ad5e <z_arm_is_synchronous_svc+0x6e>
		return true;
    ad5a:	2301      	movs	r3, #1
    ad5c:	e000      	b.n	ad60 <z_arm_is_synchronous_svc+0x70>
	}
#undef _SVC_OPCODE
	return false;
    ad5e:	2300      	movs	r3, #0
}
    ad60:	4618      	mov	r0, r3
    ad62:	3714      	adds	r7, #20
    ad64:	46bd      	mov	sp, r7
    ad66:	bc80      	pop	{r7}
    ad68:	4770      	bx	lr
    ad6a:	bf00      	nop
    ad6c:	e000ed00 	.word	0xe000ed00

0000ad70 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    ad70:	b580      	push	{r7, lr}
    ad72:	b084      	sub	sp, #16
    ad74:	af00      	add	r7, sp, #0
    ad76:	6078      	str	r0, [r7, #4]
    ad78:	6039      	str	r1, [r7, #0]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    ad7a:	2300      	movs	r3, #0
    ad7c:	60fb      	str	r3, [r7, #12]

	PR_FAULT_INFO("***** HARD FAULT *****");
    ad7e:	2303      	movs	r3, #3
    ad80:	2b00      	cmp	r3, #0
    ad82:	d007      	beq.n	ad94 <hard_fault+0x24>
    ad84:	2001      	movs	r0, #1
    ad86:	f7ff fd07 	bl	a798 <z_log_minimal_level_to_char>
    ad8a:	4603      	mov	r3, r0
    ad8c:	4619      	mov	r1, r3
    ad8e:	484c      	ldr	r0, [pc, #304]	; (aec0 <hard_fault+0x150>)
    ad90:	f00f f933 	bl	19ffa <z_log_minimal_printk>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    ad94:	683b      	ldr	r3, [r7, #0]
    ad96:	2200      	movs	r2, #0
    ad98:	701a      	strb	r2, [r3, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    ad9a:	4b4a      	ldr	r3, [pc, #296]	; (aec4 <hard_fault+0x154>)
    ad9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ad9e:	f003 0302 	and.w	r3, r3, #2
    ada2:	2b00      	cmp	r3, #0
    ada4:	d00c      	beq.n	adc0 <hard_fault+0x50>
		PR_EXC("  Bus fault on vector table read");
    ada6:	2303      	movs	r3, #3
    ada8:	2b00      	cmp	r3, #0
    adaa:	f000 8084 	beq.w	aeb6 <hard_fault+0x146>
    adae:	2001      	movs	r0, #1
    adb0:	f7ff fcf2 	bl	a798 <z_log_minimal_level_to_char>
    adb4:	4603      	mov	r3, r0
    adb6:	4619      	mov	r1, r3
    adb8:	4843      	ldr	r0, [pc, #268]	; (aec8 <hard_fault+0x158>)
    adba:	f00f f91e 	bl	19ffa <z_log_minimal_printk>
    adbe:	e07a      	b.n	aeb6 <hard_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    adc0:	4b40      	ldr	r3, [pc, #256]	; (aec4 <hard_fault+0x154>)
    adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    adc4:	2b00      	cmp	r3, #0
    adc6:	da0b      	bge.n	ade0 <hard_fault+0x70>
		PR_EXC("  Debug event");
    adc8:	2303      	movs	r3, #3
    adca:	2b00      	cmp	r3, #0
    adcc:	d073      	beq.n	aeb6 <hard_fault+0x146>
    adce:	2001      	movs	r0, #1
    add0:	f7ff fce2 	bl	a798 <z_log_minimal_level_to_char>
    add4:	4603      	mov	r3, r0
    add6:	4619      	mov	r1, r3
    add8:	483c      	ldr	r0, [pc, #240]	; (aecc <hard_fault+0x15c>)
    adda:	f00f f90e 	bl	19ffa <z_log_minimal_printk>
    adde:	e06a      	b.n	aeb6 <hard_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    ade0:	4b38      	ldr	r3, [pc, #224]	; (aec4 <hard_fault+0x154>)
    ade2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ade4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    ade8:	2b00      	cmp	r3, #0
    adea:	d055      	beq.n	ae98 <hard_fault+0x128>
		PR_EXC("  Fault escalation (see below)");
    adec:	2303      	movs	r3, #3
    adee:	2b00      	cmp	r3, #0
    adf0:	d007      	beq.n	ae02 <hard_fault+0x92>
    adf2:	2001      	movs	r0, #1
    adf4:	f7ff fcd0 	bl	a798 <z_log_minimal_level_to_char>
    adf8:	4603      	mov	r3, r0
    adfa:	4619      	mov	r1, r3
    adfc:	4834      	ldr	r0, [pc, #208]	; (aed0 <hard_fault+0x160>)
    adfe:	f00f f8fc 	bl	19ffa <z_log_minimal_printk>
		if (z_arm_is_synchronous_svc(esf)) {
    ae02:	6878      	ldr	r0, [r7, #4]
    ae04:	f7ff ff74 	bl	acf0 <z_arm_is_synchronous_svc>
    ae08:	4603      	mov	r3, r0
    ae0a:	2b00      	cmp	r3, #0
    ae0c:	d011      	beq.n	ae32 <hard_fault+0xc2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    ae0e:	2303      	movs	r3, #3
    ae10:	2b00      	cmp	r3, #0
    ae12:	d00a      	beq.n	ae2a <hard_fault+0xba>
    ae14:	2001      	movs	r0, #1
    ae16:	f7ff fcbf 	bl	a798 <z_log_minimal_level_to_char>
    ae1a:	4603      	mov	r3, r0
    ae1c:	4619      	mov	r1, r3
    ae1e:	687b      	ldr	r3, [r7, #4]
    ae20:	681b      	ldr	r3, [r3, #0]
    ae22:	461a      	mov	r2, r3
    ae24:	482b      	ldr	r0, [pc, #172]	; (aed4 <hard_fault+0x164>)
    ae26:	f00f f8e8 	bl	19ffa <z_log_minimal_printk>
			reason = esf->basic.r0;
    ae2a:	687b      	ldr	r3, [r7, #4]
    ae2c:	681b      	ldr	r3, [r3, #0]
    ae2e:	60fb      	str	r3, [r7, #12]
    ae30:	e041      	b.n	aeb6 <hard_fault+0x146>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    ae32:	4b24      	ldr	r3, [pc, #144]	; (aec4 <hard_fault+0x154>)
    ae34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ae36:	b2db      	uxtb	r3, r3
    ae38:	2b00      	cmp	r3, #0
    ae3a:	d006      	beq.n	ae4a <hard_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
    ae3c:	683a      	ldr	r2, [r7, #0]
    ae3e:	2101      	movs	r1, #1
    ae40:	6878      	ldr	r0, [r7, #4]
    ae42:	f7ff fccb 	bl	a7dc <mem_manage_fault>
    ae46:	60f8      	str	r0, [r7, #12]
    ae48:	e035      	b.n	aeb6 <hard_fault+0x146>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    ae4a:	4b1e      	ldr	r3, [pc, #120]	; (aec4 <hard_fault+0x154>)
    ae4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ae4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    ae52:	2b00      	cmp	r3, #0
    ae54:	d007      	beq.n	ae66 <hard_fault+0xf6>
			reason = bus_fault(esf, 1, recoverable);
    ae56:	683a      	ldr	r2, [r7, #0]
    ae58:	2101      	movs	r1, #1
    ae5a:	6878      	ldr	r0, [r7, #4]
    ae5c:	f7ff fdac 	bl	a9b8 <bus_fault>
    ae60:	4603      	mov	r3, r0
    ae62:	60fb      	str	r3, [r7, #12]
    ae64:	e027      	b.n	aeb6 <hard_fault+0x146>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    ae66:	4b17      	ldr	r3, [pc, #92]	; (aec4 <hard_fault+0x154>)
    ae68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ae6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ae6e:	d304      	bcc.n	ae7a <hard_fault+0x10a>
			reason = usage_fault(esf);
    ae70:	6878      	ldr	r0, [r7, #4]
    ae72:	f7ff fe6b 	bl	ab4c <usage_fault>
    ae76:	60f8      	str	r0, [r7, #12]
    ae78:	e01d      	b.n	aeb6 <hard_fault+0x146>
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
		} else if (SAU->SFSR != 0) {
			reason = secure_fault(esf);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
		} else {
			__ASSERT(0,
    ae7a:	f240 332a 	movw	r3, #810	; 0x32a
    ae7e:	4a16      	ldr	r2, [pc, #88]	; (aed8 <hard_fault+0x168>)
    ae80:	4916      	ldr	r1, [pc, #88]	; (aedc <hard_fault+0x16c>)
    ae82:	4817      	ldr	r0, [pc, #92]	; (aee0 <hard_fault+0x170>)
    ae84:	f00f f896 	bl	19fb4 <assert_print>
    ae88:	4816      	ldr	r0, [pc, #88]	; (aee4 <hard_fault+0x174>)
    ae8a:	f00f f893 	bl	19fb4 <assert_print>
    ae8e:	f240 312a 	movw	r1, #810	; 0x32a
    ae92:	4811      	ldr	r0, [pc, #68]	; (aed8 <hard_fault+0x168>)
    ae94:	f00f f87e 	bl	19f94 <assert_post_action>
			"Fault escalation without FSR info");
		}
	} else {
		__ASSERT(0,
    ae98:	f240 332e 	movw	r3, #814	; 0x32e
    ae9c:	4a0e      	ldr	r2, [pc, #56]	; (aed8 <hard_fault+0x168>)
    ae9e:	490f      	ldr	r1, [pc, #60]	; (aedc <hard_fault+0x16c>)
    aea0:	480f      	ldr	r0, [pc, #60]	; (aee0 <hard_fault+0x170>)
    aea2:	f00f f887 	bl	19fb4 <assert_print>
    aea6:	4810      	ldr	r0, [pc, #64]	; (aee8 <hard_fault+0x178>)
    aea8:	f00f f884 	bl	19fb4 <assert_print>
    aeac:	f240 312e 	movw	r1, #814	; 0x32e
    aeb0:	4809      	ldr	r0, [pc, #36]	; (aed8 <hard_fault+0x168>)
    aeb2:	f00f f86f 	bl	19f94 <assert_post_action>
	}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
    aeb6:	68fb      	ldr	r3, [r7, #12]
}
    aeb8:	4618      	mov	r0, r3
    aeba:	3710      	adds	r7, #16
    aebc:	46bd      	mov	sp, r7
    aebe:	bd80      	pop	{r7, pc}
    aec0:	00021600 	.word	0x00021600
    aec4:	e000ed00 	.word	0xe000ed00
    aec8:	0002161c 	.word	0x0002161c
    aecc:	00021644 	.word	0x00021644
    aed0:	00021658 	.word	0x00021658
    aed4:	0002167c 	.word	0x0002167c
    aed8:	000212f0 	.word	0x000212f0
    aedc:	000216a0 	.word	0x000216a0
    aee0:	00021378 	.word	0x00021378
    aee4:	000216a4 	.word	0x000216a4
    aee8:	000216c8 	.word	0x000216c8

0000aeec <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    aeec:	b580      	push	{r7, lr}
    aeee:	b082      	sub	sp, #8
    aef0:	af00      	add	r7, sp, #0
    aef2:	6078      	str	r0, [r7, #4]
    aef4:	6039      	str	r1, [r7, #0]
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    aef6:	2303      	movs	r3, #3
    aef8:	2b00      	cmp	r3, #0
    aefa:	d00f      	beq.n	af1c <reserved_exception+0x30>
    aefc:	2001      	movs	r0, #1
    aefe:	f7ff fc4b 	bl	a798 <z_log_minimal_level_to_char>
    af02:	4603      	mov	r3, r0
    af04:	4619      	mov	r1, r3
    af06:	683b      	ldr	r3, [r7, #0]
    af08:	2b0f      	cmp	r3, #15
    af0a:	dc01      	bgt.n	af10 <reserved_exception+0x24>
    af0c:	4a05      	ldr	r2, [pc, #20]	; (af24 <reserved_exception+0x38>)
    af0e:	e000      	b.n	af12 <reserved_exception+0x26>
    af10:	4a05      	ldr	r2, [pc, #20]	; (af28 <reserved_exception+0x3c>)
    af12:	683b      	ldr	r3, [r7, #0]
    af14:	3b10      	subs	r3, #16
    af16:	4805      	ldr	r0, [pc, #20]	; (af2c <reserved_exception+0x40>)
    af18:	f00f f86f 	bl	19ffa <z_log_minimal_printk>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    af1c:	bf00      	nop
    af1e:	3708      	adds	r7, #8
    af20:	46bd      	mov	sp, r7
    af22:	bd80      	pop	{r7, pc}
    af24:	000216f8 	.word	0x000216f8
    af28:	00021710 	.word	0x00021710
    af2c:	0002172c 	.word	0x0002172c

0000af30 <fault_handle>:

/* Handler function for ARM fault conditions. */
static uint32_t fault_handle(z_arch_esf_t *esf, int fault, bool *recoverable)
{
    af30:	b580      	push	{r7, lr}
    af32:	b086      	sub	sp, #24
    af34:	af00      	add	r7, sp, #0
    af36:	60f8      	str	r0, [r7, #12]
    af38:	60b9      	str	r1, [r7, #8]
    af3a:	607a      	str	r2, [r7, #4]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    af3c:	2300      	movs	r3, #0
    af3e:	617b      	str	r3, [r7, #20]

	*recoverable = false;
    af40:	687b      	ldr	r3, [r7, #4]
    af42:	2200      	movs	r2, #0
    af44:	701a      	strb	r2, [r3, #0]

	switch (fault) {
    af46:	68bb      	ldr	r3, [r7, #8]
    af48:	3b03      	subs	r3, #3
    af4a:	2b09      	cmp	r3, #9
    af4c:	d835      	bhi.n	afba <fault_handle+0x8a>
    af4e:	a201      	add	r2, pc, #4	; (adr r2, af54 <fault_handle+0x24>)
    af50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    af54:	0000af7d 	.word	0x0000af7d
    af58:	0000af89 	.word	0x0000af89
    af5c:	0000af97 	.word	0x0000af97
    af60:	0000afa7 	.word	0x0000afa7
    af64:	0000afbb 	.word	0x0000afbb
    af68:	0000afbb 	.word	0x0000afbb
    af6c:	0000afbb 	.word	0x0000afbb
    af70:	0000afbb 	.word	0x0000afbb
    af74:	0000afbb 	.word	0x0000afbb
    af78:	0000afb1 	.word	0x0000afb1
	case 3:
		reason = hard_fault(esf, recoverable);
    af7c:	6879      	ldr	r1, [r7, #4]
    af7e:	68f8      	ldr	r0, [r7, #12]
    af80:	f7ff fef6 	bl	ad70 <hard_fault>
    af84:	6178      	str	r0, [r7, #20]
		break;
    af86:	e01d      	b.n	afc4 <fault_handle+0x94>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	/* HardFault is raised for all fault conditions on ARMv6-M. */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	case 4:
		reason = mem_manage_fault(esf, 0, recoverable);
    af88:	687a      	ldr	r2, [r7, #4]
    af8a:	2100      	movs	r1, #0
    af8c:	68f8      	ldr	r0, [r7, #12]
    af8e:	f7ff fc25 	bl	a7dc <mem_manage_fault>
    af92:	6178      	str	r0, [r7, #20]
		break;
    af94:	e016      	b.n	afc4 <fault_handle+0x94>
	case 5:
		reason = bus_fault(esf, 0, recoverable);
    af96:	687a      	ldr	r2, [r7, #4]
    af98:	2100      	movs	r1, #0
    af9a:	68f8      	ldr	r0, [r7, #12]
    af9c:	f7ff fd0c 	bl	a9b8 <bus_fault>
    afa0:	4603      	mov	r3, r0
    afa2:	617b      	str	r3, [r7, #20]
		break;
    afa4:	e00e      	b.n	afc4 <fault_handle+0x94>
	case 6:
		reason = usage_fault(esf);
    afa6:	68f8      	ldr	r0, [r7, #12]
    afa8:	f7ff fdd0 	bl	ab4c <usage_fault>
    afac:	6178      	str	r0, [r7, #20]
		break;
    afae:	e009      	b.n	afc4 <fault_handle+0x94>
	case 7:
		secure_fault(esf);
		break;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	case 12:
		debug_monitor(esf, recoverable);
    afb0:	6879      	ldr	r1, [r7, #4]
    afb2:	68f8      	ldr	r0, [r7, #12]
    afb4:	f7ff fe82 	bl	acbc <debug_monitor>
		break;
    afb8:	e004      	b.n	afc4 <fault_handle+0x94>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	default:
		reserved_exception(esf, fault);
    afba:	68b9      	ldr	r1, [r7, #8]
    afbc:	68f8      	ldr	r0, [r7, #12]
    afbe:	f7ff ff95 	bl	aeec <reserved_exception>
		break;
    afc2:	bf00      	nop
	}

	if ((*recoverable) == false) {
    afc4:	687b      	ldr	r3, [r7, #4]
    afc6:	781b      	ldrb	r3, [r3, #0]
    afc8:	f083 0301 	eor.w	r3, r3, #1
    afcc:	b2db      	uxtb	r3, r3
    afce:	2b00      	cmp	r3, #0
    afd0:	d003      	beq.n	afda <fault_handle+0xaa>
		/* Dump generic information about the fault. */
		fault_show(esf, fault);
    afd2:	68b9      	ldr	r1, [r7, #8]
    afd4:	68f8      	ldr	r0, [r7, #12]
    afd6:	f00f f8ab 	bl	1a130 <fault_show>
	}

	return reason;
    afda:	697b      	ldr	r3, [r7, #20]
}
    afdc:	4618      	mov	r0, r3
    afde:	3718      	adds	r7, #24
    afe0:	46bd      	mov	sp, r7
    afe2:	bd80      	pop	{r7, pc}

0000afe4 <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
    afe4:	b580      	push	{r7, lr}
    afe6:	b086      	sub	sp, #24
    afe8:	af00      	add	r7, sp, #0
    afea:	60f8      	str	r0, [r7, #12]
    afec:	60b9      	str	r1, [r7, #8]
    afee:	607a      	str	r2, [r7, #4]
    aff0:	603b      	str	r3, [r7, #0]
	bool alternative_state_exc = false;
    aff2:	2300      	movs	r3, #0
    aff4:	75fb      	strb	r3, [r7, #23]
	z_arch_esf_t *ptr_esf = NULL;
    aff6:	2300      	movs	r3, #0
    aff8:	613b      	str	r3, [r7, #16]

	*nested_exc = false;
    affa:	683b      	ldr	r3, [r7, #0]
    affc:	2200      	movs	r2, #0
    affe:	701a      	strb	r2, [r3, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    b000:	687b      	ldr	r3, [r7, #4]
    b002:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    b006:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    b00a:	d001      	beq.n	b010 <get_esf+0x2c>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value. This is a fatal error. */
		return NULL;
    b00c:	2300      	movs	r3, #0
    b00e:	e036      	b.n	b07e <get_esf+0x9a>
		} else {
			ptr_esf = (z_arch_esf_t *)__TZ_get_MSP_NS();
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    b010:	687b      	ldr	r3, [r7, #4]
    b012:	f003 0301 	and.w	r3, r3, #1
    b016:	2b00      	cmp	r3, #0
    b018:	d001      	beq.n	b01e <get_esf+0x3a>
		/* Non-Secure Firmware shall only handle Non-Secure Exceptions.
		 * This is a fatal error.
		 */
		return NULL;
    b01a:	2300      	movs	r3, #0
    b01c:	e02f      	b.n	b07e <get_esf+0x9a>
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    b01e:	687b      	ldr	r3, [r7, #4]
    b020:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b024:	2b00      	cmp	r3, #0
    b026:	d016      	beq.n	b056 <get_esf+0x72>
		 * Note that Non-Secure firmware cannot inspect the Secure
		 * stack to determine the root cause of the fault. Fault
		 * inspection will indicate the Non-Secure instruction
		 * that performed the branch to the Secure domain.
		 */
		alternative_state_exc = true;
    b028:	2301      	movs	r3, #1
    b02a:	75fb      	strb	r3, [r7, #23]

		PR_FAULT_INFO("Exception occurred in Secure State");
    b02c:	2303      	movs	r3, #3
    b02e:	2b00      	cmp	r3, #0
    b030:	d007      	beq.n	b042 <get_esf+0x5e>
    b032:	2001      	movs	r0, #1
    b034:	f7ff fbb0 	bl	a798 <z_log_minimal_level_to_char>
    b038:	4603      	mov	r3, r0
    b03a:	4619      	mov	r1, r3
    b03c:	4812      	ldr	r0, [pc, #72]	; (b088 <get_esf+0xa4>)
    b03e:	f00e ffdc 	bl	19ffa <z_log_minimal_printk>

		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    b042:	687b      	ldr	r3, [r7, #4]
    b044:	f003 0304 	and.w	r3, r3, #4
    b048:	2b00      	cmp	r3, #0
    b04a:	d002      	beq.n	b052 <get_esf+0x6e>
			/* Non-Secure stack frame on PSP */
			ptr_esf = (z_arch_esf_t *)psp;
    b04c:	68bb      	ldr	r3, [r7, #8]
    b04e:	613b      	str	r3, [r7, #16]
    b050:	e001      	b.n	b056 <get_esf+0x72>
		} else {
			/* Non-Secure stack frame on MSP */
			ptr_esf = (z_arch_esf_t *)msp;
    b052:	68fb      	ldr	r3, [r7, #12]
    b054:	613b      	str	r3, [r7, #16]
		PR_EXC("SPSEL in thread mode does not indicate PSP");
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
    b056:	7dfb      	ldrb	r3, [r7, #23]
    b058:	f083 0301 	eor.w	r3, r3, #1
    b05c:	b2db      	uxtb	r3, r3
    b05e:	2b00      	cmp	r3, #0
    b060:	d00c      	beq.n	b07c <get_esf+0x98>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    b062:	687b      	ldr	r3, [r7, #4]
    b064:	f003 0308 	and.w	r3, r3, #8
    b068:	2b00      	cmp	r3, #0
    b06a:	d002      	beq.n	b072 <get_esf+0x8e>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
    b06c:	68bb      	ldr	r3, [r7, #8]
    b06e:	613b      	str	r3, [r7, #16]
    b070:	e004      	b.n	b07c <get_esf+0x98>

		} else {
			/* Returning to handler mode */
			ptr_esf = (z_arch_esf_t *)msp;
    b072:	68fb      	ldr	r3, [r7, #12]
    b074:	613b      	str	r3, [r7, #16]
			*nested_exc = true;
    b076:	683b      	ldr	r3, [r7, #0]
    b078:	2201      	movs	r2, #1
    b07a:	701a      	strb	r2, [r3, #0]
		}
	}

	return ptr_esf;
    b07c:	693b      	ldr	r3, [r7, #16]
}
    b07e:	4618      	mov	r0, r3
    b080:	3718      	adds	r7, #24
    b082:	46bd      	mov	sp, r7
    b084:	bd80      	pop	{r7, pc}
    b086:	bf00      	nop
    b088:	00021744 	.word	0x00021744

0000b08c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    b08c:	b580      	push	{r7, lr}
    b08e:	b092      	sub	sp, #72	; 0x48
    b090:	af00      	add	r7, sp, #0
    b092:	60f8      	str	r0, [r7, #12]
    b094:	60b9      	str	r1, [r7, #8]
    b096:	607a      	str	r2, [r7, #4]
    b098:	603b      	str	r3, [r7, #0]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    b09a:	2300      	movs	r3, #0
    b09c:	647b      	str	r3, [r7, #68]	; 0x44
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    b09e:	4b2d      	ldr	r3, [pc, #180]	; (b154 <z_arm_fault+0xc8>)
    b0a0:	685b      	ldr	r3, [r3, #4]
    b0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    b0a6:	643b      	str	r3, [r7, #64]	; 0x40
    b0a8:	2300      	movs	r3, #0
    b0aa:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
    b0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0ae:	f383 8811 	msr	BASEPRI, r3
    b0b2:	f3bf 8f6f 	isb	sy
}
    b0b6:	bf00      	nop
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
    b0b8:	f107 0336 	add.w	r3, r7, #54	; 0x36
    b0bc:	687a      	ldr	r2, [r7, #4]
    b0be:	68b9      	ldr	r1, [r7, #8]
    b0c0:	68f8      	ldr	r0, [r7, #12]
    b0c2:	f7ff ff8f 	bl	afe4 <get_esf>
    b0c6:	63f8      	str	r0, [r7, #60]	; 0x3c
	__ASSERT(esf != NULL,
    b0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0ca:	2b00      	cmp	r3, #0
    b0cc:	d10e      	bne.n	b0ec <z_arm_fault+0x60>
    b0ce:	f44f 638b 	mov.w	r3, #1112	; 0x458
    b0d2:	4a21      	ldr	r2, [pc, #132]	; (b158 <z_arm_fault+0xcc>)
    b0d4:	4921      	ldr	r1, [pc, #132]	; (b15c <z_arm_fault+0xd0>)
    b0d6:	4822      	ldr	r0, [pc, #136]	; (b160 <z_arm_fault+0xd4>)
    b0d8:	f00e ff6c 	bl	19fb4 <assert_print>
    b0dc:	4821      	ldr	r0, [pc, #132]	; (b164 <z_arm_fault+0xd8>)
    b0de:	f00e ff69 	bl	19fb4 <assert_print>
    b0e2:	f44f 618b 	mov.w	r1, #1112	; 0x458
    b0e6:	481c      	ldr	r0, [pc, #112]	; (b158 <z_arm_fault+0xcc>)
    b0e8:	f00e ff54 	bl	19f94 <assert_post_action>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    b0ec:	f107 0337 	add.w	r3, r7, #55	; 0x37
    b0f0:	461a      	mov	r2, r3
    b0f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
    b0f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b0f6:	f7ff ff1b 	bl	af30 <fault_handle>
    b0fa:	6478      	str	r0, [r7, #68]	; 0x44
	if (recoverable) {
    b0fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    b100:	2b00      	cmp	r3, #0
    b102:	d123      	bne.n	b14c <z_arm_fault+0xc0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    b104:	f107 0314 	add.w	r3, r7, #20
    b108:	2220      	movs	r2, #32
    b10a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    b10c:	4618      	mov	r0, r3
    b10e:	f014 fbde 	bl	1f8ce <__aeabi_memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    b112:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    b116:	2b00      	cmp	r3, #0
    b118:	d00b      	beq.n	b132 <z_arm_fault+0xa6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b11c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    b120:	2b00      	cmp	r3, #0
    b122:	d10c      	bne.n	b13e <z_arm_fault+0xb2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b126:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    b12a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    b12e:	633b      	str	r3, [r7, #48]	; 0x30
    b130:	e005      	b.n	b13e <z_arm_fault+0xb2>
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    b132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b134:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    b138:	f023 0301 	bic.w	r3, r3, #1
    b13c:	633b      	str	r3, [r7, #48]	; 0x30

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    b13e:	f107 0314 	add.w	r3, r7, #20
    b142:	4619      	mov	r1, r3
    b144:	6c78      	ldr	r0, [r7, #68]	; 0x44
    b146:	f00e ff6a 	bl	1a01e <z_arm_fatal_error>
    b14a:	e000      	b.n	b14e <z_arm_fault+0xc2>
		return;
    b14c:	bf00      	nop
}
    b14e:	3748      	adds	r7, #72	; 0x48
    b150:	46bd      	mov	sp, r7
    b152:	bd80      	pop	{r7, pc}
    b154:	e000ed00 	.word	0xe000ed00
    b158:	000212f0 	.word	0x000212f0
    b15c:	0002176c 	.word	0x0002176c
    b160:	00021378 	.word	0x00021378
    b164:	00021780 	.word	0x00021780

0000b168 <z_arm_fault_init>:
 *
 * Turns on the desired hardware faults.
 *
 */
void z_arm_fault_init(void)
{
    b168:	b480      	push	{r7}
    b16a:	af00      	add	r7, sp, #0
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    b16c:	4b07      	ldr	r3, [pc, #28]	; (b18c <z_arm_fault_init+0x24>)
    b16e:	695b      	ldr	r3, [r3, #20]
    b170:	4a06      	ldr	r2, [pc, #24]	; (b18c <z_arm_fault_init+0x24>)
    b172:	f043 0310 	orr.w	r3, r3, #16
    b176:	6153      	str	r3, [r2, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    b178:	4b04      	ldr	r3, [pc, #16]	; (b18c <z_arm_fault_init+0x24>)
    b17a:	695b      	ldr	r3, [r3, #20]
    b17c:	4a03      	ldr	r2, [pc, #12]	; (b18c <z_arm_fault_init+0x24>)
    b17e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    b182:	6153      	str	r3, [r2, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    b184:	bf00      	nop
    b186:	46bd      	mov	sp, r7
    b188:	bc80      	pop	{r7}
    b18a:	4770      	bx	lr
    b18c:	e000ed00 	.word	0xe000ed00

0000b190 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    b190:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    b194:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    b198:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    b19a:	4672      	mov	r2, lr
	bl z_arm_fault
    b19c:	f7ff ff76 	bl	b08c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    b1a0:	bd01      	pop	{r0, pc}
    b1a2:	bf00      	nop

0000b1a4 <__NVIC_SetPriority>:
{
    b1a4:	b480      	push	{r7}
    b1a6:	b083      	sub	sp, #12
    b1a8:	af00      	add	r7, sp, #0
    b1aa:	4603      	mov	r3, r0
    b1ac:	6039      	str	r1, [r7, #0]
    b1ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    b1b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    b1b4:	2b00      	cmp	r3, #0
    b1b6:	db0a      	blt.n	b1ce <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b1b8:	683b      	ldr	r3, [r7, #0]
    b1ba:	b2da      	uxtb	r2, r3
    b1bc:	490c      	ldr	r1, [pc, #48]	; (b1f0 <__NVIC_SetPriority+0x4c>)
    b1be:	f997 3007 	ldrsb.w	r3, [r7, #7]
    b1c2:	0152      	lsls	r2, r2, #5
    b1c4:	b2d2      	uxtb	r2, r2
    b1c6:	440b      	add	r3, r1
    b1c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    b1cc:	e00a      	b.n	b1e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b1ce:	683b      	ldr	r3, [r7, #0]
    b1d0:	b2da      	uxtb	r2, r3
    b1d2:	4908      	ldr	r1, [pc, #32]	; (b1f4 <__NVIC_SetPriority+0x50>)
    b1d4:	79fb      	ldrb	r3, [r7, #7]
    b1d6:	f003 030f 	and.w	r3, r3, #15
    b1da:	3b04      	subs	r3, #4
    b1dc:	0152      	lsls	r2, r2, #5
    b1de:	b2d2      	uxtb	r2, r2
    b1e0:	440b      	add	r3, r1
    b1e2:	761a      	strb	r2, [r3, #24]
}
    b1e4:	bf00      	nop
    b1e6:	370c      	adds	r7, #12
    b1e8:	46bd      	mov	sp, r7
    b1ea:	bc80      	pop	{r7}
    b1ec:	4770      	bx	lr
    b1ee:	bf00      	nop
    b1f0:	e000e100 	.word	0xe000e100
    b1f4:	e000ed00 	.word	0xe000ed00

0000b1f8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    b1f8:	2000      	movs	r0, #0
    msr CONTROL, r0
    b1fa:	f380 8814 	msr	CONTROL, r0
    isb
    b1fe:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    b202:	2000      	movs	r0, #0
    msr MSPLIM, r0
    b204:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    b208:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    b20c:	f7ff f81c 	bl	a248 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    b210:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    b212:	490e      	ldr	r1, [pc, #56]	; (b24c <__start+0x54>)
    str r0, [r1]
    b214:	6008      	str	r0, [r1, #0]
    dsb
    b216:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    b21a:	480d      	ldr	r0, [pc, #52]	; (b250 <__start+0x58>)
    msr msp, r0
    b21c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    b220:	f000 f846 	bl	b2b0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    b224:	2020      	movs	r0, #32
    msr BASEPRI, r0
    b226:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    b22a:	480a      	ldr	r0, [pc, #40]	; (b254 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    b22c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    b230:	1840      	adds	r0, r0, r1
    msr PSP, r0
    b232:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    b236:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    b23a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    b23c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    b23e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    b242:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    b246:	f00e ff2e 	bl	1a0a6 <z_arm_prep_c>
    b24a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    b24c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    b250:	2000d2b0 	.word	0x2000d2b0
    ldr r0, =z_interrupt_stacks
    b254:	2000d3f0 	.word	0x2000d3f0

0000b258 <ARM_MPU_ClrRegion>:

/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
    b258:	b580      	push	{r7, lr}
    b25a:	b082      	sub	sp, #8
    b25c:	af00      	add	r7, sp, #0
    b25e:	6078      	str	r0, [r7, #4]
  ARM_MPU_ClrRegionEx(MPU, rnr);
    b260:	6879      	ldr	r1, [r7, #4]
    b262:	4803      	ldr	r0, [pc, #12]	; (b270 <ARM_MPU_ClrRegion+0x18>)
    b264:	f00e ffa3 	bl	1a1ae <ARM_MPU_ClrRegionEx>
}
    b268:	bf00      	nop
    b26a:	3708      	adds	r7, #8
    b26c:	46bd      	mov	sp, r7
    b26e:	bd80      	pop	{r7, pc}
    b270:	e000ed90 	.word	0xe000ed90

0000b274 <z_arm_clear_arm_mpu_config>:
 *
 * This routine clears all ARM MPU region configuration.
 *
 */
void z_arm_clear_arm_mpu_config(void)
{
    b274:	b580      	push	{r7, lr}
    b276:	b082      	sub	sp, #8
    b278:	af00      	add	r7, sp, #0
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    b27a:	4b0c      	ldr	r3, [pc, #48]	; (b2ac <z_arm_clear_arm_mpu_config+0x38>)
    b27c:	681b      	ldr	r3, [r3, #0]
    b27e:	0a1b      	lsrs	r3, r3, #8
	int num_regions =
    b280:	b2db      	uxtb	r3, r3
    b282:	603b      	str	r3, [r7, #0]

	for (i = 0; i < num_regions; i++) {
    b284:	2300      	movs	r3, #0
    b286:	607b      	str	r3, [r7, #4]
    b288:	e006      	b.n	b298 <z_arm_clear_arm_mpu_config+0x24>
		ARM_MPU_ClrRegion(i);
    b28a:	687b      	ldr	r3, [r7, #4]
    b28c:	4618      	mov	r0, r3
    b28e:	f7ff ffe3 	bl	b258 <ARM_MPU_ClrRegion>
	for (i = 0; i < num_regions; i++) {
    b292:	687b      	ldr	r3, [r7, #4]
    b294:	3301      	adds	r3, #1
    b296:	607b      	str	r3, [r7, #4]
    b298:	687a      	ldr	r2, [r7, #4]
    b29a:	683b      	ldr	r3, [r7, #0]
    b29c:	429a      	cmp	r2, r3
    b29e:	dbf4      	blt.n	b28a <z_arm_clear_arm_mpu_config+0x16>
	}
}
    b2a0:	bf00      	nop
    b2a2:	bf00      	nop
    b2a4:	3708      	adds	r7, #8
    b2a6:	46bd      	mov	sp, r7
    b2a8:	bd80      	pop	{r7, pc}
    b2aa:	bf00      	nop
    b2ac:	e000ed90 	.word	0xe000ed90

0000b2b0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    b2b0:	b580      	push	{r7, lr}
    b2b2:	b082      	sub	sp, #8
    b2b4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
    b2b6:	b672      	cpsid	i
}
    b2b8:	bf00      	nop
    b2ba:	2300      	movs	r3, #0
    b2bc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    b2be:	683b      	ldr	r3, [r7, #0]
    b2c0:	f383 8813 	msr	FAULTMASK, r3
}
    b2c4:	bf00      	nop

	/* Initialize System Control Block components */

#if defined(CONFIG_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    b2c6:	f7ff ffd5 	bl	b274 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    b2ca:	2300      	movs	r3, #0
    b2cc:	71fb      	strb	r3, [r7, #7]
    b2ce:	e009      	b.n	b2e4 <z_arm_init_arch_hw_at_boot+0x34>
		NVIC->ICER[i] = 0xFFFFFFFF;
    b2d0:	4a16      	ldr	r2, [pc, #88]	; (b32c <z_arm_init_arch_hw_at_boot+0x7c>)
    b2d2:	79fb      	ldrb	r3, [r7, #7]
    b2d4:	3320      	adds	r3, #32
    b2d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b2da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    b2de:	79fb      	ldrb	r3, [r7, #7]
    b2e0:	3301      	adds	r3, #1
    b2e2:	71fb      	strb	r3, [r7, #7]
    b2e4:	79fb      	ldrb	r3, [r7, #7]
    b2e6:	2b0f      	cmp	r3, #15
    b2e8:	d9f2      	bls.n	b2d0 <z_arm_init_arch_hw_at_boot+0x20>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    b2ea:	2300      	movs	r3, #0
    b2ec:	71bb      	strb	r3, [r7, #6]
    b2ee:	e009      	b.n	b304 <z_arm_init_arch_hw_at_boot+0x54>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    b2f0:	4a0e      	ldr	r2, [pc, #56]	; (b32c <z_arm_init_arch_hw_at_boot+0x7c>)
    b2f2:	79bb      	ldrb	r3, [r7, #6]
    b2f4:	3360      	adds	r3, #96	; 0x60
    b2f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b2fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    b2fe:	79bb      	ldrb	r3, [r7, #6]
    b300:	3301      	adds	r3, #1
    b302:	71bb      	strb	r3, [r7, #6]
    b304:	79bb      	ldrb	r3, [r7, #6]
    b306:	2b0f      	cmp	r3, #15
    b308:	d9f2      	bls.n	b2f0 <z_arm_init_arch_hw_at_boot+0x40>
  __ASM volatile ("cpsie i" : : : "memory");
    b30a:	b662      	cpsie	i
}
    b30c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
    b30e:	f3bf 8f4f 	dsb	sy
}
    b312:	bf00      	nop
}
    b314:	bf00      	nop
}
    b316:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    b318:	f3bf 8f6f 	isb	sy
}
    b31c:	bf00      	nop
}
    b31e:	bf00      	nop
}
    b320:	bf00      	nop
	/* Restore Interrupts */
	__enable_irq();

	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
    b322:	bf00      	nop
    b324:	3708      	adds	r7, #8
    b326:	46bd      	mov	sp, r7
    b328:	bd80      	pop	{r7, pc}
    b32a:	bf00      	nop
    b32c:	e000e100 	.word	0xe000e100

0000b330 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    b330:	b580      	push	{r7, lr}
    b332:	b084      	sub	sp, #16
    b334:	af00      	add	r7, sp, #0
    b336:	6078      	str	r0, [r7, #4]
	if (_current == thread) {
    b338:	4b11      	ldr	r3, [pc, #68]	; (b380 <z_impl_k_thread_abort+0x50>)
    b33a:	689b      	ldr	r3, [r3, #8]
    b33c:	687a      	ldr	r2, [r7, #4]
    b33e:	429a      	cmp	r2, r3
    b340:	d116      	bne.n	b370 <z_impl_k_thread_abort+0x40>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b342:	f3ef 8305 	mrs	r3, IPSR
    b346:	60fb      	str	r3, [r7, #12]
  return(result);
    b348:	68fb      	ldr	r3, [r7, #12]
 * The current executing vector is found in the IPSR register. All
 * IRQs and system exceptions are considered as interrupt context.
 */
static ALWAYS_INLINE bool arch_is_in_isr(void)
{
	return (__get_IPSR()) ? (true) : (false);
    b34a:	2b00      	cmp	r3, #0
    b34c:	bf14      	ite	ne
    b34e:	2301      	movne	r3, #1
    b350:	2300      	moveq	r3, #0
    b352:	b2db      	uxtb	r3, r3
		if (arch_is_in_isr()) {
    b354:	2b00      	cmp	r3, #0
    b356:	d00b      	beq.n	b370 <z_impl_k_thread_abort+0x40>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b358:	4b0a      	ldr	r3, [pc, #40]	; (b384 <z_impl_k_thread_abort+0x54>)
    b35a:	685b      	ldr	r3, [r3, #4]
    b35c:	4a09      	ldr	r2, [pc, #36]	; (b384 <z_impl_k_thread_abort+0x54>)
    b35e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    b362:	6053      	str	r3, [r2, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    b364:	4b07      	ldr	r3, [pc, #28]	; (b384 <z_impl_k_thread_abort+0x54>)
    b366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b368:	4a06      	ldr	r2, [pc, #24]	; (b384 <z_impl_k_thread_abort+0x54>)
    b36a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    b36e:	6253      	str	r3, [r2, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    b370:	6878      	ldr	r0, [r7, #4]
    b372:	f00b fb25 	bl	169c0 <z_thread_abort>
}
    b376:	bf00      	nop
    b378:	3710      	adds	r7, #16
    b37a:	46bd      	mov	sp, r7
    b37c:	bd80      	pop	{r7, pc}
    b37e:	bf00      	nop
    b380:	2000ce4c 	.word	0x2000ce4c
    b384:	e000ed00 	.word	0xe000ed00

0000b388 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    b388:	b580      	push	{r7, lr}
    b38a:	b084      	sub	sp, #16
    b38c:	af00      	add	r7, sp, #0
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    b38e:	4a0d      	ldr	r2, [pc, #52]	; (b3c4 <z_arm_configure_static_mpu_regions+0x3c>)
    b390:	4b0d      	ldr	r3, [pc, #52]	; (b3c8 <z_arm_configure_static_mpu_regions+0x40>)
    b392:	2101      	movs	r1, #1
    b394:	480d      	ldr	r0, [pc, #52]	; (b3cc <z_arm_configure_static_mpu_regions+0x44>)
    b396:	f000 fb93 	bl	bac0 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    b39a:	1d3b      	adds	r3, r7, #4
    b39c:	2200      	movs	r2, #0
    b39e:	601a      	str	r2, [r3, #0]
    b3a0:	605a      	str	r2, [r3, #4]
    b3a2:	609a      	str	r2, [r3, #8]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    b3a4:	4b0a      	ldr	r3, [pc, #40]	; (b3d0 <z_arm_configure_static_mpu_regions+0x48>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    b3a6:	607b      	str	r3, [r7, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    b3a8:	4a07      	ldr	r2, [pc, #28]	; (b3c8 <z_arm_configure_static_mpu_regions+0x40>)
    b3aa:	4b09      	ldr	r3, [pc, #36]	; (b3d0 <z_arm_configure_static_mpu_regions+0x48>)
    b3ac:	1ad3      	subs	r3, r2, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    b3ae:	60bb      	str	r3, [r7, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    b3b0:	1d3b      	adds	r3, r7, #4
    b3b2:	2101      	movs	r1, #1
    b3b4:	4618      	mov	r0, r3
    b3b6:	f000 fbb3 	bl	bb20 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    b3ba:	bf00      	nop
    b3bc:	3710      	adds	r7, #16
    b3be:	46bd      	mov	sp, r7
    b3c0:	bd80      	pop	{r7, pc}
    b3c2:	bf00      	nop
    b3c4:	2000c580 	.word	0x2000c580
    b3c8:	20040000 	.word	0x20040000
    b3cc:	00023ffc 	.word	0x00023ffc
    b3d0:	2000c768 	.word	0x2000c768

0000b3d4 <z_log_minimal_level_to_char>:
{
    b3d4:	b480      	push	{r7}
    b3d6:	b083      	sub	sp, #12
    b3d8:	af00      	add	r7, sp, #0
    b3da:	6078      	str	r0, [r7, #4]
	switch (level) {
    b3dc:	687b      	ldr	r3, [r7, #4]
    b3de:	3b01      	subs	r3, #1
    b3e0:	2b03      	cmp	r3, #3
    b3e2:	d813      	bhi.n	b40c <z_log_minimal_level_to_char+0x38>
    b3e4:	a201      	add	r2, pc, #4	; (adr r2, b3ec <z_log_minimal_level_to_char+0x18>)
    b3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b3ea:	bf00      	nop
    b3ec:	0000b3fd 	.word	0x0000b3fd
    b3f0:	0000b401 	.word	0x0000b401
    b3f4:	0000b405 	.word	0x0000b405
    b3f8:	0000b409 	.word	0x0000b409
		return 'E';
    b3fc:	2345      	movs	r3, #69	; 0x45
    b3fe:	e006      	b.n	b40e <z_log_minimal_level_to_char+0x3a>
		return 'W';
    b400:	2357      	movs	r3, #87	; 0x57
    b402:	e004      	b.n	b40e <z_log_minimal_level_to_char+0x3a>
		return 'I';
    b404:	2349      	movs	r3, #73	; 0x49
    b406:	e002      	b.n	b40e <z_log_minimal_level_to_char+0x3a>
		return 'D';
    b408:	2344      	movs	r3, #68	; 0x44
    b40a:	e000      	b.n	b40e <z_log_minimal_level_to_char+0x3a>
		return '?';
    b40c:	233f      	movs	r3, #63	; 0x3f
}
    b40e:	4618      	mov	r0, r3
    b410:	370c      	adds	r7, #12
    b412:	46bd      	mov	sp, r7
    b414:	bc80      	pop	{r7}
    b416:	4770      	bx	lr

0000b418 <mpu_set_mair0>:
 */
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
    b418:	b480      	push	{r7}
    b41a:	b083      	sub	sp, #12
    b41c:	af00      	add	r7, sp, #0
    b41e:	6078      	str	r0, [r7, #4]
	MPU->MAIR0 = mair0;
    b420:	4a03      	ldr	r2, [pc, #12]	; (b430 <mpu_set_mair0+0x18>)
    b422:	687b      	ldr	r3, [r7, #4]
    b424:	6313      	str	r3, [r2, #48]	; 0x30
}
    b426:	bf00      	nop
    b428:	370c      	adds	r7, #12
    b42a:	46bd      	mov	sp, r7
    b42c:	bc80      	pop	{r7}
    b42e:	4770      	bx	lr
    b430:	e000ed90 	.word	0xe000ed90

0000b434 <mpu_set_rnr>:

static inline void mpu_set_rnr(uint32_t rnr)
{
    b434:	b480      	push	{r7}
    b436:	b083      	sub	sp, #12
    b438:	af00      	add	r7, sp, #0
    b43a:	6078      	str	r0, [r7, #4]
	MPU->RNR = rnr;
    b43c:	4a03      	ldr	r2, [pc, #12]	; (b44c <mpu_set_rnr+0x18>)
    b43e:	687b      	ldr	r3, [r7, #4]
    b440:	6093      	str	r3, [r2, #8]
}
    b442:	bf00      	nop
    b444:	370c      	adds	r7, #12
    b446:	46bd      	mov	sp, r7
    b448:	bc80      	pop	{r7}
    b44a:	4770      	bx	lr
    b44c:	e000ed90 	.word	0xe000ed90

0000b450 <mpu_set_rbar>:

static inline void mpu_set_rbar(uint32_t rbar)
{
    b450:	b480      	push	{r7}
    b452:	b083      	sub	sp, #12
    b454:	af00      	add	r7, sp, #0
    b456:	6078      	str	r0, [r7, #4]
	MPU->RBAR = rbar;
    b458:	4a03      	ldr	r2, [pc, #12]	; (b468 <mpu_set_rbar+0x18>)
    b45a:	687b      	ldr	r3, [r7, #4]
    b45c:	60d3      	str	r3, [r2, #12]
}
    b45e:	bf00      	nop
    b460:	370c      	adds	r7, #12
    b462:	46bd      	mov	sp, r7
    b464:	bc80      	pop	{r7}
    b466:	4770      	bx	lr
    b468:	e000ed90 	.word	0xe000ed90

0000b46c <mpu_get_rbar>:

static inline uint32_t mpu_get_rbar(void)
{
    b46c:	b480      	push	{r7}
    b46e:	af00      	add	r7, sp, #0
	return MPU->RBAR;
    b470:	4b02      	ldr	r3, [pc, #8]	; (b47c <mpu_get_rbar+0x10>)
    b472:	68db      	ldr	r3, [r3, #12]
}
    b474:	4618      	mov	r0, r3
    b476:	46bd      	mov	sp, r7
    b478:	bc80      	pop	{r7}
    b47a:	4770      	bx	lr
    b47c:	e000ed90 	.word	0xe000ed90

0000b480 <mpu_set_rlar>:

static inline void mpu_set_rlar(uint32_t rlar)
{
    b480:	b480      	push	{r7}
    b482:	b083      	sub	sp, #12
    b484:	af00      	add	r7, sp, #0
    b486:	6078      	str	r0, [r7, #4]
	MPU->RLAR = rlar;
    b488:	4a03      	ldr	r2, [pc, #12]	; (b498 <mpu_set_rlar+0x18>)
    b48a:	687b      	ldr	r3, [r7, #4]
    b48c:	6113      	str	r3, [r2, #16]
}
    b48e:	bf00      	nop
    b490:	370c      	adds	r7, #12
    b492:	46bd      	mov	sp, r7
    b494:	bc80      	pop	{r7}
    b496:	4770      	bx	lr
    b498:	e000ed90 	.word	0xe000ed90

0000b49c <mpu_get_rlar>:

static inline uint32_t mpu_get_rlar(void)
{
    b49c:	b480      	push	{r7}
    b49e:	af00      	add	r7, sp, #0
	return MPU->RLAR;
    b4a0:	4b02      	ldr	r3, [pc, #8]	; (b4ac <mpu_get_rlar+0x10>)
    b4a2:	691b      	ldr	r3, [r3, #16]
}
    b4a4:	4618      	mov	r0, r3
    b4a6:	46bd      	mov	sp, r7
    b4a8:	bc80      	pop	{r7}
    b4aa:	4770      	bx	lr
    b4ac:	e000ed90 	.word	0xe000ed90

0000b4b0 <mpu_init>:
#error "Unsupported ARM CPU"
#endif

/* Global MPU configuration at system initialization. */
static void mpu_init(void)
{
    b4b0:	b580      	push	{r7, lr}
    b4b2:	af00      	add	r7, sp, #0
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
    b4b4:	4802      	ldr	r0, [pc, #8]	; (b4c0 <mpu_init+0x10>)
    b4b6:	f7ff ffaf 	bl	b418 <mpu_set_mair0>
}
    b4ba:	bf00      	nop
    b4bc:	bd80      	pop	{r7, pc}
    b4be:	bf00      	nop
    b4c0:	0044ffaa 	.word	0x0044ffaa

0000b4c4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    b4c4:	b590      	push	{r4, r7, lr}
    b4c6:	b087      	sub	sp, #28
    b4c8:	af04      	add	r7, sp, #16
    b4ca:	6078      	str	r0, [r7, #4]
    b4cc:	6039      	str	r1, [r7, #0]
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    b4ce:	683b      	ldr	r3, [r7, #0]
    b4d0:	681b      	ldr	r3, [r3, #0]
    b4d2:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    b4d6:	683a      	ldr	r2, [r7, #0]
    b4d8:	7a12      	ldrb	r2, [r2, #8]
    b4da:	f3c2 0204 	ubfx	r2, r2, #0, #5
    b4de:	b2d2      	uxtb	r2, r2
    b4e0:	ea43 0102 	orr.w	r1, r3, r2
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    b4e4:	683b      	ldr	r3, [r7, #0]
    b4e6:	68db      	ldr	r3, [r3, #12]
    b4e8:	f023 021f 	bic.w	r2, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    b4ec:	683b      	ldr	r3, [r7, #0]
    b4ee:	7a1b      	ldrb	r3, [r3, #8]
    b4f0:	f3c3 1342 	ubfx	r3, r3, #5, #3
    b4f4:	b2db      	uxtb	r3, r3
    b4f6:	005b      	lsls	r3, r3, #1
			& MPU_RLAR_AttrIndx_Msk)
    b4f8:	f003 030e 	and.w	r3, r3, #14
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    b4fc:	4313      	orrs	r3, r2
		| MPU_RLAR_EN_Msk
    b4fe:	f043 0301 	orr.w	r3, r3, #1
	mpu_set_region(
    b502:	461a      	mov	r2, r3
    b504:	6878      	ldr	r0, [r7, #4]
    b506:	f00e fe7d 	bl	1a204 <mpu_set_region>
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
    b50a:	2303      	movs	r3, #3
    b50c:	2b03      	cmp	r3, #3
    b50e:	d91d      	bls.n	b54c <region_init+0x88>
    b510:	2004      	movs	r0, #4
    b512:	f7ff ff5f 	bl	b3d4 <z_log_minimal_level_to_char>
    b516:	4603      	mov	r3, r0
    b518:	461c      	mov	r4, r3
    b51a:	683b      	ldr	r3, [r7, #0]
    b51c:	681a      	ldr	r2, [r3, #0]
    b51e:	683b      	ldr	r3, [r7, #0]
    b520:	7a1b      	ldrb	r3, [r3, #8]
    b522:	f3c3 0304 	ubfx	r3, r3, #0, #5
    b526:	b2db      	uxtb	r3, r3
    b528:	4619      	mov	r1, r3
    b52a:	683b      	ldr	r3, [r7, #0]
    b52c:	7a1b      	ldrb	r3, [r3, #8]
    b52e:	f3c3 1342 	ubfx	r3, r3, #5, #3
    b532:	b2db      	uxtb	r3, r3
    b534:	4618      	mov	r0, r3
    b536:	683b      	ldr	r3, [r7, #0]
    b538:	68db      	ldr	r3, [r3, #12]
    b53a:	9302      	str	r3, [sp, #8]
    b53c:	9001      	str	r0, [sp, #4]
    b53e:	9100      	str	r1, [sp, #0]
    b540:	4613      	mov	r3, r2
    b542:	687a      	ldr	r2, [r7, #4]
    b544:	4621      	mov	r1, r4
    b546:	4803      	ldr	r0, [pc, #12]	; (b554 <region_init+0x90>)
    b548:	f00e fd57 	bl	19ffa <z_log_minimal_printk>
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    b54c:	bf00      	nop
    b54e:	370c      	adds	r7, #12
    b550:	46bd      	mov	sp, r7
    b552:	bd90      	pop	{r4, r7, pc}
    b554:	000217c4 	.word	0x000217c4

0000b558 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    b558:	b580      	push	{r7, lr}
    b55a:	b08c      	sub	sp, #48	; 0x30
    b55c:	af00      	add	r7, sp, #0
    b55e:	6078      	str	r0, [r7, #4]
    b560:	4608      	mov	r0, r1
    b562:	4611      	mov	r1, r2
    b564:	461a      	mov	r2, r3
    b566:	4603      	mov	r3, r0
    b568:	70fb      	strb	r3, [r7, #3]
    b56a:	460b      	mov	r3, r1
    b56c:	70bb      	strb	r3, [r7, #2]
    b56e:	4613      	mov	r3, r2
    b570:	707b      	strb	r3, [r7, #1]
	int i;
	int reg_index = start_reg_index;
    b572:	78bb      	ldrb	r3, [r7, #2]
    b574:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (i = 0; i < regions_num; i++) {
    b576:	2300      	movs	r3, #0
    b578:	62bb      	str	r3, [r7, #40]	; 0x28
    b57a:	e16f      	b.n	b85c <mpu_configure_regions_and_partition+0x304>
		if (regions[i].size == 0U) {
    b57c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b57e:	4613      	mov	r3, r2
    b580:	005b      	lsls	r3, r3, #1
    b582:	4413      	add	r3, r2
    b584:	009b      	lsls	r3, r3, #2
    b586:	461a      	mov	r2, r3
    b588:	687b      	ldr	r3, [r7, #4]
    b58a:	4413      	add	r3, r2
    b58c:	685b      	ldr	r3, [r3, #4]
    b58e:	2b00      	cmp	r3, #0
    b590:	f000 8160 	beq.w	b854 <mpu_configure_regions_and_partition+0x2fc>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    b594:	787b      	ldrb	r3, [r7, #1]
    b596:	2b00      	cmp	r3, #0
    b598:	d01c      	beq.n	b5d4 <mpu_configure_regions_and_partition+0x7c>
			(!mpu_partition_is_valid(&regions[i]))) {
    b59a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b59c:	4613      	mov	r3, r2
    b59e:	005b      	lsls	r3, r3, #1
    b5a0:	4413      	add	r3, r2
    b5a2:	009b      	lsls	r3, r3, #2
    b5a4:	461a      	mov	r2, r3
    b5a6:	687b      	ldr	r3, [r7, #4]
    b5a8:	4413      	add	r3, r2
    b5aa:	4618      	mov	r0, r3
    b5ac:	f00e fe3d 	bl	1a22a <mpu_partition_is_valid>
    b5b0:	4603      	mov	r3, r0
		if (do_sanity_check &&
    b5b2:	2b00      	cmp	r3, #0
    b5b4:	d10e      	bne.n	b5d4 <mpu_configure_regions_and_partition+0x7c>
			LOG_ERR("Partition %u: sanity check failed.", i);
    b5b6:	2303      	movs	r3, #3
    b5b8:	2b00      	cmp	r3, #0
    b5ba:	d008      	beq.n	b5ce <mpu_configure_regions_and_partition+0x76>
    b5bc:	2001      	movs	r0, #1
    b5be:	f7ff ff09 	bl	b3d4 <z_log_minimal_level_to_char>
    b5c2:	4603      	mov	r3, r0
    b5c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b5c6:	4619      	mov	r1, r3
    b5c8:	48a9      	ldr	r0, [pc, #676]	; (b870 <mpu_configure_regions_and_partition+0x318>)
    b5ca:	f00e fd16 	bl	19ffa <z_log_minimal_printk>
			return -EINVAL;
    b5ce:	f06f 0315 	mvn.w	r3, #21
    b5d2:	e149      	b.n	b868 <mpu_configure_regions_and_partition+0x310>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    b5d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b5d6:	4613      	mov	r3, r2
    b5d8:	005b      	lsls	r3, r3, #1
    b5da:	4413      	add	r3, r2
    b5dc:	009b      	lsls	r3, r3, #2
    b5de:	461a      	mov	r2, r3
    b5e0:	687b      	ldr	r3, [r7, #4]
    b5e2:	4413      	add	r3, r2
    b5e4:	6818      	ldr	r0, [r3, #0]
    b5e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b5e8:	4613      	mov	r3, r2
    b5ea:	005b      	lsls	r3, r3, #1
    b5ec:	4413      	add	r3, r2
    b5ee:	009b      	lsls	r3, r3, #2
    b5f0:	461a      	mov	r2, r3
    b5f2:	687b      	ldr	r3, [r7, #4]
    b5f4:	4413      	add	r3, r2
    b5f6:	685b      	ldr	r3, [r3, #4]
    b5f8:	4619      	mov	r1, r3
    b5fa:	f00e fe36 	bl	1a26a <get_region_index>
    b5fe:	6278      	str	r0, [r7, #36]	; 0x24

		if ((u_reg_index == -EINVAL) ||
    b600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b602:	f113 0f16 	cmn.w	r3, #22
    b606:	d003      	beq.n	b610 <mpu_configure_regions_and_partition+0xb8>
    b608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b60c:	429a      	cmp	r2, r3
    b60e:	dc0e      	bgt.n	b62e <mpu_configure_regions_and_partition+0xd6>
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    b610:	2303      	movs	r3, #3
    b612:	2b00      	cmp	r3, #0
    b614:	d008      	beq.n	b628 <mpu_configure_regions_and_partition+0xd0>
    b616:	2001      	movs	r0, #1
    b618:	f7ff fedc 	bl	b3d4 <z_log_minimal_level_to_char>
    b61c:	4603      	mov	r3, r0
    b61e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b620:	4619      	mov	r1, r3
    b622:	4894      	ldr	r0, [pc, #592]	; (b874 <mpu_configure_regions_and_partition+0x31c>)
    b624:	f00e fce9 	bl	19ffa <z_log_minimal_printk>
				u_reg_index);
			return -EINVAL;
    b628:	f06f 0315 	mvn.w	r3, #21
    b62c:	e11c      	b.n	b868 <mpu_configure_regions_and_partition+0x310>

		/*
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b630:	4618      	mov	r0, r3
    b632:	f00e fe39 	bl	1a2a8 <mpu_region_get_base>
    b636:	6238      	str	r0, [r7, #32]
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
    b638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b63a:	4618      	mov	r0, r3
    b63c:	f00e fe5c 	bl	1a2f8 <mpu_region_get_last_addr>
    b640:	61f8      	str	r0, [r7, #28]
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    b642:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b644:	4613      	mov	r3, r2
    b646:	005b      	lsls	r3, r3, #1
    b648:	4413      	add	r3, r2
    b64a:	009b      	lsls	r3, r3, #2
    b64c:	461a      	mov	r2, r3
    b64e:	687b      	ldr	r3, [r7, #4]
    b650:	4413      	add	r3, r2
    b652:	6819      	ldr	r1, [r3, #0]
    b654:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b656:	4613      	mov	r3, r2
    b658:	005b      	lsls	r3, r3, #1
    b65a:	4413      	add	r3, r2
    b65c:	009b      	lsls	r3, r3, #2
    b65e:	461a      	mov	r2, r3
    b660:	687b      	ldr	r3, [r7, #4]
    b662:	4413      	add	r3, r2
    b664:	685b      	ldr	r3, [r3, #4]
    b666:	440b      	add	r3, r1
    b668:	3b01      	subs	r3, #1
    b66a:	61bb      	str	r3, [r7, #24]

		if ((regions[i].start == u_reg_base) &&
    b66c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b66e:	4613      	mov	r3, r2
    b670:	005b      	lsls	r3, r3, #1
    b672:	4413      	add	r3, r2
    b674:	009b      	lsls	r3, r3, #2
    b676:	461a      	mov	r2, r3
    b678:	687b      	ldr	r3, [r7, #4]
    b67a:	4413      	add	r3, r2
    b67c:	681b      	ldr	r3, [r3, #0]
    b67e:	6a3a      	ldr	r2, [r7, #32]
    b680:	429a      	cmp	r2, r3
    b682:	d111      	bne.n	b6a8 <mpu_configure_regions_and_partition+0x150>
    b684:	69ba      	ldr	r2, [r7, #24]
    b686:	69fb      	ldr	r3, [r7, #28]
    b688:	429a      	cmp	r2, r3
    b68a:	d10d      	bne.n	b6a8 <mpu_configure_regions_and_partition+0x150>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    b68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b68e:	b2d8      	uxtb	r0, r3
    b690:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b692:	4613      	mov	r3, r2
    b694:	005b      	lsls	r3, r3, #1
    b696:	4413      	add	r3, r2
    b698:	009b      	lsls	r3, r3, #2
    b69a:	461a      	mov	r2, r3
    b69c:	687b      	ldr	r3, [r7, #4]
    b69e:	4413      	add	r3, r2
    b6a0:	4619      	mov	r1, r3
    b6a2:	f000 f9b5 	bl	ba10 <mpu_configure_region>
    b6a6:	e0d6      	b.n	b856 <mpu_configure_regions_and_partition+0x2fe>
		} else if (regions[i].start == u_reg_base) {
    b6a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b6aa:	4613      	mov	r3, r2
    b6ac:	005b      	lsls	r3, r3, #1
    b6ae:	4413      	add	r3, r2
    b6b0:	009b      	lsls	r3, r3, #2
    b6b2:	461a      	mov	r2, r3
    b6b4:	687b      	ldr	r3, [r7, #4]
    b6b6:	4413      	add	r3, r2
    b6b8:	681b      	ldr	r3, [r3, #0]
    b6ba:	6a3a      	ldr	r2, [r7, #32]
    b6bc:	429a      	cmp	r2, r3
    b6be:	d12e      	bne.n	b71e <mpu_configure_regions_and_partition+0x1c6>
			/* The new region starts exactly at the start of the
			 * underlying region; the start of the underlying
			 * region needs to be set to the end of the new region.
			 */
			mpu_region_set_base(u_reg_index,
    b6c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
				regions[i].start + regions[i].size);
    b6c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b6c4:	4613      	mov	r3, r2
    b6c6:	005b      	lsls	r3, r3, #1
    b6c8:	4413      	add	r3, r2
    b6ca:	009b      	lsls	r3, r3, #2
    b6cc:	461a      	mov	r2, r3
    b6ce:	687b      	ldr	r3, [r7, #4]
    b6d0:	4413      	add	r3, r2
    b6d2:	6819      	ldr	r1, [r3, #0]
    b6d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b6d6:	4613      	mov	r3, r2
    b6d8:	005b      	lsls	r3, r3, #1
    b6da:	4413      	add	r3, r2
    b6dc:	009b      	lsls	r3, r3, #2
    b6de:	461a      	mov	r2, r3
    b6e0:	687b      	ldr	r3, [r7, #4]
    b6e2:	4413      	add	r3, r2
    b6e4:	685b      	ldr	r3, [r3, #4]
    b6e6:	440b      	add	r3, r1
			mpu_region_set_base(u_reg_index,
    b6e8:	4619      	mov	r1, r3
    b6ea:	f00e fded 	bl	1a2c8 <mpu_region_set_base>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    b6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6f0:	b2d8      	uxtb	r0, r3
    b6f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b6f4:	4613      	mov	r3, r2
    b6f6:	005b      	lsls	r3, r3, #1
    b6f8:	4413      	add	r3, r2
    b6fa:	009b      	lsls	r3, r3, #2
    b6fc:	461a      	mov	r2, r3
    b6fe:	687b      	ldr	r3, [r7, #4]
    b700:	4413      	add	r3, r2
    b702:	4619      	mov	r1, r3
    b704:	f000 f984 	bl	ba10 <mpu_configure_region>
    b708:	62f8      	str	r0, [r7, #44]	; 0x2c

			if (reg_index == -EINVAL) {
    b70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b70c:	f113 0f16 	cmn.w	r3, #22
    b710:	d101      	bne.n	b716 <mpu_configure_regions_and_partition+0x1be>
				return reg_index;
    b712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b714:	e0a8      	b.n	b868 <mpu_configure_regions_and_partition+0x310>
			}

			reg_index++;
    b716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b718:	3301      	adds	r3, #1
    b71a:	62fb      	str	r3, [r7, #44]	; 0x2c
    b71c:	e09b      	b.n	b856 <mpu_configure_regions_and_partition+0x2fe>
		} else if (reg_last == u_reg_last) {
    b71e:	69ba      	ldr	r2, [r7, #24]
    b720:	69fb      	ldr	r3, [r7, #28]
    b722:	429a      	cmp	r2, r3
    b724:	d125      	bne.n	b772 <mpu_configure_regions_and_partition+0x21a>
			/* The new region ends exactly at the end of the
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
    b726:	6a78      	ldr	r0, [r7, #36]	; 0x24
				regions[i].start - 1);
    b728:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b72a:	4613      	mov	r3, r2
    b72c:	005b      	lsls	r3, r3, #1
    b72e:	4413      	add	r3, r2
    b730:	009b      	lsls	r3, r3, #2
    b732:	461a      	mov	r2, r3
    b734:	687b      	ldr	r3, [r7, #4]
    b736:	4413      	add	r3, r2
    b738:	681b      	ldr	r3, [r3, #0]
    b73a:	3b01      	subs	r3, #1
			mpu_region_set_limit(u_reg_index,
    b73c:	4619      	mov	r1, r3
    b73e:	f00e fdeb 	bl	1a318 <mpu_region_set_limit>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b744:	b2d8      	uxtb	r0, r3
    b746:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b748:	4613      	mov	r3, r2
    b74a:	005b      	lsls	r3, r3, #1
    b74c:	4413      	add	r3, r2
    b74e:	009b      	lsls	r3, r3, #2
    b750:	461a      	mov	r2, r3
    b752:	687b      	ldr	r3, [r7, #4]
    b754:	4413      	add	r3, r2
    b756:	4619      	mov	r1, r3
    b758:	f000 f95a 	bl	ba10 <mpu_configure_region>
    b75c:	62f8      	str	r0, [r7, #44]	; 0x2c

			if (reg_index == -EINVAL) {
    b75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b760:	f113 0f16 	cmn.w	r3, #22
    b764:	d101      	bne.n	b76a <mpu_configure_regions_and_partition+0x212>
				return reg_index;
    b766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b768:	e07e      	b.n	b868 <mpu_configure_regions_and_partition+0x310>
			}

			reg_index++;
    b76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b76c:	3301      	adds	r3, #1
    b76e:	62fb      	str	r3, [r7, #44]	; 0x2c
    b770:	e071      	b.n	b856 <mpu_configure_regions_and_partition+0x2fe>
		} else {
			/* The new regions lies strictly inside the
			 * underlying region, which needs to split
			 * into two regions.
			 */
			mpu_region_set_limit(u_reg_index,
    b772:	6a78      	ldr	r0, [r7, #36]	; 0x24
				regions[i].start - 1);
    b774:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b776:	4613      	mov	r3, r2
    b778:	005b      	lsls	r3, r3, #1
    b77a:	4413      	add	r3, r2
    b77c:	009b      	lsls	r3, r3, #2
    b77e:	461a      	mov	r2, r3
    b780:	687b      	ldr	r3, [r7, #4]
    b782:	4413      	add	r3, r2
    b784:	681b      	ldr	r3, [r3, #0]
    b786:	3b01      	subs	r3, #1
			mpu_region_set_limit(u_reg_index,
    b788:	4619      	mov	r1, r3
    b78a:	f00e fdc5 	bl	1a318 <mpu_region_set_limit>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    b78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b790:	b2d8      	uxtb	r0, r3
    b792:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b794:	4613      	mov	r3, r2
    b796:	005b      	lsls	r3, r3, #1
    b798:	4413      	add	r3, r2
    b79a:	009b      	lsls	r3, r3, #2
    b79c:	461a      	mov	r2, r3
    b79e:	687b      	ldr	r3, [r7, #4]
    b7a0:	4413      	add	r3, r2
    b7a2:	4619      	mov	r1, r3
    b7a4:	f000 f934 	bl	ba10 <mpu_configure_region>
    b7a8:	62f8      	str	r0, [r7, #44]	; 0x2c

			if (reg_index == -EINVAL) {
    b7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b7ac:	f113 0f16 	cmn.w	r3, #22
    b7b0:	d101      	bne.n	b7b6 <mpu_configure_regions_and_partition+0x25e>
				return reg_index;
    b7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b7b4:	e058      	b.n	b868 <mpu_configure_regions_and_partition+0x310>
			}
			reg_index++;
    b7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b7b8:	3301      	adds	r3, #1
    b7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			 * access attributes as the initial underlying
			 * region.
			 */
			struct arm_mpu_region fill_region;

			mpu_region_get_access_attr(u_reg_index,
    b7bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b7be:	f107 0308 	add.w	r3, r7, #8
    b7c2:	3308      	adds	r3, #8
    b7c4:	4619      	mov	r1, r3
    b7c6:	4610      	mov	r0, r2
    b7c8:	f00e fdbe 	bl	1a348 <mpu_region_get_access_attr>
				&fill_region.attr);
			fill_region.base = regions[i].start +
    b7cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b7ce:	4613      	mov	r3, r2
    b7d0:	005b      	lsls	r3, r3, #1
    b7d2:	4413      	add	r3, r2
    b7d4:	009b      	lsls	r3, r3, #2
    b7d6:	461a      	mov	r2, r3
    b7d8:	687b      	ldr	r3, [r7, #4]
    b7da:	4413      	add	r3, r2
    b7dc:	6819      	ldr	r1, [r3, #0]
				regions[i].size;
    b7de:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b7e0:	4613      	mov	r3, r2
    b7e2:	005b      	lsls	r3, r3, #1
    b7e4:	4413      	add	r3, r2
    b7e6:	009b      	lsls	r3, r3, #2
    b7e8:	461a      	mov	r2, r3
    b7ea:	687b      	ldr	r3, [r7, #4]
    b7ec:	4413      	add	r3, r2
    b7ee:	685b      	ldr	r3, [r3, #4]
			fill_region.base = regions[i].start +
    b7f0:	440b      	add	r3, r1
    b7f2:	60bb      	str	r3, [r7, #8]
			fill_region.attr.r_limit =
			REGION_LIMIT_ADDR((regions[i].start +
    b7f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b7f6:	4613      	mov	r3, r2
    b7f8:	005b      	lsls	r3, r3, #1
    b7fa:	4413      	add	r3, r2
    b7fc:	009b      	lsls	r3, r3, #2
    b7fe:	461a      	mov	r2, r3
    b800:	687b      	ldr	r3, [r7, #4]
    b802:	4413      	add	r3, r2
    b804:	6819      	ldr	r1, [r3, #0]
    b806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b808:	4613      	mov	r3, r2
    b80a:	005b      	lsls	r3, r3, #1
    b80c:	4413      	add	r3, r2
    b80e:	009b      	lsls	r3, r3, #2
    b810:	461a      	mov	r2, r3
    b812:	687b      	ldr	r3, [r7, #4]
    b814:	4413      	add	r3, r2
    b816:	685b      	ldr	r3, [r3, #4]
    b818:	440b      	add	r3, r1
    b81a:	f023 021f 	bic.w	r2, r3, #31
    b81e:	69f9      	ldr	r1, [r7, #28]
    b820:	69bb      	ldr	r3, [r7, #24]
    b822:	1acb      	subs	r3, r1, r3
    b824:	4413      	add	r3, r2
    b826:	3b01      	subs	r3, #1
    b828:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    b82c:	617b      	str	r3, [r7, #20]
				regions[i].size), (u_reg_last - reg_last));

			reg_index =
				region_allocate_and_init(reg_index,
    b82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b830:	b2db      	uxtb	r3, r3
    b832:	f107 0208 	add.w	r2, r7, #8
    b836:	4611      	mov	r1, r2
    b838:	4618      	mov	r0, r3
    b83a:	f000 f8b1 	bl	b9a0 <region_allocate_and_init>
    b83e:	62f8      	str	r0, [r7, #44]	; 0x2c
					(const struct arm_mpu_region *)
						&fill_region);

			if (reg_index == -EINVAL) {
    b840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b842:	f113 0f16 	cmn.w	r3, #22
    b846:	d101      	bne.n	b84c <mpu_configure_regions_and_partition+0x2f4>
				return reg_index;
    b848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b84a:	e00d      	b.n	b868 <mpu_configure_regions_and_partition+0x310>
			}

			reg_index++;
    b84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b84e:	3301      	adds	r3, #1
    b850:	62fb      	str	r3, [r7, #44]	; 0x2c
    b852:	e000      	b.n	b856 <mpu_configure_regions_and_partition+0x2fe>
			continue;
    b854:	bf00      	nop
	for (i = 0; i < regions_num; i++) {
    b856:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b858:	3301      	adds	r3, #1
    b85a:	62bb      	str	r3, [r7, #40]	; 0x28
    b85c:	78fb      	ldrb	r3, [r7, #3]
    b85e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b860:	429a      	cmp	r2, r3
    b862:	f6ff ae8b 	blt.w	b57c <mpu_configure_regions_and_partition+0x24>
		}
	}

	return reg_index;
    b866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    b868:	4618      	mov	r0, r3
    b86a:	3730      	adds	r7, #48	; 0x30
    b86c:	46bd      	mov	sp, r7
    b86e:	bd80      	pop	{r7, pc}
    b870:	000217ec 	.word	0x000217ec
    b874:	00021814 	.word	0x00021814

0000b878 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    b878:	b580      	push	{r7, lr}
    b87a:	b086      	sub	sp, #24
    b87c:	af00      	add	r7, sp, #0
    b87e:	60f8      	str	r0, [r7, #12]
    b880:	607a      	str	r2, [r7, #4]
    b882:	603b      	str	r3, [r7, #0]
    b884:	460b      	mov	r3, r1
    b886:	72fb      	strb	r3, [r7, #11]
	int mpu_reg_index = static_regions_num;
    b888:	4b09      	ldr	r3, [pc, #36]	; (b8b0 <mpu_configure_static_mpu_regions+0x38>)
    b88a:	781b      	ldrb	r3, [r3, #0]
    b88c:	617b      	str	r3, [r7, #20]
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    b88e:	697b      	ldr	r3, [r7, #20]
    b890:	b2da      	uxtb	r2, r3
    b892:	7af9      	ldrb	r1, [r7, #11]
    b894:	2301      	movs	r3, #1
    b896:	68f8      	ldr	r0, [r7, #12]
    b898:	f7ff fe5e 	bl	b558 <mpu_configure_regions_and_partition>
    b89c:	6178      	str	r0, [r7, #20]
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    b89e:	697b      	ldr	r3, [r7, #20]
    b8a0:	b2da      	uxtb	r2, r3
    b8a2:	4b03      	ldr	r3, [pc, #12]	; (b8b0 <mpu_configure_static_mpu_regions+0x38>)
    b8a4:	701a      	strb	r2, [r3, #0]

	return mpu_reg_index;
    b8a6:	697b      	ldr	r3, [r7, #20]
}
    b8a8:	4618      	mov	r0, r3
    b8aa:	3718      	adds	r7, #24
    b8ac:	46bd      	mov	sp, r7
    b8ae:	bd80      	pop	{r7, pc}
    b8b0:	2000ce9c 	.word	0x2000ce9c

0000b8b4 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    b8b4:	b580      	push	{r7, lr}
    b8b6:	b084      	sub	sp, #16
    b8b8:	af00      	add	r7, sp, #0
    b8ba:	6078      	str	r0, [r7, #4]
    b8bc:	460b      	mov	r3, r1
    b8be:	70fb      	strb	r3, [r7, #3]
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    b8c0:	2300      	movs	r3, #0
    b8c2:	60fb      	str	r3, [r7, #12]
    b8c4:	e05e      	b.n	b984 <mpu_mark_areas_for_dynamic_regions+0xd0>
		if (dyn_region_areas[i].size == 0U) {
    b8c6:	68fa      	ldr	r2, [r7, #12]
    b8c8:	4613      	mov	r3, r2
    b8ca:	005b      	lsls	r3, r3, #1
    b8cc:	4413      	add	r3, r2
    b8ce:	009b      	lsls	r3, r3, #2
    b8d0:	461a      	mov	r2, r3
    b8d2:	687b      	ldr	r3, [r7, #4]
    b8d4:	4413      	add	r3, r2
    b8d6:	685b      	ldr	r3, [r3, #4]
    b8d8:	2b00      	cmp	r3, #0
    b8da:	d04f      	beq.n	b97c <mpu_mark_areas_for_dynamic_regions+0xc8>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    b8dc:	68fa      	ldr	r2, [r7, #12]
    b8de:	4613      	mov	r3, r2
    b8e0:	005b      	lsls	r3, r3, #1
    b8e2:	4413      	add	r3, r2
    b8e4:	009b      	lsls	r3, r3, #2
    b8e6:	461a      	mov	r2, r3
    b8e8:	687b      	ldr	r3, [r7, #4]
    b8ea:	4413      	add	r3, r2
    b8ec:	6818      	ldr	r0, [r3, #0]
					dyn_region_areas[i].size);
    b8ee:	68fa      	ldr	r2, [r7, #12]
    b8f0:	4613      	mov	r3, r2
    b8f2:	005b      	lsls	r3, r3, #1
    b8f4:	4413      	add	r3, r2
    b8f6:	009b      	lsls	r3, r3, #2
    b8f8:	461a      	mov	r2, r3
    b8fa:	687b      	ldr	r3, [r7, #4]
    b8fc:	4413      	add	r3, r2
    b8fe:	685b      	ldr	r3, [r3, #4]
			get_region_index(dyn_region_areas[i].start,
    b900:	4619      	mov	r1, r3
    b902:	f00e fcb2 	bl	1a26a <get_region_index>
    b906:	4601      	mov	r1, r0
		dyn_reg_info[i].index =
    b908:	4823      	ldr	r0, [pc, #140]	; (b998 <mpu_mark_areas_for_dynamic_regions+0xe4>)
    b90a:	68fa      	ldr	r2, [r7, #12]
    b90c:	4613      	mov	r3, r2
    b90e:	009b      	lsls	r3, r3, #2
    b910:	4413      	add	r3, r2
    b912:	009b      	lsls	r3, r3, #2
    b914:	4403      	add	r3, r0
    b916:	6019      	str	r1, [r3, #0]

		if (dyn_reg_info[i].index == -EINVAL) {
    b918:	491f      	ldr	r1, [pc, #124]	; (b998 <mpu_mark_areas_for_dynamic_regions+0xe4>)
    b91a:	68fa      	ldr	r2, [r7, #12]
    b91c:	4613      	mov	r3, r2
    b91e:	009b      	lsls	r3, r3, #2
    b920:	4413      	add	r3, r2
    b922:	009b      	lsls	r3, r3, #2
    b924:	440b      	add	r3, r1
    b926:	681b      	ldr	r3, [r3, #0]
    b928:	f113 0f16 	cmn.w	r3, #22
    b92c:	d102      	bne.n	b934 <mpu_mark_areas_for_dynamic_regions+0x80>

			return -EINVAL;
    b92e:	f06f 0315 	mvn.w	r3, #21
    b932:	e02c      	b.n	b98e <mpu_mark_areas_for_dynamic_regions+0xda>
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    b934:	4918      	ldr	r1, [pc, #96]	; (b998 <mpu_mark_areas_for_dynamic_regions+0xe4>)
    b936:	68fa      	ldr	r2, [r7, #12]
    b938:	4613      	mov	r3, r2
    b93a:	009b      	lsls	r3, r3, #2
    b93c:	4413      	add	r3, r2
    b93e:	009b      	lsls	r3, r3, #2
    b940:	440b      	add	r3, r1
    b942:	681b      	ldr	r3, [r3, #0]
    b944:	4a15      	ldr	r2, [pc, #84]	; (b99c <mpu_mark_areas_for_dynamic_regions+0xe8>)
    b946:	7812      	ldrb	r2, [r2, #0]
    b948:	4293      	cmp	r3, r2
    b94a:	db02      	blt.n	b952 <mpu_mark_areas_for_dynamic_regions+0x9e>

			return -EINVAL;
    b94c:	f06f 0315 	mvn.w	r3, #21
    b950:	e01d      	b.n	b98e <mpu_mark_areas_for_dynamic_regions+0xda>
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    b952:	4911      	ldr	r1, [pc, #68]	; (b998 <mpu_mark_areas_for_dynamic_regions+0xe4>)
    b954:	68fa      	ldr	r2, [r7, #12]
    b956:	4613      	mov	r3, r2
    b958:	009b      	lsls	r3, r3, #2
    b95a:	4413      	add	r3, r2
    b95c:	009b      	lsls	r3, r3, #2
    b95e:	440b      	add	r3, r1
    b960:	681b      	ldr	r3, [r3, #0]
    b962:	4618      	mov	r0, r3
    b964:	68fa      	ldr	r2, [r7, #12]
    b966:	4613      	mov	r3, r2
    b968:	009b      	lsls	r3, r3, #2
    b96a:	4413      	add	r3, r2
    b96c:	009b      	lsls	r3, r3, #2
    b96e:	4a0a      	ldr	r2, [pc, #40]	; (b998 <mpu_mark_areas_for_dynamic_regions+0xe4>)
    b970:	4413      	add	r3, r2
    b972:	3304      	adds	r3, #4
    b974:	4619      	mov	r1, r3
    b976:	f00e fd0a 	bl	1a38e <mpu_region_get_conf>
    b97a:	e000      	b.n	b97e <mpu_mark_areas_for_dynamic_regions+0xca>
			continue;
    b97c:	bf00      	nop
	for (int i = 0; i < dyn_region_areas_num; i++) {
    b97e:	68fb      	ldr	r3, [r7, #12]
    b980:	3301      	adds	r3, #1
    b982:	60fb      	str	r3, [r7, #12]
    b984:	78fb      	ldrb	r3, [r7, #3]
    b986:	68fa      	ldr	r2, [r7, #12]
    b988:	429a      	cmp	r2, r3
    b98a:	db9c      	blt.n	b8c6 <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    b98c:	2300      	movs	r3, #0
}
    b98e:	4618      	mov	r0, r3
    b990:	3710      	adds	r7, #16
    b992:	46bd      	mov	sp, r7
    b994:	bd80      	pop	{r7, pc}
    b996:	bf00      	nop
    b998:	2000c8f4 	.word	0x2000c8f4
    b99c:	2000ce9c 	.word	0x2000ce9c

0000b9a0 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    b9a0:	b590      	push	{r4, r7, lr}
    b9a2:	b083      	sub	sp, #12
    b9a4:	af00      	add	r7, sp, #0
    b9a6:	4603      	mov	r3, r0
    b9a8:	6039      	str	r1, [r7, #0]
    b9aa:	71fb      	strb	r3, [r7, #7]
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    b9ac:	79fc      	ldrb	r4, [r7, #7]
    b9ae:	f00e fd38 	bl	1a422 <get_num_regions>
    b9b2:	4603      	mov	r3, r0
    b9b4:	3b01      	subs	r3, #1
    b9b6:	429c      	cmp	r4, r3
    b9b8:	d90f      	bls.n	b9da <region_allocate_and_init+0x3a>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    b9ba:	2303      	movs	r3, #3
    b9bc:	2b00      	cmp	r3, #0
    b9be:	d009      	beq.n	b9d4 <region_allocate_and_init+0x34>
    b9c0:	2001      	movs	r0, #1
    b9c2:	f7ff fd07 	bl	b3d4 <z_log_minimal_level_to_char>
    b9c6:	4603      	mov	r3, r0
    b9c8:	4619      	mov	r1, r3
    b9ca:	79fb      	ldrb	r3, [r7, #7]
    b9cc:	461a      	mov	r2, r3
    b9ce:	480e      	ldr	r0, [pc, #56]	; (ba08 <region_allocate_and_init+0x68>)
    b9d0:	f00e fb13 	bl	19ffa <z_log_minimal_printk>
		return -EINVAL;
    b9d4:	f06f 0315 	mvn.w	r3, #21
    b9d8:	e012      	b.n	ba00 <region_allocate_and_init+0x60>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);
    b9da:	2303      	movs	r3, #3
    b9dc:	2b03      	cmp	r3, #3
    b9de:	d909      	bls.n	b9f4 <region_allocate_and_init+0x54>
    b9e0:	2004      	movs	r0, #4
    b9e2:	f7ff fcf7 	bl	b3d4 <z_log_minimal_level_to_char>
    b9e6:	4603      	mov	r3, r0
    b9e8:	4619      	mov	r1, r3
    b9ea:	79fb      	ldrb	r3, [r7, #7]
    b9ec:	461a      	mov	r2, r3
    b9ee:	4807      	ldr	r0, [pc, #28]	; (ba0c <region_allocate_and_init+0x6c>)
    b9f0:	f00e fb03 	bl	19ffa <z_log_minimal_printk>

	/* Program region */
	region_init(index, region_conf);
    b9f4:	79fb      	ldrb	r3, [r7, #7]
    b9f6:	6839      	ldr	r1, [r7, #0]
    b9f8:	4618      	mov	r0, r3
    b9fa:	f7ff fd63 	bl	b4c4 <region_init>

	return index;
    b9fe:	79fb      	ldrb	r3, [r7, #7]
}
    ba00:	4618      	mov	r0, r3
    ba02:	370c      	adds	r7, #12
    ba04:	46bd      	mov	sp, r7
    ba06:	bd90      	pop	{r4, r7, pc}
    ba08:	0002183c 	.word	0x0002183c
    ba0c:	00021868 	.word	0x00021868

0000ba10 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    ba10:	b590      	push	{r4, r7, lr}
    ba12:	b087      	sub	sp, #28
    ba14:	af00      	add	r7, sp, #0
    ba16:	4603      	mov	r3, r0
    ba18:	6039      	str	r1, [r7, #0]
    ba1a:	71fb      	strb	r3, [r7, #7]
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);
    ba1c:	2303      	movs	r3, #3
    ba1e:	2b03      	cmp	r3, #3
    ba20:	d909      	bls.n	ba36 <mpu_configure_region+0x26>
    ba22:	2004      	movs	r0, #4
    ba24:	f7ff fcd6 	bl	b3d4 <z_log_minimal_level_to_char>
    ba28:	4603      	mov	r3, r0
    ba2a:	4619      	mov	r1, r3
    ba2c:	79fb      	ldrb	r3, [r7, #7]
    ba2e:	461a      	mov	r2, r3
    ba30:	480f      	ldr	r0, [pc, #60]	; (ba70 <mpu_configure_region+0x60>)
    ba32:	f00e fae2 	bl	19ffa <z_log_minimal_printk>

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
    ba36:	683b      	ldr	r3, [r7, #0]
    ba38:	681b      	ldr	r3, [r3, #0]
    ba3a:	60bb      	str	r3, [r7, #8]
#if defined(CONFIG_ARMV7_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    ba3c:	683b      	ldr	r3, [r7, #0]
    ba3e:	f103 0108 	add.w	r1, r3, #8
		&new_region->attr, new_region->start, new_region->size);
    ba42:	683b      	ldr	r3, [r7, #0]
    ba44:	681a      	ldr	r2, [r3, #0]
    ba46:	683b      	ldr	r3, [r7, #0]
    ba48:	685c      	ldr	r4, [r3, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    ba4a:	f107 0308 	add.w	r3, r7, #8
    ba4e:	f103 0008 	add.w	r0, r3, #8
    ba52:	4623      	mov	r3, r4
    ba54:	f00e fcbb 	bl	1a3ce <get_region_attr_from_mpu_partition_info>

	/* Allocate and program region */
	return region_allocate_and_init(index,
    ba58:	f107 0208 	add.w	r2, r7, #8
    ba5c:	79fb      	ldrb	r3, [r7, #7]
    ba5e:	4611      	mov	r1, r2
    ba60:	4618      	mov	r0, r3
    ba62:	f7ff ff9d 	bl	b9a0 <region_allocate_and_init>
    ba66:	4603      	mov	r3, r0
		(const struct arm_mpu_region *)&region_conf);
}
    ba68:	4618      	mov	r0, r3
    ba6a:	371c      	adds	r7, #28
    ba6c:	46bd      	mov	sp, r7
    ba6e:	bd90      	pop	{r4, r7, pc}
    ba70:	00021890 	.word	0x00021890

0000ba74 <arm_core_mpu_enable>:
#else
/**
 * @brief enable the MPU
 */
void arm_core_mpu_enable(void)
{
    ba74:	b480      	push	{r7}
    ba76:	af00      	add	r7, sp, #0
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    ba78:	4b08      	ldr	r3, [pc, #32]	; (ba9c <arm_core_mpu_enable+0x28>)
    ba7a:	2205      	movs	r2, #5
    ba7c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    ba7e:	f3bf 8f4f 	dsb	sy
}
    ba82:	bf00      	nop
}
    ba84:	bf00      	nop
}
    ba86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    ba88:	f3bf 8f6f 	isb	sy
}
    ba8c:	bf00      	nop
}
    ba8e:	bf00      	nop
}
    ba90:	bf00      	nop
#endif

	/* Make sure that all the registers are set before proceeding */
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
    ba92:	bf00      	nop
    ba94:	46bd      	mov	sp, r7
    ba96:	bc80      	pop	{r7}
    ba98:	4770      	bx	lr
    ba9a:	bf00      	nop
    ba9c:	e000ed90 	.word	0xe000ed90

0000baa0 <arm_core_mpu_disable>:

/**
 * @brief disable the MPU
 */
void arm_core_mpu_disable(void)
{
    baa0:	b480      	push	{r7}
    baa2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
    baa4:	f3bf 8f5f 	dmb	sy
}
    baa8:	bf00      	nop
}
    baaa:	bf00      	nop
}
    baac:	bf00      	nop
	/* Force any outstanding transfers to complete before disabling MPU */
	barrier_dmem_fence_full();

	/* Disable MPU */
	MPU->CTRL = 0;
    baae:	4b03      	ldr	r3, [pc, #12]	; (babc <arm_core_mpu_disable+0x1c>)
    bab0:	2200      	movs	r2, #0
    bab2:	605a      	str	r2, [r3, #4]
}
    bab4:	bf00      	nop
    bab6:	46bd      	mov	sp, r7
    bab8:	bc80      	pop	{r7}
    baba:	4770      	bx	lr
    babc:	e000ed90 	.word	0xe000ed90

0000bac0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    bac0:	b580      	push	{r7, lr}
    bac2:	b084      	sub	sp, #16
    bac4:	af00      	add	r7, sp, #0
    bac6:	60f8      	str	r0, [r7, #12]
    bac8:	607a      	str	r2, [r7, #4]
    baca:	603b      	str	r3, [r7, #0]
    bacc:	460b      	mov	r3, r1
    bace:	72fb      	strb	r3, [r7, #11]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    bad0:	7af9      	ldrb	r1, [r7, #11]
    bad2:	683b      	ldr	r3, [r7, #0]
    bad4:	687a      	ldr	r2, [r7, #4]
    bad6:	68f8      	ldr	r0, [r7, #12]
    bad8:	f7ff fece 	bl	b878 <mpu_configure_static_mpu_regions>
    badc:	4603      	mov	r3, r0
    bade:	f113 0f16 	cmn.w	r3, #22
    bae2:	d110      	bne.n	bb06 <arm_core_mpu_configure_static_mpu_regions+0x46>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    bae4:	f240 131b 	movw	r3, #283	; 0x11b
    bae8:	4a09      	ldr	r2, [pc, #36]	; (bb10 <arm_core_mpu_configure_static_mpu_regions+0x50>)
    baea:	490a      	ldr	r1, [pc, #40]	; (bb14 <arm_core_mpu_configure_static_mpu_regions+0x54>)
    baec:	480a      	ldr	r0, [pc, #40]	; (bb18 <arm_core_mpu_configure_static_mpu_regions+0x58>)
    baee:	f00e fa61 	bl	19fb4 <assert_print>
    baf2:	7afb      	ldrb	r3, [r7, #11]
    baf4:	4619      	mov	r1, r3
    baf6:	4809      	ldr	r0, [pc, #36]	; (bb1c <arm_core_mpu_configure_static_mpu_regions+0x5c>)
    baf8:	f00e fa5c 	bl	19fb4 <assert_print>
    bafc:	f240 111b 	movw	r1, #283	; 0x11b
    bb00:	4803      	ldr	r0, [pc, #12]	; (bb10 <arm_core_mpu_configure_static_mpu_regions+0x50>)
    bb02:	f00e fa47 	bl	19f94 <assert_post_action>
			regions_num);
	}
}
    bb06:	bf00      	nop
    bb08:	3710      	adds	r7, #16
    bb0a:	46bd      	mov	sp, r7
    bb0c:	bd80      	pop	{r7, pc}
    bb0e:	bf00      	nop
    bb10:	000218b8 	.word	0x000218b8
    bb14:	000218f0 	.word	0x000218f0
    bb18:	000218f4 	.word	0x000218f4
    bb1c:	00021914 	.word	0x00021914

0000bb20 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    bb20:	b580      	push	{r7, lr}
    bb22:	b082      	sub	sp, #8
    bb24:	af00      	add	r7, sp, #0
    bb26:	6078      	str	r0, [r7, #4]
    bb28:	460b      	mov	r3, r1
    bb2a:	70fb      	strb	r3, [r7, #3]
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    bb2c:	78fb      	ldrb	r3, [r7, #3]
    bb2e:	4619      	mov	r1, r3
    bb30:	6878      	ldr	r0, [r7, #4]
    bb32:	f7ff febf 	bl	b8b4 <mpu_mark_areas_for_dynamic_regions>
    bb36:	4603      	mov	r3, r0
    bb38:	f113 0f16 	cmn.w	r3, #22
    bb3c:	d110      	bne.n	bb60 <arm_core_mpu_mark_areas_for_dynamic_regions+0x40>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    bb3e:	f240 132b 	movw	r3, #299	; 0x12b
    bb42:	4a09      	ldr	r2, [pc, #36]	; (bb68 <arm_core_mpu_mark_areas_for_dynamic_regions+0x48>)
    bb44:	4909      	ldr	r1, [pc, #36]	; (bb6c <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>)
    bb46:	480a      	ldr	r0, [pc, #40]	; (bb70 <arm_core_mpu_mark_areas_for_dynamic_regions+0x50>)
    bb48:	f00e fa34 	bl	19fb4 <assert_print>
    bb4c:	78fb      	ldrb	r3, [r7, #3]
    bb4e:	4619      	mov	r1, r3
    bb50:	4808      	ldr	r0, [pc, #32]	; (bb74 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>)
    bb52:	f00e fa2f 	bl	19fb4 <assert_print>
    bb56:	f240 112b 	movw	r1, #299	; 0x12b
    bb5a:	4803      	ldr	r0, [pc, #12]	; (bb68 <arm_core_mpu_mark_areas_for_dynamic_regions+0x48>)
    bb5c:	f00e fa1a 	bl	19f94 <assert_post_action>
			dyn_region_areas_num);
	}
}
    bb60:	bf00      	nop
    bb62:	3708      	adds	r7, #8
    bb64:	46bd      	mov	sp, r7
    bb66:	bd80      	pop	{r7, pc}
    bb68:	000218b8 	.word	0x000218b8
    bb6c:	000218f0 	.word	0x000218f0
    bb70:	000218f4 	.word	0x000218f4
    bb74:	00021940 	.word	0x00021940

0000bb78 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    bb78:	b590      	push	{r4, r7, lr}
    bb7a:	b083      	sub	sp, #12
    bb7c:	af00      	add	r7, sp, #0
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    bb7e:	4b33      	ldr	r3, [pc, #204]	; (bc4c <z_arm_mpu_init+0xd4>)
    bb80:	681c      	ldr	r4, [r3, #0]
    bb82:	f00e fc4e 	bl	1a422 <get_num_regions>
    bb86:	4603      	mov	r3, r0
    bb88:	429c      	cmp	r4, r3
    bb8a:	d915      	bls.n	bbb8 <z_arm_mpu_init+0x40>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    bb8c:	f44f 73a9 	mov.w	r3, #338	; 0x152
    bb90:	4a2f      	ldr	r2, [pc, #188]	; (bc50 <z_arm_mpu_init+0xd8>)
    bb92:	4930      	ldr	r1, [pc, #192]	; (bc54 <z_arm_mpu_init+0xdc>)
    bb94:	4830      	ldr	r0, [pc, #192]	; (bc58 <z_arm_mpu_init+0xe0>)
    bb96:	f00e fa0d 	bl	19fb4 <assert_print>
    bb9a:	4b2c      	ldr	r3, [pc, #176]	; (bc4c <z_arm_mpu_init+0xd4>)
    bb9c:	681c      	ldr	r4, [r3, #0]
    bb9e:	f00e fc40 	bl	1a422 <get_num_regions>
    bba2:	4603      	mov	r3, r0
    bba4:	461a      	mov	r2, r3
    bba6:	4621      	mov	r1, r4
    bba8:	482c      	ldr	r0, [pc, #176]	; (bc5c <z_arm_mpu_init+0xe4>)
    bbaa:	f00e fa03 	bl	19fb4 <assert_print>
    bbae:	f44f 71a9 	mov.w	r1, #338	; 0x152
    bbb2:	4827      	ldr	r0, [pc, #156]	; (bc50 <z_arm_mpu_init+0xd8>)
    bbb4:	f00e f9ee 	bl	19f94 <assert_post_action>
			get_num_regions()
		);
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());
    bbb8:	2303      	movs	r3, #3
    bbba:	2b03      	cmp	r3, #3
    bbbc:	d90c      	bls.n	bbd8 <z_arm_mpu_init+0x60>
    bbbe:	2004      	movs	r0, #4
    bbc0:	f7ff fc08 	bl	b3d4 <z_log_minimal_level_to_char>
    bbc4:	4603      	mov	r3, r0
    bbc6:	461c      	mov	r4, r3
    bbc8:	f00e fc2b 	bl	1a422 <get_num_regions>
    bbcc:	4603      	mov	r3, r0
    bbce:	461a      	mov	r2, r3
    bbd0:	4621      	mov	r1, r4
    bbd2:	4823      	ldr	r0, [pc, #140]	; (bc60 <z_arm_mpu_init+0xe8>)
    bbd4:	f00e fa11 	bl	19ffa <z_log_minimal_printk>

	arm_core_mpu_disable();
    bbd8:	f7ff ff62 	bl	baa0 <arm_core_mpu_disable>
#endif
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    bbdc:	f7ff fc68 	bl	b4b0 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    bbe0:	2300      	movs	r3, #0
    bbe2:	607b      	str	r3, [r7, #4]
    bbe4:	e00b      	b.n	bbfe <z_arm_mpu_init+0x86>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    bbe6:	4b19      	ldr	r3, [pc, #100]	; (bc4c <z_arm_mpu_init+0xd4>)
    bbe8:	685a      	ldr	r2, [r3, #4]
    bbea:	687b      	ldr	r3, [r7, #4]
    bbec:	011b      	lsls	r3, r3, #4
    bbee:	4413      	add	r3, r2
    bbf0:	4619      	mov	r1, r3
    bbf2:	6878      	ldr	r0, [r7, #4]
    bbf4:	f7ff fc66 	bl	b4c4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    bbf8:	687b      	ldr	r3, [r7, #4]
    bbfa:	3301      	adds	r3, #1
    bbfc:	607b      	str	r3, [r7, #4]
    bbfe:	4b13      	ldr	r3, [pc, #76]	; (bc4c <z_arm_mpu_init+0xd4>)
    bc00:	681b      	ldr	r3, [r3, #0]
    bc02:	687a      	ldr	r2, [r7, #4]
    bc04:	429a      	cmp	r2, r3
    bc06:	d3ee      	bcc.n	bbe6 <z_arm_mpu_init+0x6e>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    bc08:	4b10      	ldr	r3, [pc, #64]	; (bc4c <z_arm_mpu_init+0xd4>)
    bc0a:	681b      	ldr	r3, [r3, #0]
    bc0c:	b2da      	uxtb	r2, r3
    bc0e:	4b15      	ldr	r3, [pc, #84]	; (bc64 <z_arm_mpu_init+0xec>)
    bc10:	701a      	strb	r2, [r3, #0]


	arm_core_mpu_enable();
    bc12:	f7ff ff2f 	bl	ba74 <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
    bc16:	4b14      	ldr	r3, [pc, #80]	; (bc68 <z_arm_mpu_init+0xf0>)
    bc18:	681b      	ldr	r3, [r3, #0]
    bc1a:	0a1b      	lsrs	r3, r3, #8
    bc1c:	b2db      	uxtb	r3, r3
    bc1e:	2b10      	cmp	r3, #16
    bc20:	d00e      	beq.n	bc40 <z_arm_mpu_init+0xc8>
    bc22:	f44f 73de 	mov.w	r3, #444	; 0x1bc
    bc26:	4a0a      	ldr	r2, [pc, #40]	; (bc50 <z_arm_mpu_init+0xd8>)
    bc28:	4910      	ldr	r1, [pc, #64]	; (bc6c <z_arm_mpu_init+0xf4>)
    bc2a:	480b      	ldr	r0, [pc, #44]	; (bc58 <z_arm_mpu_init+0xe0>)
    bc2c:	f00e f9c2 	bl	19fb4 <assert_print>
    bc30:	480f      	ldr	r0, [pc, #60]	; (bc70 <z_arm_mpu_init+0xf8>)
    bc32:	f00e f9bf 	bl	19fb4 <assert_print>
    bc36:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    bc3a:	4805      	ldr	r0, [pc, #20]	; (bc50 <z_arm_mpu_init+0xd8>)
    bc3c:	f00e f9aa 	bl	19f94 <assert_post_action>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    bc40:	2300      	movs	r3, #0
}
    bc42:	4618      	mov	r0, r3
    bc44:	370c      	adds	r7, #12
    bc46:	46bd      	mov	sp, r7
    bc48:	bd90      	pop	{r4, r7, pc}
    bc4a:	bf00      	nop
    bc4c:	00024028 	.word	0x00024028
    bc50:	000218b8 	.word	0x000218b8
    bc54:	000218f0 	.word	0x000218f0
    bc58:	000218f4 	.word	0x000218f4
    bc5c:	000219a0 	.word	0x000219a0
    bc60:	000219d4 	.word	0x000219d4
    bc64:	2000ce9c 	.word	0x2000ce9c
    bc68:	e000ed90 	.word	0xe000ed90
    bc6c:	000219f0 	.word	0x000219f0
    bc70:	00021a44 	.word	0x00021a44

0000bc74 <z_impl_zephyr_fputc>:
#define LIBC_DATA	K_APP_DMEM(z_libc_partition)

static LIBC_DATA int (*_stdout_hook)(int);

int z_impl_zephyr_fputc(int a, FILE *out)
{
    bc74:	b580      	push	{r7, lr}
    bc76:	b082      	sub	sp, #8
    bc78:	af00      	add	r7, sp, #0
    bc7a:	6078      	str	r0, [r7, #4]
    bc7c:	6039      	str	r1, [r7, #0]
	(*_stdout_hook)(a);
    bc7e:	4b04      	ldr	r3, [pc, #16]	; (bc90 <z_impl_zephyr_fputc+0x1c>)
    bc80:	681b      	ldr	r3, [r3, #0]
    bc82:	6878      	ldr	r0, [r7, #4]
    bc84:	4798      	blx	r3
	return 0;
    bc86:	2300      	movs	r3, #0
}
    bc88:	4618      	mov	r0, r3
    bc8a:	3708      	adds	r7, #8
    bc8c:	46bd      	mov	sp, r7
    bc8e:	bd80      	pop	{r7, pc}
    bc90:	2000c908 	.word	0x2000c908

0000bc94 <__stdout_hook_install>:
FILE *const stdin = &__stdin;
FILE *const stdout = &__stdout;
STDIO_ALIAS(stderr);

void __stdout_hook_install(int (*hook)(int))
{
    bc94:	b480      	push	{r7}
    bc96:	b083      	sub	sp, #12
    bc98:	af00      	add	r7, sp, #0
    bc9a:	6078      	str	r0, [r7, #4]
	_stdout_hook = hook;
    bc9c:	4a07      	ldr	r2, [pc, #28]	; (bcbc <__stdout_hook_install+0x28>)
    bc9e:	687b      	ldr	r3, [r7, #4]
    bca0:	6013      	str	r3, [r2, #0]
	__stdout.flags |= _FDEV_SETUP_WRITE;
    bca2:	4b07      	ldr	r3, [pc, #28]	; (bcc0 <__stdout_hook_install+0x2c>)
    bca4:	789b      	ldrb	r3, [r3, #2]
    bca6:	f043 0302 	orr.w	r3, r3, #2
    bcaa:	b2da      	uxtb	r2, r3
    bcac:	4b04      	ldr	r3, [pc, #16]	; (bcc0 <__stdout_hook_install+0x2c>)
    bcae:	709a      	strb	r2, [r3, #2]
}
    bcb0:	bf00      	nop
    bcb2:	370c      	adds	r7, #12
    bcb4:	46bd      	mov	sp, r7
    bcb6:	bc80      	pop	{r7}
    bcb8:	4770      	bx	lr
    bcba:	bf00      	nop
    bcbc:	2000c908 	.word	0x2000c908
    bcc0:	2000c654 	.word	0x2000c654

0000bcc4 <malloc_prepare>:
	return aligned_alloc(alignment, size);
}
#endif

static int malloc_prepare(void)
{
    bcc4:	b580      	push	{r7, lr}
    bcc6:	b082      	sub	sp, #8
    bcc8:	af00      	add	r7, sp, #0
	void *heap_base = NULL;
    bcca:	2300      	movs	r3, #0
    bccc:	607b      	str	r3, [r7, #4]
		if (POINTER_TO_UINT(heap_base) + heap_size <= HEAP_BASE + HEAP_SIZE)
			break;
		heap_size >>= 1;
	}
#else
	heap_base = UINT_TO_POINTER(HEAP_BASE);
    bcce:	4b0c      	ldr	r3, [pc, #48]	; (bd00 <malloc_prepare+0x3c>)
    bcd0:	3307      	adds	r3, #7
    bcd2:	f023 0307 	bic.w	r3, r3, #7
    bcd6:	607b      	str	r3, [r7, #4]
	heap_size = HEAP_SIZE;
    bcd8:	4b09      	ldr	r3, [pc, #36]	; (bd00 <malloc_prepare+0x3c>)
    bcda:	3307      	adds	r3, #7
    bcdc:	f023 0307 	bic.w	r3, r3, #7
    bce0:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    bce4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    bce8:	603b      	str	r3, [r7, #0]
	z_malloc_partition.start = POINTER_TO_UINT(heap_base);
	z_malloc_partition.size = heap_size;
	z_malloc_partition.attr = K_MEM_PARTITION_P_RW_U_RW;
#endif

	sys_heap_init(&z_malloc_heap, heap_base, heap_size);
    bcea:	683a      	ldr	r2, [r7, #0]
    bcec:	6879      	ldr	r1, [r7, #4]
    bcee:	4805      	ldr	r0, [pc, #20]	; (bd04 <malloc_prepare+0x40>)
    bcf0:	f7fd fd32 	bl	9758 <sys_heap_init>

	return 0;
    bcf4:	2300      	movs	r3, #0
}
    bcf6:	4618      	mov	r0, r3
    bcf8:	3708      	adds	r7, #8
    bcfa:	46bd      	mov	sp, r7
    bcfc:	bd80      	pop	{r7, pc}
    bcfe:	bf00      	nop
    bd00:	2000ddfc 	.word	0x2000ddfc
    bd04:	2000ddf0 	.word	0x2000ddf0

0000bd08 <k_ms_to_ticks_ceil64>:
 * Rounds up to the next highest output unit.
 *
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint64_t k_ms_to_ticks_ceil64(uint64_t t)
{
    bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd0c:	b0bd      	sub	sp, #244	; 0xf4
    bd0e:	af00      	add	r7, sp, #0
    bd10:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
    bd14:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
    bd18:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    bd1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    bd20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    bd24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    bd28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    bd2c:	2301      	movs	r3, #1
    bd2e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    bd32:	2300      	movs	r3, #0
    bd34:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    bd38:	2301      	movs	r3, #1
    bd3a:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
    bd3e:	2300      	movs	r3, #0
    bd40:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    bd44:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    bd48:	2b00      	cmp	r3, #0
    bd4a:	d014      	beq.n	bd76 <k_ms_to_ticks_ceil64+0x6e>
	bool mul_ratio = const_hz &&
    bd4c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    bd50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    bd54:	429a      	cmp	r2, r3
    bd56:	d20e      	bcs.n	bd76 <k_ms_to_ticks_ceil64+0x6e>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    bd58:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    bd5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    bd60:	fbb1 f2f3 	udiv	r2, r1, r3
    bd64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    bd68:	fb02 f303 	mul.w	r3, r2, r3
    bd6c:	1acb      	subs	r3, r1, r3
    bd6e:	2b00      	cmp	r3, #0
    bd70:	d101      	bne.n	bd76 <k_ms_to_ticks_ceil64+0x6e>
    bd72:	2301      	movs	r3, #1
    bd74:	e000      	b.n	bd78 <k_ms_to_ticks_ceil64+0x70>
    bd76:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
    bd78:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    bd7c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    bd80:	f003 0301 	and.w	r3, r3, #1
    bd84:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    bd88:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    bd8c:	2b00      	cmp	r3, #0
    bd8e:	d014      	beq.n	bdba <k_ms_to_ticks_ceil64+0xb2>
	bool div_ratio = const_hz &&
    bd90:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    bd94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    bd98:	429a      	cmp	r2, r3
    bd9a:	d90e      	bls.n	bdba <k_ms_to_ticks_ceil64+0xb2>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    bd9c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    bda0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    bda4:	fbb1 f2f3 	udiv	r2, r1, r3
    bda8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    bdac:	fb02 f303 	mul.w	r3, r2, r3
    bdb0:	1acb      	subs	r3, r1, r3
    bdb2:	2b00      	cmp	r3, #0
    bdb4:	d101      	bne.n	bdba <k_ms_to_ticks_ceil64+0xb2>
    bdb6:	2301      	movs	r3, #1
    bdb8:	e000      	b.n	bdbc <k_ms_to_ticks_ceil64+0xb4>
    bdba:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
    bdbc:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    bdc0:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    bdc4:	f003 0301 	and.w	r3, r3, #1
    bdc8:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	if (from_hz == to_hz) {
    bdcc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    bdd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    bdd4:	429a      	cmp	r2, r3
    bdd6:	d10c      	bne.n	bdf2 <k_ms_to_ticks_ceil64+0xea>
		return result32 ? ((uint32_t)t) : t;
    bdd8:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    bddc:	2b00      	cmp	r3, #0
    bdde:	d005      	beq.n	bdec <k_ms_to_ticks_ceil64+0xe4>
    bde0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    bde4:	2200      	movs	r2, #0
    bde6:	461c      	mov	r4, r3
    bde8:	4615      	mov	r5, r2
    bdea:	e1de      	b.n	c1aa <k_ms_to_ticks_ceil64+0x4a2>
    bdec:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
    bdf0:	e1db      	b.n	c1aa <k_ms_to_ticks_ceil64+0x4a2>
	uint64_t off = 0;
    bdf2:	f04f 0200 	mov.w	r2, #0
    bdf6:	f04f 0300 	mov.w	r3, #0
    bdfa:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (!mul_ratio) {
    bdfe:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    be02:	f083 0301 	eor.w	r3, r3, #1
    be06:	b2db      	uxtb	r3, r3
    be08:	2b00      	cmp	r3, #0
    be0a:	d02a      	beq.n	be62 <k_ms_to_ticks_ceil64+0x15a>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
    be0c:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    be10:	2b00      	cmp	r3, #0
    be12:	d006      	beq.n	be22 <k_ms_to_ticks_ceil64+0x11a>
    be14:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    be18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    be1c:	fbb2 f3f3 	udiv	r3, r2, r3
    be20:	e001      	b.n	be26 <k_ms_to_ticks_ceil64+0x11e>
    be22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    be26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		if (round_up) {
    be2a:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
    be2e:	2b00      	cmp	r3, #0
    be30:	d009      	beq.n	be46 <k_ms_to_ticks_ceil64+0x13e>
			off = rdivisor - 1U;
    be32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    be36:	3b01      	subs	r3, #1
    be38:	2200      	movs	r2, #0
    be3a:	613b      	str	r3, [r7, #16]
    be3c:	617a      	str	r2, [r7, #20]
    be3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    be42:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		if (round_off) {
    be46:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
    be4a:	2b00      	cmp	r3, #0
    be4c:	d009      	beq.n	be62 <k_ms_to_ticks_ceil64+0x15a>
			off = rdivisor / 2U;
    be4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    be52:	085b      	lsrs	r3, r3, #1
    be54:	2200      	movs	r2, #0
    be56:	60bb      	str	r3, [r7, #8]
    be58:	60fa      	str	r2, [r7, #12]
    be5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    be5e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (div_ratio) {
    be62:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    be66:	2b00      	cmp	r3, #0
    be68:	d038      	beq.n	bedc <k_ms_to_ticks_ceil64+0x1d4>
		t += off;
    be6a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    be6e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    be72:	1886      	adds	r6, r0, r2
    be74:	603e      	str	r6, [r7, #0]
    be76:	eb41 0303 	adc.w	r3, r1, r3
    be7a:	607b      	str	r3, [r7, #4]
    be7c:	e9d7 2300 	ldrd	r2, r3, [r7]
    be80:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		if (result32 && (t < BIT64(32))) {
    be84:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    be88:	2b00      	cmp	r3, #0
    be8a:	d011      	beq.n	beb0 <k_ms_to_ticks_ceil64+0x1a8>
    be8c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
    be90:	2b01      	cmp	r3, #1
    be92:	d20d      	bcs.n	beb0 <k_ms_to_ticks_ceil64+0x1a8>
			return ((uint32_t)t) / (from_hz / to_hz);
    be94:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    be98:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    be9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    bea0:	fbb1 f3f3 	udiv	r3, r1, r3
    bea4:	fbb2 f3f3 	udiv	r3, r2, r3
    bea8:	2200      	movs	r2, #0
    beaa:	461c      	mov	r4, r3
    beac:	4615      	mov	r5, r2
    beae:	e17c      	b.n	c1aa <k_ms_to_ticks_ceil64+0x4a2>
			return t / ((uint64_t)from_hz / to_hz);
    beb0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    beb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    beb8:	fbb2 f3f3 	udiv	r3, r2, r3
    bebc:	2200      	movs	r2, #0
    bebe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    bec2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    bec6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
    beca:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    bece:	f7fc f939 	bl	8144 <__aeabi_uldivmod>
    bed2:	4602      	mov	r2, r0
    bed4:	460b      	mov	r3, r1
    bed6:	4614      	mov	r4, r2
    bed8:	461d      	mov	r5, r3
    beda:	e166      	b.n	c1aa <k_ms_to_ticks_ceil64+0x4a2>
	} else if (mul_ratio) {
    bedc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    bee0:	2b00      	cmp	r3, #0
    bee2:	d031      	beq.n	bf48 <k_ms_to_ticks_ceil64+0x240>
		if (result32) {
    bee4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    bee8:	2b00      	cmp	r3, #0
    beea:	d00d      	beq.n	bf08 <k_ms_to_ticks_ceil64+0x200>
			return ((uint32_t)t) * (to_hz / from_hz);
    beec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    bef0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    bef4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    bef8:	fbb1 f2f2 	udiv	r2, r1, r2
    befc:	fb02 f303 	mul.w	r3, r2, r3
    bf00:	2200      	movs	r2, #0
    bf02:	461c      	mov	r4, r3
    bf04:	4615      	mov	r5, r2
    bf06:	e150      	b.n	c1aa <k_ms_to_ticks_ceil64+0x4a2>
			return t * ((uint64_t)to_hz / from_hz);
    bf08:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
    bf0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    bf10:	fbb2 f3f3 	udiv	r3, r2, r3
    bf14:	2200      	movs	r2, #0
    bf16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    bf1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
    bf1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    bf22:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
    bf26:	464a      	mov	r2, r9
    bf28:	fb02 f203 	mul.w	r2, r2, r3
    bf2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    bf30:	4641      	mov	r1, r8
    bf32:	fb01 f303 	mul.w	r3, r1, r3
    bf36:	4413      	add	r3, r2
    bf38:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    bf3c:	4641      	mov	r1, r8
    bf3e:	fba2 4501 	umull	r4, r5, r2, r1
    bf42:	442b      	add	r3, r5
    bf44:	461d      	mov	r5, r3
    bf46:	e130      	b.n	c1aa <k_ms_to_ticks_ceil64+0x4a2>
		if (result32) {
    bf48:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    bf4c:	2b00      	cmp	r3, #0
    bf4e:	d035      	beq.n	bfbc <k_ms_to_ticks_ceil64+0x2b4>
			return (uint32_t)((t * to_hz + off) / from_hz);
    bf50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    bf54:	2200      	movs	r2, #0
    bf56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    bf5a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
    bf5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    bf62:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
    bf66:	465a      	mov	r2, fp
    bf68:	fb02 f203 	mul.w	r2, r2, r3
    bf6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    bf70:	4651      	mov	r1, sl
    bf72:	fb01 f303 	mul.w	r3, r1, r3
    bf76:	4413      	add	r3, r2
    bf78:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    bf7c:	4651      	mov	r1, sl
    bf7e:	fba2 8901 	umull	r8, r9, r2, r1
    bf82:	444b      	add	r3, r9
    bf84:	4699      	mov	r9, r3
    bf86:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    bf8a:	eb18 0102 	adds.w	r1, r8, r2
    bf8e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    bf92:	eb49 0303 	adc.w	r3, r9, r3
    bf96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    bf9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    bf9e:	2200      	movs	r2, #0
    bfa0:	67bb      	str	r3, [r7, #120]	; 0x78
    bfa2:	67fa      	str	r2, [r7, #124]	; 0x7c
    bfa4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    bfa8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    bfac:	f7fc f8ca 	bl	8144 <__aeabi_uldivmod>
    bfb0:	4602      	mov	r2, r0
    bfb2:	460b      	mov	r3, r1
    bfb4:	2300      	movs	r3, #0
    bfb6:	4614      	mov	r4, r2
    bfb8:	461d      	mov	r5, r3
    bfba:	e0f6      	b.n	c1aa <k_ms_to_ticks_ceil64+0x4a2>
		} else if (const_hz && Z_TMCVT_USE_FAST_ALGO(from_hz, to_hz)) {
    bfbc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    bfc0:	2b00      	cmp	r3, #0
    bfc2:	f000 8082 	beq.w	c0ca <k_ms_to_ticks_ceil64+0x3c2>
    bfc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    bfca:	2200      	movs	r2, #0
    bfcc:	673b      	str	r3, [r7, #112]	; 0x70
    bfce:	677a      	str	r2, [r7, #116]	; 0x74
    bfd0:	4b7a      	ldr	r3, [pc, #488]	; (c1bc <k_ms_to_ticks_ceil64+0x4b4>)
    bfd2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
    bfd6:	464a      	mov	r2, r9
    bfd8:	fb03 f202 	mul.w	r2, r3, r2
    bfdc:	2300      	movs	r3, #0
    bfde:	4641      	mov	r1, r8
    bfe0:	fb01 f303 	mul.w	r3, r1, r3
    bfe4:	441a      	add	r2, r3
    bfe6:	4b75      	ldr	r3, [pc, #468]	; (c1bc <k_ms_to_ticks_ceil64+0x4b4>)
    bfe8:	4641      	mov	r1, r8
    bfea:	fba1 ab03 	umull	sl, fp, r1, r3
    bfee:	eb02 030b 	add.w	r3, r2, fp
    bff2:	469b      	mov	fp, r3
    bff4:	f1ba 0302 	subs.w	r3, sl, #2
    bff8:	66bb      	str	r3, [r7, #104]	; 0x68
    bffa:	f14b 0300 	adc.w	r3, fp, #0
    bffe:	66fb      	str	r3, [r7, #108]	; 0x6c
    c000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c004:	f04f 0300 	mov.w	r3, #0
    c008:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
    c00c:	f7fc f89a 	bl	8144 <__aeabi_uldivmod>
    c010:	4602      	mov	r2, r0
    c012:	460b      	mov	r3, r1
    c014:	4610      	mov	r0, r2
    c016:	4619      	mov	r1, r3
    c018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    c01c:	2200      	movs	r2, #0
    c01e:	663b      	str	r3, [r7, #96]	; 0x60
    c020:	667a      	str	r2, [r7, #100]	; 0x64
    c022:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
    c026:	4643      	mov	r3, r8
    c028:	fb03 f201 	mul.w	r2, r3, r1
    c02c:	464b      	mov	r3, r9
    c02e:	fb00 f303 	mul.w	r3, r0, r3
    c032:	4413      	add	r3, r2
    c034:	4642      	mov	r2, r8
    c036:	fba0 2102 	umull	r2, r1, r0, r2
    c03a:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    c03e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    c042:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    c046:	4413      	add	r3, r2
    c048:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c04c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    c050:	2b01      	cmp	r3, #1
    c052:	d23a      	bcs.n	c0ca <k_ms_to_ticks_ceil64+0x3c2>
			return ((t * to_hz + off) / from_hz);
    c054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    c058:	2200      	movs	r2, #0
    c05a:	65bb      	str	r3, [r7, #88]	; 0x58
    c05c:	65fa      	str	r2, [r7, #92]	; 0x5c
    c05e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    c062:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
    c066:	462a      	mov	r2, r5
    c068:	fb02 f203 	mul.w	r2, r2, r3
    c06c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    c070:	4621      	mov	r1, r4
    c072:	fb01 f303 	mul.w	r3, r1, r3
    c076:	4413      	add	r3, r2
    c078:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    c07c:	4621      	mov	r1, r4
    c07e:	fba2 2101 	umull	r2, r1, r2, r1
    c082:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    c086:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    c08a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    c08e:	4413      	add	r3, r2
    c090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    c094:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    c098:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
    c09c:	4621      	mov	r1, r4
    c09e:	1889      	adds	r1, r1, r2
    c0a0:	6539      	str	r1, [r7, #80]	; 0x50
    c0a2:	4629      	mov	r1, r5
    c0a4:	eb43 0101 	adc.w	r1, r3, r1
    c0a8:	6579      	str	r1, [r7, #84]	; 0x54
    c0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    c0ae:	2200      	movs	r2, #0
    c0b0:	64bb      	str	r3, [r7, #72]	; 0x48
    c0b2:	64fa      	str	r2, [r7, #76]	; 0x4c
    c0b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
    c0b8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
    c0bc:	f7fc f842 	bl	8144 <__aeabi_uldivmod>
    c0c0:	4602      	mov	r2, r0
    c0c2:	460b      	mov	r3, r1
    c0c4:	4614      	mov	r4, r2
    c0c6:	461d      	mov	r5, r3
    c0c8:	e06f      	b.n	c1aa <k_ms_to_ticks_ceil64+0x4a2>
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
    c0ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    c0ce:	2200      	movs	r2, #0
    c0d0:	643b      	str	r3, [r7, #64]	; 0x40
    c0d2:	647a      	str	r2, [r7, #68]	; 0x44
    c0d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    c0d8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    c0dc:	f7fc f832 	bl	8144 <__aeabi_uldivmod>
    c0e0:	4602      	mov	r2, r0
    c0e2:	460b      	mov	r3, r1
    c0e4:	4610      	mov	r0, r2
    c0e6:	4619      	mov	r1, r3
    c0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    c0ec:	2200      	movs	r2, #0
    c0ee:	63bb      	str	r3, [r7, #56]	; 0x38
    c0f0:	63fa      	str	r2, [r7, #60]	; 0x3c
    c0f2:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
    c0f6:	4643      	mov	r3, r8
    c0f8:	fb03 f201 	mul.w	r2, r3, r1
    c0fc:	464b      	mov	r3, r9
    c0fe:	fb00 f303 	mul.w	r3, r0, r3
    c102:	4413      	add	r3, r2
    c104:	4642      	mov	r2, r8
    c106:	fba0 2102 	umull	r2, r1, r0, r2
    c10a:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    c10e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    c112:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    c116:	4413      	add	r3, r2
    c118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    c11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    c120:	2200      	movs	r2, #0
    c122:	633b      	str	r3, [r7, #48]	; 0x30
    c124:	637a      	str	r2, [r7, #52]	; 0x34
    c126:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    c12a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    c12e:	f7fc f809 	bl	8144 <__aeabi_uldivmod>
    c132:	4610      	mov	r0, r2
    c134:	4619      	mov	r1, r3
    c136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    c13a:	2200      	movs	r2, #0
    c13c:	62bb      	str	r3, [r7, #40]	; 0x28
    c13e:	62fa      	str	r2, [r7, #44]	; 0x2c
    c140:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
    c144:	4643      	mov	r3, r8
    c146:	fb03 f201 	mul.w	r2, r3, r1
    c14a:	464b      	mov	r3, r9
    c14c:	fb00 f303 	mul.w	r3, r0, r3
    c150:	4413      	add	r3, r2
    c152:	4642      	mov	r2, r8
    c154:	fba0 2102 	umull	r2, r1, r0, r2
    c158:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    c15c:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    c160:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    c164:	4413      	add	r3, r2
    c166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    c16a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    c16e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
    c172:	4641      	mov	r1, r8
    c174:	1889      	adds	r1, r1, r2
    c176:	6239      	str	r1, [r7, #32]
    c178:	4649      	mov	r1, r9
    c17a:	eb43 0101 	adc.w	r1, r3, r1
    c17e:	6279      	str	r1, [r7, #36]	; 0x24
    c180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    c184:	2200      	movs	r2, #0
    c186:	61bb      	str	r3, [r7, #24]
    c188:	61fa      	str	r2, [r7, #28]
    c18a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    c18e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    c192:	f7fb ffd7 	bl	8144 <__aeabi_uldivmod>
    c196:	4602      	mov	r2, r0
    c198:	460b      	mov	r3, r1
    c19a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
    c19e:	4641      	mov	r1, r8
    c1a0:	188c      	adds	r4, r1, r2
    c1a2:	4649      	mov	r1, r9
    c1a4:	eb43 0101 	adc.w	r1, r3, r1
    c1a8:	460d      	mov	r5, r1
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, false, true, false);
    c1aa:	4622      	mov	r2, r4
    c1ac:	462b      	mov	r3, r5
}
    c1ae:	4610      	mov	r0, r2
    c1b0:	4619      	mov	r1, r3
    c1b2:	37f4      	adds	r7, #244	; 0xf4
    c1b4:	46bd      	mov	sp, r7
    c1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1ba:	bf00      	nop
    c1bc:	01e13380 	.word	0x01e13380

0000c1c0 <__NVIC_ClearPendingIRQ>:
{
    c1c0:	b480      	push	{r7}
    c1c2:	b083      	sub	sp, #12
    c1c4:	af00      	add	r7, sp, #0
    c1c6:	4603      	mov	r3, r0
    c1c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c1ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1ce:	2b00      	cmp	r3, #0
    c1d0:	db0c      	blt.n	c1ec <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1d2:	79fb      	ldrb	r3, [r7, #7]
    c1d4:	f003 021f 	and.w	r2, r3, #31
    c1d8:	4907      	ldr	r1, [pc, #28]	; (c1f8 <__NVIC_ClearPendingIRQ+0x38>)
    c1da:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1de:	095b      	lsrs	r3, r3, #5
    c1e0:	2001      	movs	r0, #1
    c1e2:	fa00 f202 	lsl.w	r2, r0, r2
    c1e6:	3360      	adds	r3, #96	; 0x60
    c1e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c1ec:	bf00      	nop
    c1ee:	370c      	adds	r7, #12
    c1f0:	46bd      	mov	sp, r7
    c1f2:	bc80      	pop	{r7}
    c1f4:	4770      	bx	lr
    c1f6:	bf00      	nop
    c1f8:	e000e100 	.word	0xe000e100

0000c1fc <k_is_pre_kernel>:
 *
 * @return true if invoked before post-kernel initialization
 * @return false if invoked during/after post-kernel initialization
 */
static inline bool k_is_pre_kernel(void)
{
    c1fc:	b480      	push	{r7}
    c1fe:	af00      	add	r7, sp, #0
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    c200:	4b08      	ldr	r3, [pc, #32]	; (c224 <k_is_pre_kernel+0x28>)
    c202:	781b      	ldrb	r3, [r3, #0]
    c204:	2b00      	cmp	r3, #0
    c206:	bf14      	ite	ne
    c208:	2301      	movne	r3, #1
    c20a:	2300      	moveq	r3, #0
    c20c:	b2db      	uxtb	r3, r3
    c20e:	f083 0301 	eor.w	r3, r3, #1
    c212:	b2db      	uxtb	r3, r3
    c214:	f003 0301 	and.w	r3, r3, #1
    c218:	b2db      	uxtb	r3, r3
}
    c21a:	4618      	mov	r0, r3
    c21c:	46bd      	mov	sp, r7
    c21e:	bc80      	pop	{r7}
    c220:	4770      	bx	lr
    c222:	bf00      	nop
    c224:	2000ceac 	.word	0x2000ceac

0000c228 <sys_notify_init_spinwait>:
 * reinitialized before it can be re-used.
 *
 * @param notify pointer to the notification configuration object.
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
    c228:	b580      	push	{r7, lr}
    c22a:	b086      	sub	sp, #24
    c22c:	af00      	add	r7, sp, #0
    c22e:	6078      	str	r0, [r7, #4]
	__ASSERT_NO_MSG(notify != NULL);
    c230:	687b      	ldr	r3, [r7, #4]
    c232:	2b00      	cmp	r3, #0
    c234:	d10b      	bne.n	c24e <sys_notify_init_spinwait+0x26>
    c236:	f44f 7385 	mov.w	r3, #266	; 0x10a
    c23a:	4a0b      	ldr	r2, [pc, #44]	; (c268 <sys_notify_init_spinwait+0x40>)
    c23c:	490b      	ldr	r1, [pc, #44]	; (c26c <sys_notify_init_spinwait+0x44>)
    c23e:	480c      	ldr	r0, [pc, #48]	; (c270 <sys_notify_init_spinwait+0x48>)
    c240:	f00d feb8 	bl	19fb4 <assert_print>
    c244:	f44f 7185 	mov.w	r1, #266	; 0x10a
    c248:	4807      	ldr	r0, [pc, #28]	; (c268 <sys_notify_init_spinwait+0x40>)
    c24a:	f00d fea3 	bl	19f94 <assert_post_action>

	*notify = (struct sys_notify){
    c24e:	687b      	ldr	r3, [r7, #4]
    c250:	461a      	mov	r2, r3
    c252:	2300      	movs	r3, #0
    c254:	6013      	str	r3, [r2, #0]
    c256:	6053      	str	r3, [r2, #4]
    c258:	6093      	str	r3, [r2, #8]
    c25a:	687b      	ldr	r3, [r7, #4]
    c25c:	2201      	movs	r2, #1
    c25e:	605a      	str	r2, [r3, #4]
		.flags = SYS_NOTIFY_METHOD_SPINWAIT,
	};
}
    c260:	bf00      	nop
    c262:	3718      	adds	r7, #24
    c264:	46bd      	mov	sp, r7
    c266:	bd80      	pop	{r7, pc}
    c268:	00021a78 	.word	0x00021a78
    c26c:	00021aa8 	.word	0x00021aa8
    c270:	00021ac0 	.word	0x00021ac0

0000c274 <nrf_clock_is_running>:
#endif

NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t     domain,
                                            void *                 p_clk_src)
{
    c274:	b580      	push	{r7, lr}
    c276:	b086      	sub	sp, #24
    c278:	af00      	add	r7, sp, #0
    c27a:	60f8      	str	r0, [r7, #12]
    c27c:	460b      	mov	r3, r1
    c27e:	607a      	str	r2, [r7, #4]
    c280:	72fb      	strb	r3, [r7, #11]
    bool clock_running;
    switch (domain)
    c282:	7afb      	ldrb	r3, [r7, #11]
    c284:	2b00      	cmp	r3, #0
    c286:	d002      	beq.n	c28e <nrf_clock_is_running+0x1a>
    c288:	2b01      	cmp	r3, #1
    c28a:	d017      	beq.n	c2bc <nrf_clock_is_running+0x48>
    c28c:	e02d      	b.n	c2ea <nrf_clock_is_running+0x76>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
    c28e:	68fb      	ldr	r3, [r7, #12]
    c290:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    c294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    c298:	2b00      	cmp	r3, #0
    c29a:	bf14      	ite	ne
    c29c:	2301      	movne	r3, #1
    c29e:	2300      	moveq	r3, #0
    c2a0:	75fb      	strb	r3, [r7, #23]
            if (p_clk_src != NULL)
    c2a2:	687b      	ldr	r3, [r7, #4]
    c2a4:	2b00      	cmp	r3, #0
    c2a6:	d02c      	beq.n	c302 <nrf_clock_is_running+0x8e>
            {
                (*(nrf_clock_lfclk_t *)p_clk_src) =
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
    c2a8:	68fb      	ldr	r3, [r7, #12]
    c2aa:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    c2ae:	b2db      	uxtb	r3, r3
    c2b0:	f003 0303 	and.w	r3, r3, #3
    c2b4:	b2da      	uxtb	r2, r3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    c2b6:	687b      	ldr	r3, [r7, #4]
    c2b8:	701a      	strb	r2, [r3, #0]
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
            }
            break;
    c2ba:	e022      	b.n	c302 <nrf_clock_is_running+0x8e>
        case NRF_CLOCK_DOMAIN_HFCLK:
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
    c2bc:	68fb      	ldr	r3, [r7, #12]
    c2be:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    c2c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    c2c6:	2b00      	cmp	r3, #0
    c2c8:	bf14      	ite	ne
    c2ca:	2301      	movne	r3, #1
    c2cc:	2300      	moveq	r3, #0
    c2ce:	75fb      	strb	r3, [r7, #23]
            if (p_clk_src != NULL)
    c2d0:	687b      	ldr	r3, [r7, #4]
    c2d2:	2b00      	cmp	r3, #0
    c2d4:	d017      	beq.n	c306 <nrf_clock_is_running+0x92>
                 * It has to be derived from HFCLK state. */
                (*(nrf_clock_hfclk_t *)p_clk_src) = clock_running ? NRF_CLOCK_HFCLK_HIGH_ACCURACY :
                                                                    NRF_CLOCK_HFCLK_LOW_ACCURACY;
#else
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    c2d6:	68fb      	ldr	r3, [r7, #12]
    c2d8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    c2dc:	b2db      	uxtb	r3, r3
    c2de:	f003 0301 	and.w	r3, r3, #1
    c2e2:	b2da      	uxtb	r2, r3
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    c2e4:	687b      	ldr	r3, [r7, #4]
    c2e6:	701a      	strb	r2, [r3, #0]
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
#endif
            }
            break;
    c2e8:	e00d      	b.n	c306 <nrf_clock_is_running+0x92>
        case NRF_CLOCK_DOMAIN_HFCLKAUDIO:
            clock_running = p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk;
            break;
#endif
        default:
            NRFX_ASSERT(0);
    c2ea:	f240 33cb 	movw	r3, #971	; 0x3cb
    c2ee:	4a09      	ldr	r2, [pc, #36]	; (c314 <nrf_clock_is_running+0xa0>)
    c2f0:	4909      	ldr	r1, [pc, #36]	; (c318 <nrf_clock_is_running+0xa4>)
    c2f2:	480a      	ldr	r0, [pc, #40]	; (c31c <nrf_clock_is_running+0xa8>)
    c2f4:	f00d fe5e 	bl	19fb4 <assert_print>
    c2f8:	f240 31cb 	movw	r1, #971	; 0x3cb
    c2fc:	4805      	ldr	r0, [pc, #20]	; (c314 <nrf_clock_is_running+0xa0>)
    c2fe:	f00d fe49 	bl	19f94 <assert_post_action>
            break;
    c302:	bf00      	nop
    c304:	e000      	b.n	c308 <nrf_clock_is_running+0x94>
            break;
    c306:	bf00      	nop
            return false;
    }
    return clock_running;
    c308:	7dfb      	ldrb	r3, [r7, #23]
}
    c30a:	4618      	mov	r0, r3
    c30c:	3718      	adds	r7, #24
    c30e:	46bd      	mov	sp, r7
    c310:	bd80      	pop	{r7, pc}
    c312:	bf00      	nop
    c314:	00021ae0 	.word	0x00021ae0
    c318:	00021b14 	.word	0x00021b14
    c31c:	00021ac0 	.word	0x00021ac0

0000c320 <nrfx_clock_is_running>:
{
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    c320:	b580      	push	{r7, lr}
    c322:	b082      	sub	sp, #8
    c324:	af00      	add	r7, sp, #0
    c326:	4603      	mov	r3, r0
    c328:	6039      	str	r1, [r7, #0]
    c32a:	71fb      	strb	r3, [r7, #7]
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    c32c:	79fb      	ldrb	r3, [r7, #7]
    c32e:	683a      	ldr	r2, [r7, #0]
    c330:	4619      	mov	r1, r3
    c332:	4804      	ldr	r0, [pc, #16]	; (c344 <nrfx_clock_is_running+0x24>)
    c334:	f7ff ff9e 	bl	c274 <nrf_clock_is_running>
    c338:	4603      	mov	r3, r0
}
    c33a:	4618      	mov	r0, r3
    c33c:	3708      	adds	r7, #8
    c33e:	46bd      	mov	sp, r7
    c340:	bd80      	pop	{r7, pc}
    c342:	bf00      	nop
    c344:	40005000 	.word	0x40005000

0000c348 <z_log_minimal_level_to_char>:
{
    c348:	b480      	push	{r7}
    c34a:	b083      	sub	sp, #12
    c34c:	af00      	add	r7, sp, #0
    c34e:	6078      	str	r0, [r7, #4]
	switch (level) {
    c350:	687b      	ldr	r3, [r7, #4]
    c352:	3b01      	subs	r3, #1
    c354:	2b03      	cmp	r3, #3
    c356:	d813      	bhi.n	c380 <z_log_minimal_level_to_char+0x38>
    c358:	a201      	add	r2, pc, #4	; (adr r2, c360 <z_log_minimal_level_to_char+0x18>)
    c35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c35e:	bf00      	nop
    c360:	0000c371 	.word	0x0000c371
    c364:	0000c375 	.word	0x0000c375
    c368:	0000c379 	.word	0x0000c379
    c36c:	0000c37d 	.word	0x0000c37d
		return 'E';
    c370:	2345      	movs	r3, #69	; 0x45
    c372:	e006      	b.n	c382 <z_log_minimal_level_to_char+0x3a>
		return 'W';
    c374:	2357      	movs	r3, #87	; 0x57
    c376:	e004      	b.n	c382 <z_log_minimal_level_to_char+0x3a>
		return 'I';
    c378:	2349      	movs	r3, #73	; 0x49
    c37a:	e002      	b.n	c382 <z_log_minimal_level_to_char+0x3a>
		return 'D';
    c37c:	2344      	movs	r3, #68	; 0x44
    c37e:	e000      	b.n	c382 <z_log_minimal_level_to_char+0x3a>
		return '?';
    c380:	233f      	movs	r3, #63	; 0x3f
}
    c382:	4618      	mov	r0, r3
    c384:	370c      	adds	r7, #12
    c386:	46bd      	mov	sp, r7
    c388:	bc80      	pop	{r7}
    c38a:	4770      	bx	lr

0000c38c <get_status>:
				(enum clock_control_nrf_type)(size_t)sys);
}

static enum clock_control_status get_status(const struct device *dev,
					    clock_control_subsys_t subsys)
{
    c38c:	b580      	push	{r7, lr}
    c38e:	b084      	sub	sp, #16
    c390:	af00      	add	r7, sp, #0
    c392:	6078      	str	r0, [r7, #4]
    c394:	6039      	str	r1, [r7, #0]
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)(size_t)subsys;
    c396:	683b      	ldr	r3, [r7, #0]
    c398:	73fb      	strb	r3, [r7, #15]

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    c39a:	7bfb      	ldrb	r3, [r7, #15]
    c39c:	2b01      	cmp	r3, #1
    c39e:	d909      	bls.n	c3b4 <get_status+0x28>
    c3a0:	237a      	movs	r3, #122	; 0x7a
    c3a2:	4a0c      	ldr	r2, [pc, #48]	; (c3d4 <get_status+0x48>)
    c3a4:	490c      	ldr	r1, [pc, #48]	; (c3d8 <get_status+0x4c>)
    c3a6:	480d      	ldr	r0, [pc, #52]	; (c3dc <get_status+0x50>)
    c3a8:	f00d fe04 	bl	19fb4 <assert_print>
    c3ac:	217a      	movs	r1, #122	; 0x7a
    c3ae:	4809      	ldr	r0, [pc, #36]	; (c3d4 <get_status+0x48>)
    c3b0:	f00d fdf0 	bl	19f94 <assert_post_action>

	return GET_STATUS(get_sub_data(dev, type)->flags);
    c3b4:	7bfb      	ldrb	r3, [r7, #15]
    c3b6:	4619      	mov	r1, r3
    c3b8:	6878      	ldr	r0, [r7, #4]
    c3ba:	f00e f960 	bl	1a67e <get_sub_data>
    c3be:	4603      	mov	r3, r0
    c3c0:	689b      	ldr	r3, [r3, #8]
    c3c2:	b2db      	uxtb	r3, r3
    c3c4:	f003 0307 	and.w	r3, r3, #7
    c3c8:	b2db      	uxtb	r3, r3
}
    c3ca:	4618      	mov	r0, r3
    c3cc:	3710      	adds	r7, #16
    c3ce:	46bd      	mov	sp, r7
    c3d0:	bd80      	pop	{r7, pc}
    c3d2:	bf00      	nop
    c3d4:	00021b28 	.word	0x00021b28
    c3d8:	00021b68 	.word	0x00021b68
    c3dc:	00021ac0 	.word	0x00021ac0

0000c3e0 <clkstarted_handle>:
	irq_unlock(key);
}

static void clkstarted_handle(const struct device *dev,
			      enum clock_control_nrf_type type)
{
    c3e0:	b590      	push	{r4, r7, lr}
    c3e2:	b087      	sub	sp, #28
    c3e4:	af00      	add	r7, sp, #0
    c3e6:	6078      	str	r0, [r7, #4]
    c3e8:	460b      	mov	r3, r1
    c3ea:	70fb      	strb	r3, [r7, #3]
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    c3ec:	78fb      	ldrb	r3, [r7, #3]
    c3ee:	4619      	mov	r1, r3
    c3f0:	6878      	ldr	r0, [r7, #4]
    c3f2:	f00e f944 	bl	1a67e <get_sub_data>
    c3f6:	6178      	str	r0, [r7, #20]
	clock_control_cb_t callback = sub_data->cb;
    c3f8:	697b      	ldr	r3, [r7, #20]
    c3fa:	681b      	ldr	r3, [r3, #0]
    c3fc:	613b      	str	r3, [r7, #16]
	void *user_data = sub_data->user_data;
    c3fe:	697b      	ldr	r3, [r7, #20]
    c400:	685b      	ldr	r3, [r3, #4]
    c402:	60fb      	str	r3, [r7, #12]

	sub_data->cb = NULL;
    c404:	697b      	ldr	r3, [r7, #20]
    c406:	2200      	movs	r2, #0
    c408:	601a      	str	r2, [r3, #0]
	set_on_state(&sub_data->flags);
    c40a:	697b      	ldr	r3, [r7, #20]
    c40c:	3308      	adds	r3, #8
    c40e:	4618      	mov	r0, r3
    c410:	f00e f9e1 	bl	1a7d6 <set_on_state>
	DBG(dev, type, "Clock started");
    c414:	2303      	movs	r3, #3
    c416:	2b03      	cmp	r3, #3
    c418:	d910      	bls.n	c43c <clkstarted_handle+0x5c>
    c41a:	2004      	movs	r0, #4
    c41c:	f7ff ff94 	bl	c348 <z_log_minimal_level_to_char>
    c420:	4603      	mov	r3, r0
    c422:	461c      	mov	r4, r3
    c424:	78fb      	ldrb	r3, [r7, #3]
    c426:	4619      	mov	r1, r3
    c428:	6878      	ldr	r0, [r7, #4]
    c42a:	f00e f93e 	bl	1a6aa <get_sub_config>
    c42e:	4603      	mov	r3, r0
    c430:	689b      	ldr	r3, [r3, #8]
    c432:	461a      	mov	r2, r3
    c434:	4621      	mov	r1, r4
    c436:	4808      	ldr	r0, [pc, #32]	; (c458 <clkstarted_handle+0x78>)
    c438:	f00d fddf 	bl	19ffa <z_log_minimal_printk>

	if (callback) {
    c43c:	693b      	ldr	r3, [r7, #16]
    c43e:	2b00      	cmp	r3, #0
    c440:	d005      	beq.n	c44e <clkstarted_handle+0x6e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    c442:	78fb      	ldrb	r3, [r7, #3]
    c444:	4619      	mov	r1, r3
    c446:	693b      	ldr	r3, [r7, #16]
    c448:	68fa      	ldr	r2, [r7, #12]
    c44a:	6878      	ldr	r0, [r7, #4]
    c44c:	4798      	blx	r3
	}
}
    c44e:	bf00      	nop
    c450:	371c      	adds	r7, #28
    c452:	46bd      	mov	sp, r7
    c454:	bd90      	pop	{r4, r7, pc}
    c456:	bf00      	nop
    c458:	00021b8c 	.word	0x00021b8c

0000c45c <get_hf_flags>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
}
#endif

static uint32_t *get_hf_flags(void)
{
    c45c:	b480      	push	{r7}
    c45e:	b083      	sub	sp, #12
    c460:	af00      	add	r7, sp, #0
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
    c462:	4b04      	ldr	r3, [pc, #16]	; (c474 <get_hf_flags+0x18>)
    c464:	607b      	str	r3, [r7, #4]

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
    c466:	687b      	ldr	r3, [r7, #4]
    c468:	3348      	adds	r3, #72	; 0x48
}
    c46a:	4618      	mov	r0, r3
    c46c:	370c      	adds	r7, #12
    c46e:	46bd      	mov	sp, r7
    c470:	bc80      	pop	{r7}
    c472:	4770      	bx	lr
    c474:	2000c910 	.word	0x2000c910

0000c478 <generic_hfclk_start>:

static void generic_hfclk_start(void)
{
    c478:	b580      	push	{r7, lr}
    c47a:	b086      	sub	sp, #24
    c47c:	af00      	add	r7, sp, #0
	nrf_clock_hfclk_t type;
	bool already_started = false;
    c47e:	2300      	movs	r3, #0
    c480:	75fb      	strb	r3, [r7, #23]
	__asm__ volatile(
    c482:	f04f 0320 	mov.w	r3, #32
    c486:	f3ef 8211 	mrs	r2, BASEPRI
    c48a:	f383 8812 	msr	BASEPRI_MAX, r3
    c48e:	f3bf 8f6f 	isb	sy
    c492:	60fa      	str	r2, [r7, #12]
    c494:	60bb      	str	r3, [r7, #8]
	return key;
    c496:	68fb      	ldr	r3, [r7, #12]
	unsigned int key = irq_lock();
    c498:	613b      	str	r3, [r7, #16]

	hfclk_users |= HF_USER_GENERIC;
    c49a:	4b19      	ldr	r3, [pc, #100]	; (c500 <generic_hfclk_start+0x88>)
    c49c:	681b      	ldr	r3, [r3, #0]
    c49e:	f043 0302 	orr.w	r3, r3, #2
    c4a2:	461a      	mov	r2, r3
    c4a4:	4b16      	ldr	r3, [pc, #88]	; (c500 <generic_hfclk_start+0x88>)
    c4a6:	601a      	str	r2, [r3, #0]
	if (hfclk_users & HF_USER_BT) {
    c4a8:	4b15      	ldr	r3, [pc, #84]	; (c500 <generic_hfclk_start+0x88>)
    c4aa:	681b      	ldr	r3, [r3, #0]
    c4ac:	f003 0301 	and.w	r3, r3, #1
    c4b0:	2b00      	cmp	r3, #0
    c4b2:	d00f      	beq.n	c4d4 <generic_hfclk_start+0x5c>
		(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &type);
    c4b4:	1cfb      	adds	r3, r7, #3
    c4b6:	4619      	mov	r1, r3
    c4b8:	2001      	movs	r0, #1
    c4ba:	f7ff ff31 	bl	c320 <nrfx_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    c4be:	78fb      	ldrb	r3, [r7, #3]
    c4c0:	2b01      	cmp	r3, #1
    c4c2:	d107      	bne.n	c4d4 <generic_hfclk_start+0x5c>
			already_started = true;
    c4c4:	2301      	movs	r3, #1
    c4c6:	75fb      	strb	r3, [r7, #23]
			/* Set on state in case clock interrupt comes and we
			 * want to avoid handling that.
			 */
			set_on_state(get_hf_flags());
    c4c8:	f7ff ffc8 	bl	c45c <get_hf_flags>
    c4cc:	4603      	mov	r3, r0
    c4ce:	4618      	mov	r0, r3
    c4d0:	f00e f981 	bl	1a7d6 <set_on_state>
    c4d4:	693b      	ldr	r3, [r7, #16]
    c4d6:	607b      	str	r3, [r7, #4]
	__asm__ volatile(
    c4d8:	687b      	ldr	r3, [r7, #4]
    c4da:	f383 8811 	msr	BASEPRI, r3
    c4de:	f3bf 8f6f 	isb	sy
}
    c4e2:	bf00      	nop
		}
	}

	irq_unlock(key);

	if (already_started) {
    c4e4:	7dfb      	ldrb	r3, [r7, #23]
    c4e6:	2b00      	cmp	r3, #0
    c4e8:	d004      	beq.n	c4f4 <generic_hfclk_start+0x7c>
		/* Clock already started by z_nrf_clock_bt_ctlr_hf_request */
		clkstarted_handle(CLOCK_DEVICE,
    c4ea:	2100      	movs	r1, #0
    c4ec:	4805      	ldr	r0, [pc, #20]	; (c504 <generic_hfclk_start+0x8c>)
    c4ee:	f7ff ff77 	bl	c3e0 <clkstarted_handle>
    c4f2:	e001      	b.n	c4f8 <generic_hfclk_start+0x80>
				  CLOCK_CONTROL_NRF_TYPE_HFCLK);
		return;
	}

	hfclk_start();
    c4f4:	f00e f9a0 	bl	1a838 <hfclk_start>
}
    c4f8:	3718      	adds	r7, #24
    c4fa:	46bd      	mov	sp, r7
    c4fc:	bd80      	pop	{r7, pc}
    c4fe:	bf00      	nop
    c500:	2000c90c 	.word	0x2000c90c
    c504:	0001f97c 	.word	0x0001f97c

0000c508 <generic_hfclk_stop>:

static void generic_hfclk_stop(void)
{
    c508:	b580      	push	{r7, lr}
    c50a:	b084      	sub	sp, #16
    c50c:	af00      	add	r7, sp, #0
	__asm__ volatile(
    c50e:	f04f 0320 	mov.w	r3, #32
    c512:	f3ef 8211 	mrs	r2, BASEPRI
    c516:	f383 8812 	msr	BASEPRI_MAX, r3
    c51a:	f3bf 8f6f 	isb	sy
    c51e:	60ba      	str	r2, [r7, #8]
    c520:	607b      	str	r3, [r7, #4]
	return key;
    c522:	68bb      	ldr	r3, [r7, #8]
	 * as the thread could be preempted right after that function but
	 * before hfclk_stop() is called and the preempting code could request
	 * the HFCLK again. Then, the HFCLK would be stopped inappropriately
	 * and hfclk_user would be left with an incorrect value.
	 */
	unsigned int key = irq_lock();
    c524:	60fb      	str	r3, [r7, #12]

	hfclk_users &= ~HF_USER_GENERIC;
    c526:	4b0d      	ldr	r3, [pc, #52]	; (c55c <generic_hfclk_stop+0x54>)
    c528:	681b      	ldr	r3, [r3, #0]
    c52a:	f023 0302 	bic.w	r3, r3, #2
    c52e:	4a0b      	ldr	r2, [pc, #44]	; (c55c <generic_hfclk_stop+0x54>)
    c530:	6013      	str	r3, [r2, #0]
	/* Skip stopping if BT is still requesting the clock. */
	if (!(hfclk_users & HF_USER_BT)) {
    c532:	4b0a      	ldr	r3, [pc, #40]	; (c55c <generic_hfclk_stop+0x54>)
    c534:	681b      	ldr	r3, [r3, #0]
    c536:	f003 0301 	and.w	r3, r3, #1
    c53a:	2b00      	cmp	r3, #0
    c53c:	d101      	bne.n	c542 <generic_hfclk_stop+0x3a>
		hfclk_stop();
    c53e:	f00e f981 	bl	1a844 <hfclk_stop>
    c542:	68fb      	ldr	r3, [r7, #12]
    c544:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
    c546:	683b      	ldr	r3, [r7, #0]
    c548:	f383 8811 	msr	BASEPRI, r3
    c54c:	f3bf 8f6f 	isb	sy
}
    c550:	bf00      	nop
	}

	irq_unlock(key);
}
    c552:	bf00      	nop
    c554:	3710      	adds	r7, #16
    c556:	46bd      	mov	sp, r7
    c558:	bd80      	pop	{r7, pc}
    c55a:	bf00      	nop
    c55c:	2000c90c 	.word	0x2000c90c

0000c560 <stop>:
	irq_unlock(key);
}

static int stop(const struct device *dev, clock_control_subsys_t subsys,
		uint32_t ctx)
{
    c560:	b580      	push	{r7, lr}
    c562:	b088      	sub	sp, #32
    c564:	af00      	add	r7, sp, #0
    c566:	60f8      	str	r0, [r7, #12]
    c568:	60b9      	str	r1, [r7, #8]
    c56a:	607a      	str	r2, [r7, #4]
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)(size_t)subsys;
    c56c:	68bb      	ldr	r3, [r7, #8]
    c56e:	77fb      	strb	r3, [r7, #31]
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    c570:	7ffb      	ldrb	r3, [r7, #31]
    c572:	4619      	mov	r1, r3
    c574:	68f8      	ldr	r0, [r7, #12]
    c576:	f00e f882 	bl	1a67e <get_sub_data>
    c57a:	61b8      	str	r0, [r7, #24]
	int err;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    c57c:	7ffb      	ldrb	r3, [r7, #31]
    c57e:	2b01      	cmp	r3, #1
    c580:	d90b      	bls.n	c59a <stop+0x3a>
    c582:	f240 135d 	movw	r3, #349	; 0x15d
    c586:	4a11      	ldr	r2, [pc, #68]	; (c5cc <stop+0x6c>)
    c588:	4911      	ldr	r1, [pc, #68]	; (c5d0 <stop+0x70>)
    c58a:	4812      	ldr	r0, [pc, #72]	; (c5d4 <stop+0x74>)
    c58c:	f00d fd12 	bl	19fb4 <assert_print>
    c590:	f240 115d 	movw	r1, #349	; 0x15d
    c594:	480d      	ldr	r0, [pc, #52]	; (c5cc <stop+0x6c>)
    c596:	f00d fcfd 	bl	19f94 <assert_post_action>

	err = set_off_state(&subdata->flags, ctx);
    c59a:	69bb      	ldr	r3, [r7, #24]
    c59c:	3308      	adds	r3, #8
    c59e:	6879      	ldr	r1, [r7, #4]
    c5a0:	4618      	mov	r0, r3
    c5a2:	f00e f8a9 	bl	1a6f8 <set_off_state>
    c5a6:	6178      	str	r0, [r7, #20]
	if (err < 0) {
    c5a8:	697b      	ldr	r3, [r7, #20]
    c5aa:	2b00      	cmp	r3, #0
    c5ac:	da01      	bge.n	c5b2 <stop+0x52>
		return err;
    c5ae:	697b      	ldr	r3, [r7, #20]
    c5b0:	e008      	b.n	c5c4 <stop+0x64>
	}

	get_sub_config(dev, type)->stop();
    c5b2:	7ffb      	ldrb	r3, [r7, #31]
    c5b4:	4619      	mov	r1, r3
    c5b6:	68f8      	ldr	r0, [r7, #12]
    c5b8:	f00e f877 	bl	1a6aa <get_sub_config>
    c5bc:	4603      	mov	r3, r0
    c5be:	685b      	ldr	r3, [r3, #4]
    c5c0:	4798      	blx	r3

	return 0;
    c5c2:	2300      	movs	r3, #0
}
    c5c4:	4618      	mov	r0, r3
    c5c6:	3720      	adds	r7, #32
    c5c8:	46bd      	mov	sp, r7
    c5ca:	bd80      	pop	{r7, pc}
    c5cc:	00021b28 	.word	0x00021b28
    c5d0:	00021b68 	.word	0x00021b68
    c5d4:	00021ac0 	.word	0x00021ac0

0000c5d8 <api_blocking_start>:
	k_sem_give(sem);
}

static int api_blocking_start(const struct device *dev,
			      clock_control_subsys_t subsys)
{
    c5d8:	b590      	push	{r4, r7, lr}
    c5da:	b089      	sub	sp, #36	; 0x24
    c5dc:	af00      	add	r7, sp, #0
    c5de:	6078      	str	r0, [r7, #4]
    c5e0:	6039      	str	r1, [r7, #0]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c5e2:	f107 030c 	add.w	r3, r7, #12
    c5e6:	60fb      	str	r3, [r7, #12]
    c5e8:	f107 030c 	add.w	r3, r7, #12
    c5ec:	613b      	str	r3, [r7, #16]
    c5ee:	2300      	movs	r3, #0
    c5f0:	617b      	str	r3, [r7, #20]
    c5f2:	2301      	movs	r3, #1
    c5f4:	61bb      	str	r3, [r7, #24]

	if (!IS_ENABLED(CONFIG_MULTITHREADING)) {
		return -ENOTSUP;
	}

	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c5f6:	f107 030c 	add.w	r3, r7, #12
    c5fa:	4a10      	ldr	r2, [pc, #64]	; (c63c <api_blocking_start+0x64>)
    c5fc:	6839      	ldr	r1, [r7, #0]
    c5fe:	6878      	ldr	r0, [r7, #4]
    c600:	f00e f963 	bl	1a8ca <api_start>
    c604:	61f8      	str	r0, [r7, #28]
	if (err < 0) {
    c606:	69fb      	ldr	r3, [r7, #28]
    c608:	2b00      	cmp	r3, #0
    c60a:	da01      	bge.n	c610 <api_blocking_start+0x38>
		return err;
    c60c:	69fb      	ldr	r3, [r7, #28]
    c60e:	e011      	b.n	c634 <api_blocking_start+0x5c>
	}

	return k_sem_take(&sem, K_MSEC(500));
    c610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    c614:	f04f 0100 	mov.w	r1, #0
    c618:	f7ff fb76 	bl	bd08 <k_ms_to_ticks_ceil64>
    c61c:	4602      	mov	r2, r0
    c61e:	460b      	mov	r3, r1
    c620:	4610      	mov	r0, r2
    c622:	4619      	mov	r1, r3
    c624:	f107 040c 	add.w	r4, r7, #12
    c628:	4602      	mov	r2, r0
    c62a:	460b      	mov	r3, r1
    c62c:	4620      	mov	r0, r4
    c62e:	f00d ff6e 	bl	1a50e <k_sem_take>
    c632:	4603      	mov	r3, r0
}
    c634:	4618      	mov	r0, r3
    c636:	3724      	adds	r7, #36	; 0x24
    c638:	46bd      	mov	sp, r7
    c63a:	bd90      	pop	{r4, r7, pc}
    c63c:	0001a8f3 	.word	0x0001a8f3

0000c640 <get_subsys>:

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
    c640:	b480      	push	{r7}
    c642:	b085      	sub	sp, #20
    c644:	af00      	add	r7, sp, #0
    c646:	6078      	str	r0, [r7, #4]
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
    c648:	4b06      	ldr	r3, [pc, #24]	; (c664 <get_subsys+0x24>)
    c64a:	60fb      	str	r3, [r7, #12]
	size_t offset = (size_t)(mgr - data->mgr);
    c64c:	68fb      	ldr	r3, [r7, #12]
    c64e:	687a      	ldr	r2, [r7, #4]
    c650:	1ad3      	subs	r3, r2, r3
    c652:	115b      	asrs	r3, r3, #5
    c654:	60bb      	str	r3, [r7, #8]

	return (clock_control_subsys_t)offset;
    c656:	68bb      	ldr	r3, [r7, #8]
}
    c658:	4618      	mov	r0, r3
    c65a:	3714      	adds	r7, #20
    c65c:	46bd      	mov	sp, r7
    c65e:	bc80      	pop	{r7}
    c660:	4770      	bx	lr
    c662:	bf00      	nop
    c664:	2000c910 	.word	0x2000c910

0000c668 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    c668:	b580      	push	{r7, lr}
    c66a:	b084      	sub	sp, #16
    c66c:	af00      	add	r7, sp, #0
    c66e:	6078      	str	r0, [r7, #4]
    c670:	6039      	str	r1, [r7, #0]
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    c672:	6878      	ldr	r0, [r7, #4]
    c674:	f7ff ffe4 	bl	c640 <get_subsys>
    c678:	4603      	mov	r3, r0
    c67a:	2240      	movs	r2, #64	; 0x40
    c67c:	4619      	mov	r1, r3
    c67e:	4806      	ldr	r0, [pc, #24]	; (c698 <onoff_stop+0x30>)
    c680:	f7ff ff6e 	bl	c560 <stop>
    c684:	60f8      	str	r0, [r7, #12]
	notify(mgr, res);
    c686:	683b      	ldr	r3, [r7, #0]
    c688:	68f9      	ldr	r1, [r7, #12]
    c68a:	6878      	ldr	r0, [r7, #4]
    c68c:	4798      	blx	r3
}
    c68e:	bf00      	nop
    c690:	3710      	adds	r7, #16
    c692:	46bd      	mov	sp, r7
    c694:	bd80      	pop	{r7, pc}
    c696:	bf00      	nop
    c698:	0001f97c 	.word	0x0001f97c

0000c69c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    c69c:	b580      	push	{r7, lr}
    c69e:	b086      	sub	sp, #24
    c6a0:	af02      	add	r7, sp, #8
    c6a2:	6078      	str	r0, [r7, #4]
    c6a4:	6039      	str	r1, [r7, #0]
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    c6a6:	6878      	ldr	r0, [r7, #4]
    c6a8:	f7ff ffca 	bl	c640 <get_subsys>
    c6ac:	4601      	mov	r1, r0
    c6ae:	2340      	movs	r3, #64	; 0x40
    c6b0:	9300      	str	r3, [sp, #0]
    c6b2:	683b      	ldr	r3, [r7, #0]
    c6b4:	4a07      	ldr	r2, [pc, #28]	; (c6d4 <onoff_start+0x38>)
    c6b6:	4808      	ldr	r0, [pc, #32]	; (c6d8 <onoff_start+0x3c>)
    c6b8:	f00e f8d9 	bl	1a86e <async_start>
    c6bc:	60f8      	str	r0, [r7, #12]
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    c6be:	68fb      	ldr	r3, [r7, #12]
    c6c0:	2b00      	cmp	r3, #0
    c6c2:	da03      	bge.n	c6cc <onoff_start+0x30>
		notify(mgr, err);
    c6c4:	683b      	ldr	r3, [r7, #0]
    c6c6:	68f9      	ldr	r1, [r7, #12]
    c6c8:	6878      	ldr	r0, [r7, #4]
    c6ca:	4798      	blx	r3
	}
}
    c6cc:	bf00      	nop
    c6ce:	3710      	adds	r7, #16
    c6d0:	46bd      	mov	sp, r7
    c6d2:	bd80      	pop	{r7, pc}
    c6d4:	0001a911 	.word	0x0001a911
    c6d8:	0001f97c 	.word	0x0001f97c

0000c6dc <lfclk_spinwait>:
 * This approach is implemented in nrfx_clock driver and utilized here.
 *
 * @param mode Start mode.
 */
static void lfclk_spinwait(enum nrf_lfclk_start_mode mode)
{
    c6dc:	b580      	push	{r7, lr}
    c6de:	b088      	sub	sp, #32
    c6e0:	af00      	add	r7, sp, #0
    c6e2:	4603      	mov	r3, r0
    c6e4:	71fb      	strb	r3, [r7, #7]
		 IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_EXT_FULL_SWING))
		? NRF_CLOCK_LFCLK_XTAL
		: CLOCK_CONTROL_NRF_K32SRC;
	nrf_clock_lfclk_t type;

	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    c6e6:	79fb      	ldrb	r3, [r7, #7]
    c6e8:	2b01      	cmp	r3, #1
    c6ea:	d10a      	bne.n	c702 <lfclk_spinwait+0x26>
	    (target_type == NRF_CLOCK_LFCLK_XTAL) &&
    c6ec:	4b47      	ldr	r3, [pc, #284]	; (c80c <lfclk_spinwait+0x130>)
    c6ee:	781b      	ldrb	r3, [r3, #0]
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    c6f0:	2b02      	cmp	r3, #2
    c6f2:	d106      	bne.n	c702 <lfclk_spinwait+0x26>
	    (nrf_clock_lf_srccopy_get(NRF_CLOCK) == CLOCK_CONTROL_NRF_K32SRC)) {
    c6f4:	4846      	ldr	r0, [pc, #280]	; (c810 <lfclk_spinwait+0x134>)
    c6f6:	f00d ff96 	bl	1a626 <nrf_clock_lf_srccopy_get>
    c6fa:	4603      	mov	r3, r0
	    (target_type == NRF_CLOCK_LFCLK_XTAL) &&
    c6fc:	2b02      	cmp	r3, #2
    c6fe:	f000 8081 	beq.w	c804 <lfclk_spinwait+0x128>
		 * started.
		 */
		return;
	}

	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    c702:	f011 ffb9 	bl	1e678 <k_is_in_isr>
    c706:	4603      	mov	r3, r0
    c708:	2b00      	cmp	r3, #0
    c70a:	d104      	bne.n	c716 <lfclk_spinwait+0x3a>
    c70c:	f7ff fd76 	bl	c1fc <k_is_pre_kernel>
    c710:	4603      	mov	r3, r0
    c712:	2b00      	cmp	r3, #0
    c714:	d001      	beq.n	c71a <lfclk_spinwait+0x3e>
    c716:	2301      	movs	r3, #1
    c718:	e000      	b.n	c71c <lfclk_spinwait+0x40>
    c71a:	2300      	movs	r3, #0
    c71c:	77fb      	strb	r3, [r7, #31]
    c71e:	7ffb      	ldrb	r3, [r7, #31]
    c720:	f003 0301 	and.w	r3, r3, #1
    c724:	77fb      	strb	r3, [r7, #31]
	int key = isr_mode ? irq_lock() : 0;
    c726:	7ffb      	ldrb	r3, [r7, #31]
    c728:	2b00      	cmp	r3, #0
    c72a:	d00b      	beq.n	c744 <lfclk_spinwait+0x68>
	__asm__ volatile(
    c72c:	f04f 0320 	mov.w	r3, #32
    c730:	f3ef 8211 	mrs	r2, BASEPRI
    c734:	f383 8812 	msr	BASEPRI_MAX, r3
    c738:	f3bf 8f6f 	isb	sy
    c73c:	617a      	str	r2, [r7, #20]
    c73e:	613b      	str	r3, [r7, #16]
	return key;
    c740:	697b      	ldr	r3, [r7, #20]
    c742:	e000      	b.n	c746 <lfclk_spinwait+0x6a>
    c744:	2300      	movs	r3, #0
    c746:	61bb      	str	r3, [r7, #24]

	if (!isr_mode) {
    c748:	7ffb      	ldrb	r3, [r7, #31]
    c74a:	f083 0301 	eor.w	r3, r3, #1
    c74e:	b2db      	uxtb	r3, r3
    c750:	2b00      	cmp	r3, #0
    c752:	d031      	beq.n	c7b8 <lfclk_spinwait+0xdc>
		nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
    c754:	2102      	movs	r1, #2
    c756:	482e      	ldr	r0, [pc, #184]	; (c810 <lfclk_spinwait+0x134>)
    c758:	f00d ff02 	bl	1a560 <nrf_clock_int_disable>
	}

	while (!(nrfx_clock_is_running(d, (void *)&type)
    c75c:	e02c      	b.n	c7b8 <lfclk_spinwait+0xdc>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
		/* Synth source start is almost instant and LFCLKSTARTED may
		 * happen before calling idle. That would lead to deadlock.
		 */
		if (!IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_SYNTH)) {
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    c75e:	7ffb      	ldrb	r3, [r7, #31]
    c760:	2b00      	cmp	r3, #0
    c762:	d004      	beq.n	c76e <lfclk_spinwait+0x92>
				k_cpu_atomic_idle(key);
    c764:	69bb      	ldr	r3, [r7, #24]
    c766:	4618      	mov	r0, r3
    c768:	f00d feb8 	bl	1a4dc <k_cpu_atomic_idle>
    c76c:	e002      	b.n	c774 <lfclk_spinwait+0x98>
			} else {
				k_msleep(1);
    c76e:	2001      	movs	r0, #1
    c770:	f00d fe9a 	bl	1a4a8 <k_msleep>
			}
		}

		/* Clock interrupt is locked, LFCLKSTARTED is handled here. */
		if ((target_type ==  NRF_CLOCK_LFCLK_XTAL)
    c774:	4b25      	ldr	r3, [pc, #148]	; (c80c <lfclk_spinwait+0x130>)
    c776:	781b      	ldrb	r3, [r3, #0]
    c778:	2b02      	cmp	r3, #2
    c77a:	d11d      	bne.n	c7b8 <lfclk_spinwait+0xdc>
		    && (nrf_clock_lf_src_get(NRF_CLOCK) == NRF_CLOCK_LFCLK_RC)
    c77c:	4824      	ldr	r0, [pc, #144]	; (c810 <lfclk_spinwait+0x134>)
    c77e:	f00d ff45 	bl	1a60c <nrf_clock_lf_src_get>
    c782:	4603      	mov	r3, r0
    c784:	2b01      	cmp	r3, #1
    c786:	d117      	bne.n	c7b8 <lfclk_spinwait+0xdc>
		    && nrf_clock_event_check(NRF_CLOCK,
    c788:	f44f 7182 	mov.w	r1, #260	; 0x104
    c78c:	4820      	ldr	r0, [pc, #128]	; (c810 <lfclk_spinwait+0x134>)
    c78e:	f00d ff1a 	bl	1a5c6 <nrf_clock_event_check>
    c792:	4603      	mov	r3, r0
    c794:	2b00      	cmp	r3, #0
    c796:	d00f      	beq.n	c7b8 <lfclk_spinwait+0xdc>
					     NRF_CLOCK_EVENT_LFCLKSTARTED)) {
			nrf_clock_event_clear(NRF_CLOCK,
    c798:	f44f 7182 	mov.w	r1, #260	; 0x104
    c79c:	481c      	ldr	r0, [pc, #112]	; (c810 <lfclk_spinwait+0x134>)
    c79e:	f00d fefd 	bl	1a59c <nrf_clock_event_clear>
					      NRF_CLOCK_EVENT_LFCLKSTARTED);
			nrf_clock_lf_src_set(NRF_CLOCK,
    c7a2:	2102      	movs	r1, #2
    c7a4:	481a      	ldr	r0, [pc, #104]	; (c810 <lfclk_spinwait+0x134>)
    c7a6:	f00d ff22 	bl	1a5ee <nrf_clock_lf_src_set>
					     CLOCK_CONTROL_NRF_K32SRC);

			/* Clear pending interrupt, otherwise new clock event
			 * would not wake up from idle.
			 */
			NVIC_ClearPendingIRQ(DT_INST_IRQN(0));
    c7aa:	2005      	movs	r0, #5
    c7ac:	f7ff fd08 	bl	c1c0 <__NVIC_ClearPendingIRQ>
			nrf_clock_task_trigger(NRF_CLOCK,
    c7b0:	2108      	movs	r1, #8
    c7b2:	4817      	ldr	r0, [pc, #92]	; (c810 <lfclk_spinwait+0x134>)
    c7b4:	f00d fee2 	bl	1a57c <nrf_clock_task_trigger>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    c7b8:	4b16      	ldr	r3, [pc, #88]	; (c814 <lfclk_spinwait+0x138>)
    c7ba:	781b      	ldrb	r3, [r3, #0]
    c7bc:	f107 020b 	add.w	r2, r7, #11
    c7c0:	4611      	mov	r1, r2
    c7c2:	4618      	mov	r0, r3
    c7c4:	f7ff fdac 	bl	c320 <nrfx_clock_is_running>
    c7c8:	4603      	mov	r3, r0
    c7ca:	f083 0301 	eor.w	r3, r3, #1
    c7ce:	b2db      	uxtb	r3, r3
    c7d0:	2b00      	cmp	r3, #0
    c7d2:	d1c4      	bne.n	c75e <lfclk_spinwait+0x82>
		 && ((type == target_type)
    c7d4:	7afa      	ldrb	r2, [r7, #11]
    c7d6:	4b0d      	ldr	r3, [pc, #52]	; (c80c <lfclk_spinwait+0x130>)
    c7d8:	781b      	ldrb	r3, [r3, #0]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    c7da:	429a      	cmp	r2, r3
    c7dc:	d002      	beq.n	c7e4 <lfclk_spinwait+0x108>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    c7de:	79fb      	ldrb	r3, [r7, #7]
    c7e0:	2b01      	cmp	r3, #1
    c7e2:	d1bc      	bne.n	c75e <lfclk_spinwait+0x82>
					       NRF_CLOCK_TASK_LFCLKSTART);
		}
	}

	if (isr_mode) {
    c7e4:	7ffb      	ldrb	r3, [r7, #31]
    c7e6:	2b00      	cmp	r3, #0
    c7e8:	d007      	beq.n	c7fa <lfclk_spinwait+0x11e>
		irq_unlock(key);
    c7ea:	69bb      	ldr	r3, [r7, #24]
    c7ec:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
    c7ee:	68fb      	ldr	r3, [r7, #12]
    c7f0:	f383 8811 	msr	BASEPRI, r3
    c7f4:	f3bf 8f6f 	isb	sy
}
    c7f8:	e005      	b.n	c806 <lfclk_spinwait+0x12a>
	} else {
		nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
    c7fa:	2102      	movs	r1, #2
    c7fc:	4804      	ldr	r0, [pc, #16]	; (c810 <lfclk_spinwait+0x134>)
    c7fe:	f00d fea1 	bl	1a544 <nrf_clock_int_enable>
    c802:	e000      	b.n	c806 <lfclk_spinwait+0x12a>
		return;
    c804:	bf00      	nop
	}
}
    c806:	3720      	adds	r7, #32
    c808:	46bd      	mov	sp, r7
    c80a:	bd80      	pop	{r7, pc}
    c80c:	000243d0 	.word	0x000243d0
    c810:	40005000 	.word	0x40005000
    c814:	000243d1 	.word	0x000243d1

0000c818 <z_nrf_clock_control_lf_on>:

void z_nrf_clock_control_lf_on(enum nrf_lfclk_start_mode start_mode)
{
    c818:	b580      	push	{r7, lr}
    c81a:	b084      	sub	sp, #16
    c81c:	af00      	add	r7, sp, #0
    c81e:	4603      	mov	r3, r0
    c820:	71fb      	strb	r3, [r7, #7]
	static atomic_t on;
	static struct onoff_client cli;

	if (atomic_set(&on, 1) == 0) {
    c822:	2101      	movs	r1, #1
    c824:	481f      	ldr	r0, [pc, #124]	; (c8a4 <z_nrf_clock_control_lf_on+0x8c>)
    c826:	f00d fe21 	bl	1a46c <atomic_set>
    c82a:	4603      	mov	r3, r0
    c82c:	2b00      	cmp	r3, #0
    c82e:	d11b      	bne.n	c868 <z_nrf_clock_control_lf_on+0x50>
		int err;
		struct onoff_manager *mgr =
				get_onoff_manager(CLOCK_DEVICE,
    c830:	2101      	movs	r1, #1
    c832:	481d      	ldr	r0, [pc, #116]	; (c8a8 <z_nrf_clock_control_lf_on+0x90>)
    c834:	f00d ff4e 	bl	1a6d4 <get_onoff_manager>
    c838:	60f8      	str	r0, [r7, #12]
						  CLOCK_CONTROL_NRF_TYPE_LFCLK);

		sys_notify_init_spinwait(&cli.notify);
    c83a:	481c      	ldr	r0, [pc, #112]	; (c8ac <z_nrf_clock_control_lf_on+0x94>)
    c83c:	f7ff fcf4 	bl	c228 <sys_notify_init_spinwait>
		err = onoff_request(mgr, &cli);
    c840:	491b      	ldr	r1, [pc, #108]	; (c8b0 <z_nrf_clock_control_lf_on+0x98>)
    c842:	68f8      	ldr	r0, [r7, #12]
    c844:	f7fd fbb0 	bl	9fa8 <onoff_request>
    c848:	60b8      	str	r0, [r7, #8]
		__ASSERT_NO_MSG(err >= 0);
    c84a:	68bb      	ldr	r3, [r7, #8]
    c84c:	2b00      	cmp	r3, #0
    c84e:	da0b      	bge.n	c868 <z_nrf_clock_control_lf_on+0x50>
    c850:	f44f 730c 	mov.w	r3, #560	; 0x230
    c854:	4a17      	ldr	r2, [pc, #92]	; (c8b4 <z_nrf_clock_control_lf_on+0x9c>)
    c856:	4918      	ldr	r1, [pc, #96]	; (c8b8 <z_nrf_clock_control_lf_on+0xa0>)
    c858:	4818      	ldr	r0, [pc, #96]	; (c8bc <z_nrf_clock_control_lf_on+0xa4>)
    c85a:	f00d fbab 	bl	19fb4 <assert_print>
    c85e:	f44f 710c 	mov.w	r1, #560	; 0x230
    c862:	4814      	ldr	r0, [pc, #80]	; (c8b4 <z_nrf_clock_control_lf_on+0x9c>)
    c864:	f00d fb96 	bl	19f94 <assert_post_action>
	/* In case of simulated board leave immediately. */
	if (IS_ENABLED(CONFIG_SOC_SERIES_BSIM_NRFXX)) {
		return;
	}

	switch (start_mode) {
    c868:	79fb      	ldrb	r3, [r7, #7]
    c86a:	2b00      	cmp	r3, #0
    c86c:	d015      	beq.n	c89a <z_nrf_clock_control_lf_on+0x82>
    c86e:	2b00      	cmp	r3, #0
    c870:	db07      	blt.n	c882 <z_nrf_clock_control_lf_on+0x6a>
    c872:	3b01      	subs	r3, #1
    c874:	2b01      	cmp	r3, #1
    c876:	d804      	bhi.n	c882 <z_nrf_clock_control_lf_on+0x6a>
	case CLOCK_CONTROL_NRF_LF_START_AVAILABLE:
	case CLOCK_CONTROL_NRF_LF_START_STABLE:
		lfclk_spinwait(start_mode);
    c878:	79fb      	ldrb	r3, [r7, #7]
    c87a:	4618      	mov	r0, r3
    c87c:	f7ff ff2e 	bl	c6dc <lfclk_spinwait>
		break;
    c880:	e00c      	b.n	c89c <z_nrf_clock_control_lf_on+0x84>

	case CLOCK_CONTROL_NRF_LF_START_NOWAIT:
		break;

	default:
		__ASSERT_NO_MSG(false);
    c882:	f240 2342 	movw	r3, #578	; 0x242
    c886:	4a0b      	ldr	r2, [pc, #44]	; (c8b4 <z_nrf_clock_control_lf_on+0x9c>)
    c888:	490d      	ldr	r1, [pc, #52]	; (c8c0 <z_nrf_clock_control_lf_on+0xa8>)
    c88a:	480c      	ldr	r0, [pc, #48]	; (c8bc <z_nrf_clock_control_lf_on+0xa4>)
    c88c:	f00d fb92 	bl	19fb4 <assert_print>
    c890:	f240 2142 	movw	r1, #578	; 0x242
    c894:	4807      	ldr	r0, [pc, #28]	; (c8b4 <z_nrf_clock_control_lf_on+0x9c>)
    c896:	f00d fb7d 	bl	19f94 <assert_post_action>
		break;
    c89a:	bf00      	nop
	}
}
    c89c:	3710      	adds	r7, #16
    c89e:	46bd      	mov	sp, r7
    c8a0:	bd80      	pop	{r7, pc}
    c8a2:	bf00      	nop
    c8a4:	2000c968 	.word	0x2000c968
    c8a8:	0001f97c 	.word	0x0001f97c
    c8ac:	2000c970 	.word	0x2000c970
    c8b0:	2000c96c 	.word	0x2000c96c
    c8b4:	00021b28 	.word	0x00021b28
    c8b8:	00021ba4 	.word	0x00021ba4
    c8bc:	00021ac0 	.word	0x00021ac0
    c8c0:	00021b14 	.word	0x00021b14

0000c8c4 <clock_event_handler>:

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    c8c4:	b580      	push	{r7, lr}
    c8c6:	b084      	sub	sp, #16
    c8c8:	af00      	add	r7, sp, #0
    c8ca:	4603      	mov	r3, r0
    c8cc:	71fb      	strb	r3, [r7, #7]
	const struct device *dev = CLOCK_DEVICE;
    c8ce:	4b1f      	ldr	r3, [pc, #124]	; (c94c <clock_event_handler+0x88>)
    c8d0:	60fb      	str	r3, [r7, #12]

	switch (event) {
    c8d2:	79fb      	ldrb	r3, [r7, #7]
    c8d4:	2b04      	cmp	r3, #4
    c8d6:	d01b      	beq.n	c910 <clock_event_handler+0x4c>
    c8d8:	2b04      	cmp	r3, #4
    c8da:	dc25      	bgt.n	c928 <clock_event_handler+0x64>
    c8dc:	2b00      	cmp	r3, #0
    c8de:	d002      	beq.n	c8e6 <clock_event_handler+0x22>
    c8e0:	2b01      	cmp	r3, #1
    c8e2:	d010      	beq.n	c906 <clock_event_handler+0x42>
    c8e4:	e020      	b.n	c928 <clock_event_handler+0x64>
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    c8e6:	2100      	movs	r1, #0
    c8e8:	68f8      	ldr	r0, [r7, #12]
    c8ea:	f00d fec8 	bl	1a67e <get_sub_data>
    c8ee:	60b8      	str	r0, [r7, #8]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    c8f0:	68bb      	ldr	r3, [r7, #8]
    c8f2:	689b      	ldr	r3, [r3, #8]
    c8f4:	f003 0307 	and.w	r3, r3, #7
    c8f8:	2b00      	cmp	r3, #0
    c8fa:	d121      	bne.n	c940 <clock_event_handler+0x7c>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    c8fc:	2100      	movs	r1, #0
    c8fe:	68f8      	ldr	r0, [r7, #12]
    c900:	f7ff fd6e 	bl	c3e0 <clkstarted_handle>
		}

		break;
    c904:	e01c      	b.n	c940 <clock_event_handler+0x7c>
#endif
	case NRFX_CLOCK_EVT_LFCLK_STARTED:
		if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    c906:	2101      	movs	r1, #1
    c908:	68f8      	ldr	r0, [r7, #12]
    c90a:	f7ff fd69 	bl	c3e0 <clkstarted_handle>
		break;
    c90e:	e018      	b.n	c942 <clock_event_handler+0x7e>
	case NRFX_CLOCK_EVT_CAL_DONE:
		if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
			z_nrf_clock_calibration_done_handler();
		} else {
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
    c910:	f240 236e 	movw	r3, #622	; 0x26e
    c914:	4a0e      	ldr	r2, [pc, #56]	; (c950 <clock_event_handler+0x8c>)
    c916:	490f      	ldr	r1, [pc, #60]	; (c954 <clock_event_handler+0x90>)
    c918:	480f      	ldr	r0, [pc, #60]	; (c958 <clock_event_handler+0x94>)
    c91a:	f00d fb4b 	bl	19fb4 <assert_print>
    c91e:	f240 216e 	movw	r1, #622	; 0x26e
    c922:	480b      	ldr	r0, [pc, #44]	; (c950 <clock_event_handler+0x8c>)
    c924:	f00d fb36 	bl	19f94 <assert_post_action>
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    c928:	f240 2372 	movw	r3, #626	; 0x272
    c92c:	4a08      	ldr	r2, [pc, #32]	; (c950 <clock_event_handler+0x8c>)
    c92e:	4909      	ldr	r1, [pc, #36]	; (c954 <clock_event_handler+0x90>)
    c930:	4809      	ldr	r0, [pc, #36]	; (c958 <clock_event_handler+0x94>)
    c932:	f00d fb3f 	bl	19fb4 <assert_print>
    c936:	f240 2172 	movw	r1, #626	; 0x272
    c93a:	4805      	ldr	r0, [pc, #20]	; (c950 <clock_event_handler+0x8c>)
    c93c:	f00d fb2a 	bl	19f94 <assert_post_action>
		break;
    c940:	bf00      	nop
		break;
	}
}
    c942:	bf00      	nop
    c944:	3710      	adds	r7, #16
    c946:	46bd      	mov	sp, r7
    c948:	bd80      	pop	{r7, pc}
    c94a:	bf00      	nop
    c94c:	0001f97c 	.word	0x0001f97c
    c950:	00021b28 	.word	0x00021b28
    c954:	00021b14 	.word	0x00021b14
    c958:	00021ac0 	.word	0x00021ac0

0000c95c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    c95c:	b580      	push	{r7, lr}
    c95e:	b086      	sub	sp, #24
    c960:	af00      	add	r7, sp, #0
    c962:	6078      	str	r0, [r7, #4]
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c964:	2200      	movs	r2, #0
    c966:	2101      	movs	r1, #1
    c968:	2005      	movs	r0, #5
    c96a:	f7fd fd63 	bl	a434 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    c96e:	481b      	ldr	r0, [pc, #108]	; (c9dc <clk_init+0x80>)
    c970:	f003 fdfa 	bl	10568 <nrfx_clock_init>
    c974:	6138      	str	r0, [r7, #16]
	if (nrfx_err != NRFX_SUCCESS) {
    c976:	693b      	ldr	r3, [r7, #16]
    c978:	4a19      	ldr	r2, [pc, #100]	; (c9e0 <clk_init+0x84>)
    c97a:	4293      	cmp	r3, r2
    c97c:	d002      	beq.n	c984 <clk_init+0x28>
		return -EIO;
    c97e:	f06f 0304 	mvn.w	r3, #4
    c982:	e026      	b.n	c9d2 <clk_init+0x76>
	}

	hfclkaudio_init();
    c984:	f00d ffdc 	bl	1a940 <hfclkaudio_init>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    c988:	f003 fe36 	bl	105f8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    c98c:	2300      	movs	r3, #0
    c98e:	75fb      	strb	r3, [r7, #23]
    c990:	e01b      	b.n	c9ca <clk_init+0x6e>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    c992:	7dfb      	ldrb	r3, [r7, #23]
    c994:	4619      	mov	r1, r3
    c996:	6878      	ldr	r0, [r7, #4]
    c998:	f00d fe71 	bl	1a67e <get_sub_data>
    c99c:	60f8      	str	r0, [r7, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    c99e:	7dfb      	ldrb	r3, [r7, #23]
    c9a0:	4619      	mov	r1, r3
    c9a2:	6878      	ldr	r0, [r7, #4]
    c9a4:	f00d fe96 	bl	1a6d4 <get_onoff_manager>
    c9a8:	4603      	mov	r3, r0
    c9aa:	490e      	ldr	r1, [pc, #56]	; (c9e4 <clk_init+0x88>)
    c9ac:	4618      	mov	r0, r3
    c9ae:	f00d f9c9 	bl	19d44 <onoff_manager_init>
    c9b2:	60b8      	str	r0, [r7, #8]
					 &transitions);
		if (err < 0) {
    c9b4:	68bb      	ldr	r3, [r7, #8]
    c9b6:	2b00      	cmp	r3, #0
    c9b8:	da01      	bge.n	c9be <clk_init+0x62>
			return err;
    c9ba:	68bb      	ldr	r3, [r7, #8]
    c9bc:	e009      	b.n	c9d2 <clk_init+0x76>
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c9be:	68fb      	ldr	r3, [r7, #12]
    c9c0:	2201      	movs	r2, #1
    c9c2:	609a      	str	r2, [r3, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    c9c4:	7dfb      	ldrb	r3, [r7, #23]
    c9c6:	3301      	adds	r3, #1
    c9c8:	75fb      	strb	r3, [r7, #23]
    c9ca:	7dfb      	ldrb	r3, [r7, #23]
    c9cc:	2b01      	cmp	r3, #1
    c9ce:	d9e0      	bls.n	c992 <clk_init+0x36>
	}

	return 0;
    c9d0:	2300      	movs	r3, #0
}
    c9d2:	4618      	mov	r0, r3
    c9d4:	3718      	adds	r7, #24
    c9d6:	46bd      	mov	sp, r7
    c9d8:	bd80      	pop	{r7, pc}
    c9da:	bf00      	nop
    c9dc:	0000c8c5 	.word	0x0000c8c5
    c9e0:	0bad0000 	.word	0x0bad0000
    c9e4:	00024064 	.word	0x00024064

0000c9e8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    c9e8:	b580      	push	{r7, lr}
    c9ea:	b082      	sub	sp, #8
    c9ec:	af00      	add	r7, sp, #0
    c9ee:	6078      	str	r0, [r7, #4]
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if (pm_device_runtime_is_enabled(uart_console_dev)) {
    c9f0:	4b17      	ldr	r3, [pc, #92]	; (ca50 <console_out+0x68>)
    c9f2:	4618      	mov	r0, r3
    c9f4:	f00d fff8 	bl	1a9e8 <pm_device_runtime_is_enabled>
    c9f8:	4603      	mov	r3, r0
    c9fa:	2b00      	cmp	r3, #0
    c9fc:	d008      	beq.n	ca10 <console_out+0x28>
		if (pm_device_runtime_get(uart_console_dev) < 0) {
    c9fe:	4b14      	ldr	r3, [pc, #80]	; (ca50 <console_out+0x68>)
    ca00:	4618      	mov	r0, r3
    ca02:	f00d ffdd 	bl	1a9c0 <pm_device_runtime_get>
    ca06:	4603      	mov	r3, r0
    ca08:	2b00      	cmp	r3, #0
    ca0a:	da01      	bge.n	ca10 <console_out+0x28>
			/* Enabling the UART instance has failed but this
			 * function MUST return the byte output.
			 */
			return c;
    ca0c:	687b      	ldr	r3, [r7, #4]
    ca0e:	e01a      	b.n	ca46 <console_out+0x5e>
		}
	}

	if ('\n' == c) {
    ca10:	687b      	ldr	r3, [r7, #4]
    ca12:	2b0a      	cmp	r3, #10
    ca14:	d104      	bne.n	ca20 <console_out+0x38>
		uart_poll_out(uart_console_dev, '\r');
    ca16:	4b0e      	ldr	r3, [pc, #56]	; (ca50 <console_out+0x68>)
    ca18:	210d      	movs	r1, #13
    ca1a:	4618      	mov	r0, r3
    ca1c:	f00d ffc1 	bl	1a9a2 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    ca20:	4a0b      	ldr	r2, [pc, #44]	; (ca50 <console_out+0x68>)
    ca22:	687b      	ldr	r3, [r7, #4]
    ca24:	b2db      	uxtb	r3, r3
    ca26:	4619      	mov	r1, r3
    ca28:	4610      	mov	r0, r2
    ca2a:	f00d ffba 	bl	1a9a2 <uart_poll_out>

	if (pm_device_runtime_is_enabled(uart_console_dev)) {
    ca2e:	4b08      	ldr	r3, [pc, #32]	; (ca50 <console_out+0x68>)
    ca30:	4618      	mov	r0, r3
    ca32:	f00d ffd9 	bl	1a9e8 <pm_device_runtime_is_enabled>
    ca36:	4603      	mov	r3, r0
    ca38:	2b00      	cmp	r3, #0
    ca3a:	d003      	beq.n	ca44 <console_out+0x5c>
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
    ca3c:	4b04      	ldr	r3, [pc, #16]	; (ca50 <console_out+0x68>)
    ca3e:	4618      	mov	r0, r3
    ca40:	f00d ffc8 	bl	1a9d4 <pm_device_runtime_put>
	}

	return c;
    ca44:	687b      	ldr	r3, [r7, #4]
}
    ca46:	4618      	mov	r0, r3
    ca48:	3708      	adds	r7, #8
    ca4a:	46bd      	mov	sp, r7
    ca4c:	bd80      	pop	{r7, pc}
    ca4e:	bf00      	nop
    ca50:	0001f9b8 	.word	0x0001f9b8

0000ca54 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    ca54:	b580      	push	{r7, lr}
    ca56:	af00      	add	r7, sp, #0
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    ca58:	4803      	ldr	r0, [pc, #12]	; (ca68 <uart_console_hook_install+0x14>)
    ca5a:	f7ff f91b 	bl	bc94 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    ca5e:	4802      	ldr	r0, [pc, #8]	; (ca68 <uart_console_hook_install+0x14>)
    ca60:	f7fc fcb2 	bl	93c8 <__printk_hook_install>
#endif
}
    ca64:	bf00      	nop
    ca66:	bd80      	pop	{r7, pc}
    ca68:	0000c9e9 	.word	0x0000c9e9

0000ca6c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    ca6c:	b580      	push	{r7, lr}
    ca6e:	af00      	add	r7, sp, #0
	if (!device_is_ready(uart_console_dev)) {
    ca70:	4b08      	ldr	r3, [pc, #32]	; (ca94 <uart_console_init+0x28>)
    ca72:	4618      	mov	r0, r3
    ca74:	f00d ff76 	bl	1a964 <device_is_ready>
    ca78:	4603      	mov	r3, r0
    ca7a:	f083 0301 	eor.w	r3, r3, #1
    ca7e:	b2db      	uxtb	r3, r3
    ca80:	2b00      	cmp	r3, #0
    ca82:	d002      	beq.n	ca8a <uart_console_init+0x1e>
		return -ENODEV;
    ca84:	f06f 0312 	mvn.w	r3, #18
    ca88:	e002      	b.n	ca90 <uart_console_init+0x24>
	}

	uart_console_hook_install();
    ca8a:	f7ff ffe3 	bl	ca54 <uart_console_hook_install>

	return 0;
    ca8e:	2300      	movs	r3, #0
}
    ca90:	4618      	mov	r0, r3
    ca92:	bd80      	pop	{r7, pc}
    ca94:	0001f9b8 	.word	0x0001f9b8

0000ca98 <nrf_gpio_pin_port_decode>:
 *                      that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    ca98:	b580      	push	{r7, lr}
    ca9a:	b084      	sub	sp, #16
    ca9c:	af00      	add	r7, sp, #0
    ca9e:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    caa0:	687b      	ldr	r3, [r7, #4]
    caa2:	681b      	ldr	r3, [r3, #0]
    caa4:	4618      	mov	r0, r3
    caa6:	f00e f81f 	bl	1aae8 <nrf_gpio_pin_present_check>
    caaa:	4603      	mov	r3, r0
    caac:	f083 0301 	eor.w	r3, r3, #1
    cab0:	b2db      	uxtb	r3, r3
    cab2:	2b00      	cmp	r3, #0
    cab4:	d00b      	beq.n	cace <nrf_gpio_pin_port_decode+0x36>
    cab6:	f240 332f 	movw	r3, #815	; 0x32f
    caba:	4a13      	ldr	r2, [pc, #76]	; (cb08 <nrf_gpio_pin_port_decode+0x70>)
    cabc:	4913      	ldr	r1, [pc, #76]	; (cb0c <nrf_gpio_pin_port_decode+0x74>)
    cabe:	4814      	ldr	r0, [pc, #80]	; (cb10 <nrf_gpio_pin_port_decode+0x78>)
    cac0:	f00d fa78 	bl	19fb4 <assert_print>
    cac4:	f240 312f 	movw	r1, #815	; 0x32f
    cac8:	480f      	ldr	r0, [pc, #60]	; (cb08 <nrf_gpio_pin_port_decode+0x70>)
    caca:	f00d fa63 	bl	19f94 <assert_post_action>

    NRF_GPIO_Type * p_port = NULL;
    cace:	2300      	movs	r3, #0
    cad0:	60fb      	str	r3, [r7, #12]

    switch (nrf_gpio_pin_port_number_extract(p_pin))
    cad2:	6878      	ldr	r0, [r7, #4]
    cad4:	f00e f82d 	bl	1ab32 <nrf_gpio_pin_port_number_extract>
    cad8:	4603      	mov	r3, r0
    cada:	2b00      	cmp	r3, #0
    cadc:	d102      	bne.n	cae4 <nrf_gpio_pin_port_decode+0x4c>
    {
        NRF_INTERNAL_GPIO_PORT_EXTRACT(p_port);
    cade:	4b0d      	ldr	r3, [pc, #52]	; (cb14 <nrf_gpio_pin_port_decode+0x7c>)
    cae0:	60fb      	str	r3, [r7, #12]
    cae2:	e00b      	b.n	cafc <nrf_gpio_pin_port_decode+0x64>

        default:
            NRFX_ASSERT(0);
    cae4:	f44f 734e 	mov.w	r3, #824	; 0x338
    cae8:	4a07      	ldr	r2, [pc, #28]	; (cb08 <nrf_gpio_pin_port_decode+0x70>)
    caea:	490b      	ldr	r1, [pc, #44]	; (cb18 <nrf_gpio_pin_port_decode+0x80>)
    caec:	4808      	ldr	r0, [pc, #32]	; (cb10 <nrf_gpio_pin_port_decode+0x78>)
    caee:	f00d fa61 	bl	19fb4 <assert_print>
    caf2:	f44f 714e 	mov.w	r1, #824	; 0x338
    caf6:	4804      	ldr	r0, [pc, #16]	; (cb08 <nrf_gpio_pin_port_decode+0x70>)
    caf8:	f00d fa4c 	bl	19f94 <assert_post_action>
    }
    return p_port;
    cafc:	68fb      	ldr	r3, [r7, #12]
}
    cafe:	4618      	mov	r0, r3
    cb00:	3710      	adds	r7, #16
    cb02:	46bd      	mov	sp, r7
    cb04:	bd80      	pop	{r7, pc}
    cb06:	bf00      	nop
    cb08:	00021bd4 	.word	0x00021bd4
    cb0c:	00021c08 	.word	0x00021c08
    cb10:	00021c2c 	.word	0x00021c2c
    cb14:	40842500 	.word	0x40842500
    cb18:	00021c4c 	.word	0x00021c4c

0000cb1c <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    cb1c:	b580      	push	{r7, lr}
    cb1e:	b084      	sub	sp, #16
    cb20:	af00      	add	r7, sp, #0
    cb22:	60f8      	str	r0, [r7, #12]
    cb24:	60b9      	str	r1, [r7, #8]
    cb26:	4613      	mov	r3, r2
    cb28:	71fb      	strb	r3, [r7, #7]
	__ASSERT(callback, "No callback!");
    cb2a:	68bb      	ldr	r3, [r7, #8]
    cb2c:	2b00      	cmp	r3, #0
    cb2e:	d10c      	bne.n	cb4a <gpio_manage_callback+0x2e>
    cb30:	233a      	movs	r3, #58	; 0x3a
    cb32:	4a28      	ldr	r2, [pc, #160]	; (cbd4 <gpio_manage_callback+0xb8>)
    cb34:	4928      	ldr	r1, [pc, #160]	; (cbd8 <gpio_manage_callback+0xbc>)
    cb36:	4829      	ldr	r0, [pc, #164]	; (cbdc <gpio_manage_callback+0xc0>)
    cb38:	f00d fa3c 	bl	19fb4 <assert_print>
    cb3c:	4828      	ldr	r0, [pc, #160]	; (cbe0 <gpio_manage_callback+0xc4>)
    cb3e:	f00d fa39 	bl	19fb4 <assert_print>
    cb42:	213a      	movs	r1, #58	; 0x3a
    cb44:	4823      	ldr	r0, [pc, #140]	; (cbd4 <gpio_manage_callback+0xb8>)
    cb46:	f00d fa25 	bl	19f94 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    cb4a:	68bb      	ldr	r3, [r7, #8]
    cb4c:	685b      	ldr	r3, [r3, #4]
    cb4e:	2b00      	cmp	r3, #0
    cb50:	d10c      	bne.n	cb6c <gpio_manage_callback+0x50>
    cb52:	233b      	movs	r3, #59	; 0x3b
    cb54:	4a1f      	ldr	r2, [pc, #124]	; (cbd4 <gpio_manage_callback+0xb8>)
    cb56:	4923      	ldr	r1, [pc, #140]	; (cbe4 <gpio_manage_callback+0xc8>)
    cb58:	4820      	ldr	r0, [pc, #128]	; (cbdc <gpio_manage_callback+0xc0>)
    cb5a:	f00d fa2b 	bl	19fb4 <assert_print>
    cb5e:	4822      	ldr	r0, [pc, #136]	; (cbe8 <gpio_manage_callback+0xcc>)
    cb60:	f00d fa28 	bl	19fb4 <assert_print>
    cb64:	213b      	movs	r1, #59	; 0x3b
    cb66:	481b      	ldr	r0, [pc, #108]	; (cbd4 <gpio_manage_callback+0xb8>)
    cb68:	f00d fa14 	bl	19f94 <assert_post_action>

	if (!sys_slist_is_empty(callbacks)) {
    cb6c:	68f8      	ldr	r0, [r7, #12]
    cb6e:	f00e f83b 	bl	1abe8 <sys_slist_is_empty>
    cb72:	4603      	mov	r3, r0
    cb74:	f083 0301 	eor.w	r3, r3, #1
    cb78:	b2db      	uxtb	r3, r3
    cb7a:	2b00      	cmp	r3, #0
    cb7c:	d013      	beq.n	cba6 <gpio_manage_callback+0x8a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    cb7e:	68bb      	ldr	r3, [r7, #8]
    cb80:	4619      	mov	r1, r3
    cb82:	68f8      	ldr	r0, [r7, #12]
    cb84:	f00e f8bb 	bl	1acfe <sys_slist_find_and_remove>
    cb88:	4603      	mov	r3, r0
    cb8a:	f083 0301 	eor.w	r3, r3, #1
    cb8e:	b2db      	uxtb	r3, r3
    cb90:	2b00      	cmp	r3, #0
    cb92:	d011      	beq.n	cbb8 <gpio_manage_callback+0x9c>
			if (!set) {
    cb94:	79fb      	ldrb	r3, [r7, #7]
    cb96:	f083 0301 	eor.w	r3, r3, #1
    cb9a:	b2db      	uxtb	r3, r3
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	d00b      	beq.n	cbb8 <gpio_manage_callback+0x9c>
				return -EINVAL;
    cba0:	f06f 0315 	mvn.w	r3, #21
    cba4:	e011      	b.n	cbca <gpio_manage_callback+0xae>
			}
		}
	} else if (!set) {
    cba6:	79fb      	ldrb	r3, [r7, #7]
    cba8:	f083 0301 	eor.w	r3, r3, #1
    cbac:	b2db      	uxtb	r3, r3
    cbae:	2b00      	cmp	r3, #0
    cbb0:	d002      	beq.n	cbb8 <gpio_manage_callback+0x9c>
		return -EINVAL;
    cbb2:	f06f 0315 	mvn.w	r3, #21
    cbb6:	e008      	b.n	cbca <gpio_manage_callback+0xae>
	}

	if (set) {
    cbb8:	79fb      	ldrb	r3, [r7, #7]
    cbba:	2b00      	cmp	r3, #0
    cbbc:	d004      	beq.n	cbc8 <gpio_manage_callback+0xac>
		sys_slist_prepend(callbacks, &callback->node);
    cbbe:	68bb      	ldr	r3, [r7, #8]
    cbc0:	4619      	mov	r1, r3
    cbc2:	68f8      	ldr	r0, [r7, #12]
    cbc4:	f00e f83e 	bl	1ac44 <sys_slist_prepend>
	}

	return 0;
    cbc8:	2300      	movs	r3, #0
}
    cbca:	4618      	mov	r0, r3
    cbcc:	3710      	adds	r7, #16
    cbce:	46bd      	mov	sp, r7
    cbd0:	bd80      	pop	{r7, pc}
    cbd2:	bf00      	nop
    cbd4:	00021c50 	.word	0x00021c50
    cbd8:	00021c8c 	.word	0x00021c8c
    cbdc:	00021c2c 	.word	0x00021c2c
    cbe0:	00021c98 	.word	0x00021c98
    cbe4:	00021ca8 	.word	0x00021ca8
    cbe8:	00021cbc 	.word	0x00021cbc

0000cbec <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    cbec:	b580      	push	{r7, lr}
    cbee:	b086      	sub	sp, #24
    cbf0:	af00      	add	r7, sp, #0
    cbf2:	60f8      	str	r0, [r7, #12]
    cbf4:	60b9      	str	r1, [r7, #8]
    cbf6:	607a      	str	r2, [r7, #4]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    cbf8:	68f8      	ldr	r0, [r7, #12]
    cbfa:	f00d ffdf 	bl	1abbc <sys_slist_peek_head>
    cbfe:	4603      	mov	r3, r0
    cc00:	2b00      	cmp	r3, #0
    cc02:	d004      	beq.n	cc0e <gpio_fire_callbacks+0x22>
    cc04:	68f8      	ldr	r0, [r7, #12]
    cc06:	f00d ffd9 	bl	1abbc <sys_slist_peek_head>
    cc0a:	4603      	mov	r3, r0
    cc0c:	e000      	b.n	cc10 <gpio_fire_callbacks+0x24>
    cc0e:	2300      	movs	r3, #0
    cc10:	617b      	str	r3, [r7, #20]
    cc12:	697b      	ldr	r3, [r7, #20]
    cc14:	2b00      	cmp	r3, #0
    cc16:	d00e      	beq.n	cc36 <gpio_fire_callbacks+0x4a>
    cc18:	697b      	ldr	r3, [r7, #20]
    cc1a:	4618      	mov	r0, r3
    cc1c:	f00e f801 	bl	1ac22 <sys_slist_peek_next>
    cc20:	4603      	mov	r3, r0
    cc22:	2b00      	cmp	r3, #0
    cc24:	d005      	beq.n	cc32 <gpio_fire_callbacks+0x46>
    cc26:	697b      	ldr	r3, [r7, #20]
    cc28:	4618      	mov	r0, r3
    cc2a:	f00d fffa 	bl	1ac22 <sys_slist_peek_next>
    cc2e:	4603      	mov	r3, r0
    cc30:	e002      	b.n	cc38 <gpio_fire_callbacks+0x4c>
    cc32:	2300      	movs	r3, #0
    cc34:	e000      	b.n	cc38 <gpio_fire_callbacks+0x4c>
    cc36:	2300      	movs	r3, #0
    cc38:	613b      	str	r3, [r7, #16]
    cc3a:	e035      	b.n	cca8 <gpio_fire_callbacks+0xbc>
		if (cb->pin_mask & pins) {
    cc3c:	697b      	ldr	r3, [r7, #20]
    cc3e:	689a      	ldr	r2, [r3, #8]
    cc40:	687b      	ldr	r3, [r7, #4]
    cc42:	4013      	ands	r3, r2
    cc44:	2b00      	cmp	r3, #0
    cc46:	d019      	beq.n	cc7c <gpio_fire_callbacks+0x90>
			__ASSERT(cb->handler, "No callback handler!");
    cc48:	697b      	ldr	r3, [r7, #20]
    cc4a:	685b      	ldr	r3, [r3, #4]
    cc4c:	2b00      	cmp	r3, #0
    cc4e:	d10c      	bne.n	cc6a <gpio_fire_callbacks+0x7e>
    cc50:	235d      	movs	r3, #93	; 0x5d
    cc52:	4a19      	ldr	r2, [pc, #100]	; (ccb8 <gpio_fire_callbacks+0xcc>)
    cc54:	4919      	ldr	r1, [pc, #100]	; (ccbc <gpio_fire_callbacks+0xd0>)
    cc56:	481a      	ldr	r0, [pc, #104]	; (ccc0 <gpio_fire_callbacks+0xd4>)
    cc58:	f00d f9ac 	bl	19fb4 <assert_print>
    cc5c:	4819      	ldr	r0, [pc, #100]	; (ccc4 <gpio_fire_callbacks+0xd8>)
    cc5e:	f00d f9a9 	bl	19fb4 <assert_print>
    cc62:	215d      	movs	r1, #93	; 0x5d
    cc64:	4814      	ldr	r0, [pc, #80]	; (ccb8 <gpio_fire_callbacks+0xcc>)
    cc66:	f00d f995 	bl	19f94 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    cc6a:	697b      	ldr	r3, [r7, #20]
    cc6c:	685b      	ldr	r3, [r3, #4]
    cc6e:	697a      	ldr	r2, [r7, #20]
    cc70:	6891      	ldr	r1, [r2, #8]
    cc72:	687a      	ldr	r2, [r7, #4]
    cc74:	400a      	ands	r2, r1
    cc76:	6979      	ldr	r1, [r7, #20]
    cc78:	68b8      	ldr	r0, [r7, #8]
    cc7a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    cc7c:	693b      	ldr	r3, [r7, #16]
    cc7e:	617b      	str	r3, [r7, #20]
    cc80:	697b      	ldr	r3, [r7, #20]
    cc82:	2b00      	cmp	r3, #0
    cc84:	d00e      	beq.n	cca4 <gpio_fire_callbacks+0xb8>
    cc86:	697b      	ldr	r3, [r7, #20]
    cc88:	4618      	mov	r0, r3
    cc8a:	f00d ffca 	bl	1ac22 <sys_slist_peek_next>
    cc8e:	4603      	mov	r3, r0
    cc90:	2b00      	cmp	r3, #0
    cc92:	d005      	beq.n	cca0 <gpio_fire_callbacks+0xb4>
    cc94:	697b      	ldr	r3, [r7, #20]
    cc96:	4618      	mov	r0, r3
    cc98:	f00d ffc3 	bl	1ac22 <sys_slist_peek_next>
    cc9c:	4603      	mov	r3, r0
    cc9e:	e002      	b.n	cca6 <gpio_fire_callbacks+0xba>
    cca0:	2300      	movs	r3, #0
    cca2:	e000      	b.n	cca6 <gpio_fire_callbacks+0xba>
    cca4:	2300      	movs	r3, #0
    cca6:	613b      	str	r3, [r7, #16]
    cca8:	697b      	ldr	r3, [r7, #20]
    ccaa:	2b00      	cmp	r3, #0
    ccac:	d1c6      	bne.n	cc3c <gpio_fire_callbacks+0x50>
		}
	}
}
    ccae:	bf00      	nop
    ccb0:	bf00      	nop
    ccb2:	3718      	adds	r7, #24
    ccb4:	46bd      	mov	sp, r7
    ccb6:	bd80      	pop	{r7, pc}
    ccb8:	00021c50 	.word	0x00021c50
    ccbc:	00021cd4 	.word	0x00021cd4
    ccc0:	00021c2c 	.word	0x00021c2c
    ccc4:	00021cbc 	.word	0x00021cbc

0000ccc8 <gpio_nrfx_pin_configure>:
	return NRF_GPIO_PIN_NOPULL;
}

static int gpio_nrfx_pin_configure(const struct device *port, gpio_pin_t pin,
				   gpio_flags_t flags)
{
    ccc8:	b580      	push	{r7, lr}
    ccca:	b08e      	sub	sp, #56	; 0x38
    cccc:	af00      	add	r7, sp, #0
    ccce:	60f8      	str	r0, [r7, #12]
    ccd0:	460b      	mov	r3, r1
    ccd2:	607a      	str	r2, [r7, #4]
    ccd4:	72fb      	strb	r3, [r7, #11]
	nrfx_err_t err = NRFX_SUCCESS;
    ccd6:	4b6c      	ldr	r3, [pc, #432]	; (ce88 <gpio_nrfx_pin_configure+0x1c0>)
    ccd8:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t ch;
	bool free_ch = false;
    ccda:	2300      	movs	r3, #0
    ccdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    cce0:	68f8      	ldr	r0, [r7, #12]
    cce2:	f00e f83c 	bl	1ad5e <get_port_cfg>
    cce6:	62f8      	str	r0, [r7, #44]	; 0x2c
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    cce8:	7afb      	ldrb	r3, [r7, #11]
    ccea:	f003 021f 	and.w	r2, r3, #31
    ccee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccf0:	7b1b      	ldrb	r3, [r3, #12]
    ccf2:	015b      	lsls	r3, r3, #5
    ccf4:	4313      	orrs	r3, r2
    ccf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Get the GPIOTE channel associated with this pin, if any. It needs
	 * to be freed when the pin is reconfigured or disconnected.
	 */
	if (IS_ENABLED(CONFIG_GPIO_NRFX_INTERRUPT)) {
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    ccf8:	f107 0323 	add.w	r3, r7, #35	; 0x23
    ccfc:	4619      	mov	r1, r3
    ccfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cd00:	f004 fa60 	bl	111c4 <nrfx_gpiote_channel_get>
    cd04:	6378      	str	r0, [r7, #52]	; 0x34
		free_ch = (err == NRFX_SUCCESS);
    cd06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd08:	4a5f      	ldr	r2, [pc, #380]	; (ce88 <gpio_nrfx_pin_configure+0x1c0>)
    cd0a:	4293      	cmp	r3, r2
    cd0c:	bf0c      	ite	eq
    cd0e:	2301      	moveq	r3, #1
    cd10:	2300      	movne	r3, #0
    cd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	}

	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    cd16:	687b      	ldr	r3, [r7, #4]
    cd18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    cd1c:	2b00      	cmp	r3, #0
    cd1e:	d11c      	bne.n	cd5a <gpio_nrfx_pin_configure+0x92>
		/* Ignore the error code. The pin may not have been used. */
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    cd20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cd22:	f003 fff5 	bl	10d10 <nrfx_gpiote_pin_uninit>

		if (free_ch) {
    cd26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    cd2a:	2b00      	cmp	r3, #0
    cd2c:	d013      	beq.n	cd56 <gpio_nrfx_pin_configure+0x8e>
			err = nrfx_gpiote_channel_free(ch);
    cd2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    cd32:	4618      	mov	r0, r3
    cd34:	f004 fb1a 	bl	1136c <nrfx_gpiote_channel_free>
    cd38:	6378      	str	r0, [r7, #52]	; 0x34
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    cd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd3c:	4a52      	ldr	r2, [pc, #328]	; (ce88 <gpio_nrfx_pin_configure+0x1c0>)
    cd3e:	4293      	cmp	r3, r2
    cd40:	d009      	beq.n	cd56 <gpio_nrfx_pin_configure+0x8e>
    cd42:	236c      	movs	r3, #108	; 0x6c
    cd44:	4a51      	ldr	r2, [pc, #324]	; (ce8c <gpio_nrfx_pin_configure+0x1c4>)
    cd46:	4952      	ldr	r1, [pc, #328]	; (ce90 <gpio_nrfx_pin_configure+0x1c8>)
    cd48:	4852      	ldr	r0, [pc, #328]	; (ce94 <gpio_nrfx_pin_configure+0x1cc>)
    cd4a:	f00d f933 	bl	19fb4 <assert_print>
    cd4e:	216c      	movs	r1, #108	; 0x6c
    cd50:	484e      	ldr	r0, [pc, #312]	; (ce8c <gpio_nrfx_pin_configure+0x1c4>)
    cd52:	f00d f91f 	bl	19f94 <assert_post_action>
		}

		return 0;
    cd56:	2300      	movs	r3, #0
    cd58:	e092      	b.n	ce80 <gpio_nrfx_pin_configure+0x1b8>
	}

	if (IS_ENABLED(CONFIG_GPIO_NRFX_INTERRUPT)) {
		nrfx_gpiote_trigger_config_t trigger_config = {
    cd5a:	f107 0318 	add.w	r3, r7, #24
    cd5e:	2200      	movs	r2, #0
    cd60:	601a      	str	r2, [r3, #0]
    cd62:	605a      	str	r2, [r3, #4]
			.trigger = NRFX_GPIOTE_TRIGGER_NONE
		};

		/* Remove previously configured trigger when pin is reconfigured. */
		err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    cd64:	f107 0218 	add.w	r2, r7, #24
    cd68:	2300      	movs	r3, #0
    cd6a:	2100      	movs	r1, #0
    cd6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cd6e:	f004 f89b 	bl	10ea8 <nrfx_gpiote_input_configure>
    cd72:	6378      	str	r0, [r7, #52]	; 0x34
		if (err != NRFX_SUCCESS) {
    cd74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd76:	4a44      	ldr	r2, [pc, #272]	; (ce88 <gpio_nrfx_pin_configure+0x1c0>)
    cd78:	4293      	cmp	r3, r2
    cd7a:	d002      	beq.n	cd82 <gpio_nrfx_pin_configure+0xba>
			return -EINVAL;
    cd7c:	f06f 0315 	mvn.w	r3, #21
    cd80:	e07e      	b.n	ce80 <gpio_nrfx_pin_configure+0x1b8>
		}

		if (free_ch) {
    cd82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    cd86:	2b00      	cmp	r3, #0
    cd88:	d013      	beq.n	cdb2 <gpio_nrfx_pin_configure+0xea>
			err = nrfx_gpiote_channel_free(ch);
    cd8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    cd8e:	4618      	mov	r0, r3
    cd90:	f004 faec 	bl	1136c <nrfx_gpiote_channel_free>
    cd94:	6378      	str	r0, [r7, #52]	; 0x34
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    cd96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd98:	4a3b      	ldr	r2, [pc, #236]	; (ce88 <gpio_nrfx_pin_configure+0x1c0>)
    cd9a:	4293      	cmp	r3, r2
    cd9c:	d009      	beq.n	cdb2 <gpio_nrfx_pin_configure+0xea>
    cd9e:	237f      	movs	r3, #127	; 0x7f
    cda0:	4a3a      	ldr	r2, [pc, #232]	; (ce8c <gpio_nrfx_pin_configure+0x1c4>)
    cda2:	493b      	ldr	r1, [pc, #236]	; (ce90 <gpio_nrfx_pin_configure+0x1c8>)
    cda4:	483b      	ldr	r0, [pc, #236]	; (ce94 <gpio_nrfx_pin_configure+0x1cc>)
    cda6:	f00d f905 	bl	19fb4 <assert_print>
    cdaa:	217f      	movs	r1, #127	; 0x7f
    cdac:	4837      	ldr	r0, [pc, #220]	; (ce8c <gpio_nrfx_pin_configure+0x1c4>)
    cdae:	f00d f8f1 	bl	19f94 <assert_post_action>
		}
	}

	if (flags & GPIO_OUTPUT) {
    cdb2:	687b      	ldr	r3, [r7, #4]
    cdb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    cdb8:	2b00      	cmp	r3, #0
    cdba:	d04b      	beq.n	ce54 <gpio_nrfx_pin_configure+0x18c>
		nrf_gpio_pin_drive_t drive;
		int rv = get_drive(flags, &drive);
    cdbc:	f107 0317 	add.w	r3, r7, #23
    cdc0:	4619      	mov	r1, r3
    cdc2:	6878      	ldr	r0, [r7, #4]
    cdc4:	f00d ffd6 	bl	1ad74 <get_drive>
    cdc8:	6278      	str	r0, [r7, #36]	; 0x24

		if (rv != 0) {
    cdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cdcc:	2b00      	cmp	r3, #0
    cdce:	d001      	beq.n	cdd4 <gpio_nrfx_pin_configure+0x10c>
			return rv;
    cdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cdd2:	e055      	b.n	ce80 <gpio_nrfx_pin_configure+0x1b8>
		}

		nrfx_gpiote_output_config_t output_config = {
    cdd4:	7dfb      	ldrb	r3, [r7, #23]
    cdd6:	753b      	strb	r3, [r7, #20]
			.drive = drive,
			.input_connect = (flags & GPIO_INPUT) ?
    cdd8:	687b      	ldr	r3, [r7, #4]
    cdda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
				NRF_GPIO_PIN_INPUT_CONNECT :
    cdde:	2b00      	cmp	r3, #0
    cde0:	bf0c      	ite	eq
    cde2:	2301      	moveq	r3, #1
    cde4:	2300      	movne	r3, #0
    cde6:	b2db      	uxtb	r3, r3
		nrfx_gpiote_output_config_t output_config = {
    cde8:	757b      	strb	r3, [r7, #21]
				NRF_GPIO_PIN_INPUT_DISCONNECT,
			.pull = get_pull(flags)
    cdea:	6878      	ldr	r0, [r7, #4]
    cdec:	f00e f81d 	bl	1ae2a <get_pull>
    cdf0:	4603      	mov	r3, r0
		nrfx_gpiote_output_config_t output_config = {
    cdf2:	75bb      	strb	r3, [r7, #22]
		};


		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    cdf4:	687b      	ldr	r3, [r7, #4]
    cdf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    cdfa:	2b00      	cmp	r3, #0
    cdfc:	d00a      	beq.n	ce14 <gpio_nrfx_pin_configure+0x14c>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce00:	685a      	ldr	r2, [r3, #4]
    ce02:	7afb      	ldrb	r3, [r7, #11]
    ce04:	2101      	movs	r1, #1
    ce06:	fa01 f303 	lsl.w	r3, r1, r3
    ce0a:	4619      	mov	r1, r3
    ce0c:	4610      	mov	r0, r2
    ce0e:	f00d fe51 	bl	1aab4 <nrf_gpio_port_out_set>
    ce12:	e00e      	b.n	ce32 <gpio_nrfx_pin_configure+0x16a>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    ce14:	687b      	ldr	r3, [r7, #4]
    ce16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    ce1a:	2b00      	cmp	r3, #0
    ce1c:	d009      	beq.n	ce32 <gpio_nrfx_pin_configure+0x16a>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    ce1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce20:	685a      	ldr	r2, [r3, #4]
    ce22:	7afb      	ldrb	r3, [r7, #11]
    ce24:	2101      	movs	r1, #1
    ce26:	fa01 f303 	lsl.w	r3, r1, r3
    ce2a:	4619      	mov	r1, r3
    ce2c:	4610      	mov	r0, r2
    ce2e:	f00d fe4e 	bl	1aace <nrf_gpio_port_out_clear>
		}

		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    ce32:	f107 0314 	add.w	r3, r7, #20
    ce36:	2200      	movs	r2, #0
    ce38:	4619      	mov	r1, r3
    ce3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ce3c:	f004 f91a 	bl	11074 <nrfx_gpiote_output_configure>
    ce40:	6378      	str	r0, [r7, #52]	; 0x34
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    ce42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce44:	4a10      	ldr	r2, [pc, #64]	; (ce88 <gpio_nrfx_pin_configure+0x1c0>)
    ce46:	4293      	cmp	r3, r2
    ce48:	d002      	beq.n	ce50 <gpio_nrfx_pin_configure+0x188>
    ce4a:	f06f 0315 	mvn.w	r3, #21
    ce4e:	e017      	b.n	ce80 <gpio_nrfx_pin_configure+0x1b8>
    ce50:	2300      	movs	r3, #0
    ce52:	e015      	b.n	ce80 <gpio_nrfx_pin_configure+0x1b8>
	}

	nrfx_gpiote_input_config_t input_config = {
		.pull = get_pull(flags)
    ce54:	6878      	ldr	r0, [r7, #4]
    ce56:	f00d ffe8 	bl	1ae2a <get_pull>
    ce5a:	4603      	mov	r3, r0
	nrfx_gpiote_input_config_t input_config = {
    ce5c:	f887 3020 	strb.w	r3, [r7, #32]
	};

	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    ce60:	f107 0120 	add.w	r1, r7, #32
    ce64:	2300      	movs	r3, #0
    ce66:	2200      	movs	r2, #0
    ce68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ce6a:	f004 f81d 	bl	10ea8 <nrfx_gpiote_input_configure>
    ce6e:	6378      	str	r0, [r7, #52]	; 0x34

	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    ce70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce72:	4a05      	ldr	r2, [pc, #20]	; (ce88 <gpio_nrfx_pin_configure+0x1c0>)
    ce74:	4293      	cmp	r3, r2
    ce76:	d002      	beq.n	ce7e <gpio_nrfx_pin_configure+0x1b6>
    ce78:	f06f 0315 	mvn.w	r3, #21
    ce7c:	e000      	b.n	ce80 <gpio_nrfx_pin_configure+0x1b8>
    ce7e:	2300      	movs	r3, #0
}
    ce80:	4618      	mov	r0, r3
    ce82:	3738      	adds	r7, #56	; 0x38
    ce84:	46bd      	mov	sp, r7
    ce86:	bd80      	pop	{r7, pc}
    ce88:	0bad0000 	.word	0x0bad0000
    ce8c:	00021ce0 	.word	0x00021ce0
    ce90:	00021d0c 	.word	0x00021d0c
    ce94:	00021c2c 	.word	0x00021c2c

0000ce98 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    ce98:	b590      	push	{r4, r7, lr}
    ce9a:	b08b      	sub	sp, #44	; 0x2c
    ce9c:	af00      	add	r7, sp, #0
    ce9e:	60f8      	str	r0, [r7, #12]
    cea0:	607a      	str	r2, [r7, #4]
    cea2:	603b      	str	r3, [r7, #0]
    cea4:	460b      	mov	r3, r1
    cea6:	72fb      	strb	r3, [r7, #11]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    cea8:	7afb      	ldrb	r3, [r7, #11]
    ceaa:	f003 041f 	and.w	r4, r3, #31
    ceae:	68f8      	ldr	r0, [r7, #12]
    ceb0:	f00d ff55 	bl	1ad5e <get_port_cfg>
    ceb4:	4603      	mov	r3, r0
    ceb6:	7b1b      	ldrb	r3, [r3, #12]
    ceb8:	015b      	lsls	r3, r3, #5
    ceba:	4323      	orrs	r3, r4
    cebc:	627b      	str	r3, [r7, #36]	; 0x24
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    cebe:	687b      	ldr	r3, [r7, #4]
    cec0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    cec4:	d104      	bne.n	ced0 <gpio_nrfx_pin_interrupt_configure+0x38>
		nrfx_gpiote_trigger_disable(abs_pin);
    cec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cec8:	f004 fae2 	bl	11490 <nrfx_gpiote_trigger_disable>

		return 0;
    cecc:	2300      	movs	r3, #0
    cece:	e04f      	b.n	cf70 <gpio_nrfx_pin_interrupt_configure+0xd8>
	}

	nrfx_gpiote_trigger_config_t trigger_config = {
    ced0:	f107 0314 	add.w	r3, r7, #20
    ced4:	2200      	movs	r2, #0
    ced6:	601a      	str	r2, [r3, #0]
    ced8:	605a      	str	r2, [r3, #4]
		.trigger = get_trigger(mode, trig),
    ceda:	6839      	ldr	r1, [r7, #0]
    cedc:	6878      	ldr	r0, [r7, #4]
    cede:	f00e f844 	bl	1af6a <get_trigger>
    cee2:	4603      	mov	r3, r0
	nrfx_gpiote_trigger_config_t trigger_config = {
    cee4:	753b      	strb	r3, [r7, #20]
	};

	/* If edge mode is to be used and pin is not configured to use sense for
	 * edge use IN event.
	 */
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    cee6:	68f8      	ldr	r0, [r7, #12]
    cee8:	f00d ff39 	bl	1ad5e <get_port_cfg>
    ceec:	4603      	mov	r3, r0
    ceee:	689a      	ldr	r2, [r3, #8]
    cef0:	7afb      	ldrb	r3, [r7, #11]
    cef2:	fa22 f303 	lsr.w	r3, r2, r3
    cef6:	f003 0301 	and.w	r3, r3, #1
    cefa:	2b00      	cmp	r3, #0
    cefc:	d124      	bne.n	cf48 <gpio_nrfx_pin_interrupt_configure+0xb0>
    cefe:	687b      	ldr	r3, [r7, #4]
    cf00:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    cf04:	d120      	bne.n	cf48 <gpio_nrfx_pin_interrupt_configure+0xb0>
	    (mode == GPIO_INT_MODE_EDGE) &&
	    (nrf_gpio_pin_dir_get(abs_pin) == NRF_GPIO_PIN_DIR_INPUT)) {
    cf06:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cf08:	f00d fda8 	bl	1aa5c <nrf_gpio_pin_dir_get>
    cf0c:	4603      	mov	r3, r0
	    (mode == GPIO_INT_MODE_EDGE) &&
    cf0e:	2b00      	cmp	r3, #0
    cf10:	d11a      	bne.n	cf48 <gpio_nrfx_pin_interrupt_configure+0xb0>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    cf12:	f107 031f 	add.w	r3, r7, #31
    cf16:	4619      	mov	r1, r3
    cf18:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cf1a:	f004 f953 	bl	111c4 <nrfx_gpiote_channel_get>
    cf1e:	6238      	str	r0, [r7, #32]
		if (err == NRFX_ERROR_INVALID_PARAM) {
    cf20:	6a3b      	ldr	r3, [r7, #32]
    cf22:	4a15      	ldr	r2, [pc, #84]	; (cf78 <gpio_nrfx_pin_interrupt_configure+0xe0>)
    cf24:	4293      	cmp	r3, r2
    cf26:	d10c      	bne.n	cf42 <gpio_nrfx_pin_interrupt_configure+0xaa>
			err = nrfx_gpiote_channel_alloc(&ch);
    cf28:	f107 031f 	add.w	r3, r7, #31
    cf2c:	4618      	mov	r0, r3
    cf2e:	f004 fa2f 	bl	11390 <nrfx_gpiote_channel_alloc>
    cf32:	6238      	str	r0, [r7, #32]
			if (err != NRFX_SUCCESS) {
    cf34:	6a3b      	ldr	r3, [r7, #32]
    cf36:	4a11      	ldr	r2, [pc, #68]	; (cf7c <gpio_nrfx_pin_interrupt_configure+0xe4>)
    cf38:	4293      	cmp	r3, r2
    cf3a:	d002      	beq.n	cf42 <gpio_nrfx_pin_interrupt_configure+0xaa>
				return -ENOMEM;
    cf3c:	f06f 030b 	mvn.w	r3, #11
    cf40:	e016      	b.n	cf70 <gpio_nrfx_pin_interrupt_configure+0xd8>
			}
		}

		trigger_config.p_in_channel = &ch;
    cf42:	f107 031f 	add.w	r3, r7, #31
    cf46:	61bb      	str	r3, [r7, #24]
	}

	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    cf48:	f107 0214 	add.w	r2, r7, #20
    cf4c:	2300      	movs	r3, #0
    cf4e:	2100      	movs	r1, #0
    cf50:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cf52:	f003 ffa9 	bl	10ea8 <nrfx_gpiote_input_configure>
    cf56:	6238      	str	r0, [r7, #32]
	if (err != NRFX_SUCCESS) {
    cf58:	6a3b      	ldr	r3, [r7, #32]
    cf5a:	4a08      	ldr	r2, [pc, #32]	; (cf7c <gpio_nrfx_pin_interrupt_configure+0xe4>)
    cf5c:	4293      	cmp	r3, r2
    cf5e:	d002      	beq.n	cf66 <gpio_nrfx_pin_interrupt_configure+0xce>
		return -EINVAL;
    cf60:	f06f 0315 	mvn.w	r3, #21
    cf64:	e004      	b.n	cf70 <gpio_nrfx_pin_interrupt_configure+0xd8>
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);
    cf66:	2101      	movs	r1, #1
    cf68:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cf6a:	f004 fa21 	bl	113b0 <nrfx_gpiote_trigger_enable>

	return 0;
    cf6e:	2300      	movs	r3, #0
}
    cf70:	4618      	mov	r0, r3
    cf72:	372c      	adds	r7, #44	; 0x2c
    cf74:	46bd      	mov	sp, r7
    cf76:	bd90      	pop	{r4, r7, pc}
    cf78:	0bad0004 	.word	0x0bad0004
    cf7c:	0bad0000 	.word	0x0bad0000

0000cf80 <get_dev>:
#endif /* CONFIG_GPIO_GET_DIRECTION */

#ifdef CONFIG_GPIO_NRFX_INTERRUPT
/* Get port device from port id. */
static const struct device *get_dev(uint32_t port_id)
{
    cf80:	b480      	push	{r7}
    cf82:	b085      	sub	sp, #20
    cf84:	af00      	add	r7, sp, #0
    cf86:	6078      	str	r0, [r7, #4]
	const struct device *dev = NULL;
    cf88:	2300      	movs	r3, #0
    cf8a:	60fb      	str	r3, [r7, #12]
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    cf8c:	687b      	ldr	r3, [r7, #4]
    cf8e:	2b00      	cmp	r3, #0
    cf90:	d101      	bne.n	cf96 <get_dev+0x16>
    cf92:	4b04      	ldr	r3, [pc, #16]	; (cfa4 <get_dev+0x24>)
    cf94:	60fb      	str	r3, [r7, #12]
	#undef GPIO_NRF_GET_DEV

	return dev;
    cf96:	68fb      	ldr	r3, [r7, #12]
}
    cf98:	4618      	mov	r0, r3
    cf9a:	3714      	adds	r7, #20
    cf9c:	46bd      	mov	sp, r7
    cf9e:	bc80      	pop	{r7}
    cfa0:	4770      	bx	lr
    cfa2:	bf00      	nop
    cfa4:	0001f990 	.word	0x0001f990

0000cfa8 <gpio_nrfx_init>:
#endif /* CONFIG_GPIO_NRFX_INTERRUPT */

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    cfa8:	b580      	push	{r7, lr}
    cfaa:	b084      	sub	sp, #16
    cfac:	af00      	add	r7, sp, #0
    cfae:	6078      	str	r0, [r7, #4]
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    cfb0:	f004 f9cc 	bl	1134c <nrfx_gpiote_is_init>
    cfb4:	4603      	mov	r3, r0
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	d001      	beq.n	cfbe <gpio_nrfx_init+0x16>
		return 0;
    cfba:	2300      	movs	r3, #0
    cfbc:	e014      	b.n	cfe8 <gpio_nrfx_init+0x40>
	}

	err = nrfx_gpiote_init(0/*not used*/);
    cfbe:	2000      	movs	r0, #0
    cfc0:	f004 f96c 	bl	1129c <nrfx_gpiote_init>
    cfc4:	60f8      	str	r0, [r7, #12]
	if (err != NRFX_SUCCESS) {
    cfc6:	68fb      	ldr	r3, [r7, #12]
    cfc8:	4a09      	ldr	r2, [pc, #36]	; (cff0 <gpio_nrfx_init+0x48>)
    cfca:	4293      	cmp	r3, r2
    cfcc:	d002      	beq.n	cfd4 <gpio_nrfx_init+0x2c>
		return -EIO;
    cfce:	f06f 0304 	mvn.w	r3, #4
    cfd2:	e009      	b.n	cfe8 <gpio_nrfx_init+0x40>
	}

#ifdef CONFIG_GPIO_NRFX_INTERRUPT
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    cfd4:	2100      	movs	r1, #0
    cfd6:	4807      	ldr	r0, [pc, #28]	; (cff4 <gpio_nrfx_init+0x4c>)
    cfd8:	f004 f8e2 	bl	111a0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    cfdc:	2200      	movs	r2, #0
    cfde:	2105      	movs	r1, #5
    cfe0:	2031      	movs	r0, #49	; 0x31
    cfe2:	f7fd fa27 	bl	a434 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);
#endif /* CONFIG_GPIO_NRFX_INTERRUPT */

	return 0;
    cfe6:	2300      	movs	r3, #0
}
    cfe8:	4618      	mov	r0, r3
    cfea:	3710      	adds	r7, #16
    cfec:	46bd      	mov	sp, r7
    cfee:	bd80      	pop	{r7, pc}
    cff0:	0bad0000 	.word	0x0bad0000
    cff4:	0001afdd 	.word	0x0001afdd

0000cff8 <nrf_gpio_pin_port_decode>:
{
    cff8:	b580      	push	{r7, lr}
    cffa:	b084      	sub	sp, #16
    cffc:	af00      	add	r7, sp, #0
    cffe:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d000:	687b      	ldr	r3, [r7, #4]
    d002:	681b      	ldr	r3, [r3, #0]
    d004:	4618      	mov	r0, r3
    d006:	f00e f896 	bl	1b136 <nrf_gpio_pin_present_check>
    d00a:	4603      	mov	r3, r0
    d00c:	f083 0301 	eor.w	r3, r3, #1
    d010:	b2db      	uxtb	r3, r3
    d012:	2b00      	cmp	r3, #0
    d014:	d00b      	beq.n	d02e <nrf_gpio_pin_port_decode+0x36>
    d016:	f240 332f 	movw	r3, #815	; 0x32f
    d01a:	4a13      	ldr	r2, [pc, #76]	; (d068 <nrf_gpio_pin_port_decode+0x70>)
    d01c:	4913      	ldr	r1, [pc, #76]	; (d06c <nrf_gpio_pin_port_decode+0x74>)
    d01e:	4814      	ldr	r0, [pc, #80]	; (d070 <nrf_gpio_pin_port_decode+0x78>)
    d020:	f00c ffc8 	bl	19fb4 <assert_print>
    d024:	f240 312f 	movw	r1, #815	; 0x32f
    d028:	480f      	ldr	r0, [pc, #60]	; (d068 <nrf_gpio_pin_port_decode+0x70>)
    d02a:	f00c ffb3 	bl	19f94 <assert_post_action>
    NRF_GPIO_Type * p_port = NULL;
    d02e:	2300      	movs	r3, #0
    d030:	60fb      	str	r3, [r7, #12]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d032:	6878      	ldr	r0, [r7, #4]
    d034:	f00e f8a4 	bl	1b180 <nrf_gpio_pin_port_number_extract>
    d038:	4603      	mov	r3, r0
    d03a:	2b00      	cmp	r3, #0
    d03c:	d102      	bne.n	d044 <nrf_gpio_pin_port_decode+0x4c>
        NRF_INTERNAL_GPIO_PORT_EXTRACT(p_port);
    d03e:	4b0d      	ldr	r3, [pc, #52]	; (d074 <nrf_gpio_pin_port_decode+0x7c>)
    d040:	60fb      	str	r3, [r7, #12]
    d042:	e00b      	b.n	d05c <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
    d044:	f44f 734e 	mov.w	r3, #824	; 0x338
    d048:	4a07      	ldr	r2, [pc, #28]	; (d068 <nrf_gpio_pin_port_decode+0x70>)
    d04a:	490b      	ldr	r1, [pc, #44]	; (d078 <nrf_gpio_pin_port_decode+0x80>)
    d04c:	4808      	ldr	r0, [pc, #32]	; (d070 <nrf_gpio_pin_port_decode+0x78>)
    d04e:	f00c ffb1 	bl	19fb4 <assert_print>
    d052:	f44f 714e 	mov.w	r1, #824	; 0x338
    d056:	4804      	ldr	r0, [pc, #16]	; (d068 <nrf_gpio_pin_port_decode+0x70>)
    d058:	f00c ff9c 	bl	19f94 <assert_post_action>
    return p_port;
    d05c:	68fb      	ldr	r3, [r7, #12]
}
    d05e:	4618      	mov	r0, r3
    d060:	3710      	adds	r7, #16
    d062:	46bd      	mov	sp, r7
    d064:	bd80      	pop	{r7, pc}
    d066:	bf00      	nop
    d068:	00021d2c 	.word	0x00021d2c
    d06c:	00021d60 	.word	0x00021d60
    d070:	00021d84 	.word	0x00021d84
    d074:	40842500 	.word	0x40842500
    d078:	00021da4 	.word	0x00021da4

0000d07c <nrf_gpio_cfg>:
    nrf_gpio_pin_dir_t   dir,
    nrf_gpio_pin_input_t input,
    nrf_gpio_pin_pull_t  pull,
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
    d07c:	b580      	push	{r7, lr}
    d07e:	b086      	sub	sp, #24
    d080:	af00      	add	r7, sp, #0
    d082:	6078      	str	r0, [r7, #4]
    d084:	4608      	mov	r0, r1
    d086:	4611      	mov	r1, r2
    d088:	461a      	mov	r2, r3
    d08a:	4603      	mov	r3, r0
    d08c:	70fb      	strb	r3, [r7, #3]
    d08e:	460b      	mov	r3, r1
    d090:	70bb      	strb	r3, [r7, #2]
    d092:	4613      	mov	r3, r2
    d094:	707b      	strb	r3, [r7, #1]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d096:	1d3b      	adds	r3, r7, #4
    d098:	4618      	mov	r0, r3
    d09a:	f7ff ffad 	bl	cff8 <nrf_gpio_pin_port_decode>
    d09e:	6178      	str	r0, [r7, #20]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    d0a0:	687a      	ldr	r2, [r7, #4]
    d0a2:	697b      	ldr	r3, [r7, #20]
    d0a4:	3280      	adds	r2, #128	; 0x80
    d0a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d0aa:	613b      	str	r3, [r7, #16]

    uint32_t to_update = GPIO_PIN_CNF_DIR_Msk    |
    d0ac:	4b11      	ldr	r3, [pc, #68]	; (d0f4 <nrf_gpio_cfg+0x78>)
    d0ae:	60fb      	str	r3, [r7, #12]
                         GPIO_PIN_CNF_DRIVE1_Msk |
#endif
                         GPIO_PIN_CNF_SENSE_Msk;

    /* Clear fields that will be updated. */
    cnf &= ~to_update;
    d0b0:	68fb      	ldr	r3, [r7, #12]
    d0b2:	43db      	mvns	r3, r3
    d0b4:	693a      	ldr	r2, [r7, #16]
    d0b6:	4013      	ands	r3, r2
    d0b8:	613b      	str	r3, [r7, #16]
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    d0ba:	78fa      	ldrb	r2, [r7, #3]
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)  |
    d0bc:	78bb      	ldrb	r3, [r7, #2]
    d0be:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    d0c0:	431a      	orrs	r2, r3
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
    d0c2:	787b      	ldrb	r3, [r7, #1]
    d0c4:	009b      	lsls	r3, r3, #2
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)  |
    d0c6:	431a      	orrs	r2, r3
#if defined(GPIO_PIN_CNF_DRIVE_Pos)
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)  |
    d0c8:	f897 3020 	ldrb.w	r3, [r7, #32]
    d0cc:	021b      	lsls	r3, r3, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
    d0ce:	431a      	orrs	r2, r3
#else
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE0_Pos) |
#endif
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);
    d0d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    d0d4:	041b      	lsls	r3, r3, #16
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)  |
    d0d6:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    d0d8:	693a      	ldr	r2, [r7, #16]
    d0da:	4313      	orrs	r3, r2
    d0dc:	613b      	str	r3, [r7, #16]

    reg->PIN_CNF[pin_number] = cnf;
    d0de:	687a      	ldr	r2, [r7, #4]
    d0e0:	697b      	ldr	r3, [r7, #20]
    d0e2:	3280      	adds	r2, #128	; 0x80
    d0e4:	6939      	ldr	r1, [r7, #16]
    d0e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    d0ea:	bf00      	nop
    d0ec:	3718      	adds	r7, #24
    d0ee:	46bd      	mov	sp, r7
    d0f0:	bd80      	pop	{r7, pc}
    d0f2:	bf00      	nop
    d0f4:	0003070f 	.word	0x0003070f

0000d0f8 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    d0f8:	b580      	push	{r7, lr}
    d0fa:	b08c      	sub	sp, #48	; 0x30
    d0fc:	af02      	add	r7, sp, #8
    d0fe:	60f8      	str	r0, [r7, #12]
    d100:	460b      	mov	r3, r1
    d102:	607a      	str	r2, [r7, #4]
    d104:	72fb      	strb	r3, [r7, #11]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    d106:	2300      	movs	r3, #0
    d108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    d10c:	e14b      	b.n	d3a6 <pinctrl_configure_pins+0x2ae>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    d10e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d112:	009b      	lsls	r3, r3, #2
    d114:	68fa      	ldr	r2, [r7, #12]
    d116:	4413      	add	r3, r2
    d118:	681b      	ldr	r3, [r3, #0]
    d11a:	0a5b      	lsrs	r3, r3, #9
    d11c:	b2db      	uxtb	r3, r3
    d11e:	f003 030f 	and.w	r3, r3, #15
    d122:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint32_t psel = NRF_GET_PIN(pins[i]);
    d126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d12a:	009b      	lsls	r3, r3, #2
    d12c:	68fa      	ldr	r2, [r7, #12]
    d12e:	4413      	add	r3, r2
    d130:	681b      	ldr	r3, [r3, #0]
    d132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d136:	623b      	str	r3, [r7, #32]
		uint32_t write = NO_WRITE;
    d138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d13c:	61fb      	str	r3, [r7, #28]
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (psel == NRF_PIN_DISCONNECTED) {
    d13e:	6a3b      	ldr	r3, [r7, #32]
    d140:	2b7f      	cmp	r3, #127	; 0x7f
    d142:	d102      	bne.n	d14a <pinctrl_configure_pins+0x52>
			psel = PSEL_DISCONNECTED;
    d144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d148:	623b      	str	r3, [r7, #32]
		}

		switch (NRF_GET_FUN(pins[i])) {
    d14a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d14e:	009b      	lsls	r3, r3, #2
    d150:	68fa      	ldr	r2, [r7, #12]
    d152:	4413      	add	r3, r2
    d154:	681b      	ldr	r3, [r3, #0]
    d156:	0c1b      	lsrs	r3, r3, #16
    d158:	2b19      	cmp	r3, #25
    d15a:	f200 80ea 	bhi.w	d332 <pinctrl_configure_pins+0x23a>
    d15e:	a201      	add	r2, pc, #4	; (adr r2, d164 <pinctrl_configure_pins+0x6c>)
    d160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d164:	0000d1cd 	.word	0x0000d1cd
    d168:	0000d1e3 	.word	0x0000d1e3
    d16c:	0000d1f5 	.word	0x0000d1f5
    d170:	0000d20b 	.word	0x0000d20b
    d174:	0000d21d 	.word	0x0000d21d
    d178:	0000d233 	.word	0x0000d233
    d17c:	0000d249 	.word	0x0000d249
    d180:	0000d333 	.word	0x0000d333
    d184:	0000d333 	.word	0x0000d333
    d188:	0000d333 	.word	0x0000d333
    d18c:	0000d333 	.word	0x0000d333
    d190:	0000d25b 	.word	0x0000d25b
    d194:	0000d27b 	.word	0x0000d27b
    d198:	0000d333 	.word	0x0000d333
    d19c:	0000d333 	.word	0x0000d333
    d1a0:	0000d333 	.word	0x0000d333
    d1a4:	0000d333 	.word	0x0000d333
    d1a8:	0000d333 	.word	0x0000d333
    d1ac:	0000d333 	.word	0x0000d333
    d1b0:	0000d333 	.word	0x0000d333
    d1b4:	0000d333 	.word	0x0000d333
    d1b8:	0000d333 	.word	0x0000d333
    d1bc:	0000d29b 	.word	0x0000d29b
    d1c0:	0000d2c1 	.word	0x0000d2c1
    d1c4:	0000d2e7 	.word	0x0000d2e7
    d1c8:	0000d30d 	.word	0x0000d30d
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = psel;
    d1cc:	687b      	ldr	r3, [r7, #4]
    d1ce:	6a3a      	ldr	r2, [r7, #32]
    d1d0:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
			write = 1U;
    d1d4:	2301      	movs	r3, #1
    d1d6:	61fb      	str	r3, [r7, #28]
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    d1d8:	2301      	movs	r3, #1
    d1da:	76fb      	strb	r3, [r7, #27]
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d1dc:	2301      	movs	r3, #1
    d1de:	76bb      	strb	r3, [r7, #26]
			break;
    d1e0:	e0aa      	b.n	d338 <pinctrl_configure_pins+0x240>
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = psel;
    d1e2:	687b      	ldr	r3, [r7, #4]
    d1e4:	6a3a      	ldr	r2, [r7, #32]
    d1e6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
			dir = NRF_GPIO_PIN_DIR_INPUT;
    d1ea:	2300      	movs	r3, #0
    d1ec:	76fb      	strb	r3, [r7, #27]
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    d1ee:	2300      	movs	r3, #0
    d1f0:	76bb      	strb	r3, [r7, #26]
			break;
    d1f2:	e0a1      	b.n	d338 <pinctrl_configure_pins+0x240>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = psel;
    d1f4:	687b      	ldr	r3, [r7, #4]
    d1f6:	6a3a      	ldr	r2, [r7, #32]
    d1f8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			write = 1U;
    d1fc:	2301      	movs	r3, #1
    d1fe:	61fb      	str	r3, [r7, #28]
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    d200:	2301      	movs	r3, #1
    d202:	76fb      	strb	r3, [r7, #27]
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d204:	2301      	movs	r3, #1
    d206:	76bb      	strb	r3, [r7, #26]
			break;
    d208:	e096      	b.n	d338 <pinctrl_configure_pins+0x240>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = psel;
    d20a:	687b      	ldr	r3, [r7, #4]
    d20c:	6a3a      	ldr	r2, [r7, #32]
    d20e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			dir = NRF_GPIO_PIN_DIR_INPUT;
    d212:	2300      	movs	r3, #0
    d214:	76fb      	strb	r3, [r7, #27]
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    d216:	2300      	movs	r3, #0
    d218:	76bb      	strb	r3, [r7, #26]
			break;
    d21a:	e08d      	b.n	d338 <pinctrl_configure_pins+0x240>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = psel;
    d21c:	687b      	ldr	r3, [r7, #4]
    d21e:	6a3a      	ldr	r2, [r7, #32]
    d220:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			write = 0U;
    d224:	2300      	movs	r3, #0
    d226:	61fb      	str	r3, [r7, #28]
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    d228:	2301      	movs	r3, #1
    d22a:	76fb      	strb	r3, [r7, #27]
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    d22c:	2300      	movs	r3, #0
    d22e:	76bb      	strb	r3, [r7, #26]
			break;
    d230:	e082      	b.n	d338 <pinctrl_configure_pins+0x240>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = psel;
    d232:	687b      	ldr	r3, [r7, #4]
    d234:	6a3a      	ldr	r2, [r7, #32]
    d236:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
			write = 0U;
    d23a:	2300      	movs	r3, #0
    d23c:	61fb      	str	r3, [r7, #28]
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    d23e:	2301      	movs	r3, #1
    d240:	76fb      	strb	r3, [r7, #27]
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d242:	2301      	movs	r3, #1
    d244:	76bb      	strb	r3, [r7, #26]
			break;
    d246:	e077      	b.n	d338 <pinctrl_configure_pins+0x240>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = psel;
    d248:	687b      	ldr	r3, [r7, #4]
    d24a:	6a3a      	ldr	r2, [r7, #32]
    d24c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			dir = NRF_GPIO_PIN_DIR_INPUT;
    d250:	2300      	movs	r3, #0
    d252:	76fb      	strb	r3, [r7, #27]
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    d254:	2300      	movs	r3, #0
    d256:	76bb      	strb	r3, [r7, #26]
			break;
    d258:	e06e      	b.n	d338 <pinctrl_configure_pins+0x240>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = psel;
    d25a:	687b      	ldr	r3, [r7, #4]
    d25c:	6a3a      	ldr	r2, [r7, #32]
    d25e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    d262:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    d266:	2b00      	cmp	r3, #0
    d268:	d102      	bne.n	d270 <pinctrl_configure_pins+0x178>
				 * suitable for TWI/TWIM peripherals (S0D1).
				 * This drive cannot be used always so that
				 * users are able to select e.g. H0D1 or E0E1
				 * in devicetree.
				 */
				drive = NRF_DRIVE_S0D1;
    d26a:	2306      	movs	r3, #6
    d26c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
			dir = NRF_GPIO_PIN_DIR_INPUT;
    d270:	2300      	movs	r3, #0
    d272:	76fb      	strb	r3, [r7, #27]
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    d274:	2300      	movs	r3, #0
    d276:	76bb      	strb	r3, [r7, #26]
			break;
    d278:	e05e      	b.n	d338 <pinctrl_configure_pins+0x240>
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = psel;
    d27a:	687b      	ldr	r3, [r7, #4]
    d27c:	6a3a      	ldr	r2, [r7, #32]
    d27e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    d282:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    d286:	2b00      	cmp	r3, #0
    d288:	d102      	bne.n	d290 <pinctrl_configure_pins+0x198>
				drive = NRF_DRIVE_S0D1;
    d28a:	2306      	movs	r3, #6
    d28c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
			dir = NRF_GPIO_PIN_DIR_INPUT;
    d290:	2300      	movs	r3, #0
    d292:	76fb      	strb	r3, [r7, #27]
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    d294:	2300      	movs	r3, #0
    d296:	76bb      	strb	r3, [r7, #26]
			break;
    d298:	e04e      	b.n	d338 <pinctrl_configure_pins+0x240>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = psel;
    d29a:	687b      	ldr	r3, [r7, #4]
    d29c:	6a3a      	ldr	r2, [r7, #32]
    d29e:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    d2a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d2a6:	009b      	lsls	r3, r3, #2
    d2a8:	68fa      	ldr	r2, [r7, #12]
    d2aa:	4413      	add	r3, r2
    d2ac:	681b      	ldr	r3, [r3, #0]
    d2ae:	0b9b      	lsrs	r3, r3, #14
    d2b0:	f003 0301 	and.w	r3, r3, #1
    d2b4:	61fb      	str	r3, [r7, #28]
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    d2b6:	2301      	movs	r3, #1
    d2b8:	76fb      	strb	r3, [r7, #27]
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d2ba:	2301      	movs	r3, #1
    d2bc:	76bb      	strb	r3, [r7, #26]
			break;
    d2be:	e03b      	b.n	d338 <pinctrl_configure_pins+0x240>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = psel;
    d2c0:	687b      	ldr	r3, [r7, #4]
    d2c2:	6a3a      	ldr	r2, [r7, #32]
    d2c4:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    d2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d2cc:	009b      	lsls	r3, r3, #2
    d2ce:	68fa      	ldr	r2, [r7, #12]
    d2d0:	4413      	add	r3, r2
    d2d2:	681b      	ldr	r3, [r3, #0]
    d2d4:	0b9b      	lsrs	r3, r3, #14
    d2d6:	f003 0301 	and.w	r3, r3, #1
    d2da:	61fb      	str	r3, [r7, #28]
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    d2dc:	2301      	movs	r3, #1
    d2de:	76fb      	strb	r3, [r7, #27]
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d2e0:	2301      	movs	r3, #1
    d2e2:	76bb      	strb	r3, [r7, #26]
			break;
    d2e4:	e028      	b.n	d338 <pinctrl_configure_pins+0x240>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = psel;
    d2e6:	687b      	ldr	r3, [r7, #4]
    d2e8:	6a3a      	ldr	r2, [r7, #32]
    d2ea:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    d2ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d2f2:	009b      	lsls	r3, r3, #2
    d2f4:	68fa      	ldr	r2, [r7, #12]
    d2f6:	4413      	add	r3, r2
    d2f8:	681b      	ldr	r3, [r3, #0]
    d2fa:	0b9b      	lsrs	r3, r3, #14
    d2fc:	f003 0301 	and.w	r3, r3, #1
    d300:	61fb      	str	r3, [r7, #28]
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    d302:	2301      	movs	r3, #1
    d304:	76fb      	strb	r3, [r7, #27]
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d306:	2301      	movs	r3, #1
    d308:	76bb      	strb	r3, [r7, #26]
			break;
    d30a:	e015      	b.n	d338 <pinctrl_configure_pins+0x240>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = psel;
    d30c:	687b      	ldr	r3, [r7, #4]
    d30e:	6a3a      	ldr	r2, [r7, #32]
    d310:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    d314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d318:	009b      	lsls	r3, r3, #2
    d31a:	68fa      	ldr	r2, [r7, #12]
    d31c:	4413      	add	r3, r2
    d31e:	681b      	ldr	r3, [r3, #0]
    d320:	0b9b      	lsrs	r3, r3, #14
    d322:	f003 0301 	and.w	r3, r3, #1
    d326:	61fb      	str	r3, [r7, #28]
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    d328:	2301      	movs	r3, #1
    d32a:	76fb      	strb	r3, [r7, #27]
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d32c:	2301      	movs	r3, #1
    d32e:	76bb      	strb	r3, [r7, #26]
			break;
    d330:	e002      	b.n	d338 <pinctrl_configure_pins+0x240>
			dir = NRF_GPIO_PIN_DIR_INPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
			break;
#endif /* defined(NRF_PSEL_QSPI) */
		default:
			return -ENOTSUP;
    d332:	f06f 0385 	mvn.w	r3, #133	; 0x85
    d336:	e03d      	b.n	d3b4 <pinctrl_configure_pins+0x2bc>
		}

		/* configure GPIO properties */
		if (psel != PSEL_DISCONNECTED) {
    d338:	6a3b      	ldr	r3, [r7, #32]
    d33a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d33e:	d02d      	beq.n	d39c <pinctrl_configure_pins+0x2a4>
			uint32_t pin = psel;
    d340:	6a3b      	ldr	r3, [r7, #32]
    d342:	617b      	str	r3, [r7, #20]

			if (write != NO_WRITE) {
    d344:	69fb      	ldr	r3, [r7, #28]
    d346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d34a:	d003      	beq.n	d354 <pinctrl_configure_pins+0x25c>
				nrf_gpio_pin_write(pin, write);
    d34c:	69f9      	ldr	r1, [r7, #28]
    d34e:	6978      	ldr	r0, [r7, #20]
    d350:	f00d fec4 	bl	1b0dc <nrf_gpio_pin_write>
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    d354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d358:	009b      	lsls	r3, r3, #2
    d35a:	68fa      	ldr	r2, [r7, #12]
    d35c:	4413      	add	r3, r2
    d35e:	681b      	ldr	r3, [r3, #0]
    d360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    d364:	2b00      	cmp	r3, #0
    d366:	d003      	beq.n	d370 <pinctrl_configure_pins+0x278>
				dir = NRF_GPIO_PIN_DIR_INPUT;
    d368:	2300      	movs	r3, #0
    d36a:	76fb      	strb	r3, [r7, #27]
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d36c:	2301      	movs	r3, #1
    d36e:	76bb      	strb	r3, [r7, #26]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    d370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d374:	009b      	lsls	r3, r3, #2
    d376:	68fa      	ldr	r2, [r7, #12]
    d378:	4413      	add	r3, r2
    d37a:	681b      	ldr	r3, [r3, #0]
    d37c:	09db      	lsrs	r3, r3, #7
    d37e:	b2db      	uxtb	r3, r3
    d380:	f003 0303 	and.w	r3, r3, #3
    d384:	b2d8      	uxtb	r0, r3
    d386:	7eba      	ldrb	r2, [r7, #26]
    d388:	7ef9      	ldrb	r1, [r7, #27]
    d38a:	2300      	movs	r3, #0
    d38c:	9301      	str	r3, [sp, #4]
    d38e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    d392:	9300      	str	r3, [sp, #0]
    d394:	4603      	mov	r3, r0
    d396:	6978      	ldr	r0, [r7, #20]
    d398:	f7ff fe70 	bl	d07c <nrf_gpio_cfg>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    d39c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d3a0:	3301      	adds	r3, #1
    d3a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    d3a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    d3aa:	7afb      	ldrb	r3, [r7, #11]
    d3ac:	429a      	cmp	r2, r3
    d3ae:	f4ff aeae 	bcc.w	d10e <pinctrl_configure_pins+0x16>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    d3b2:	2300      	movs	r3, #0
}
    d3b4:	4618      	mov	r0, r3
    d3b6:	3728      	adds	r7, #40	; 0x28
    d3b8:	46bd      	mov	sp, r7
    d3ba:	bd80      	pop	{r7, pc}

0000d3bc <k_ms_to_ticks_ceil64>:
{
    d3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3c0:	b0bd      	sub	sp, #244	; 0xf4
    d3c2:	af00      	add	r7, sp, #0
    d3c4:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
    d3c8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
    d3cc:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    d3d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d3d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    d3d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    d3dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    d3e0:	2301      	movs	r3, #1
    d3e2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    d3e6:	2300      	movs	r3, #0
    d3e8:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    d3ec:	2301      	movs	r3, #1
    d3ee:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
    d3f2:	2300      	movs	r3, #0
    d3f4:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    d3f8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    d3fc:	2b00      	cmp	r3, #0
    d3fe:	d014      	beq.n	d42a <k_ms_to_ticks_ceil64+0x6e>
	bool mul_ratio = const_hz &&
    d400:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    d404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d408:	429a      	cmp	r2, r3
    d40a:	d20e      	bcs.n	d42a <k_ms_to_ticks_ceil64+0x6e>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    d40c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    d410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    d414:	fbb1 f2f3 	udiv	r2, r1, r3
    d418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    d41c:	fb02 f303 	mul.w	r3, r2, r3
    d420:	1acb      	subs	r3, r1, r3
    d422:	2b00      	cmp	r3, #0
    d424:	d101      	bne.n	d42a <k_ms_to_ticks_ceil64+0x6e>
    d426:	2301      	movs	r3, #1
    d428:	e000      	b.n	d42c <k_ms_to_ticks_ceil64+0x70>
    d42a:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
    d42c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    d430:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    d434:	f003 0301 	and.w	r3, r3, #1
    d438:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    d43c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    d440:	2b00      	cmp	r3, #0
    d442:	d014      	beq.n	d46e <k_ms_to_ticks_ceil64+0xb2>
	bool div_ratio = const_hz &&
    d444:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    d448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d44c:	429a      	cmp	r2, r3
    d44e:	d90e      	bls.n	d46e <k_ms_to_ticks_ceil64+0xb2>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    d450:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    d454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d458:	fbb1 f2f3 	udiv	r2, r1, r3
    d45c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d460:	fb02 f303 	mul.w	r3, r2, r3
    d464:	1acb      	subs	r3, r1, r3
    d466:	2b00      	cmp	r3, #0
    d468:	d101      	bne.n	d46e <k_ms_to_ticks_ceil64+0xb2>
    d46a:	2301      	movs	r3, #1
    d46c:	e000      	b.n	d470 <k_ms_to_ticks_ceil64+0xb4>
    d46e:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
    d470:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    d474:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    d478:	f003 0301 	and.w	r3, r3, #1
    d47c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	if (from_hz == to_hz) {
    d480:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    d484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d488:	429a      	cmp	r2, r3
    d48a:	d10c      	bne.n	d4a6 <k_ms_to_ticks_ceil64+0xea>
		return result32 ? ((uint32_t)t) : t;
    d48c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    d490:	2b00      	cmp	r3, #0
    d492:	d005      	beq.n	d4a0 <k_ms_to_ticks_ceil64+0xe4>
    d494:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    d498:	2200      	movs	r2, #0
    d49a:	461c      	mov	r4, r3
    d49c:	4615      	mov	r5, r2
    d49e:	e1de      	b.n	d85e <k_ms_to_ticks_ceil64+0x4a2>
    d4a0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
    d4a4:	e1db      	b.n	d85e <k_ms_to_ticks_ceil64+0x4a2>
	uint64_t off = 0;
    d4a6:	f04f 0200 	mov.w	r2, #0
    d4aa:	f04f 0300 	mov.w	r3, #0
    d4ae:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (!mul_ratio) {
    d4b2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    d4b6:	f083 0301 	eor.w	r3, r3, #1
    d4ba:	b2db      	uxtb	r3, r3
    d4bc:	2b00      	cmp	r3, #0
    d4be:	d02a      	beq.n	d516 <k_ms_to_ticks_ceil64+0x15a>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
    d4c0:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    d4c4:	2b00      	cmp	r3, #0
    d4c6:	d006      	beq.n	d4d6 <k_ms_to_ticks_ceil64+0x11a>
    d4c8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    d4cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d4d0:	fbb2 f3f3 	udiv	r3, r2, r3
    d4d4:	e001      	b.n	d4da <k_ms_to_ticks_ceil64+0x11e>
    d4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    d4da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		if (round_up) {
    d4de:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
    d4e2:	2b00      	cmp	r3, #0
    d4e4:	d009      	beq.n	d4fa <k_ms_to_ticks_ceil64+0x13e>
			off = rdivisor - 1U;
    d4e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    d4ea:	3b01      	subs	r3, #1
    d4ec:	2200      	movs	r2, #0
    d4ee:	613b      	str	r3, [r7, #16]
    d4f0:	617a      	str	r2, [r7, #20]
    d4f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    d4f6:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		if (round_off) {
    d4fa:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
    d4fe:	2b00      	cmp	r3, #0
    d500:	d009      	beq.n	d516 <k_ms_to_ticks_ceil64+0x15a>
			off = rdivisor / 2U;
    d502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    d506:	085b      	lsrs	r3, r3, #1
    d508:	2200      	movs	r2, #0
    d50a:	60bb      	str	r3, [r7, #8]
    d50c:	60fa      	str	r2, [r7, #12]
    d50e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    d512:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (div_ratio) {
    d516:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    d51a:	2b00      	cmp	r3, #0
    d51c:	d038      	beq.n	d590 <k_ms_to_ticks_ceil64+0x1d4>
		t += off;
    d51e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    d522:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    d526:	1886      	adds	r6, r0, r2
    d528:	603e      	str	r6, [r7, #0]
    d52a:	eb41 0303 	adc.w	r3, r1, r3
    d52e:	607b      	str	r3, [r7, #4]
    d530:	e9d7 2300 	ldrd	r2, r3, [r7]
    d534:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		if (result32 && (t < BIT64(32))) {
    d538:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    d53c:	2b00      	cmp	r3, #0
    d53e:	d011      	beq.n	d564 <k_ms_to_ticks_ceil64+0x1a8>
    d540:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
    d544:	2b01      	cmp	r3, #1
    d546:	d20d      	bcs.n	d564 <k_ms_to_ticks_ceil64+0x1a8>
			return ((uint32_t)t) / (from_hz / to_hz);
    d548:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    d54c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    d550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d554:	fbb1 f3f3 	udiv	r3, r1, r3
    d558:	fbb2 f3f3 	udiv	r3, r2, r3
    d55c:	2200      	movs	r2, #0
    d55e:	461c      	mov	r4, r3
    d560:	4615      	mov	r5, r2
    d562:	e17c      	b.n	d85e <k_ms_to_ticks_ceil64+0x4a2>
			return t / ((uint64_t)from_hz / to_hz);
    d564:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    d568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d56c:	fbb2 f3f3 	udiv	r3, r2, r3
    d570:	2200      	movs	r2, #0
    d572:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    d576:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    d57a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
    d57e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    d582:	f7fa fddf 	bl	8144 <__aeabi_uldivmod>
    d586:	4602      	mov	r2, r0
    d588:	460b      	mov	r3, r1
    d58a:	4614      	mov	r4, r2
    d58c:	461d      	mov	r5, r3
    d58e:	e166      	b.n	d85e <k_ms_to_ticks_ceil64+0x4a2>
	} else if (mul_ratio) {
    d590:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    d594:	2b00      	cmp	r3, #0
    d596:	d031      	beq.n	d5fc <k_ms_to_ticks_ceil64+0x240>
		if (result32) {
    d598:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    d59c:	2b00      	cmp	r3, #0
    d59e:	d00d      	beq.n	d5bc <k_ms_to_ticks_ceil64+0x200>
			return ((uint32_t)t) * (to_hz / from_hz);
    d5a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    d5a4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    d5a8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    d5ac:	fbb1 f2f2 	udiv	r2, r1, r2
    d5b0:	fb02 f303 	mul.w	r3, r2, r3
    d5b4:	2200      	movs	r2, #0
    d5b6:	461c      	mov	r4, r3
    d5b8:	4615      	mov	r5, r2
    d5ba:	e150      	b.n	d85e <k_ms_to_ticks_ceil64+0x4a2>
			return t * ((uint64_t)to_hz / from_hz);
    d5bc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
    d5c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    d5c4:	fbb2 f3f3 	udiv	r3, r2, r3
    d5c8:	2200      	movs	r2, #0
    d5ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    d5ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
    d5d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    d5d6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
    d5da:	464a      	mov	r2, r9
    d5dc:	fb02 f203 	mul.w	r2, r2, r3
    d5e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    d5e4:	4641      	mov	r1, r8
    d5e6:	fb01 f303 	mul.w	r3, r1, r3
    d5ea:	4413      	add	r3, r2
    d5ec:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    d5f0:	4641      	mov	r1, r8
    d5f2:	fba2 4501 	umull	r4, r5, r2, r1
    d5f6:	442b      	add	r3, r5
    d5f8:	461d      	mov	r5, r3
    d5fa:	e130      	b.n	d85e <k_ms_to_ticks_ceil64+0x4a2>
		if (result32) {
    d5fc:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    d600:	2b00      	cmp	r3, #0
    d602:	d035      	beq.n	d670 <k_ms_to_ticks_ceil64+0x2b4>
			return (uint32_t)((t * to_hz + off) / from_hz);
    d604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d608:	2200      	movs	r2, #0
    d60a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    d60e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
    d612:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    d616:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
    d61a:	465a      	mov	r2, fp
    d61c:	fb02 f203 	mul.w	r2, r2, r3
    d620:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    d624:	4651      	mov	r1, sl
    d626:	fb01 f303 	mul.w	r3, r1, r3
    d62a:	4413      	add	r3, r2
    d62c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    d630:	4651      	mov	r1, sl
    d632:	fba2 8901 	umull	r8, r9, r2, r1
    d636:	444b      	add	r3, r9
    d638:	4699      	mov	r9, r3
    d63a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    d63e:	eb18 0102 	adds.w	r1, r8, r2
    d642:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    d646:	eb49 0303 	adc.w	r3, r9, r3
    d64a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    d64e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    d652:	2200      	movs	r2, #0
    d654:	67bb      	str	r3, [r7, #120]	; 0x78
    d656:	67fa      	str	r2, [r7, #124]	; 0x7c
    d658:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    d65c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    d660:	f7fa fd70 	bl	8144 <__aeabi_uldivmod>
    d664:	4602      	mov	r2, r0
    d666:	460b      	mov	r3, r1
    d668:	2300      	movs	r3, #0
    d66a:	4614      	mov	r4, r2
    d66c:	461d      	mov	r5, r3
    d66e:	e0f6      	b.n	d85e <k_ms_to_ticks_ceil64+0x4a2>
		} else if (const_hz && Z_TMCVT_USE_FAST_ALGO(from_hz, to_hz)) {
    d670:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    d674:	2b00      	cmp	r3, #0
    d676:	f000 8082 	beq.w	d77e <k_ms_to_ticks_ceil64+0x3c2>
    d67a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    d67e:	2200      	movs	r2, #0
    d680:	673b      	str	r3, [r7, #112]	; 0x70
    d682:	677a      	str	r2, [r7, #116]	; 0x74
    d684:	4b7a      	ldr	r3, [pc, #488]	; (d870 <k_ms_to_ticks_ceil64+0x4b4>)
    d686:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
    d68a:	464a      	mov	r2, r9
    d68c:	fb03 f202 	mul.w	r2, r3, r2
    d690:	2300      	movs	r3, #0
    d692:	4641      	mov	r1, r8
    d694:	fb01 f303 	mul.w	r3, r1, r3
    d698:	441a      	add	r2, r3
    d69a:	4b75      	ldr	r3, [pc, #468]	; (d870 <k_ms_to_ticks_ceil64+0x4b4>)
    d69c:	4641      	mov	r1, r8
    d69e:	fba1 ab03 	umull	sl, fp, r1, r3
    d6a2:	eb02 030b 	add.w	r3, r2, fp
    d6a6:	469b      	mov	fp, r3
    d6a8:	f1ba 0302 	subs.w	r3, sl, #2
    d6ac:	66bb      	str	r3, [r7, #104]	; 0x68
    d6ae:	f14b 0300 	adc.w	r3, fp, #0
    d6b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    d6b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d6b8:	f04f 0300 	mov.w	r3, #0
    d6bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
    d6c0:	f7fa fd40 	bl	8144 <__aeabi_uldivmod>
    d6c4:	4602      	mov	r2, r0
    d6c6:	460b      	mov	r3, r1
    d6c8:	4610      	mov	r0, r2
    d6ca:	4619      	mov	r1, r3
    d6cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d6d0:	2200      	movs	r2, #0
    d6d2:	663b      	str	r3, [r7, #96]	; 0x60
    d6d4:	667a      	str	r2, [r7, #100]	; 0x64
    d6d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
    d6da:	4643      	mov	r3, r8
    d6dc:	fb03 f201 	mul.w	r2, r3, r1
    d6e0:	464b      	mov	r3, r9
    d6e2:	fb00 f303 	mul.w	r3, r0, r3
    d6e6:	4413      	add	r3, r2
    d6e8:	4642      	mov	r2, r8
    d6ea:	fba0 2102 	umull	r2, r1, r0, r2
    d6ee:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    d6f2:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    d6f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    d6fa:	4413      	add	r3, r2
    d6fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    d700:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    d704:	2b01      	cmp	r3, #1
    d706:	d23a      	bcs.n	d77e <k_ms_to_ticks_ceil64+0x3c2>
			return ((t * to_hz + off) / from_hz);
    d708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d70c:	2200      	movs	r2, #0
    d70e:	65bb      	str	r3, [r7, #88]	; 0x58
    d710:	65fa      	str	r2, [r7, #92]	; 0x5c
    d712:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    d716:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
    d71a:	462a      	mov	r2, r5
    d71c:	fb02 f203 	mul.w	r2, r2, r3
    d720:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    d724:	4621      	mov	r1, r4
    d726:	fb01 f303 	mul.w	r3, r1, r3
    d72a:	4413      	add	r3, r2
    d72c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    d730:	4621      	mov	r1, r4
    d732:	fba2 2101 	umull	r2, r1, r2, r1
    d736:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    d73a:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    d73e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    d742:	4413      	add	r3, r2
    d744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    d748:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    d74c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
    d750:	4621      	mov	r1, r4
    d752:	1889      	adds	r1, r1, r2
    d754:	6539      	str	r1, [r7, #80]	; 0x50
    d756:	4629      	mov	r1, r5
    d758:	eb43 0101 	adc.w	r1, r3, r1
    d75c:	6579      	str	r1, [r7, #84]	; 0x54
    d75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    d762:	2200      	movs	r2, #0
    d764:	64bb      	str	r3, [r7, #72]	; 0x48
    d766:	64fa      	str	r2, [r7, #76]	; 0x4c
    d768:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
    d76c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
    d770:	f7fa fce8 	bl	8144 <__aeabi_uldivmod>
    d774:	4602      	mov	r2, r0
    d776:	460b      	mov	r3, r1
    d778:	4614      	mov	r4, r2
    d77a:	461d      	mov	r5, r3
    d77c:	e06f      	b.n	d85e <k_ms_to_ticks_ceil64+0x4a2>
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
    d77e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    d782:	2200      	movs	r2, #0
    d784:	643b      	str	r3, [r7, #64]	; 0x40
    d786:	647a      	str	r2, [r7, #68]	; 0x44
    d788:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    d78c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    d790:	f7fa fcd8 	bl	8144 <__aeabi_uldivmod>
    d794:	4602      	mov	r2, r0
    d796:	460b      	mov	r3, r1
    d798:	4610      	mov	r0, r2
    d79a:	4619      	mov	r1, r3
    d79c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d7a0:	2200      	movs	r2, #0
    d7a2:	63bb      	str	r3, [r7, #56]	; 0x38
    d7a4:	63fa      	str	r2, [r7, #60]	; 0x3c
    d7a6:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
    d7aa:	4643      	mov	r3, r8
    d7ac:	fb03 f201 	mul.w	r2, r3, r1
    d7b0:	464b      	mov	r3, r9
    d7b2:	fb00 f303 	mul.w	r3, r0, r3
    d7b6:	4413      	add	r3, r2
    d7b8:	4642      	mov	r2, r8
    d7ba:	fba0 2102 	umull	r2, r1, r0, r2
    d7be:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    d7c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    d7c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    d7ca:	4413      	add	r3, r2
    d7cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    d7d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    d7d4:	2200      	movs	r2, #0
    d7d6:	633b      	str	r3, [r7, #48]	; 0x30
    d7d8:	637a      	str	r2, [r7, #52]	; 0x34
    d7da:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    d7de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    d7e2:	f7fa fcaf 	bl	8144 <__aeabi_uldivmod>
    d7e6:	4610      	mov	r0, r2
    d7e8:	4619      	mov	r1, r3
    d7ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d7ee:	2200      	movs	r2, #0
    d7f0:	62bb      	str	r3, [r7, #40]	; 0x28
    d7f2:	62fa      	str	r2, [r7, #44]	; 0x2c
    d7f4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
    d7f8:	4643      	mov	r3, r8
    d7fa:	fb03 f201 	mul.w	r2, r3, r1
    d7fe:	464b      	mov	r3, r9
    d800:	fb00 f303 	mul.w	r3, r0, r3
    d804:	4413      	add	r3, r2
    d806:	4642      	mov	r2, r8
    d808:	fba0 2102 	umull	r2, r1, r0, r2
    d80c:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    d810:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    d814:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    d818:	4413      	add	r3, r2
    d81a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    d81e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    d822:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
    d826:	4641      	mov	r1, r8
    d828:	1889      	adds	r1, r1, r2
    d82a:	6239      	str	r1, [r7, #32]
    d82c:	4649      	mov	r1, r9
    d82e:	eb43 0101 	adc.w	r1, r3, r1
    d832:	6279      	str	r1, [r7, #36]	; 0x24
    d834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    d838:	2200      	movs	r2, #0
    d83a:	61bb      	str	r3, [r7, #24]
    d83c:	61fa      	str	r2, [r7, #28]
    d83e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    d842:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    d846:	f7fa fc7d 	bl	8144 <__aeabi_uldivmod>
    d84a:	4602      	mov	r2, r0
    d84c:	460b      	mov	r3, r1
    d84e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
    d852:	4641      	mov	r1, r8
    d854:	188c      	adds	r4, r1, r2
    d856:	4649      	mov	r1, r9
    d858:	eb43 0101 	adc.w	r1, r3, r1
    d85c:	460d      	mov	r5, r1
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, false, true, false);
    d85e:	4622      	mov	r2, r4
    d860:	462b      	mov	r3, r5
}
    d862:	4610      	mov	r0, r2
    d864:	4619      	mov	r1, r3
    d866:	37f4      	adds	r7, #244	; 0xf4
    d868:	46bd      	mov	sp, r7
    d86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d86e:	bf00      	nop
    d870:	01e13380 	.word	0x01e13380

0000d874 <k_us_to_ticks_ceil64>:
 * Rounds up to the next highest output unit.
 *
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint64_t k_us_to_ticks_ceil64(uint64_t t)
{
    d874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d878:	b0bd      	sub	sp, #244	; 0xf4
    d87a:	af00      	add	r7, sp, #0
    d87c:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
    d880:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
    d884:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    d888:	4ba7      	ldr	r3, [pc, #668]	; (db28 <k_us_to_ticks_ceil64+0x2b4>)
    d88a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    d88e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    d892:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    d896:	2301      	movs	r3, #1
    d898:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    d89c:	2300      	movs	r3, #0
    d89e:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    d8a2:	2301      	movs	r3, #1
    d8a4:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
    d8a8:	2300      	movs	r3, #0
    d8aa:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    d8ae:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    d8b2:	2b00      	cmp	r3, #0
    d8b4:	d014      	beq.n	d8e0 <k_us_to_ticks_ceil64+0x6c>
	bool mul_ratio = const_hz &&
    d8b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    d8ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d8be:	429a      	cmp	r2, r3
    d8c0:	d20e      	bcs.n	d8e0 <k_us_to_ticks_ceil64+0x6c>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    d8c2:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    d8c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    d8ca:	fbb1 f2f3 	udiv	r2, r1, r3
    d8ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    d8d2:	fb02 f303 	mul.w	r3, r2, r3
    d8d6:	1acb      	subs	r3, r1, r3
    d8d8:	2b00      	cmp	r3, #0
    d8da:	d101      	bne.n	d8e0 <k_us_to_ticks_ceil64+0x6c>
    d8dc:	2301      	movs	r3, #1
    d8de:	e000      	b.n	d8e2 <k_us_to_ticks_ceil64+0x6e>
    d8e0:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
    d8e2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    d8e6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    d8ea:	f003 0301 	and.w	r3, r3, #1
    d8ee:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    d8f2:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    d8f6:	2b00      	cmp	r3, #0
    d8f8:	d014      	beq.n	d924 <k_us_to_ticks_ceil64+0xb0>
	bool div_ratio = const_hz &&
    d8fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    d8fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d902:	429a      	cmp	r2, r3
    d904:	d90e      	bls.n	d924 <k_us_to_ticks_ceil64+0xb0>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    d906:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    d90a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d90e:	fbb1 f2f3 	udiv	r2, r1, r3
    d912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d916:	fb02 f303 	mul.w	r3, r2, r3
    d91a:	1acb      	subs	r3, r1, r3
    d91c:	2b00      	cmp	r3, #0
    d91e:	d101      	bne.n	d924 <k_us_to_ticks_ceil64+0xb0>
    d920:	2301      	movs	r3, #1
    d922:	e000      	b.n	d926 <k_us_to_ticks_ceil64+0xb2>
    d924:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
    d926:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    d92a:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    d92e:	f003 0301 	and.w	r3, r3, #1
    d932:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	if (from_hz == to_hz) {
    d936:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    d93a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d93e:	429a      	cmp	r2, r3
    d940:	d10c      	bne.n	d95c <k_us_to_ticks_ceil64+0xe8>
		return result32 ? ((uint32_t)t) : t;
    d942:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    d946:	2b00      	cmp	r3, #0
    d948:	d005      	beq.n	d956 <k_us_to_ticks_ceil64+0xe2>
    d94a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    d94e:	2200      	movs	r2, #0
    d950:	461c      	mov	r4, r3
    d952:	4615      	mov	r5, r2
    d954:	e1e1      	b.n	dd1a <k_us_to_ticks_ceil64+0x4a6>
    d956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
    d95a:	e1de      	b.n	dd1a <k_us_to_ticks_ceil64+0x4a6>
	uint64_t off = 0;
    d95c:	f04f 0200 	mov.w	r2, #0
    d960:	f04f 0300 	mov.w	r3, #0
    d964:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (!mul_ratio) {
    d968:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    d96c:	f083 0301 	eor.w	r3, r3, #1
    d970:	b2db      	uxtb	r3, r3
    d972:	2b00      	cmp	r3, #0
    d974:	d02a      	beq.n	d9cc <k_us_to_ticks_ceil64+0x158>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
    d976:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    d97a:	2b00      	cmp	r3, #0
    d97c:	d006      	beq.n	d98c <k_us_to_ticks_ceil64+0x118>
    d97e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    d982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    d986:	fbb2 f3f3 	udiv	r3, r2, r3
    d98a:	e001      	b.n	d990 <k_us_to_ticks_ceil64+0x11c>
    d98c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    d990:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		if (round_up) {
    d994:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
    d998:	2b00      	cmp	r3, #0
    d99a:	d009      	beq.n	d9b0 <k_us_to_ticks_ceil64+0x13c>
			off = rdivisor - 1U;
    d99c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    d9a0:	3b01      	subs	r3, #1
    d9a2:	2200      	movs	r2, #0
    d9a4:	613b      	str	r3, [r7, #16]
    d9a6:	617a      	str	r2, [r7, #20]
    d9a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    d9ac:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		if (round_off) {
    d9b0:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
    d9b4:	2b00      	cmp	r3, #0
    d9b6:	d009      	beq.n	d9cc <k_us_to_ticks_ceil64+0x158>
			off = rdivisor / 2U;
    d9b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    d9bc:	085b      	lsrs	r3, r3, #1
    d9be:	2200      	movs	r2, #0
    d9c0:	60bb      	str	r3, [r7, #8]
    d9c2:	60fa      	str	r2, [r7, #12]
    d9c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    d9c8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (div_ratio) {
    d9cc:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    d9d0:	2b00      	cmp	r3, #0
    d9d2:	d038      	beq.n	da46 <k_us_to_ticks_ceil64+0x1d2>
		t += off;
    d9d4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    d9d8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    d9dc:	1886      	adds	r6, r0, r2
    d9de:	603e      	str	r6, [r7, #0]
    d9e0:	eb41 0303 	adc.w	r3, r1, r3
    d9e4:	607b      	str	r3, [r7, #4]
    d9e6:	e9d7 2300 	ldrd	r2, r3, [r7]
    d9ea:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		if (result32 && (t < BIT64(32))) {
    d9ee:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    d9f2:	2b00      	cmp	r3, #0
    d9f4:	d011      	beq.n	da1a <k_us_to_ticks_ceil64+0x1a6>
    d9f6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
    d9fa:	2b01      	cmp	r3, #1
    d9fc:	d20d      	bcs.n	da1a <k_us_to_ticks_ceil64+0x1a6>
			return ((uint32_t)t) / (from_hz / to_hz);
    d9fe:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    da02:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    da06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    da0a:	fbb1 f3f3 	udiv	r3, r1, r3
    da0e:	fbb2 f3f3 	udiv	r3, r2, r3
    da12:	2200      	movs	r2, #0
    da14:	461c      	mov	r4, r3
    da16:	4615      	mov	r5, r2
    da18:	e17f      	b.n	dd1a <k_us_to_ticks_ceil64+0x4a6>
			return t / ((uint64_t)from_hz / to_hz);
    da1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    da1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    da22:	fbb2 f3f3 	udiv	r3, r2, r3
    da26:	2200      	movs	r2, #0
    da28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    da2c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    da30:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
    da34:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    da38:	f7fa fb84 	bl	8144 <__aeabi_uldivmod>
    da3c:	4602      	mov	r2, r0
    da3e:	460b      	mov	r3, r1
    da40:	4614      	mov	r4, r2
    da42:	461d      	mov	r5, r3
    da44:	e169      	b.n	dd1a <k_us_to_ticks_ceil64+0x4a6>
	} else if (mul_ratio) {
    da46:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    da4a:	2b00      	cmp	r3, #0
    da4c:	d031      	beq.n	dab2 <k_us_to_ticks_ceil64+0x23e>
		if (result32) {
    da4e:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    da52:	2b00      	cmp	r3, #0
    da54:	d00d      	beq.n	da72 <k_us_to_ticks_ceil64+0x1fe>
			return ((uint32_t)t) * (to_hz / from_hz);
    da56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    da5a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    da5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    da62:	fbb1 f2f2 	udiv	r2, r1, r2
    da66:	fb02 f303 	mul.w	r3, r2, r3
    da6a:	2200      	movs	r2, #0
    da6c:	461c      	mov	r4, r3
    da6e:	4615      	mov	r5, r2
    da70:	e153      	b.n	dd1a <k_us_to_ticks_ceil64+0x4a6>
			return t * ((uint64_t)to_hz / from_hz);
    da72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
    da76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    da7a:	fbb2 f3f3 	udiv	r3, r2, r3
    da7e:	2200      	movs	r2, #0
    da80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    da84:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
    da88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    da8c:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
    da90:	464a      	mov	r2, r9
    da92:	fb02 f203 	mul.w	r2, r2, r3
    da96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    da9a:	4641      	mov	r1, r8
    da9c:	fb01 f303 	mul.w	r3, r1, r3
    daa0:	4413      	add	r3, r2
    daa2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    daa6:	4641      	mov	r1, r8
    daa8:	fba2 4501 	umull	r4, r5, r2, r1
    daac:	442b      	add	r3, r5
    daae:	461d      	mov	r5, r3
    dab0:	e133      	b.n	dd1a <k_us_to_ticks_ceil64+0x4a6>
		if (result32) {
    dab2:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    dab6:	2b00      	cmp	r3, #0
    dab8:	d038      	beq.n	db2c <k_us_to_ticks_ceil64+0x2b8>
			return (uint32_t)((t * to_hz + off) / from_hz);
    daba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    dabe:	2200      	movs	r2, #0
    dac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    dac4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
    dac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    dacc:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
    dad0:	465a      	mov	r2, fp
    dad2:	fb02 f203 	mul.w	r2, r2, r3
    dad6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    dada:	4651      	mov	r1, sl
    dadc:	fb01 f303 	mul.w	r3, r1, r3
    dae0:	4413      	add	r3, r2
    dae2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    dae6:	4651      	mov	r1, sl
    dae8:	fba2 8901 	umull	r8, r9, r2, r1
    daec:	444b      	add	r3, r9
    daee:	4699      	mov	r9, r3
    daf0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    daf4:	eb18 0102 	adds.w	r1, r8, r2
    daf8:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    dafc:	eb49 0303 	adc.w	r3, r9, r3
    db00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    db04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    db08:	2200      	movs	r2, #0
    db0a:	67bb      	str	r3, [r7, #120]	; 0x78
    db0c:	67fa      	str	r2, [r7, #124]	; 0x7c
    db0e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    db12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    db16:	f7fa fb15 	bl	8144 <__aeabi_uldivmod>
    db1a:	4602      	mov	r2, r0
    db1c:	460b      	mov	r3, r1
    db1e:	2300      	movs	r3, #0
    db20:	4614      	mov	r4, r2
    db22:	461d      	mov	r5, r3
    db24:	e0f9      	b.n	dd1a <k_us_to_ticks_ceil64+0x4a6>
    db26:	bf00      	nop
    db28:	000f4240 	.word	0x000f4240
		} else if (const_hz && Z_TMCVT_USE_FAST_ALGO(from_hz, to_hz)) {
    db2c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    db30:	2b00      	cmp	r3, #0
    db32:	f000 8082 	beq.w	dc3a <k_us_to_ticks_ceil64+0x3c6>
    db36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    db3a:	2200      	movs	r2, #0
    db3c:	673b      	str	r3, [r7, #112]	; 0x70
    db3e:	677a      	str	r2, [r7, #116]	; 0x74
    db40:	4b7a      	ldr	r3, [pc, #488]	; (dd2c <k_us_to_ticks_ceil64+0x4b8>)
    db42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
    db46:	464a      	mov	r2, r9
    db48:	fb03 f202 	mul.w	r2, r3, r2
    db4c:	2300      	movs	r3, #0
    db4e:	4641      	mov	r1, r8
    db50:	fb01 f303 	mul.w	r3, r1, r3
    db54:	441a      	add	r2, r3
    db56:	4b75      	ldr	r3, [pc, #468]	; (dd2c <k_us_to_ticks_ceil64+0x4b8>)
    db58:	4641      	mov	r1, r8
    db5a:	fba1 ab03 	umull	sl, fp, r1, r3
    db5e:	eb02 030b 	add.w	r3, r2, fp
    db62:	469b      	mov	fp, r3
    db64:	f1ba 0302 	subs.w	r3, sl, #2
    db68:	66bb      	str	r3, [r7, #104]	; 0x68
    db6a:	f14b 0300 	adc.w	r3, fp, #0
    db6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    db70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    db74:	f04f 0300 	mov.w	r3, #0
    db78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
    db7c:	f7fa fae2 	bl	8144 <__aeabi_uldivmod>
    db80:	4602      	mov	r2, r0
    db82:	460b      	mov	r3, r1
    db84:	4610      	mov	r0, r2
    db86:	4619      	mov	r1, r3
    db88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    db8c:	2200      	movs	r2, #0
    db8e:	663b      	str	r3, [r7, #96]	; 0x60
    db90:	667a      	str	r2, [r7, #100]	; 0x64
    db92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
    db96:	4643      	mov	r3, r8
    db98:	fb03 f201 	mul.w	r2, r3, r1
    db9c:	464b      	mov	r3, r9
    db9e:	fb00 f303 	mul.w	r3, r0, r3
    dba2:	4413      	add	r3, r2
    dba4:	4642      	mov	r2, r8
    dba6:	fba0 2102 	umull	r2, r1, r0, r2
    dbaa:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    dbae:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    dbb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    dbb6:	4413      	add	r3, r2
    dbb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    dbbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    dbc0:	2b01      	cmp	r3, #1
    dbc2:	d23a      	bcs.n	dc3a <k_us_to_ticks_ceil64+0x3c6>
			return ((t * to_hz + off) / from_hz);
    dbc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    dbc8:	2200      	movs	r2, #0
    dbca:	65bb      	str	r3, [r7, #88]	; 0x58
    dbcc:	65fa      	str	r2, [r7, #92]	; 0x5c
    dbce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    dbd2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
    dbd6:	462a      	mov	r2, r5
    dbd8:	fb02 f203 	mul.w	r2, r2, r3
    dbdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    dbe0:	4621      	mov	r1, r4
    dbe2:	fb01 f303 	mul.w	r3, r1, r3
    dbe6:	4413      	add	r3, r2
    dbe8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    dbec:	4621      	mov	r1, r4
    dbee:	fba2 2101 	umull	r2, r1, r2, r1
    dbf2:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    dbf6:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    dbfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    dbfe:	4413      	add	r3, r2
    dc00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    dc04:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    dc08:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
    dc0c:	4621      	mov	r1, r4
    dc0e:	1889      	adds	r1, r1, r2
    dc10:	6539      	str	r1, [r7, #80]	; 0x50
    dc12:	4629      	mov	r1, r5
    dc14:	eb43 0101 	adc.w	r1, r3, r1
    dc18:	6579      	str	r1, [r7, #84]	; 0x54
    dc1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    dc1e:	2200      	movs	r2, #0
    dc20:	64bb      	str	r3, [r7, #72]	; 0x48
    dc22:	64fa      	str	r2, [r7, #76]	; 0x4c
    dc24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
    dc28:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
    dc2c:	f7fa fa8a 	bl	8144 <__aeabi_uldivmod>
    dc30:	4602      	mov	r2, r0
    dc32:	460b      	mov	r3, r1
    dc34:	4614      	mov	r4, r2
    dc36:	461d      	mov	r5, r3
    dc38:	e06f      	b.n	dd1a <k_us_to_ticks_ceil64+0x4a6>
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
    dc3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    dc3e:	2200      	movs	r2, #0
    dc40:	643b      	str	r3, [r7, #64]	; 0x40
    dc42:	647a      	str	r2, [r7, #68]	; 0x44
    dc44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    dc48:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    dc4c:	f7fa fa7a 	bl	8144 <__aeabi_uldivmod>
    dc50:	4602      	mov	r2, r0
    dc52:	460b      	mov	r3, r1
    dc54:	4610      	mov	r0, r2
    dc56:	4619      	mov	r1, r3
    dc58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    dc5c:	2200      	movs	r2, #0
    dc5e:	63bb      	str	r3, [r7, #56]	; 0x38
    dc60:	63fa      	str	r2, [r7, #60]	; 0x3c
    dc62:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
    dc66:	4643      	mov	r3, r8
    dc68:	fb03 f201 	mul.w	r2, r3, r1
    dc6c:	464b      	mov	r3, r9
    dc6e:	fb00 f303 	mul.w	r3, r0, r3
    dc72:	4413      	add	r3, r2
    dc74:	4642      	mov	r2, r8
    dc76:	fba0 2102 	umull	r2, r1, r0, r2
    dc7a:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    dc7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    dc82:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    dc86:	4413      	add	r3, r2
    dc88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    dc8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    dc90:	2200      	movs	r2, #0
    dc92:	633b      	str	r3, [r7, #48]	; 0x30
    dc94:	637a      	str	r2, [r7, #52]	; 0x34
    dc96:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    dc9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    dc9e:	f7fa fa51 	bl	8144 <__aeabi_uldivmod>
    dca2:	4610      	mov	r0, r2
    dca4:	4619      	mov	r1, r3
    dca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    dcaa:	2200      	movs	r2, #0
    dcac:	62bb      	str	r3, [r7, #40]	; 0x28
    dcae:	62fa      	str	r2, [r7, #44]	; 0x2c
    dcb0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
    dcb4:	4643      	mov	r3, r8
    dcb6:	fb03 f201 	mul.w	r2, r3, r1
    dcba:	464b      	mov	r3, r9
    dcbc:	fb00 f303 	mul.w	r3, r0, r3
    dcc0:	4413      	add	r3, r2
    dcc2:	4642      	mov	r2, r8
    dcc4:	fba0 2102 	umull	r2, r1, r0, r2
    dcc8:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    dccc:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    dcd0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    dcd4:	4413      	add	r3, r2
    dcd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    dcda:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    dcde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
    dce2:	4641      	mov	r1, r8
    dce4:	1889      	adds	r1, r1, r2
    dce6:	6239      	str	r1, [r7, #32]
    dce8:	4649      	mov	r1, r9
    dcea:	eb43 0101 	adc.w	r1, r3, r1
    dcee:	6279      	str	r1, [r7, #36]	; 0x24
    dcf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    dcf4:	2200      	movs	r2, #0
    dcf6:	61bb      	str	r3, [r7, #24]
    dcf8:	61fa      	str	r2, [r7, #28]
    dcfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    dcfe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    dd02:	f7fa fa1f 	bl	8144 <__aeabi_uldivmod>
    dd06:	4602      	mov	r2, r0
    dd08:	460b      	mov	r3, r1
    dd0a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
    dd0e:	4641      	mov	r1, r8
    dd10:	188c      	adds	r4, r1, r2
    dd12:	4649      	mov	r1, r9
    dd14:	eb43 0101 	adc.w	r1, r3, r1
    dd18:	460d      	mov	r5, r1
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, false, true, false);
    dd1a:	4622      	mov	r2, r4
    dd1c:	462b      	mov	r3, r5
}
    dd1e:	4610      	mov	r0, r2
    dd20:	4619      	mov	r1, r3
    dd22:	37f4      	adds	r7, #244	; 0xf4
    dd24:	46bd      	mov	sp, r7
    dd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd2a:	bf00      	nop
    dd2c:	01e13380 	.word	0x01e13380

0000dd30 <k_is_pre_kernel>:
{
    dd30:	b480      	push	{r7}
    dd32:	af00      	add	r7, sp, #0
	return !z_sys_post_kernel;
    dd34:	4b08      	ldr	r3, [pc, #32]	; (dd58 <k_is_pre_kernel+0x28>)
    dd36:	781b      	ldrb	r3, [r3, #0]
    dd38:	2b00      	cmp	r3, #0
    dd3a:	bf14      	ite	ne
    dd3c:	2301      	movne	r3, #1
    dd3e:	2300      	moveq	r3, #0
    dd40:	b2db      	uxtb	r3, r3
    dd42:	f083 0301 	eor.w	r3, r3, #1
    dd46:	b2db      	uxtb	r3, r3
    dd48:	f003 0301 	and.w	r3, r3, #1
    dd4c:	b2db      	uxtb	r3, r3
}
    dd4e:	4618      	mov	r0, r3
    dd50:	46bd      	mov	sp, r7
    dd52:	bc80      	pop	{r7}
    dd54:	4770      	bx	lr
    dd56:	bf00      	nop
    dd58:	2000ceac 	.word	0x2000ceac

0000dd5c <z_log_minimal_level_to_char>:
{
    dd5c:	b480      	push	{r7}
    dd5e:	b083      	sub	sp, #12
    dd60:	af00      	add	r7, sp, #0
    dd62:	6078      	str	r0, [r7, #4]
	switch (level) {
    dd64:	687b      	ldr	r3, [r7, #4]
    dd66:	3b01      	subs	r3, #1
    dd68:	2b03      	cmp	r3, #3
    dd6a:	d813      	bhi.n	dd94 <z_log_minimal_level_to_char+0x38>
    dd6c:	a201      	add	r2, pc, #4	; (adr r2, dd74 <z_log_minimal_level_to_char+0x18>)
    dd6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dd72:	bf00      	nop
    dd74:	0000dd85 	.word	0x0000dd85
    dd78:	0000dd89 	.word	0x0000dd89
    dd7c:	0000dd8d 	.word	0x0000dd8d
    dd80:	0000dd91 	.word	0x0000dd91
		return 'E';
    dd84:	2345      	movs	r3, #69	; 0x45
    dd86:	e006      	b.n	dd96 <z_log_minimal_level_to_char+0x3a>
		return 'W';
    dd88:	2357      	movs	r3, #87	; 0x57
    dd8a:	e004      	b.n	dd96 <z_log_minimal_level_to_char+0x3a>
		return 'I';
    dd8c:	2349      	movs	r3, #73	; 0x49
    dd8e:	e002      	b.n	dd96 <z_log_minimal_level_to_char+0x3a>
		return 'D';
    dd90:	2344      	movs	r3, #68	; 0x44
    dd92:	e000      	b.n	dd96 <z_log_minimal_level_to_char+0x3a>
		return '?';
    dd94:	233f      	movs	r3, #63	; 0x3f
}
    dd96:	4618      	mov	r0, r3
    dd98:	370c      	adds	r7, #12
    dd9a:	46bd      	mov	sp, r7
    dd9c:	bc80      	pop	{r7}
    dd9e:	4770      	bx	lr

0000dda0 <baudrate_set>:
 * @param baudrate Baud rate
 *
 * @return 0 on success or error code
 */
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
    dda0:	b580      	push	{r7, lr}
    dda2:	b084      	sub	sp, #16
    dda4:	af00      	add	r7, sp, #0
    dda6:	6078      	str	r0, [r7, #4]
    dda8:	6039      	str	r1, [r7, #0]
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
    ddaa:	6878      	ldr	r0, [r7, #4]
    ddac:	f00d fbf6 	bl	1b59c <get_uarte_instance>
    ddb0:	60b8      	str	r0, [r7, #8]

	switch (baudrate) {
    ddb2:	683b      	ldr	r3, [r7, #0]
    ddb4:	4a83      	ldr	r2, [pc, #524]	; (dfc4 <baudrate_set+0x224>)
    ddb6:	4293      	cmp	r3, r2
    ddb8:	f000 80f3 	beq.w	dfa2 <baudrate_set+0x202>
    ddbc:	683b      	ldr	r3, [r7, #0]
    ddbe:	4a81      	ldr	r2, [pc, #516]	; (dfc4 <baudrate_set+0x224>)
    ddc0:	4293      	cmp	r3, r2
    ddc2:	f200 80f2 	bhi.w	dfaa <baudrate_set+0x20a>
    ddc6:	683b      	ldr	r3, [r7, #0]
    ddc8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    ddcc:	f000 80e5 	beq.w	df9a <baudrate_set+0x1fa>
    ddd0:	683b      	ldr	r3, [r7, #0]
    ddd2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    ddd6:	f200 80e8 	bhi.w	dfaa <baudrate_set+0x20a>
    ddda:	683b      	ldr	r3, [r7, #0]
    dddc:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    dde0:	f000 80d7 	beq.w	df92 <baudrate_set+0x1f2>
    dde4:	683b      	ldr	r3, [r7, #0]
    dde6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    ddea:	f200 80de 	bhi.w	dfaa <baudrate_set+0x20a>
    ddee:	683b      	ldr	r3, [r7, #0]
    ddf0:	4a75      	ldr	r2, [pc, #468]	; (dfc8 <baudrate_set+0x228>)
    ddf2:	4293      	cmp	r3, r2
    ddf4:	f000 80c9 	beq.w	df8a <baudrate_set+0x1ea>
    ddf8:	683b      	ldr	r3, [r7, #0]
    ddfa:	4a73      	ldr	r2, [pc, #460]	; (dfc8 <baudrate_set+0x228>)
    ddfc:	4293      	cmp	r3, r2
    ddfe:	f200 80d4 	bhi.w	dfaa <baudrate_set+0x20a>
    de02:	683b      	ldr	r3, [r7, #0]
    de04:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    de08:	f000 80bb 	beq.w	df82 <baudrate_set+0x1e2>
    de0c:	683b      	ldr	r3, [r7, #0]
    de0e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    de12:	f200 80ca 	bhi.w	dfaa <baudrate_set+0x20a>
    de16:	683b      	ldr	r3, [r7, #0]
    de18:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    de1c:	f000 80ad 	beq.w	df7a <baudrate_set+0x1da>
    de20:	683b      	ldr	r3, [r7, #0]
    de22:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    de26:	f200 80c0 	bhi.w	dfaa <baudrate_set+0x20a>
    de2a:	683b      	ldr	r3, [r7, #0]
    de2c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    de30:	f000 80a0 	beq.w	df74 <baudrate_set+0x1d4>
    de34:	683b      	ldr	r3, [r7, #0]
    de36:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    de3a:	f200 80b6 	bhi.w	dfaa <baudrate_set+0x20a>
    de3e:	683b      	ldr	r3, [r7, #0]
    de40:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    de44:	f000 8092 	beq.w	df6c <baudrate_set+0x1cc>
    de48:	683b      	ldr	r3, [r7, #0]
    de4a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    de4e:	f200 80ac 	bhi.w	dfaa <baudrate_set+0x20a>
    de52:	683b      	ldr	r3, [r7, #0]
    de54:	f64d 22c0 	movw	r2, #56000	; 0xdac0
    de58:	4293      	cmp	r3, r2
    de5a:	f000 8083 	beq.w	df64 <baudrate_set+0x1c4>
    de5e:	683b      	ldr	r3, [r7, #0]
    de60:	f64d 22c0 	movw	r2, #56000	; 0xdac0
    de64:	4293      	cmp	r3, r2
    de66:	f200 80a0 	bhi.w	dfaa <baudrate_set+0x20a>
    de6a:	683b      	ldr	r3, [r7, #0]
    de6c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    de70:	d074      	beq.n	df5c <baudrate_set+0x1bc>
    de72:	683b      	ldr	r3, [r7, #0]
    de74:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    de78:	f200 8097 	bhi.w	dfaa <baudrate_set+0x20a>
    de7c:	683b      	ldr	r3, [r7, #0]
    de7e:	f647 2212 	movw	r2, #31250	; 0x7a12
    de82:	4293      	cmp	r3, r2
    de84:	d066      	beq.n	df54 <baudrate_set+0x1b4>
    de86:	683b      	ldr	r3, [r7, #0]
    de88:	f647 2212 	movw	r2, #31250	; 0x7a12
    de8c:	4293      	cmp	r3, r2
    de8e:	f200 808c 	bhi.w	dfaa <baudrate_set+0x20a>
    de92:	683b      	ldr	r3, [r7, #0]
    de94:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    de98:	d059      	beq.n	df4e <baudrate_set+0x1ae>
    de9a:	683b      	ldr	r3, [r7, #0]
    de9c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    dea0:	f200 8083 	bhi.w	dfaa <baudrate_set+0x20a>
    dea4:	683b      	ldr	r3, [r7, #0]
    dea6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    deaa:	d04d      	beq.n	df48 <baudrate_set+0x1a8>
    deac:	683b      	ldr	r3, [r7, #0]
    deae:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    deb2:	d87a      	bhi.n	dfaa <baudrate_set+0x20a>
    deb4:	683b      	ldr	r3, [r7, #0]
    deb6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    deba:	d042      	beq.n	df42 <baudrate_set+0x1a2>
    debc:	683b      	ldr	r3, [r7, #0]
    debe:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    dec2:	d872      	bhi.n	dfaa <baudrate_set+0x20a>
    dec4:	683b      	ldr	r3, [r7, #0]
    dec6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    deca:	d037      	beq.n	df3c <baudrate_set+0x19c>
    decc:	683b      	ldr	r3, [r7, #0]
    dece:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    ded2:	d86a      	bhi.n	dfaa <baudrate_set+0x20a>
    ded4:	683b      	ldr	r3, [r7, #0]
    ded6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    deda:	d02c      	beq.n	df36 <baudrate_set+0x196>
    dedc:	683b      	ldr	r3, [r7, #0]
    dede:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    dee2:	d862      	bhi.n	dfaa <baudrate_set+0x20a>
    dee4:	683b      	ldr	r3, [r7, #0]
    dee6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    deea:	d020      	beq.n	df2e <baudrate_set+0x18e>
    deec:	683b      	ldr	r3, [r7, #0]
    deee:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    def2:	d85a      	bhi.n	dfaa <baudrate_set+0x20a>
    def4:	683b      	ldr	r3, [r7, #0]
    def6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    defa:	d014      	beq.n	df26 <baudrate_set+0x186>
    defc:	683b      	ldr	r3, [r7, #0]
    defe:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    df02:	d852      	bhi.n	dfaa <baudrate_set+0x20a>
    df04:	683b      	ldr	r3, [r7, #0]
    df06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    df0a:	d004      	beq.n	df16 <baudrate_set+0x176>
    df0c:	683b      	ldr	r3, [r7, #0]
    df0e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    df12:	d004      	beq.n	df1e <baudrate_set+0x17e>
    df14:	e049      	b.n	dfaa <baudrate_set+0x20a>
	case 300:
		/* value not supported by Nordic HAL */
		nrf_baudrate = 0x00014000;
    df16:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    df1a:	60fb      	str	r3, [r7, #12]
		break;
    df1c:	e048      	b.n	dfb0 <baudrate_set+0x210>
	case 600:
		/* value not supported by Nordic HAL */
		nrf_baudrate = 0x00027000;
    df1e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    df22:	60fb      	str	r3, [r7, #12]
		break;
    df24:	e044      	b.n	dfb0 <baudrate_set+0x210>
	case 1200:
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    df26:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    df2a:	60fb      	str	r3, [r7, #12]
		break;
    df2c:	e040      	b.n	dfb0 <baudrate_set+0x210>
	case 2400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    df2e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    df32:	60fb      	str	r3, [r7, #12]
		break;
    df34:	e03c      	b.n	dfb0 <baudrate_set+0x210>
	case 4800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    df36:	4b25      	ldr	r3, [pc, #148]	; (dfcc <baudrate_set+0x22c>)
    df38:	60fb      	str	r3, [r7, #12]
		break;
    df3a:	e039      	b.n	dfb0 <baudrate_set+0x210>
	case 9600:
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    df3c:	4b24      	ldr	r3, [pc, #144]	; (dfd0 <baudrate_set+0x230>)
    df3e:	60fb      	str	r3, [r7, #12]
		break;
    df40:	e036      	b.n	dfb0 <baudrate_set+0x210>
	case 14400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    df42:	4b24      	ldr	r3, [pc, #144]	; (dfd4 <baudrate_set+0x234>)
    df44:	60fb      	str	r3, [r7, #12]
		break;
    df46:	e033      	b.n	dfb0 <baudrate_set+0x210>
	case 19200:
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    df48:	4b23      	ldr	r3, [pc, #140]	; (dfd8 <baudrate_set+0x238>)
    df4a:	60fb      	str	r3, [r7, #12]
		break;
    df4c:	e030      	b.n	dfb0 <baudrate_set+0x210>
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    df4e:	4b23      	ldr	r3, [pc, #140]	; (dfdc <baudrate_set+0x23c>)
    df50:	60fb      	str	r3, [r7, #12]
		break;
    df52:	e02d      	b.n	dfb0 <baudrate_set+0x210>
#if defined(UARTE_BAUDRATE_BAUDRATE_Baud31250)
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    df54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    df58:	60fb      	str	r3, [r7, #12]
		break;
    df5a:	e029      	b.n	dfb0 <baudrate_set+0x210>
#endif
	case 38400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    df5c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    df60:	60fb      	str	r3, [r7, #12]
		break;
    df62:	e025      	b.n	dfb0 <baudrate_set+0x210>
#if defined(UARTE_BAUDRATE_BAUDRATE_Baud56000)
	case 56000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    df64:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    df68:	60fb      	str	r3, [r7, #12]
		break;
    df6a:	e021      	b.n	dfb0 <baudrate_set+0x210>
#endif
	case 57600:
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    df6c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    df70:	60fb      	str	r3, [r7, #12]
		break;
    df72:	e01d      	b.n	dfb0 <baudrate_set+0x210>
	case 76800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    df74:	4b1a      	ldr	r3, [pc, #104]	; (dfe0 <baudrate_set+0x240>)
    df76:	60fb      	str	r3, [r7, #12]
		break;
    df78:	e01a      	b.n	dfb0 <baudrate_set+0x210>
	case 115200:
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    df7a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    df7e:	60fb      	str	r3, [r7, #12]
		break;
    df80:	e016      	b.n	dfb0 <baudrate_set+0x210>
	case 230400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    df82:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    df86:	60fb      	str	r3, [r7, #12]
		break;
    df88:	e012      	b.n	dfb0 <baudrate_set+0x210>
	case 250000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    df8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    df8e:	60fb      	str	r3, [r7, #12]
		break;
    df90:	e00e      	b.n	dfb0 <baudrate_set+0x210>
	case 460800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    df92:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    df96:	60fb      	str	r3, [r7, #12]
		break;
    df98:	e00a      	b.n	dfb0 <baudrate_set+0x210>
	case 921600:
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    df9a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    df9e:	60fb      	str	r3, [r7, #12]
		break;
    dfa0:	e006      	b.n	dfb0 <baudrate_set+0x210>
	case 1000000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    dfa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    dfa6:	60fb      	str	r3, [r7, #12]
		break;
    dfa8:	e002      	b.n	dfb0 <baudrate_set+0x210>
	default:
		return -EINVAL;
    dfaa:	f06f 0315 	mvn.w	r3, #21
    dfae:	e004      	b.n	dfba <baudrate_set+0x21a>
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);
    dfb0:	68f9      	ldr	r1, [r7, #12]
    dfb2:	68b8      	ldr	r0, [r7, #8]
    dfb4:	f00d fa74 	bl	1b4a0 <nrf_uarte_baudrate_set>

	return 0;
    dfb8:	2300      	movs	r3, #0
}
    dfba:	4618      	mov	r0, r3
    dfbc:	3710      	adds	r7, #16
    dfbe:	46bd      	mov	sp, r7
    dfc0:	bd80      	pop	{r7, pc}
    dfc2:	bf00      	nop
    dfc4:	000f4240 	.word	0x000f4240
    dfc8:	0003d090 	.word	0x0003d090
    dfcc:	0013b000 	.word	0x0013b000
    dfd0:	00275000 	.word	0x00275000
    dfd4:	003af000 	.word	0x003af000
    dfd8:	004ea000 	.word	0x004ea000
    dfdc:	0075c000 	.word	0x0075c000
    dfe0:	013a9000 	.word	0x013a9000

0000dfe4 <uarte_nrfx_init>:

	return 0;
}

static int uarte_nrfx_init(const struct device *dev)
{
    dfe4:	b580      	push	{r7, lr}
    dfe6:	b086      	sub	sp, #24
    dfe8:	af00      	add	r7, sp, #0
    dfea:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    dfec:	687b      	ldr	r3, [r7, #4]
    dfee:	691b      	ldr	r3, [r3, #16]
    dff0:	617b      	str	r3, [r7, #20]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
    dff2:	6878      	ldr	r0, [r7, #4]
    dff4:	f00d fad2 	bl	1b59c <get_uarte_instance>
    dff8:	6138      	str	r0, [r7, #16]

	int ret = uarte_nrfx_rx_counting_init(dev);
    dffa:	6878      	ldr	r0, [r7, #4]
    dffc:	f00d fc7e 	bl	1b8fc <uarte_nrfx_rx_counting_init>
    e000:	60f8      	str	r0, [r7, #12]

	if (ret != 0) {
    e002:	68fb      	ldr	r3, [r7, #12]
    e004:	2b00      	cmp	r3, #0
    e006:	d001      	beq.n	e00c <uarte_nrfx_init+0x28>
		return ret;
    e008:	68fb      	ldr	r3, [r7, #12]
    e00a:	e05c      	b.n	e0c6 <uarte_nrfx_init+0xe2>
	}

	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    e00c:	697b      	ldr	r3, [r7, #20]
    e00e:	68db      	ldr	r3, [r3, #12]
    e010:	2201      	movs	r2, #1
    e012:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	nrf_uarte_int_enable(uarte,
    e016:	492e      	ldr	r1, [pc, #184]	; (e0d0 <uarte_nrfx_init+0xec>)
    e018:	6938      	ldr	r0, [r7, #16]
    e01a:	f00d f9b4 	bl	1b386 <nrf_uarte_int_enable>
			     NRF_UARTE_INT_ENDRX_MASK |
			     NRF_UARTE_INT_RXSTARTED_MASK |
			     NRF_UARTE_INT_ERROR_MASK |
			     NRF_UARTE_INT_RXTO_MASK);
	nrf_uarte_enable(uarte);
    e01e:	6938      	ldr	r0, [r7, #16]
    e020:	f00d f9ee 	bl	1b400 <nrf_uarte_enable>
	/**
	 * Stop any currently running RX operations. This can occur when a
	 * bootloader sets up the UART hardware and does not clean it up
	 * before jumping to the next application.
	 */
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    e024:	f44f 71a6 	mov.w	r1, #332	; 0x14c
    e028:	6938      	ldr	r0, [r7, #16]
    e02a:	f00d f965 	bl	1b2f8 <nrf_uarte_event_check>
    e02e:	4603      	mov	r3, r0
    e030:	2b00      	cmp	r3, #0
    e032:	d029      	beq.n	e088 <uarte_nrfx_init+0xa4>
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPRX);
    e034:	2104      	movs	r1, #4
    e036:	6938      	ldr	r0, [r7, #16]
    e038:	f00d f9fc 	bl	1b434 <nrf_uarte_task_trigger>
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    e03c:	bf00      	nop
    e03e:	f44f 71a2 	mov.w	r1, #324	; 0x144
    e042:	6938      	ldr	r0, [r7, #16]
    e044:	f00d f958 	bl	1b2f8 <nrf_uarte_event_check>
    e048:	4603      	mov	r3, r0
    e04a:	f083 0301 	eor.w	r3, r3, #1
    e04e:	b2db      	uxtb	r3, r3
    e050:	2b00      	cmp	r3, #0
    e052:	d00a      	beq.n	e06a <uarte_nrfx_init+0x86>
		       !nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    e054:	f44f 7192 	mov.w	r1, #292	; 0x124
    e058:	6938      	ldr	r0, [r7, #16]
    e05a:	f00d f94d 	bl	1b2f8 <nrf_uarte_event_check>
    e05e:	4603      	mov	r3, r0
    e060:	f083 0301 	eor.w	r3, r3, #1
    e064:	b2db      	uxtb	r3, r3
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    e066:	2b00      	cmp	r3, #0
    e068:	d1e9      	bne.n	e03e <uarte_nrfx_init+0x5a>
			/* Busy wait for event to register */
		}
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXSTARTED);
    e06a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
    e06e:	6938      	ldr	r0, [r7, #16]
    e070:	f00d f92d 	bl	1b2ce <nrf_uarte_event_clear>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
    e074:	f44f 7188 	mov.w	r1, #272	; 0x110
    e078:	6938      	ldr	r0, [r7, #16]
    e07a:	f00d f928 	bl	1b2ce <nrf_uarte_event_clear>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXTO);
    e07e:	f44f 71a2 	mov.w	r1, #324	; 0x144
    e082:	6938      	ldr	r0, [r7, #16]
    e084:	f00d f923 	bl	1b2ce <nrf_uarte_event_clear>
	}

	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    e088:	697b      	ldr	r3, [r7, #20]
    e08a:	68db      	ldr	r3, [r3, #12]
    e08c:	3380      	adds	r3, #128	; 0x80
    e08e:	2200      	movs	r2, #0
    e090:	4910      	ldr	r1, [pc, #64]	; (e0d4 <uarte_nrfx_init+0xf0>)
    e092:	4618      	mov	r0, r3
    e094:	f011 fa7a 	bl	1f58c <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    e098:	697b      	ldr	r3, [r7, #20]
    e09a:	68db      	ldr	r3, [r3, #12]
    e09c:	3380      	adds	r3, #128	; 0x80
    e09e:	6979      	ldr	r1, [r7, #20]
    e0a0:	4618      	mov	r0, r3
    e0a2:	f00d f8fb 	bl	1b29c <k_timer_user_data_set>
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    e0a6:	697b      	ldr	r3, [r7, #20]
    e0a8:	68db      	ldr	r3, [r3, #12]
    e0aa:	3320      	adds	r3, #32
    e0ac:	2200      	movs	r2, #0
    e0ae:	490a      	ldr	r1, [pc, #40]	; (e0d8 <uarte_nrfx_init+0xf4>)
    e0b0:	4618      	mov	r0, r3
    e0b2:	f011 fa6b 	bl	1f58c <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    e0b6:	697b      	ldr	r3, [r7, #20]
    e0b8:	68db      	ldr	r3, [r3, #12]
    e0ba:	3320      	adds	r3, #32
    e0bc:	6979      	ldr	r1, [r7, #20]
    e0be:	4618      	mov	r0, r3
    e0c0:	f00d f8ec 	bl	1b29c <k_timer_user_data_set>

	return 0;
    e0c4:	2300      	movs	r3, #0
}
    e0c6:	4618      	mov	r0, r3
    e0c8:	3718      	adds	r7, #24
    e0ca:	46bd      	mov	sp, r7
    e0cc:	bd80      	pop	{r7, pc}
    e0ce:	bf00      	nop
    e0d0:	000a0210 	.word	0x000a0210
    e0d4:	0001bd9d 	.word	0x0001bd9d
    e0d8:	0001bd7b 	.word	0x0001bd7b

0000e0dc <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
    e0dc:	b580      	push	{r7, lr}
    e0de:	b08c      	sub	sp, #48	; 0x30
    e0e0:	af00      	add	r7, sp, #0
    e0e2:	60f8      	str	r0, [r7, #12]
    e0e4:	60b9      	str	r1, [r7, #8]
    e0e6:	607a      	str	r2, [r7, #4]
    e0e8:	603b      	str	r3, [r7, #0]
	struct uarte_nrfx_data *data = dev->data;
    e0ea:	68fb      	ldr	r3, [r7, #12]
    e0ec:	691b      	ldr	r3, [r3, #16]
    e0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	const struct uarte_nrfx_config *cfg = dev->config;
    e0f0:	68fb      	ldr	r3, [r7, #12]
    e0f2:	685b      	ldr	r3, [r3, #4]
    e0f4:	62bb      	str	r3, [r7, #40]	; 0x28
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
    e0f6:	68f8      	ldr	r0, [r7, #12]
    e0f8:	f00d fa50 	bl	1b59c <get_uarte_instance>
    e0fc:	6278      	str	r0, [r7, #36]	; 0x24

	if (cfg->disable_rx) {
    e0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e100:	7a1b      	ldrb	r3, [r3, #8]
    e102:	2b00      	cmp	r3, #0
    e104:	d00e      	beq.n	e124 <uarte_nrfx_rx_enable+0x48>
		__ASSERT(false, "TX only UARTE instance");
    e106:	f240 3342 	movw	r3, #834	; 0x342
    e10a:	4a63      	ldr	r2, [pc, #396]	; (e298 <uarte_nrfx_rx_enable+0x1bc>)
    e10c:	4963      	ldr	r1, [pc, #396]	; (e29c <uarte_nrfx_rx_enable+0x1c0>)
    e10e:	4864      	ldr	r0, [pc, #400]	; (e2a0 <uarte_nrfx_rx_enable+0x1c4>)
    e110:	f00b ff50 	bl	19fb4 <assert_print>
    e114:	4863      	ldr	r0, [pc, #396]	; (e2a4 <uarte_nrfx_rx_enable+0x1c8>)
    e116:	f00b ff4d 	bl	19fb4 <assert_print>
    e11a:	f240 3142 	movw	r1, #834	; 0x342
    e11e:	485e      	ldr	r0, [pc, #376]	; (e298 <uarte_nrfx_rx_enable+0x1bc>)
    e120:	f00b ff38 	bl	19f94 <assert_post_action>

	/* Signal error if RX is already enabled or if the driver is waiting
	 * for the RXTO event after a call to uart_rx_disable() to discard
	 * data from the UARTE internal RX FIFO.
	 */
	if (data->async->rx_enabled || data->async->discard_rx_fifo) {
    e124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e126:	68db      	ldr	r3, [r3, #12]
    e128:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
    e12c:	b2db      	uxtb	r3, r3
    e12e:	2b00      	cmp	r3, #0
    e130:	d106      	bne.n	e140 <uarte_nrfx_rx_enable+0x64>
    e132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e134:	68db      	ldr	r3, [r3, #12]
    e136:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
    e13a:	b2db      	uxtb	r3, r3
    e13c:	2b00      	cmp	r3, #0
    e13e:	d002      	beq.n	e146 <uarte_nrfx_rx_enable+0x6a>
		return -EBUSY;
    e140:	f06f 030f 	mvn.w	r3, #15
    e144:	e0a4      	b.n	e290 <uarte_nrfx_rx_enable+0x1b4>
	}

	data->async->rx_timeout = timeout;
    e146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e148:	68db      	ldr	r3, [r3, #12]
    e14a:	683a      	ldr	r2, [r7, #0]
    e14c:	675a      	str	r2, [r3, #116]	; 0x74
	 * 3 instead of 2 is used. Note that lower value would work in a similar
	 * way but timeouts would always occur later than expected,  most likely
	 * after ~3 ticks.
	 */
	data->async->rx_timeout_slab =
		MAX(timeout / RX_TIMEOUT_DIV,
    e14e:	683b      	ldr	r3, [r7, #0]
    e150:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
    e154:	dd07      	ble.n	e166 <uarte_nrfx_rx_enable+0x8a>
    e156:	683b      	ldr	r3, [r7, #0]
    e158:	4a53      	ldr	r2, [pc, #332]	; (e2a8 <uarte_nrfx_rx_enable+0x1cc>)
    e15a:	fb82 1203 	smull	r1, r2, r2, r3
    e15e:	1052      	asrs	r2, r2, #1
    e160:	17db      	asrs	r3, r3, #31
    e162:	1ad3      	subs	r3, r2, r3
    e164:	e000      	b.n	e168 <uarte_nrfx_rx_enable+0x8c>
    e166:	235c      	movs	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
    e168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e16a:	68d2      	ldr	r2, [r2, #12]
    e16c:	6793      	str	r3, [r2, #120]	; 0x78
		    NRFX_CEIL_DIV(3 * 1000000, CONFIG_SYS_CLOCK_TICKS_PER_SEC));

	data->async->rx_buf = buf;
    e16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e170:	68db      	ldr	r3, [r3, #12]
    e172:	68ba      	ldr	r2, [r7, #8]
    e174:	659a      	str	r2, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
    e176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e178:	68db      	ldr	r3, [r3, #12]
    e17a:	687a      	ldr	r2, [r7, #4]
    e17c:	65da      	str	r2, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
    e17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e180:	68db      	ldr	r3, [r3, #12]
    e182:	2200      	movs	r2, #0
    e184:	661a      	str	r2, [r3, #96]	; 0x60
	data->async->rx_next_buf = NULL;
    e186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e188:	68db      	ldr	r3, [r3, #12]
    e18a:	2200      	movs	r2, #0
    e18c:	665a      	str	r2, [r3, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
    e18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e190:	68db      	ldr	r3, [r3, #12]
    e192:	2200      	movs	r2, #0
    e194:	669a      	str	r2, [r3, #104]	; 0x68

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e196:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e198:	685b      	ldr	r3, [r3, #4]
    e19a:	f003 0310 	and.w	r3, r3, #16
    e19e:	2b00      	cmp	r3, #0
    e1a0:	d03f      	beq.n	e222 <uarte_nrfx_rx_enable+0x146>
		if (data->async->rx_flush_cnt) {
    e1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e1a4:	68db      	ldr	r3, [r3, #12]
    e1a6:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    e1aa:	2b00      	cmp	r3, #0
    e1ac:	d039      	beq.n	e222 <uarte_nrfx_rx_enable+0x146>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    e1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e1b0:	68db      	ldr	r3, [r3, #12]
    e1b2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    e1b6:	461a      	mov	r2, r3
    e1b8:	687b      	ldr	r3, [r7, #4]
    e1ba:	4293      	cmp	r3, r2
    e1bc:	bf28      	it	cs
    e1be:	4613      	movcs	r3, r2
    e1c0:	623b      	str	r3, [r7, #32]

			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
    e1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e1c4:	68db      	ldr	r3, [r3, #12]
    e1c6:	33c4      	adds	r3, #196	; 0xc4
    e1c8:	6a3a      	ldr	r2, [r7, #32]
    e1ca:	4619      	mov	r1, r3
    e1cc:	68b8      	ldr	r0, [r7, #8]
    e1ce:	f011 fb7e 	bl	1f8ce <__aeabi_memcpy>
			buf += cpy_len;
    e1d2:	6a3b      	ldr	r3, [r7, #32]
    e1d4:	68ba      	ldr	r2, [r7, #8]
    e1d6:	4413      	add	r3, r2
    e1d8:	60bb      	str	r3, [r7, #8]
			len -= cpy_len;
    e1da:	6a3b      	ldr	r3, [r7, #32]
    e1dc:	687a      	ldr	r2, [r7, #4]
    e1de:	1ad3      	subs	r3, r2, r3
    e1e0:	607b      	str	r3, [r7, #4]

			/* If flush content filled whole new buffer complete the
			 * request and indicate rx being disabled.
			 */
			if (!len) {
    e1e2:	687b      	ldr	r3, [r7, #4]
    e1e4:	2b00      	cmp	r3, #0
    e1e6:	d11c      	bne.n	e222 <uarte_nrfx_rx_enable+0x146>
				data->async->rx_flush_cnt -= cpy_len;
    e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e1ea:	68db      	ldr	r3, [r3, #12]
    e1ec:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
    e1f0:	6a3b      	ldr	r3, [r7, #32]
    e1f2:	b2da      	uxtb	r2, r3
    e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e1f6:	68db      	ldr	r3, [r3, #12]
    e1f8:	1a8a      	subs	r2, r1, r2
    e1fa:	b2d2      	uxtb	r2, r2
    e1fc:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
    e200:	6a3b      	ldr	r3, [r7, #32]
    e202:	4619      	mov	r1, r3
    e204:	68f8      	ldr	r0, [r7, #12]
    e206:	f00d fcb4 	bl	1bb72 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    e20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e20c:	68db      	ldr	r3, [r3, #12]
    e20e:	3358      	adds	r3, #88	; 0x58
    e210:	4619      	mov	r1, r3
    e212:	68f8      	ldr	r0, [r7, #12]
    e214:	f00d fcd3 	bl	1bbbe <rx_buf_release>
				notify_rx_disable(dev);
    e218:	68f8      	ldr	r0, [r7, #12]
    e21a:	f00d fcf3 	bl	1bc04 <notify_rx_disable>
				return 0;
    e21e:	2300      	movs	r3, #0
    e220:	e036      	b.n	e290 <uarte_nrfx_rx_enable+0x1b4>
			}
		}
	}

	nrf_uarte_rx_buffer_set(uarte, buf, len);
    e222:	687a      	ldr	r2, [r7, #4]
    e224:	68b9      	ldr	r1, [r7, #8]
    e226:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e228:	f00d f967 	bl	1b4fa <nrf_uarte_rx_buffer_set>

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
    e22c:	f44f 7188 	mov.w	r1, #272	; 0x110
    e230:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e232:	f00d f84c 	bl	1b2ce <nrf_uarte_event_clear>
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXSTARTED);
    e236:	f44f 71a6 	mov.w	r1, #332	; 0x14c
    e23a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e23c:	f00d f847 	bl	1b2ce <nrf_uarte_event_clear>

	data->async->rx_enabled = true;
    e240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e242:	68db      	ldr	r3, [r3, #12]
    e244:	2201      	movs	r2, #1
    e246:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e24c:	685b      	ldr	r3, [r3, #4]
    e24e:	f003 0310 	and.w	r3, r3, #16
    e252:	2b00      	cmp	r3, #0
    e254:	d017      	beq.n	e286 <uarte_nrfx_rx_enable+0x1aa>
	__asm__ volatile(
    e256:	f04f 0320 	mov.w	r3, #32
    e25a:	f3ef 8211 	mrs	r2, BASEPRI
    e25e:	f383 8812 	msr	BASEPRI_MAX, r3
    e262:	f3bf 8f6f 	isb	sy
    e266:	617a      	str	r2, [r7, #20]
    e268:	613b      	str	r3, [r7, #16]
	return key;
    e26a:	697b      	ldr	r3, [r7, #20]
		unsigned int key = irq_lock();
    e26c:	61fb      	str	r3, [r7, #28]

		uarte_enable(dev, UARTE_LOW_POWER_RX);
    e26e:	2102      	movs	r1, #2
    e270:	68f8      	ldr	r0, [r7, #12]
    e272:	f00d facd 	bl	1b810 <uarte_enable>
    e276:	69fb      	ldr	r3, [r7, #28]
    e278:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    e27a:	69bb      	ldr	r3, [r7, #24]
    e27c:	f383 8811 	msr	BASEPRI, r3
    e280:	f3bf 8f6f 	isb	sy
}
    e284:	bf00      	nop
		irq_unlock(key);
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
    e286:	2100      	movs	r1, #0
    e288:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e28a:	f00d f8d3 	bl	1b434 <nrf_uarte_task_trigger>

	return 0;
    e28e:	2300      	movs	r3, #0
}
    e290:	4618      	mov	r0, r3
    e292:	3730      	adds	r7, #48	; 0x30
    e294:	46bd      	mov	sp, r7
    e296:	bd80      	pop	{r7, pc}
    e298:	00021db8 	.word	0x00021db8
    e29c:	00021dec 	.word	0x00021dec
    e2a0:	00021df0 	.word	0x00021df0
    e2a4:	00021e10 	.word	0x00021e10
    e2a8:	66666667 	.word	0x66666667

0000e2ac <rx_flush>:
 * @param len Buffer size, not used if @p buf is null.
 *
 * @return number of bytes flushed from the fifo.
 */
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
{
    e2ac:	b580      	push	{r7, lr}
    e2ae:	b08c      	sub	sp, #48	; 0x30
    e2b0:	af00      	add	r7, sp, #0
    e2b2:	60f8      	str	r0, [r7, #12]
    e2b4:	60b9      	str	r1, [r7, #8]
    e2b6:	607a      	str	r2, [r7, #4]
	/* Flushing RX fifo requires buffer bigger than 4 bytes to empty fifo*/
	static const uint8_t dirty;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
    e2b8:	68f8      	ldr	r0, [r7, #12]
    e2ba:	f00d f96f 	bl	1b59c <get_uarte_instance>
    e2be:	6238      	str	r0, [r7, #32]
	uint32_t prev_rx_amount = nrf_uarte_rx_amount_get(uarte);
    e2c0:	6a38      	ldr	r0, [r7, #32]
    e2c2:	f00d f92d 	bl	1b520 <nrf_uarte_rx_amount_get>
    e2c6:	61f8      	str	r0, [r7, #28]
	uint8_t tmp_buf[UARTE_HW_RX_FIFO_SIZE];
	uint8_t *flush_buf = buf ? buf : tmp_buf;
    e2c8:	68bb      	ldr	r3, [r7, #8]
    e2ca:	2b00      	cmp	r3, #0
    e2cc:	d102      	bne.n	e2d4 <rx_flush+0x28>
    e2ce:	f107 0310 	add.w	r3, r7, #16
    e2d2:	e000      	b.n	e2d6 <rx_flush+0x2a>
    e2d4:	68bb      	ldr	r3, [r7, #8]
    e2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    e2d8:	68bb      	ldr	r3, [r7, #8]
    e2da:	2b00      	cmp	r3, #0
    e2dc:	d001      	beq.n	e2e2 <rx_flush+0x36>
    e2de:	687b      	ldr	r3, [r7, #4]
    e2e0:	e000      	b.n	e2e4 <rx_flush+0x38>
    e2e2:	2305      	movs	r3, #5
    e2e4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (buf) {
    e2e6:	68bb      	ldr	r3, [r7, #8]
    e2e8:	2b00      	cmp	r3, #0
    e2ea:	d00b      	beq.n	e304 <rx_flush+0x58>
		memset(buf, dirty, len);
    e2ec:	4b2e      	ldr	r3, [pc, #184]	; (e3a8 <rx_flush+0xfc>)
    e2ee:	781b      	ldrb	r3, [r3, #0]
    e2f0:	687a      	ldr	r2, [r7, #4]
    e2f2:	4619      	mov	r1, r3
    e2f4:	68b8      	ldr	r0, [r7, #8]
    e2f6:	f011 faf7 	bl	1f8e8 <memset>
		flush_buf = buf;
    e2fa:	68bb      	ldr	r3, [r7, #8]
    e2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		flush_len = len;
    e2fe:	687b      	ldr	r3, [r7, #4]
    e300:	62bb      	str	r3, [r7, #40]	; 0x28
    e302:	e004      	b.n	e30e <rx_flush+0x62>
	} else {
		flush_buf = tmp_buf;
    e304:	f107 0310 	add.w	r3, r7, #16
    e308:	62fb      	str	r3, [r7, #44]	; 0x2c
		flush_len = sizeof(tmp_buf);
    e30a:	2305      	movs	r3, #5
    e30c:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	nrf_uarte_rx_buffer_set(uarte, flush_buf, flush_len);
    e30e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e310:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    e312:	6a38      	ldr	r0, [r7, #32]
    e314:	f00d f8f1 	bl	1b4fa <nrf_uarte_rx_buffer_set>
	/* Final part of handling RXTO event is in ENDRX interrupt
	 * handler. ENDRX is generated as a result of FLUSHRX task.
	 */
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
    e318:	f44f 7188 	mov.w	r1, #272	; 0x110
    e31c:	6a38      	ldr	r0, [r7, #32]
    e31e:	f00c ffd6 	bl	1b2ce <nrf_uarte_event_clear>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_FLUSHRX);
    e322:	212c      	movs	r1, #44	; 0x2c
    e324:	6a38      	ldr	r0, [r7, #32]
    e326:	f00d f885 	bl	1b434 <nrf_uarte_task_trigger>
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    e32a:	bf00      	nop
    e32c:	f44f 7188 	mov.w	r1, #272	; 0x110
    e330:	6a38      	ldr	r0, [r7, #32]
    e332:	f00c ffe1 	bl	1b2f8 <nrf_uarte_event_check>
    e336:	4603      	mov	r3, r0
    e338:	f083 0301 	eor.w	r3, r3, #1
    e33c:	b2db      	uxtb	r3, r3
    e33e:	2b00      	cmp	r3, #0
    e340:	d1f4      	bne.n	e32c <rx_flush+0x80>
		/* empty */
	}
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
    e342:	f44f 7188 	mov.w	r1, #272	; 0x110
    e346:	6a38      	ldr	r0, [r7, #32]
    e348:	f00c ffc1 	bl	1b2ce <nrf_uarte_event_clear>

	if (!buf) {
    e34c:	68bb      	ldr	r3, [r7, #8]
    e34e:	2b00      	cmp	r3, #0
    e350:	d105      	bne.n	e35e <rx_flush+0xb2>
		return nrf_uarte_rx_amount_get(uarte);
    e352:	6a38      	ldr	r0, [r7, #32]
    e354:	f00d f8e4 	bl	1b520 <nrf_uarte_rx_amount_get>
    e358:	4603      	mov	r3, r0
    e35a:	b2db      	uxtb	r3, r3
    e35c:	e020      	b.n	e3a0 <rx_flush+0xf4>
	}

	uint32_t rx_amount = nrf_uarte_rx_amount_get(uarte);
    e35e:	6a38      	ldr	r0, [r7, #32]
    e360:	f00d f8de 	bl	1b520 <nrf_uarte_rx_amount_get>
    e364:	61b8      	str	r0, [r7, #24]

	if (rx_amount != prev_rx_amount) {
    e366:	69ba      	ldr	r2, [r7, #24]
    e368:	69fb      	ldr	r3, [r7, #28]
    e36a:	429a      	cmp	r2, r3
    e36c:	d002      	beq.n	e374 <rx_flush+0xc8>
		return rx_amount;
    e36e:	69bb      	ldr	r3, [r7, #24]
    e370:	b2db      	uxtb	r3, r3
    e372:	e015      	b.n	e3a0 <rx_flush+0xf4>
	}

	for (int i = 0; i < flush_len; i++) {
    e374:	2300      	movs	r3, #0
    e376:	627b      	str	r3, [r7, #36]	; 0x24
    e378:	e00d      	b.n	e396 <rx_flush+0xea>
		if (buf[i] != dirty) {
    e37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e37c:	68ba      	ldr	r2, [r7, #8]
    e37e:	4413      	add	r3, r2
    e380:	781a      	ldrb	r2, [r3, #0]
    e382:	4b09      	ldr	r3, [pc, #36]	; (e3a8 <rx_flush+0xfc>)
    e384:	781b      	ldrb	r3, [r3, #0]
    e386:	429a      	cmp	r2, r3
    e388:	d002      	beq.n	e390 <rx_flush+0xe4>
			return rx_amount;
    e38a:	69bb      	ldr	r3, [r7, #24]
    e38c:	b2db      	uxtb	r3, r3
    e38e:	e007      	b.n	e3a0 <rx_flush+0xf4>
	for (int i = 0; i < flush_len; i++) {
    e390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e392:	3301      	adds	r3, #1
    e394:	627b      	str	r3, [r7, #36]	; 0x24
    e396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e398:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e39a:	429a      	cmp	r2, r3
    e39c:	d8ed      	bhi.n	e37a <rx_flush+0xce>
		}
	}

	return 0;
    e39e:	2300      	movs	r3, #0
}
    e3a0:	4618      	mov	r0, r3
    e3a2:	3730      	adds	r7, #48	; 0x30
    e3a4:	46bd      	mov	sp, r7
    e3a6:	bd80      	pop	{r7, pc}
    e3a8:	000243d2 	.word	0x000243d2

0000e3ac <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    e3ac:	b5b0      	push	{r4, r5, r7, lr}
    e3ae:	b084      	sub	sp, #16
    e3b0:	af00      	add	r7, sp, #0
    e3b2:	6078      	str	r0, [r7, #4]
    e3b4:	6039      	str	r1, [r7, #0]
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    e3b6:	683b      	ldr	r3, [r7, #0]
    e3b8:	331c      	adds	r3, #28
    e3ba:	4618      	mov	r0, r3
    e3bc:	f002 fa66 	bl	1088c <nrfx_dppi_channel_alloc>
    e3c0:	60f8      	str	r0, [r7, #12]
	if (ret != NRFX_SUCCESS) {
    e3c2:	68fb      	ldr	r3, [r7, #12]
    e3c4:	4a17      	ldr	r2, [pc, #92]	; (e424 <endtx_stoptx_ppi_init+0x78>)
    e3c6:	4293      	cmp	r3, r2
    e3c8:	d00d      	beq.n	e3e6 <endtx_stoptx_ppi_init+0x3a>
		LOG_ERR("Failed to allocate PPI Channel");
    e3ca:	2303      	movs	r3, #3
    e3cc:	2b00      	cmp	r3, #0
    e3ce:	d007      	beq.n	e3e0 <endtx_stoptx_ppi_init+0x34>
    e3d0:	2001      	movs	r0, #1
    e3d2:	f7ff fcc3 	bl	dd5c <z_log_minimal_level_to_char>
    e3d6:	4603      	mov	r3, r0
    e3d8:	4619      	mov	r1, r3
    e3da:	4813      	ldr	r0, [pc, #76]	; (e428 <endtx_stoptx_ppi_init+0x7c>)
    e3dc:	f00b fe0d 	bl	19ffa <z_log_minimal_printk>
		return -EIO;
    e3e0:	f06f 0304 	mvn.w	r3, #4
    e3e4:	e01a      	b.n	e41c <endtx_stoptx_ppi_init+0x70>
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    e3e6:	683b      	ldr	r3, [r7, #0]
    e3e8:	7f1c      	ldrb	r4, [r3, #28]
    e3ea:	f44f 7190 	mov.w	r1, #288	; 0x120
    e3ee:	6878      	ldr	r0, [r7, #4]
    e3f0:	f00c ff96 	bl	1b320 <nrf_uarte_event_address_get>
    e3f4:	4605      	mov	r5, r0
    e3f6:	210c      	movs	r1, #12
    e3f8:	6878      	ldr	r0, [r7, #4]
    e3fa:	f00d f82b 	bl	1b454 <nrf_uarte_task_address_get>
    e3fe:	4603      	mov	r3, r0
    e400:	461a      	mov	r2, r3
    e402:	4629      	mov	r1, r5
    e404:	4620      	mov	r0, r4
    e406:	f00e fe61 	bl	1d0cc <nrfx_gppi_channel_endpoints_setup>
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    e40a:	683b      	ldr	r3, [r7, #0]
    e40c:	7f1b      	ldrb	r3, [r3, #28]
    e40e:	461a      	mov	r2, r3
    e410:	2301      	movs	r3, #1
    e412:	4093      	lsls	r3, r2
    e414:	4618      	mov	r0, r3
    e416:	f001 fef3 	bl	10200 <nrfx_gppi_channels_enable>

	return 0;
    e41a:	2300      	movs	r3, #0
}
    e41c:	4618      	mov	r0, r3
    e41e:	3710      	adds	r7, #16
    e420:	46bd      	mov	sp, r7
    e422:	bdb0      	pop	{r4, r5, r7, pc}
    e424:	0bad0000 	.word	0x0bad0000
    e428:	00021e2c 	.word	0x00021e2c

0000e42c <__NVIC_SetPendingIRQ>:
{
    e42c:	b480      	push	{r7}
    e42e:	b083      	sub	sp, #12
    e430:	af00      	add	r7, sp, #0
    e432:	4603      	mov	r3, r0
    e434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    e436:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e43a:	2b00      	cmp	r3, #0
    e43c:	db0c      	blt.n	e458 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e43e:	79fb      	ldrb	r3, [r7, #7]
    e440:	f003 021f 	and.w	r2, r3, #31
    e444:	4907      	ldr	r1, [pc, #28]	; (e464 <__NVIC_SetPendingIRQ+0x38>)
    e446:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e44a:	095b      	lsrs	r3, r3, #5
    e44c:	2001      	movs	r0, #1
    e44e:	fa00 f202 	lsl.w	r2, r0, r2
    e452:	3340      	adds	r3, #64	; 0x40
    e454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e458:	bf00      	nop
    e45a:	370c      	adds	r7, #12
    e45c:	46bd      	mov	sp, r7
    e45e:	bc80      	pop	{r7}
    e460:	4770      	bx	lr
    e462:	bf00      	nop
    e464:	e000e100 	.word	0xe000e100

0000e468 <__NVIC_ClearPendingIRQ>:
{
    e468:	b480      	push	{r7}
    e46a:	b083      	sub	sp, #12
    e46c:	af00      	add	r7, sp, #0
    e46e:	4603      	mov	r3, r0
    e470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    e472:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e476:	2b00      	cmp	r3, #0
    e478:	db0c      	blt.n	e494 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e47a:	79fb      	ldrb	r3, [r7, #7]
    e47c:	f003 021f 	and.w	r2, r3, #31
    e480:	4907      	ldr	r1, [pc, #28]	; (e4a0 <__NVIC_ClearPendingIRQ+0x38>)
    e482:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e486:	095b      	lsrs	r3, r3, #5
    e488:	2001      	movs	r0, #1
    e48a:	fa00 f202 	lsl.w	r2, r0, r2
    e48e:	3360      	adds	r3, #96	; 0x60
    e490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e494:	bf00      	nop
    e496:	370c      	adds	r7, #12
    e498:	46bd      	mov	sp, r7
    e49a:	bc80      	pop	{r7}
    e49c:	4770      	bx	lr
    e49e:	bf00      	nop
    e4a0:	e000e100 	.word	0xe000e100

0000e4a4 <nrf_rtc_prescaler_set>:
{
     return p_reg->COUNTER;
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    e4a4:	b580      	push	{r7, lr}
    e4a6:	b082      	sub	sp, #8
    e4a8:	af00      	add	r7, sp, #0
    e4aa:	6078      	str	r0, [r7, #4]
    e4ac:	6039      	str	r1, [r7, #0]
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    e4ae:	683b      	ldr	r3, [r7, #0]
    e4b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e4b4:	d30b      	bcc.n	e4ce <nrf_rtc_prescaler_set+0x2a>
    e4b6:	f44f 73c9 	mov.w	r3, #402	; 0x192
    e4ba:	4a09      	ldr	r2, [pc, #36]	; (e4e0 <nrf_rtc_prescaler_set+0x3c>)
    e4bc:	4909      	ldr	r1, [pc, #36]	; (e4e4 <nrf_rtc_prescaler_set+0x40>)
    e4be:	480a      	ldr	r0, [pc, #40]	; (e4e8 <nrf_rtc_prescaler_set+0x44>)
    e4c0:	f00b fd78 	bl	19fb4 <assert_print>
    e4c4:	f44f 71c9 	mov.w	r1, #402	; 0x192
    e4c8:	4805      	ldr	r0, [pc, #20]	; (e4e0 <nrf_rtc_prescaler_set+0x3c>)
    e4ca:	f00b fd63 	bl	19f94 <assert_post_action>
    p_reg->PRESCALER = val;
    e4ce:	687b      	ldr	r3, [r7, #4]
    e4d0:	683a      	ldr	r2, [r7, #0]
    e4d2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    e4d6:	bf00      	nop
    e4d8:	3708      	adds	r7, #8
    e4da:	46bd      	mov	sp, r7
    e4dc:	bd80      	pop	{r7, pc}
    e4de:	bf00      	nop
    e4e0:	00021e5c 	.word	0x00021e5c
    e4e4:	00021e90 	.word	0x00021e90
    e4e8:	00021eb8 	.word	0x00021eb8

0000e4ec <set_comparator>:
{
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
    e4ec:	b580      	push	{r7, lr}
    e4ee:	b082      	sub	sp, #8
    e4f0:	af00      	add	r7, sp, #0
    e4f2:	6078      	str	r0, [r7, #4]
    e4f4:	6039      	str	r1, [r7, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    e4f6:	6879      	ldr	r1, [r7, #4]
    e4f8:	683b      	ldr	r3, [r7, #0]
    e4fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    e4fe:	461a      	mov	r2, r3
    e500:	4803      	ldr	r0, [pc, #12]	; (e510 <set_comparator+0x24>)
    e502:	f00e f9c7 	bl	1c894 <nrf_rtc_cc_set>
}
    e506:	bf00      	nop
    e508:	3708      	adds	r7, #8
    e50a:	46bd      	mov	sp, r7
    e50c:	bd80      	pop	{r7, pc}
    e50e:	bf00      	nop
    e510:	40015000 	.word	0x40015000

0000e514 <event_check>:

static bool event_check(int32_t chan)
{
    e514:	b580      	push	{r7, lr}
    e516:	b082      	sub	sp, #8
    e518:	af00      	add	r7, sp, #0
    e51a:	6078      	str	r0, [r7, #4]
	return nrf_rtc_event_check(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
    e51c:	687b      	ldr	r3, [r7, #4]
    e51e:	b29b      	uxth	r3, r3
    e520:	3350      	adds	r3, #80	; 0x50
    e522:	b29b      	uxth	r3, r3
    e524:	009b      	lsls	r3, r3, #2
    e526:	b29b      	uxth	r3, r3
    e528:	4619      	mov	r1, r3
    e52a:	4804      	ldr	r0, [pc, #16]	; (e53c <event_check+0x28>)
    e52c:	f00e f9ef 	bl	1c90e <nrf_rtc_event_check>
    e530:	4603      	mov	r3, r0
}
    e532:	4618      	mov	r0, r3
    e534:	3708      	adds	r7, #8
    e536:	46bd      	mov	sp, r7
    e538:	bd80      	pop	{r7, pc}
    e53a:	bf00      	nop
    e53c:	40015000 	.word	0x40015000

0000e540 <event_clear>:

static void event_clear(int32_t chan)
{
    e540:	b580      	push	{r7, lr}
    e542:	b082      	sub	sp, #8
    e544:	af00      	add	r7, sp, #0
    e546:	6078      	str	r0, [r7, #4]
	nrf_rtc_event_clear(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
    e548:	687b      	ldr	r3, [r7, #4]
    e54a:	b29b      	uxth	r3, r3
    e54c:	3350      	adds	r3, #80	; 0x50
    e54e:	b29b      	uxth	r3, r3
    e550:	009b      	lsls	r3, r3, #2
    e552:	b29b      	uxth	r3, r3
    e554:	4619      	mov	r1, r3
    e556:	4803      	ldr	r0, [pc, #12]	; (e564 <event_clear+0x24>)
    e558:	f00e f9ed 	bl	1c936 <nrf_rtc_event_clear>
}
    e55c:	bf00      	nop
    e55e:	3708      	adds	r7, #8
    e560:	46bd      	mov	sp, r7
    e562:	bd80      	pop	{r7, pc}
    e564:	40015000 	.word	0x40015000

0000e568 <event_enable>:

static void event_enable(int32_t chan)
{
    e568:	b580      	push	{r7, lr}
    e56a:	b082      	sub	sp, #8
    e56c:	af00      	add	r7, sp, #0
    e56e:	6078      	str	r0, [r7, #4]
	nrf_rtc_event_enable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    e570:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e574:	687b      	ldr	r3, [r7, #4]
    e576:	fa02 f303 	lsl.w	r3, r2, r3
    e57a:	4619      	mov	r1, r3
    e57c:	4803      	ldr	r0, [pc, #12]	; (e58c <event_enable+0x24>)
    e57e:	f00e fa0c 	bl	1c99a <nrf_rtc_event_enable>
}
    e582:	bf00      	nop
    e584:	3708      	adds	r7, #8
    e586:	46bd      	mov	sp, r7
    e588:	bd80      	pop	{r7, pc}
    e58a:	bf00      	nop
    e58c:	40015000 	.word	0x40015000

0000e590 <event_disable>:

static void event_disable(int32_t chan)
{
    e590:	b580      	push	{r7, lr}
    e592:	b082      	sub	sp, #8
    e594:	af00      	add	r7, sp, #0
    e596:	6078      	str	r0, [r7, #4]
	nrf_rtc_event_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    e598:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e59c:	687b      	ldr	r3, [r7, #4]
    e59e:	fa02 f303 	lsl.w	r3, r2, r3
    e5a2:	4619      	mov	r1, r3
    e5a4:	4803      	ldr	r0, [pc, #12]	; (e5b4 <event_disable+0x24>)
    e5a6:	f00e fa06 	bl	1c9b6 <nrf_rtc_event_disable>
}
    e5aa:	bf00      	nop
    e5ac:	3708      	adds	r7, #8
    e5ae:	46bd      	mov	sp, r7
    e5b0:	bd80      	pop	{r7, pc}
    e5b2:	bf00      	nop
    e5b4:	40015000 	.word	0x40015000

0000e5b8 <counter>:

static uint32_t counter(void)
{
    e5b8:	b580      	push	{r7, lr}
    e5ba:	af00      	add	r7, sp, #0
	return nrf_rtc_counter_get(RTC);
    e5bc:	4802      	ldr	r0, [pc, #8]	; (e5c8 <counter+0x10>)
    e5be:	f00e f9cf 	bl	1c960 <nrf_rtc_counter_get>
    e5c2:	4603      	mov	r3, r0
}
    e5c4:	4618      	mov	r0, r3
    e5c6:	bd80      	pop	{r7, pc}
    e5c8:	40015000 	.word	0x40015000

0000e5cc <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    e5cc:	b580      	push	{r7, lr}
    e5ce:	b084      	sub	sp, #16
    e5d0:	af00      	add	r7, sp, #0
    e5d2:	6078      	str	r0, [r7, #4]
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    e5d4:	2201      	movs	r2, #1
    e5d6:	687b      	ldr	r3, [r7, #4]
    e5d8:	fa02 f303 	lsl.w	r3, r2, r3
    e5dc:	43db      	mvns	r3, r3
    e5de:	4619      	mov	r1, r3
    e5e0:	4812      	ldr	r0, [pc, #72]	; (e62c <compare_int_lock+0x60>)
    e5e2:	f00e f937 	bl	1c854 <atomic_and>
    e5e6:	60f8      	str	r0, [r7, #12]

	nrf_rtc_int_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    e5e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e5ec:	687b      	ldr	r3, [r7, #4]
    e5ee:	fa02 f303 	lsl.w	r3, r2, r3
    e5f2:	4619      	mov	r1, r3
    e5f4:	480e      	ldr	r0, [pc, #56]	; (e630 <compare_int_lock+0x64>)
    e5f6:	f00e f96d 	bl	1c8d4 <nrf_rtc_int_disable>
  __ASM volatile ("dmb 0xF":::"memory");
    e5fa:	f3bf 8f5f 	dmb	sy
}
    e5fe:	bf00      	nop
    e600:	bf00      	nop
    e602:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    e604:	f3bf 8f6f 	isb	sy
}
    e608:	bf00      	nop
}
    e60a:	bf00      	nop
}
    e60c:	bf00      	nop

	barrier_dmem_fence_full();
	barrier_isync_fence_full();

	return prev & BIT(chan);
    e60e:	2201      	movs	r2, #1
    e610:	687b      	ldr	r3, [r7, #4]
    e612:	409a      	lsls	r2, r3
    e614:	68fb      	ldr	r3, [r7, #12]
    e616:	4013      	ands	r3, r2
    e618:	2b00      	cmp	r3, #0
    e61a:	bf14      	ite	ne
    e61c:	2301      	movne	r3, #1
    e61e:	2300      	moveq	r3, #0
    e620:	b2db      	uxtb	r3, r3
}
    e622:	4618      	mov	r0, r3
    e624:	3710      	adds	r7, #16
    e626:	46bd      	mov	sp, r7
    e628:	bd80      	pop	{r7, pc}
    e62a:	bf00      	nop
    e62c:	2000c994 	.word	0x2000c994
    e630:	40015000 	.word	0x40015000

0000e634 <compare_int_unlock>:

	return compare_int_lock(chan);
}

static void compare_int_unlock(int32_t chan, bool key)
{
    e634:	b580      	push	{r7, lr}
    e636:	b082      	sub	sp, #8
    e638:	af00      	add	r7, sp, #0
    e63a:	6078      	str	r0, [r7, #4]
    e63c:	460b      	mov	r3, r1
    e63e:	70fb      	strb	r3, [r7, #3]
	if (key) {
    e640:	78fb      	ldrb	r3, [r7, #3]
    e642:	2b00      	cmp	r3, #0
    e644:	d01f      	beq.n	e686 <compare_int_unlock+0x52>
		atomic_or(&int_mask, BIT(chan));
    e646:	2201      	movs	r2, #1
    e648:	687b      	ldr	r3, [r7, #4]
    e64a:	fa02 f303 	lsl.w	r3, r2, r3
    e64e:	4619      	mov	r1, r3
    e650:	480f      	ldr	r0, [pc, #60]	; (e690 <compare_int_unlock+0x5c>)
    e652:	f00e f8ea 	bl	1c82a <atomic_or>
		nrf_rtc_int_enable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    e656:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e65a:	687b      	ldr	r3, [r7, #4]
    e65c:	fa02 f303 	lsl.w	r3, r2, r3
    e660:	4619      	mov	r1, r3
    e662:	480c      	ldr	r0, [pc, #48]	; (e694 <compare_int_unlock+0x60>)
    e664:	f00e f928 	bl	1c8b8 <nrf_rtc_int_enable>
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    e668:	480b      	ldr	r0, [pc, #44]	; (e698 <compare_int_unlock+0x64>)
    e66a:	f00e f8d2 	bl	1c812 <atomic_get>
    e66e:	4603      	mov	r3, r0
    e670:	461a      	mov	r2, r3
    e672:	687b      	ldr	r3, [r7, #4]
    e674:	fa22 f303 	lsr.w	r3, r2, r3
    e678:	f003 0301 	and.w	r3, r3, #1
    e67c:	2b00      	cmp	r3, #0
    e67e:	d002      	beq.n	e686 <compare_int_unlock+0x52>
			NVIC_SetPendingIRQ(RTC_IRQn);
    e680:	2015      	movs	r0, #21
    e682:	f7ff fed3 	bl	e42c <__NVIC_SetPendingIRQ>
		}
	}
}
    e686:	bf00      	nop
    e688:	3708      	adds	r7, #8
    e68a:	46bd      	mov	sp, r7
    e68c:	bd80      	pop	{r7, pc}
    e68e:	bf00      	nop
    e690:	2000c994 	.word	0x2000c994
    e694:	40015000 	.word	0x40015000
    e698:	2000c998 	.word	0x2000c998

0000e69c <set_alarm>:
 *
 * @retval 0 The requested CC has been set successfully.
 * @retval -EINVAL The requested CC value could not be reliably set.
 */
static int set_alarm(int32_t chan, uint32_t req_cc, bool exact)
{
    e69c:	b580      	push	{r7, lr}
    e69e:	b088      	sub	sp, #32
    e6a0:	af00      	add	r7, sp, #0
    e6a2:	60f8      	str	r0, [r7, #12]
    e6a4:	60b9      	str	r1, [r7, #8]
    e6a6:	4613      	mov	r3, r2
    e6a8:	71fb      	strb	r3, [r7, #7]
	int ret = 0;
    e6aa:	2300      	movs	r3, #0
    e6ac:	61fb      	str	r3, [r7, #28]
	 * be provoked by test_next_cycle_timeouts in the nrf_rtc_timer suite).
	 * This never happens when the written value is N+3. Use 3 cycles as
	 * the nearest possible scheduling then.
	 */
	enum { MIN_CYCLES_FROM_NOW = 3 };
	uint32_t cc_val = req_cc;
    e6ae:	68bb      	ldr	r3, [r7, #8]
    e6b0:	61bb      	str	r3, [r7, #24]
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    e6b2:	2303      	movs	r3, #3
    e6b4:	617b      	str	r3, [r7, #20]
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
    e6b6:	68f8      	ldr	r0, [r7, #12]
    e6b8:	f7ff ff6a 	bl	e590 <event_disable>
	event_clear(chan);
    e6bc:	68f8      	ldr	r0, [r7, #12]
    e6be:	f7ff ff3f 	bl	e540 <event_clear>

	for (;;) {
		uint32_t now;

		set_comparator(chan, cc_val);
    e6c2:	69b9      	ldr	r1, [r7, #24]
    e6c4:	68f8      	ldr	r0, [r7, #12]
    e6c6:	f7ff ff11 	bl	e4ec <set_comparator>
		 * there is no need to disable event routing in every iteration
		 * of the loop, as the COMPARE event resulting from any attempt
		 * of setting the CC register is acceptable (as mentioned above,
		 * process_channel() does the proper filtering).
		 */
		event_enable(chan);
    e6ca:	68f8      	ldr	r0, [r7, #12]
    e6cc:	f7ff ff4c 	bl	e568 <event_enable>

		now = counter();
    e6d0:	f7ff ff72 	bl	e5b8 <counter>
    e6d4:	6138      	str	r0, [r7, #16]
		 * If not, try again, adjusting the CC value accordingly.
		 * Increase the CC value by a larger number of cycles in each
		 * trial to avoid spending too much time in this loop if it
		 * continuously gets interrupted and delayed by something.
		 */
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    e6d6:	693b      	ldr	r3, [r7, #16]
    e6d8:	3303      	adds	r3, #3
    e6da:	4619      	mov	r1, r3
    e6dc:	69b8      	ldr	r0, [r7, #24]
    e6de:	f00e f978 	bl	1c9d2 <counter_sub>
    e6e2:	4603      	mov	r3, r0
    e6e4:	4a1a      	ldr	r2, [pc, #104]	; (e750 <set_alarm+0xb4>)
    e6e6:	4293      	cmp	r3, r2
    e6e8:	d929      	bls.n	e73e <set_alarm+0xa2>
		    (COUNTER_HALF_SPAN - MIN_CYCLES_FROM_NOW)) {
			/* If the COMPARE event turns out to be already
			 * generated, check if the loop can be finished.
			 */
			if (event_check(chan)) {
    e6ea:	68f8      	ldr	r0, [r7, #12]
    e6ec:	f7ff ff12 	bl	e514 <event_check>
    e6f0:	4603      	mov	r3, r0
    e6f2:	2b00      	cmp	r3, #0
    e6f4:	d014      	beq.n	e720 <set_alarm+0x84>
				 * must come from the previously set CC value
				 * (the alarm is apparently rescheduled).
				 * The event needs to be cleared then and the
				 * loop needs to be continued.
				 */
				now = counter();
    e6f6:	f7ff ff5f 	bl	e5b8 <counter>
    e6fa:	6138      	str	r0, [r7, #16]
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    e6fc:	68b9      	ldr	r1, [r7, #8]
    e6fe:	6938      	ldr	r0, [r7, #16]
    e700:	f00e f967 	bl	1c9d2 <counter_sub>
    e704:	4603      	mov	r3, r0
    e706:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    e70a:	d91a      	bls.n	e742 <set_alarm+0xa6>
					event_clear(chan);
    e70c:	68f8      	ldr	r0, [r7, #12]
    e70e:	f7ff ff17 	bl	e540 <event_clear>
					if (exact) {
    e712:	79fb      	ldrb	r3, [r7, #7]
    e714:	2b00      	cmp	r3, #0
    e716:	d00a      	beq.n	e72e <set_alarm+0x92>
						ret = -EINVAL;
    e718:	f06f 0315 	mvn.w	r3, #21
    e71c:	61fb      	str	r3, [r7, #28]
						break;
    e71e:	e011      	b.n	e744 <set_alarm+0xa8>
					}
				} else {
					break;
				}
			} else if (exact) {
    e720:	79fb      	ldrb	r3, [r7, #7]
    e722:	2b00      	cmp	r3, #0
    e724:	d003      	beq.n	e72e <set_alarm+0x92>
				ret = -EINVAL;
    e726:	f06f 0315 	mvn.w	r3, #21
    e72a:	61fb      	str	r3, [r7, #28]
				break;
    e72c:	e00a      	b.n	e744 <set_alarm+0xa8>
			}

			cc_val = now + cc_inc;
    e72e:	693a      	ldr	r2, [r7, #16]
    e730:	697b      	ldr	r3, [r7, #20]
    e732:	4413      	add	r3, r2
    e734:	61bb      	str	r3, [r7, #24]
			cc_inc++;
    e736:	697b      	ldr	r3, [r7, #20]
    e738:	3301      	adds	r3, #1
    e73a:	617b      	str	r3, [r7, #20]
	for (;;) {
    e73c:	e7c1      	b.n	e6c2 <set_alarm+0x26>
		} else {
			break;
    e73e:	bf00      	nop
    e740:	e000      	b.n	e744 <set_alarm+0xa8>
					break;
    e742:	bf00      	nop
		}
	}

	return ret;
    e744:	69fb      	ldr	r3, [r7, #28]
}
    e746:	4618      	mov	r0, r3
    e748:	3720      	adds	r7, #32
    e74a:	46bd      	mov	sp, r7
    e74c:	bd80      	pop	{r7, pc}
    e74e:	bf00      	nop
    e750:	007ffffd 	.word	0x007ffffd

0000e754 <compare_set_nolocks>:

static int compare_set_nolocks(int32_t chan, uint64_t target_time,
			z_nrf_rtc_timer_compare_handler_t handler,
			void *user_data, bool exact)
{
    e754:	b5b0      	push	{r4, r5, r7, lr}
    e756:	b088      	sub	sp, #32
    e758:	af00      	add	r7, sp, #0
    e75a:	60f8      	str	r0, [r7, #12]
    e75c:	e9c7 2300 	strd	r2, r3, [r7]
	int ret = 0;
    e760:	2300      	movs	r3, #0
    e762:	61fb      	str	r3, [r7, #28]
	uint32_t cc_value = absolute_time_to_cc(target_time);
    e764:	e9d7 0100 	ldrd	r0, r1, [r7]
    e768:	f00e f942 	bl	1c9f0 <absolute_time_to_cc>
    e76c:	61b8      	str	r0, [r7, #24]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    e76e:	f000 f867 	bl	e840 <z_nrf_rtc_timer_read>
    e772:	e9c7 0104 	strd	r0, r1, [r7, #16]

	if (curr_time < target_time) {
    e776:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    e77a:	e9d7 2300 	ldrd	r2, r3, [r7]
    e77e:	4290      	cmp	r0, r2
    e780:	eb71 0303 	sbcs.w	r3, r1, r3
    e784:	d224      	bcs.n	e7d0 <compare_set_nolocks+0x7c>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    e786:	e9d7 0100 	ldrd	r0, r1, [r7]
    e78a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    e78e:	1a84      	subs	r4, r0, r2
    e790:	eb61 0503 	sbc.w	r5, r1, r3
    e794:	4b27      	ldr	r3, [pc, #156]	; (e834 <compare_set_nolocks+0xe0>)
    e796:	429c      	cmp	r4, r3
    e798:	f175 0300 	sbcs.w	r3, r5, #0
    e79c:	d302      	bcc.n	e7a4 <compare_set_nolocks+0x50>
			/* Target time is too distant. */
			return -EINVAL;
    e79e:	f06f 0315 	mvn.w	r3, #21
    e7a2:	e043      	b.n	e82c <compare_set_nolocks+0xd8>
		}

		if (target_time != cc_data[chan].target_time) {
    e7a4:	4a24      	ldr	r2, [pc, #144]	; (e838 <compare_set_nolocks+0xe4>)
    e7a6:	68fb      	ldr	r3, [r7, #12]
    e7a8:	011b      	lsls	r3, r3, #4
    e7aa:	4413      	add	r3, r2
    e7ac:	3308      	adds	r3, #8
    e7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    e7b2:	e9d7 0100 	ldrd	r0, r1, [r7]
    e7b6:	4299      	cmp	r1, r3
    e7b8:	bf08      	it	eq
    e7ba:	4290      	cmpeq	r0, r2
    e7bc:	d01b      	beq.n	e7f6 <compare_set_nolocks+0xa2>
			/* Target time is valid and is different than currently set.
			 * Set CC value.
			 */
			ret = set_alarm(chan, cc_value, exact);
    e7be:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    e7c2:	461a      	mov	r2, r3
    e7c4:	69b9      	ldr	r1, [r7, #24]
    e7c6:	68f8      	ldr	r0, [r7, #12]
    e7c8:	f7ff ff68 	bl	e69c <set_alarm>
    e7cc:	61f8      	str	r0, [r7, #28]
    e7ce:	e012      	b.n	e7f6 <compare_set_nolocks+0xa2>
		}
	} else if (!exact) {
    e7d0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    e7d4:	f083 0301 	eor.w	r3, r3, #1
    e7d8:	b2db      	uxtb	r3, r3
    e7da:	2b00      	cmp	r3, #0
    e7dc:	d008      	beq.n	e7f0 <compare_set_nolocks+0x9c>
		/* Force ISR handling when exiting from critical section. */
		atomic_or(&force_isr_mask, BIT(chan));
    e7de:	2201      	movs	r2, #1
    e7e0:	68fb      	ldr	r3, [r7, #12]
    e7e2:	fa02 f303 	lsl.w	r3, r2, r3
    e7e6:	4619      	mov	r1, r3
    e7e8:	4814      	ldr	r0, [pc, #80]	; (e83c <compare_set_nolocks+0xe8>)
    e7ea:	f00e f81e 	bl	1c82a <atomic_or>
    e7ee:	e002      	b.n	e7f6 <compare_set_nolocks+0xa2>
	} else {
		ret = -EINVAL;
    e7f0:	f06f 0315 	mvn.w	r3, #21
    e7f4:	61fb      	str	r3, [r7, #28]
	}

	if (ret == 0) {
    e7f6:	69fb      	ldr	r3, [r7, #28]
    e7f8:	2b00      	cmp	r3, #0
    e7fa:	d116      	bne.n	e82a <compare_set_nolocks+0xd6>
		cc_data[chan].target_time = target_time;
    e7fc:	4a0e      	ldr	r2, [pc, #56]	; (e838 <compare_set_nolocks+0xe4>)
    e7fe:	68fb      	ldr	r3, [r7, #12]
    e800:	011b      	lsls	r3, r3, #4
    e802:	4413      	add	r3, r2
    e804:	f103 0108 	add.w	r1, r3, #8
    e808:	e9d7 2300 	ldrd	r2, r3, [r7]
    e80c:	e9c1 2300 	strd	r2, r3, [r1]
		cc_data[chan].callback = handler;
    e810:	4a09      	ldr	r2, [pc, #36]	; (e838 <compare_set_nolocks+0xe4>)
    e812:	68fb      	ldr	r3, [r7, #12]
    e814:	011b      	lsls	r3, r3, #4
    e816:	4413      	add	r3, r2
    e818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e81a:	601a      	str	r2, [r3, #0]
		cc_data[chan].user_context = user_data;
    e81c:	4a06      	ldr	r2, [pc, #24]	; (e838 <compare_set_nolocks+0xe4>)
    e81e:	68fb      	ldr	r3, [r7, #12]
    e820:	011b      	lsls	r3, r3, #4
    e822:	4413      	add	r3, r2
    e824:	3304      	adds	r3, #4
    e826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e828:	601a      	str	r2, [r3, #0]
	}

	return ret;
    e82a:	69fb      	ldr	r3, [r7, #28]
}
    e82c:	4618      	mov	r0, r3
    e82e:	3720      	adds	r7, #32
    e830:	46bd      	mov	sp, r7
    e832:	bdb0      	pop	{r4, r5, r7, pc}
    e834:	00800001 	.word	0x00800001
    e838:	2000c778 	.word	0x2000c778
    e83c:	2000c998 	.word	0x2000c998

0000e840 <z_nrf_rtc_timer_read>:

	compare_int_unlock(chan, key);
}

uint64_t z_nrf_rtc_timer_read(void)
{
    e840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    e844:	b084      	sub	sp, #16
    e846:	af00      	add	r7, sp, #0
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    e848:	4b1f      	ldr	r3, [pc, #124]	; (e8c8 <z_nrf_rtc_timer_read+0x88>)
    e84a:	681b      	ldr	r3, [r3, #0]
    e84c:	2200      	movs	r2, #0
    e84e:	4618      	mov	r0, r3
    e850:	4611      	mov	r1, r2
    e852:	f04f 0200 	mov.w	r2, #0
    e856:	f04f 0300 	mov.w	r3, #0
    e85a:	060b      	lsls	r3, r1, #24
    e85c:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
    e860:	0602      	lsls	r2, r0, #24
    e862:	e9c7 2302 	strd	r2, r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
    e866:	f3bf 8f5f 	dmb	sy
}
    e86a:	bf00      	nop
}
    e86c:	bf00      	nop
}
    e86e:	bf00      	nop

	barrier_dmem_fence_full();

	uint32_t cntr = counter();
    e870:	f7ff fea2 	bl	e5b8 <counter>
    e874:	6078      	str	r0, [r7, #4]

	val += cntr;
    e876:	687b      	ldr	r3, [r7, #4]
    e878:	2200      	movs	r2, #0
    e87a:	461c      	mov	r4, r3
    e87c:	4615      	mov	r5, r2
    e87e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    e882:	eb12 0a04 	adds.w	sl, r2, r4
    e886:	eb43 0b05 	adc.w	fp, r3, r5
    e88a:	e9c7 ab02 	strd	sl, fp, [r7, #8]

	if (cntr < OVERFLOW_RISK_RANGE_END) {
    e88e:	687b      	ldr	r3, [r7, #4]
    e890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    e894:	d210      	bcs.n	e8b8 <z_nrf_rtc_timer_read+0x78>
		 * due to possibility that this code preempted overflow interrupt before final write
		 * of `overflow_cnt`. Update of `anchor` occurs far in time from this moment, so
		 * `anchor` is considered valid and stable. Because of this timing there is no risk
		 * of incorrect `anchor` value caused by non-atomic read of 64-bit `anchor`.
		 */
		if (val < anchor) {
    e896:	4b0d      	ldr	r3, [pc, #52]	; (e8cc <z_nrf_rtc_timer_read+0x8c>)
    e898:	e9d3 2300 	ldrd	r2, r3, [r3]
    e89c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    e8a0:	4290      	cmp	r0, r2
    e8a2:	eb71 0303 	sbcs.w	r3, r1, r3
    e8a6:	d207      	bcs.n	e8b8 <z_nrf_rtc_timer_read+0x78>
			/* Unhandled overflow, detected, let's add correction */
			val += COUNTER_SPAN;
    e8a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    e8ac:	f112 7880 	adds.w	r8, r2, #16777216	; 0x1000000
    e8b0:	f143 0900 	adc.w	r9, r3, #0
    e8b4:	e9c7 8902 	strd	r8, r9, [r7, #8]
		/* `overflow_cnt` is considered valid and stable in this range, no need to
		 * check validity using `anchor`
		 */
	}

	return val;
    e8b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
    e8bc:	4610      	mov	r0, r2
    e8be:	4619      	mov	r1, r3
    e8c0:	3710      	adds	r7, #16
    e8c2:	46bd      	mov	sp, r7
    e8c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    e8c8:	2000c990 	.word	0x2000c990
    e8cc:	2000c768 	.word	0x2000c768

0000e8d0 <anchor_update>:
{
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
}

static inline void anchor_update(uint32_t cc_value)
{
    e8d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    e8d4:	b084      	sub	sp, #16
    e8d6:	af00      	add	r7, sp, #0
    e8d8:	60f8      	str	r0, [r7, #12]
	/* Update anchor when far from overflow */
	if (in_anchor_range(cc_value)) {
    e8da:	68f8      	ldr	r0, [r7, #12]
    e8dc:	f00e f8dd 	bl	1ca9a <in_anchor_range>
    e8e0:	4603      	mov	r3, r0
    e8e2:	2b00      	cmp	r3, #0
    e8e4:	d017      	beq.n	e916 <anchor_update+0x46>
		/* In this range `overflow_cnt` is considered valid and stable.
		 * Write of 64-bit `anchor` is non atomic. However it happens
		 * far in time from the moment the `anchor` is read in
		 * `z_nrf_rtc_timer_read`.
		 */
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    e8e6:	4b0e      	ldr	r3, [pc, #56]	; (e920 <anchor_update+0x50>)
    e8e8:	681b      	ldr	r3, [r3, #0]
    e8ea:	2200      	movs	r2, #0
    e8ec:	469a      	mov	sl, r3
    e8ee:	4693      	mov	fp, r2
    e8f0:	ea4f 251a 	mov.w	r5, sl, lsr #8
    e8f4:	ea4f 640a 	mov.w	r4, sl, lsl #24
    e8f8:	68fb      	ldr	r3, [r7, #12]
    e8fa:	2200      	movs	r2, #0
    e8fc:	4698      	mov	r8, r3
    e8fe:	4691      	mov	r9, r2
    e900:	eb14 0308 	adds.w	r3, r4, r8
    e904:	603b      	str	r3, [r7, #0]
    e906:	eb45 0309 	adc.w	r3, r5, r9
    e90a:	607b      	str	r3, [r7, #4]
    e90c:	4b05      	ldr	r3, [pc, #20]	; (e924 <anchor_update+0x54>)
    e90e:	e9d7 1200 	ldrd	r1, r2, [r7]
    e912:	e9c3 1200 	strd	r1, r2, [r3]
	}
}
    e916:	bf00      	nop
    e918:	3710      	adds	r7, #16
    e91a:	46bd      	mov	sp, r7
    e91c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    e920:	2000c990 	.word	0x2000c990
    e924:	2000c768 	.word	0x2000c768

0000e928 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    e928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e92c:	b087      	sub	sp, #28
    e92e:	af00      	add	r7, sp, #0
    e930:	60f8      	str	r0, [r7, #12]
    e932:	e9c7 2300 	strd	r2, r3, [r7]
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    e936:	e9d7 0100 	ldrd	r0, r1, [r7]
    e93a:	f00e f859 	bl	1c9f0 <absolute_time_to_cc>
    e93e:	6178      	str	r0, [r7, #20]
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    e940:	6839      	ldr	r1, [r7, #0]
    e942:	4b1b      	ldr	r3, [pc, #108]	; (e9b0 <sys_clock_timeout_handler+0x88>)
    e944:	e9d3 2300 	ldrd	r2, r3, [r3]
    e948:	4613      	mov	r3, r2
    e94a:	1ace      	subs	r6, r1, r3
    e94c:	f00d ff59 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    e950:	4603      	mov	r3, r0
    e952:	2b00      	cmp	r3, #0
    e954:	da02      	bge.n	e95c <sys_clock_timeout_handler+0x34>
    e956:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    e95a:	337f      	adds	r3, #127	; 0x7f
    e95c:	13db      	asrs	r3, r3, #15
    e95e:	fbb6 f3f3 	udiv	r3, r6, r3
    e962:	613b      	str	r3, [r7, #16]

	last_count += dticks * CYC_PER_TICK;
    e964:	f00d ff4d 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    e968:	4603      	mov	r3, r0
    e96a:	2b00      	cmp	r3, #0
    e96c:	da02      	bge.n	e974 <sys_clock_timeout_handler+0x4c>
    e96e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    e972:	337f      	adds	r3, #127	; 0x7f
    e974:	13db      	asrs	r3, r3, #15
    e976:	461a      	mov	r2, r3
    e978:	693b      	ldr	r3, [r7, #16]
    e97a:	fb02 f303 	mul.w	r3, r2, r3
    e97e:	2200      	movs	r2, #0
    e980:	461c      	mov	r4, r3
    e982:	4615      	mov	r5, r2
    e984:	4b0a      	ldr	r3, [pc, #40]	; (e9b0 <sys_clock_timeout_handler+0x88>)
    e986:	e9d3 2300 	ldrd	r2, r3, [r3]
    e98a:	eb14 0802 	adds.w	r8, r4, r2
    e98e:	eb45 0903 	adc.w	r9, r5, r3
    e992:	4b07      	ldr	r3, [pc, #28]	; (e9b0 <sys_clock_timeout_handler+0x88>)
    e994:	e9c3 8900 	strd	r8, r9, [r3]

	anchor_update(cc_value);
    e998:	6978      	ldr	r0, [r7, #20]
    e99a:	f7ff ff99 	bl	e8d0 <anchor_update>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL, false);
	}

	sys_clock_announce(dticks);
    e99e:	693b      	ldr	r3, [r7, #16]
    e9a0:	4618      	mov	r0, r3
    e9a2:	f008 fb75 	bl	17090 <sys_clock_announce>
}
    e9a6:	bf00      	nop
    e9a8:	371c      	adds	r7, #28
    e9aa:	46bd      	mov	sp, r7
    e9ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e9b0:	2000c770 	.word	0x2000c770

0000e9b4 <channel_processing_check_and_clear>:

static bool channel_processing_check_and_clear(int32_t chan)
{
    e9b4:	b580      	push	{r7, lr}
    e9b6:	b082      	sub	sp, #8
    e9b8:	af00      	add	r7, sp, #0
    e9ba:	6078      	str	r0, [r7, #4]
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_CHANNEL_INT_MASK(chan))) {
    e9bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e9c0:	687b      	ldr	r3, [r7, #4]
    e9c2:	fa02 f303 	lsl.w	r3, r2, r3
    e9c6:	4619      	mov	r1, r3
    e9c8:	4813      	ldr	r0, [pc, #76]	; (ea18 <channel_processing_check_and_clear+0x64>)
    e9ca:	f00d ff91 	bl	1c8f0 <nrf_rtc_int_enable_check>
    e9ce:	4603      	mov	r3, r0
    e9d0:	2b00      	cmp	r3, #0
    e9d2:	d01c      	beq.n	ea0e <channel_processing_check_and_clear+0x5a>
		/* The processing of channel can be caused by CC match
		 * or be forced.
		 */
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    e9d4:	2201      	movs	r2, #1
    e9d6:	687b      	ldr	r3, [r7, #4]
    e9d8:	fa02 f303 	lsl.w	r3, r2, r3
    e9dc:	43db      	mvns	r3, r3
    e9de:	4619      	mov	r1, r3
    e9e0:	480e      	ldr	r0, [pc, #56]	; (ea1c <channel_processing_check_and_clear+0x68>)
    e9e2:	f00d ff37 	bl	1c854 <atomic_and>
    e9e6:	4603      	mov	r3, r0
    e9e8:	461a      	mov	r2, r3
    e9ea:	687b      	ldr	r3, [r7, #4]
    e9ec:	fa22 f303 	lsr.w	r3, r2, r3
    e9f0:	f003 0301 	and.w	r3, r3, #1
    e9f4:	2b00      	cmp	r3, #0
    e9f6:	d105      	bne.n	ea04 <channel_processing_check_and_clear+0x50>
		    event_check(chan)) {
    e9f8:	6878      	ldr	r0, [r7, #4]
    e9fa:	f7ff fd8b 	bl	e514 <event_check>
    e9fe:	4603      	mov	r3, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    ea00:	2b00      	cmp	r3, #0
    ea02:	d004      	beq.n	ea0e <channel_processing_check_and_clear+0x5a>
			event_clear(chan);
    ea04:	6878      	ldr	r0, [r7, #4]
    ea06:	f7ff fd9b 	bl	e540 <event_clear>
			return true;
    ea0a:	2301      	movs	r3, #1
    ea0c:	e000      	b.n	ea10 <channel_processing_check_and_clear+0x5c>
		}
	}

	return false;
    ea0e:	2300      	movs	r3, #0
}
    ea10:	4618      	mov	r0, r3
    ea12:	3708      	adds	r7, #8
    ea14:	46bd      	mov	sp, r7
    ea16:	bd80      	pop	{r7, pc}
    ea18:	40015000 	.word	0x40015000
    ea1c:	2000c998 	.word	0x2000c998

0000ea20 <process_channel>:

static void process_channel(int32_t chan)
{
    ea20:	b580      	push	{r7, lr}
    ea22:	b08c      	sub	sp, #48	; 0x30
    ea24:	af02      	add	r7, sp, #8
    ea26:	6078      	str	r0, [r7, #4]
	if (channel_processing_check_and_clear(chan)) {
    ea28:	6878      	ldr	r0, [r7, #4]
    ea2a:	f7ff ffc3 	bl	e9b4 <channel_processing_check_and_clear>
    ea2e:	4603      	mov	r3, r0
    ea30:	2b00      	cmp	r3, #0
    ea32:	d04b      	beq.n	eacc <process_channel+0xac>
		void *user_context;
		uint32_t mcu_critical_state;
		uint64_t curr_time;
		uint64_t expire_time;
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    ea34:	2300      	movs	r3, #0
    ea36:	623b      	str	r3, [r7, #32]

		curr_time = z_nrf_rtc_timer_read();
    ea38:	f7ff ff02 	bl	e840 <z_nrf_rtc_timer_read>
    ea3c:	e9c7 0106 	strd	r0, r1, [r7, #24]

		/* This critical section is used to provide atomic access to
		 * cc_data structure and prevent higher priority contexts
		 * (including ZLIs) from overwriting it.
		 */
		mcu_critical_state = full_int_lock();
    ea40:	f00d ffe3 	bl	1ca0a <full_int_lock>
    ea44:	6178      	str	r0, [r7, #20]

		/* If target_time is in the past or is equal to current time
		 * value, execute the handler.
		 */
		expire_time = cc_data[chan].target_time;
    ea46:	4a23      	ldr	r2, [pc, #140]	; (ead4 <process_channel+0xb4>)
    ea48:	687b      	ldr	r3, [r7, #4]
    ea4a:	011b      	lsls	r3, r3, #4
    ea4c:	4413      	add	r3, r2
    ea4e:	3308      	adds	r3, #8
    ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea54:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if (curr_time >= expire_time) {
    ea58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
    ea5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    ea60:	4290      	cmp	r0, r2
    ea62:	eb71 0303 	sbcs.w	r3, r1, r3
    ea66:	d324      	bcc.n	eab2 <process_channel+0x92>
			handler = cc_data[chan].callback;
    ea68:	4a1a      	ldr	r2, [pc, #104]	; (ead4 <process_channel+0xb4>)
    ea6a:	687b      	ldr	r3, [r7, #4]
    ea6c:	011b      	lsls	r3, r3, #4
    ea6e:	4413      	add	r3, r2
    ea70:	681b      	ldr	r3, [r3, #0]
    ea72:	623b      	str	r3, [r7, #32]
			user_context = cc_data[chan].user_context;
    ea74:	4a17      	ldr	r2, [pc, #92]	; (ead4 <process_channel+0xb4>)
    ea76:	687b      	ldr	r3, [r7, #4]
    ea78:	011b      	lsls	r3, r3, #4
    ea7a:	4413      	add	r3, r2
    ea7c:	3304      	adds	r3, #4
    ea7e:	681b      	ldr	r3, [r3, #0]
    ea80:	627b      	str	r3, [r7, #36]	; 0x24
			cc_data[chan].callback = NULL;
    ea82:	4a14      	ldr	r2, [pc, #80]	; (ead4 <process_channel+0xb4>)
    ea84:	687b      	ldr	r3, [r7, #4]
    ea86:	011b      	lsls	r3, r3, #4
    ea88:	4413      	add	r3, r2
    ea8a:	2200      	movs	r2, #0
    ea8c:	601a      	str	r2, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    ea8e:	4a11      	ldr	r2, [pc, #68]	; (ead4 <process_channel+0xb4>)
    ea90:	687b      	ldr	r3, [r7, #4]
    ea92:	011b      	lsls	r3, r3, #4
    ea94:	4413      	add	r3, r2
    ea96:	f103 0108 	add.w	r1, r3, #8
    ea9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ea9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eaa2:	e9c1 2300 	strd	r2, r3, [r1]
			event_disable(chan);
    eaa6:	6878      	ldr	r0, [r7, #4]
    eaa8:	f7ff fd72 	bl	e590 <event_disable>
			 * it may turn out that another COMPARE event has been
			 * generated for the same alarm. Make sure the event
			 * is cleared, so that the ISR is not executed again
			 * unnecessarily.
			 */
			event_clear(chan);
    eaac:	6878      	ldr	r0, [r7, #4]
    eaae:	f7ff fd47 	bl	e540 <event_clear>
		}

		full_int_unlock(mcu_critical_state);
    eab2:	6978      	ldr	r0, [r7, #20]
    eab4:	f00d ffbe 	bl	1ca34 <full_int_unlock>

		if (handler) {
    eab8:	6a3b      	ldr	r3, [r7, #32]
    eaba:	2b00      	cmp	r3, #0
    eabc:	d006      	beq.n	eacc <process_channel+0xac>
			handler(chan, expire_time, user_context);
    eabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eac0:	9300      	str	r3, [sp, #0]
    eac2:	6a39      	ldr	r1, [r7, #32]
    eac4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    eac8:	6878      	ldr	r0, [r7, #4]
    eaca:	4788      	blx	r1
		}
	}
}
    eacc:	bf00      	nop
    eace:	3728      	adds	r7, #40	; 0x28
    ead0:	46bd      	mov	sp, r7
    ead2:	bd80      	pop	{r7, pc}
    ead4:	2000c778 	.word	0x2000c778

0000ead8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    ead8:	b580      	push	{r7, lr}
    eada:	b084      	sub	sp, #16
    eadc:	af00      	add	r7, sp, #0
    eade:	6078      	str	r0, [r7, #4]

	if (RTC_PRETICK) {
		rtc_pretick_rtc1_isr_hook();
	}

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    eae0:	2102      	movs	r1, #2
    eae2:	4814      	ldr	r0, [pc, #80]	; (eb34 <rtc_nrf_isr+0x5c>)
    eae4:	f00d ff04 	bl	1c8f0 <nrf_rtc_int_enable_check>
    eae8:	4603      	mov	r3, r0
    eaea:	2b00      	cmp	r3, #0
    eaec:	d011      	beq.n	eb12 <rtc_nrf_isr+0x3a>
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
    eaee:	f44f 7182 	mov.w	r1, #260	; 0x104
    eaf2:	4810      	ldr	r0, [pc, #64]	; (eb34 <rtc_nrf_isr+0x5c>)
    eaf4:	f00d ff0b 	bl	1c90e <nrf_rtc_event_check>
    eaf8:	4603      	mov	r3, r0
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    eafa:	2b00      	cmp	r3, #0
    eafc:	d009      	beq.n	eb12 <rtc_nrf_isr+0x3a>
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
    eafe:	f44f 7182 	mov.w	r1, #260	; 0x104
    eb02:	480c      	ldr	r0, [pc, #48]	; (eb34 <rtc_nrf_isr+0x5c>)
    eb04:	f00d ff17 	bl	1c936 <nrf_rtc_event_clear>
		overflow_cnt++;
    eb08:	4b0b      	ldr	r3, [pc, #44]	; (eb38 <rtc_nrf_isr+0x60>)
    eb0a:	681b      	ldr	r3, [r3, #0]
    eb0c:	3301      	adds	r3, #1
    eb0e:	4a0a      	ldr	r2, [pc, #40]	; (eb38 <rtc_nrf_isr+0x60>)
    eb10:	6013      	str	r3, [r2, #0]
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    eb12:	2300      	movs	r3, #0
    eb14:	60fb      	str	r3, [r7, #12]
    eb16:	e005      	b.n	eb24 <rtc_nrf_isr+0x4c>
		process_channel(chan);
    eb18:	68f8      	ldr	r0, [r7, #12]
    eb1a:	f7ff ff81 	bl	ea20 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    eb1e:	68fb      	ldr	r3, [r7, #12]
    eb20:	3301      	adds	r3, #1
    eb22:	60fb      	str	r3, [r7, #12]
    eb24:	68fb      	ldr	r3, [r7, #12]
    eb26:	2b00      	cmp	r3, #0
    eb28:	ddf6      	ble.n	eb18 <rtc_nrf_isr+0x40>
	}
}
    eb2a:	bf00      	nop
    eb2c:	bf00      	nop
    eb2e:	3710      	adds	r7, #16
    eb30:	46bd      	mov	sp, r7
    eb32:	bd80      	pop	{r7, pc}
    eb34:	40015000 	.word	0x40015000
    eb38:	2000c990 	.word	0x2000c990

0000eb3c <sys_clock_set_timeout>:

	return err;
}

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    eb3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    eb40:	b08b      	sub	sp, #44	; 0x2c
    eb42:	af04      	add	r7, sp, #16
    eb44:	6078      	str	r0, [r7, #4]
    eb46:	460b      	mov	r3, r1
    eb48:	70fb      	strb	r3, [r7, #3]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	if (ticks == K_TICKS_FOREVER) {
    eb4a:	687b      	ldr	r3, [r7, #4]
    eb4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    eb50:	d125      	bne.n	eb9e <sys_clock_set_timeout+0x62>
		cyc = MAX_TICKS * CYC_PER_TICK;
    eb52:	f00d fe56 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    eb56:	4603      	mov	r3, r0
    eb58:	2b00      	cmp	r3, #0
    eb5a:	da02      	bge.n	eb62 <sys_clock_set_timeout+0x26>
    eb5c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    eb60:	337f      	adds	r3, #127	; 0x7f
    eb62:	13db      	asrs	r3, r3, #15
    eb64:	f5c3 0600 	rsb	r6, r3, #8388608	; 0x800000
    eb68:	f00d fe4b 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    eb6c:	4603      	mov	r3, r0
    eb6e:	2b00      	cmp	r3, #0
    eb70:	da02      	bge.n	eb78 <sys_clock_set_timeout+0x3c>
    eb72:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    eb76:	337f      	adds	r3, #127	; 0x7f
    eb78:	13db      	asrs	r3, r3, #15
    eb7a:	fbb6 f6f3 	udiv	r6, r6, r3
    eb7e:	f00d fe40 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    eb82:	4603      	mov	r3, r0
    eb84:	2b00      	cmp	r3, #0
    eb86:	da02      	bge.n	eb8e <sys_clock_set_timeout+0x52>
    eb88:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    eb8c:	337f      	adds	r3, #127	; 0x7f
    eb8e:	13db      	asrs	r3, r3, #15
    eb90:	fb06 f303 	mul.w	r3, r6, r3
    eb94:	617b      	str	r3, [r7, #20]
		sys_busy = false;
    eb96:	4b74      	ldr	r3, [pc, #464]	; (ed68 <sys_clock_set_timeout+0x22c>)
    eb98:	2200      	movs	r2, #0
    eb9a:	701a      	strb	r2, [r3, #0]
    eb9c:	e048      	b.n	ec30 <sys_clock_set_timeout+0xf4>
	} else {
		/* Value of ticks can be zero or negative, what means "announce
		 * the next tick" (the same as ticks equal to 1).
		 */
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    eb9e:	687b      	ldr	r3, [r7, #4]
    eba0:	2b01      	cmp	r3, #1
    eba2:	dd32      	ble.n	ec0a <sys_clock_set_timeout+0xce>
    eba4:	f00d fe2d 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    eba8:	4603      	mov	r3, r0
    ebaa:	2b00      	cmp	r3, #0
    ebac:	da02      	bge.n	ebb4 <sys_clock_set_timeout+0x78>
    ebae:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ebb2:	337f      	adds	r3, #127	; 0x7f
    ebb4:	13db      	asrs	r3, r3, #15
    ebb6:	f5c3 0600 	rsb	r6, r3, #8388608	; 0x800000
    ebba:	f00d fe22 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ebbe:	4603      	mov	r3, r0
    ebc0:	2b00      	cmp	r3, #0
    ebc2:	da02      	bge.n	ebca <sys_clock_set_timeout+0x8e>
    ebc4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ebc8:	337f      	adds	r3, #127	; 0x7f
    ebca:	13db      	asrs	r3, r3, #15
    ebcc:	fbb6 f3f3 	udiv	r3, r6, r3
    ebd0:	461a      	mov	r2, r3
    ebd2:	687b      	ldr	r3, [r7, #4]
    ebd4:	4293      	cmp	r3, r2
    ebd6:	db16      	blt.n	ec06 <sys_clock_set_timeout+0xca>
    ebd8:	f00d fe13 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ebdc:	4603      	mov	r3, r0
    ebde:	2b00      	cmp	r3, #0
    ebe0:	da02      	bge.n	ebe8 <sys_clock_set_timeout+0xac>
    ebe2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ebe6:	337f      	adds	r3, #127	; 0x7f
    ebe8:	13db      	asrs	r3, r3, #15
    ebea:	f5c3 0600 	rsb	r6, r3, #8388608	; 0x800000
    ebee:	f00d fe08 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ebf2:	4603      	mov	r3, r0
    ebf4:	2b00      	cmp	r3, #0
    ebf6:	da02      	bge.n	ebfe <sys_clock_set_timeout+0xc2>
    ebf8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ebfc:	337f      	adds	r3, #127	; 0x7f
    ebfe:	13db      	asrs	r3, r3, #15
    ec00:	fbb6 f3f3 	udiv	r3, r6, r3
    ec04:	e002      	b.n	ec0c <sys_clock_set_timeout+0xd0>
    ec06:	687b      	ldr	r3, [r7, #4]
    ec08:	e000      	b.n	ec0c <sys_clock_set_timeout+0xd0>
    ec0a:	2301      	movs	r3, #1
    ec0c:	617b      	str	r3, [r7, #20]
		cyc *= CYC_PER_TICK;
    ec0e:	f00d fdf8 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ec12:	4603      	mov	r3, r0
    ec14:	2b00      	cmp	r3, #0
    ec16:	da02      	bge.n	ec1e <sys_clock_set_timeout+0xe2>
    ec18:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ec1c:	337f      	adds	r3, #127	; 0x7f
    ec1e:	13db      	asrs	r3, r3, #15
    ec20:	461a      	mov	r2, r3
    ec22:	697b      	ldr	r3, [r7, #20]
    ec24:	fb02 f303 	mul.w	r3, r2, r3
    ec28:	617b      	str	r3, [r7, #20]
		sys_busy = true;
    ec2a:	4b4f      	ldr	r3, [pc, #316]	; (ed68 <sys_clock_set_timeout+0x22c>)
    ec2c:	2201      	movs	r2, #1
    ec2e:	701a      	strb	r2, [r3, #0]
	}

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    ec30:	f7ff fe06 	bl	e840 <z_nrf_rtc_timer_read>
    ec34:	4602      	mov	r2, r0
    ec36:	460b      	mov	r3, r1
    ec38:	4611      	mov	r1, r2
    ec3a:	4b4c      	ldr	r3, [pc, #304]	; (ed6c <sys_clock_set_timeout+0x230>)
    ec3c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ec40:	4613      	mov	r3, r2
    ec42:	1acb      	subs	r3, r1, r3
    ec44:	613b      	str	r3, [r7, #16]
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    ec46:	693b      	ldr	r3, [r7, #16]
    ec48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    ec4c:	d301      	bcc.n	ec52 <sys_clock_set_timeout+0x116>
		cyc = 0;
    ec4e:	2300      	movs	r3, #0
    ec50:	617b      	str	r3, [r7, #20]
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc += unannounced;
    ec52:	697a      	ldr	r2, [r7, #20]
    ec54:	693b      	ldr	r3, [r7, #16]
    ec56:	4413      	add	r3, r2
    ec58:	617b      	str	r3, [r7, #20]
	cyc = DIV_ROUND_UP(cyc, CYC_PER_TICK) * CYC_PER_TICK;
    ec5a:	f00d fdd2 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ec5e:	4603      	mov	r3, r0
    ec60:	2b00      	cmp	r3, #0
    ec62:	da02      	bge.n	ec6a <sys_clock_set_timeout+0x12e>
    ec64:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ec68:	337f      	adds	r3, #127	; 0x7f
    ec6a:	13db      	asrs	r3, r3, #15
    ec6c:	461a      	mov	r2, r3
    ec6e:	697b      	ldr	r3, [r7, #20]
    ec70:	4413      	add	r3, r2
    ec72:	1e5e      	subs	r6, r3, #1
    ec74:	f00d fdc5 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ec78:	4603      	mov	r3, r0
    ec7a:	2b00      	cmp	r3, #0
    ec7c:	da02      	bge.n	ec84 <sys_clock_set_timeout+0x148>
    ec7e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ec82:	337f      	adds	r3, #127	; 0x7f
    ec84:	13db      	asrs	r3, r3, #15
    ec86:	fbb6 f6f3 	udiv	r6, r6, r3
    ec8a:	f00d fdba 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ec8e:	4603      	mov	r3, r0
    ec90:	2b00      	cmp	r3, #0
    ec92:	da02      	bge.n	ec9a <sys_clock_set_timeout+0x15e>
    ec94:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ec98:	337f      	adds	r3, #127	; 0x7f
    ec9a:	13db      	asrs	r3, r3, #15
    ec9c:	fb06 f303 	mul.w	r3, r6, r3
    eca0:	617b      	str	r3, [r7, #20]
	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 * This limitation also guarantees that the anchor will be properly
	 * updated before every overflow (see anchor_update()).
	 */
	if (cyc > MAX_CYCLES) {
    eca2:	f00d fdae 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    eca6:	4603      	mov	r3, r0
    eca8:	2b00      	cmp	r3, #0
    ecaa:	da02      	bge.n	ecb2 <sys_clock_set_timeout+0x176>
    ecac:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ecb0:	337f      	adds	r3, #127	; 0x7f
    ecb2:	13db      	asrs	r3, r3, #15
    ecb4:	f5c3 0600 	rsb	r6, r3, #8388608	; 0x800000
    ecb8:	f00d fda3 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ecbc:	4603      	mov	r3, r0
    ecbe:	2b00      	cmp	r3, #0
    ecc0:	da02      	bge.n	ecc8 <sys_clock_set_timeout+0x18c>
    ecc2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ecc6:	337f      	adds	r3, #127	; 0x7f
    ecc8:	13db      	asrs	r3, r3, #15
    ecca:	fbb6 f6f3 	udiv	r6, r6, r3
    ecce:	f00d fd98 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ecd2:	4603      	mov	r3, r0
    ecd4:	2b00      	cmp	r3, #0
    ecd6:	da02      	bge.n	ecde <sys_clock_set_timeout+0x1a2>
    ecd8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ecdc:	337f      	adds	r3, #127	; 0x7f
    ecde:	13db      	asrs	r3, r3, #15
    ece0:	fb06 f303 	mul.w	r3, r6, r3
    ece4:	697a      	ldr	r2, [r7, #20]
    ece6:	429a      	cmp	r2, r3
    ece8:	d921      	bls.n	ed2e <sys_clock_set_timeout+0x1f2>
		cyc = MAX_CYCLES;
    ecea:	f00d fd8a 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ecee:	4603      	mov	r3, r0
    ecf0:	2b00      	cmp	r3, #0
    ecf2:	da02      	bge.n	ecfa <sys_clock_set_timeout+0x1be>
    ecf4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ecf8:	337f      	adds	r3, #127	; 0x7f
    ecfa:	13db      	asrs	r3, r3, #15
    ecfc:	f5c3 0600 	rsb	r6, r3, #8388608	; 0x800000
    ed00:	f00d fd7f 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ed04:	4603      	mov	r3, r0
    ed06:	2b00      	cmp	r3, #0
    ed08:	da02      	bge.n	ed10 <sys_clock_set_timeout+0x1d4>
    ed0a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ed0e:	337f      	adds	r3, #127	; 0x7f
    ed10:	13db      	asrs	r3, r3, #15
    ed12:	fbb6 f6f3 	udiv	r6, r6, r3
    ed16:	f00d fd74 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ed1a:	4603      	mov	r3, r0
    ed1c:	2b00      	cmp	r3, #0
    ed1e:	da02      	bge.n	ed26 <sys_clock_set_timeout+0x1ea>
    ed20:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ed24:	337f      	adds	r3, #127	; 0x7f
    ed26:	13db      	asrs	r3, r3, #15
    ed28:	fb06 f303 	mul.w	r3, r6, r3
    ed2c:	617b      	str	r3, [r7, #20]
	}

	uint64_t target_time = cyc + last_count;
    ed2e:	697b      	ldr	r3, [r7, #20]
    ed30:	2200      	movs	r2, #0
    ed32:	461c      	mov	r4, r3
    ed34:	4615      	mov	r5, r2
    ed36:	4b0d      	ldr	r3, [pc, #52]	; (ed6c <sys_clock_set_timeout+0x230>)
    ed38:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed3c:	eb14 0802 	adds.w	r8, r4, r2
    ed40:	eb45 0903 	adc.w	r9, r5, r3
    ed44:	e9c7 8902 	strd	r8, r9, [r7, #8]

	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
    ed48:	2300      	movs	r3, #0
    ed4a:	9302      	str	r3, [sp, #8]
    ed4c:	2300      	movs	r3, #0
    ed4e:	9301      	str	r3, [sp, #4]
    ed50:	4b07      	ldr	r3, [pc, #28]	; (ed70 <sys_clock_set_timeout+0x234>)
    ed52:	9300      	str	r3, [sp, #0]
    ed54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    ed58:	2000      	movs	r0, #0
    ed5a:	f00d fe7c 	bl	1ca56 <compare_set>
}
    ed5e:	371c      	adds	r7, #28
    ed60:	46bd      	mov	sp, r7
    ed62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ed66:	bf00      	nop
    ed68:	2000ce9f 	.word	0x2000ce9f
    ed6c:	2000c770 	.word	0x2000c770
    ed70:	0000e929 	.word	0x0000e929

0000ed74 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    ed74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    ed78:	af00      	add	r7, sp, #0
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    ed7a:	f7ff fd61 	bl	e840 <z_nrf_rtc_timer_read>
    ed7e:	4b0f      	ldr	r3, [pc, #60]	; (edbc <sys_clock_elapsed+0x48>)
    ed80:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed84:	1a84      	subs	r4, r0, r2
    ed86:	eb61 0503 	sbc.w	r5, r1, r3
    ed8a:	f00d fd3a 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ed8e:	4603      	mov	r3, r0
    ed90:	2b00      	cmp	r3, #0
    ed92:	da02      	bge.n	ed9a <sys_clock_elapsed+0x26>
    ed94:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ed98:	337f      	adds	r3, #127	; 0x7f
    ed9a:	13db      	asrs	r3, r3, #15
    ed9c:	17da      	asrs	r2, r3, #31
    ed9e:	4698      	mov	r8, r3
    eda0:	4691      	mov	r9, r2
    eda2:	4642      	mov	r2, r8
    eda4:	464b      	mov	r3, r9
    eda6:	4620      	mov	r0, r4
    eda8:	4629      	mov	r1, r5
    edaa:	f7f9 f9cb 	bl	8144 <__aeabi_uldivmod>
    edae:	4602      	mov	r2, r0
    edb0:	460b      	mov	r3, r1
    edb2:	4613      	mov	r3, r2
}
    edb4:	4618      	mov	r0, r3
    edb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    edba:	bf00      	nop
    edbc:	2000c770 	.word	0x2000c770

0000edc0 <int_event_disable_rtc>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static void int_event_disable_rtc(void)
{
    edc0:	b580      	push	{r7, lr}
    edc2:	b082      	sub	sp, #8
    edc4:	af00      	add	r7, sp, #0
	uint32_t mask = NRF_RTC_INT_TICK_MASK     |
    edc6:	4b07      	ldr	r3, [pc, #28]	; (ede4 <int_event_disable_rtc+0x24>)
    edc8:	607b      	str	r3, [r7, #4]
			NRF_RTC_INT_COMPARE1_MASK |
			NRF_RTC_INT_COMPARE2_MASK |
			NRF_RTC_INT_COMPARE3_MASK;

	/* Reset interrupt enabling to expected reset values */
	nrf_rtc_int_disable(RTC, mask);
    edca:	6879      	ldr	r1, [r7, #4]
    edcc:	4806      	ldr	r0, [pc, #24]	; (ede8 <int_event_disable_rtc+0x28>)
    edce:	f00d fd81 	bl	1c8d4 <nrf_rtc_int_disable>

	/* Reset event routing enabling to expected reset values */
	nrf_rtc_event_disable(RTC, mask);
    edd2:	6879      	ldr	r1, [r7, #4]
    edd4:	4804      	ldr	r0, [pc, #16]	; (ede8 <int_event_disable_rtc+0x28>)
    edd6:	f00d fdee 	bl	1c9b6 <nrf_rtc_event_disable>
}
    edda:	bf00      	nop
    eddc:	3708      	adds	r7, #8
    edde:	46bd      	mov	sp, r7
    ede0:	bd80      	pop	{r7, pc}
    ede2:	bf00      	nop
    ede4:	000f0003 	.word	0x000f0003
    ede8:	40015000 	.word	0x40015000

0000edec <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    edec:	b5f0      	push	{r4, r5, r6, r7, lr}
    edee:	b087      	sub	sp, #28
    edf0:	af04      	add	r7, sp, #16
			CLOCK_CONTROL_NRF_LF_START_NOWAIT :
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	int_event_disable_rtc();
    edf2:	f7ff ffe5 	bl	edc0 <int_event_disable_rtc>

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
    edf6:	2100      	movs	r1, #0
    edf8:	483a      	ldr	r0, [pc, #232]	; (eee4 <sys_clock_driver_init+0xf8>)
    edfa:	f7ff fb53 	bl	e4a4 <nrf_rtc_prescaler_set>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    edfe:	2300      	movs	r3, #0
    ee00:	607b      	str	r3, [r7, #4]
    ee02:	e017      	b.n	ee34 <sys_clock_driver_init+0x48>
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    ee04:	4a38      	ldr	r2, [pc, #224]	; (eee8 <sys_clock_driver_init+0xfc>)
    ee06:	687b      	ldr	r3, [r7, #4]
    ee08:	011b      	lsls	r3, r3, #4
    ee0a:	4413      	add	r3, r2
    ee0c:	f103 0108 	add.w	r1, r3, #8
    ee10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ee14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ee18:	e9c1 2300 	strd	r2, r3, [r1]
		nrf_rtc_int_enable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    ee1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ee20:	687b      	ldr	r3, [r7, #4]
    ee22:	fa02 f303 	lsl.w	r3, r2, r3
    ee26:	4619      	mov	r1, r3
    ee28:	482e      	ldr	r0, [pc, #184]	; (eee4 <sys_clock_driver_init+0xf8>)
    ee2a:	f00d fd45 	bl	1c8b8 <nrf_rtc_int_enable>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    ee2e:	687b      	ldr	r3, [r7, #4]
    ee30:	3301      	adds	r3, #1
    ee32:	607b      	str	r3, [r7, #4]
    ee34:	687b      	ldr	r3, [r7, #4]
    ee36:	2b00      	cmp	r3, #0
    ee38:	dde4      	ble.n	ee04 <sys_clock_driver_init+0x18>
	}

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
    ee3a:	2102      	movs	r1, #2
    ee3c:	4829      	ldr	r0, [pc, #164]	; (eee4 <sys_clock_driver_init+0xf8>)
    ee3e:	f00d fd3b 	bl	1c8b8 <nrf_rtc_int_enable>

	NVIC_ClearPendingIRQ(RTC_IRQn);
    ee42:	2015      	movs	r0, #21
    ee44:	f7ff fb10 	bl	e468 <__NVIC_ClearPendingIRQ>

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    ee48:	2200      	movs	r2, #0
    ee4a:	2101      	movs	r1, #1
    ee4c:	2015      	movs	r0, #21
    ee4e:	f7fb faf1 	bl	a434 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    ee52:	2015      	movs	r0, #21
    ee54:	f00b f906 	bl	1a064 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
    ee58:	2108      	movs	r1, #8
    ee5a:	4822      	ldr	r0, [pc, #136]	; (eee4 <sys_clock_driver_init+0xf8>)
    ee5c:	f00d fd8c 	bl	1c978 <nrf_rtc_task_trigger>
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);
    ee60:	2100      	movs	r1, #0
    ee62:	4820      	ldr	r0, [pc, #128]	; (eee4 <sys_clock_driver_init+0xf8>)
    ee64:	f00d fd88 	bl	1c978 <nrf_rtc_task_trigger>

	int_mask = BIT_MASK(CHAN_COUNT);
    ee68:	4b20      	ldr	r3, [pc, #128]	; (eeec <sys_clock_driver_init+0x100>)
    ee6a:	2201      	movs	r2, #1
    ee6c:	601a      	str	r2, [r3, #0]
	if (CONFIG_NRF_RTC_TIMER_USER_CHAN_COUNT) {
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;
    ee6e:	f00d fcc8 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ee72:	4603      	mov	r3, r0
    ee74:	2b00      	cmp	r3, #0
    ee76:	da02      	bge.n	ee7e <sys_clock_driver_init+0x92>
    ee78:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ee7c:	337f      	adds	r3, #127	; 0x7f
    ee7e:	13db      	asrs	r3, r3, #15
    ee80:	f5c3 0600 	rsb	r6, r3, #8388608	; 0x800000
    ee84:	f00d fcbd 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ee88:	4603      	mov	r3, r0
    ee8a:	2b00      	cmp	r3, #0
    ee8c:	da02      	bge.n	ee94 <sys_clock_driver_init+0xa8>
    ee8e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    ee92:	337f      	adds	r3, #127	; 0x7f
    ee94:	13db      	asrs	r3, r3, #15
    ee96:	fbb6 f6f3 	udiv	r6, r6, r3
    ee9a:	f00d fcb2 	bl	1c802 <sys_clock_hw_cycles_per_sec>
    ee9e:	4603      	mov	r3, r0
    eea0:	2b00      	cmp	r3, #0
    eea2:	da02      	bge.n	eeaa <sys_clock_driver_init+0xbe>
    eea4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    eea8:	337f      	adds	r3, #127	; 0x7f
    eeaa:	13db      	asrs	r3, r3, #15
	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    eeac:	fb06 f303 	mul.w	r3, r6, r3
    eeb0:	603b      	str	r3, [r7, #0]

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL, false);
    eeb2:	683b      	ldr	r3, [r7, #0]
    eeb4:	2200      	movs	r2, #0
    eeb6:	461c      	mov	r4, r3
    eeb8:	4615      	mov	r5, r2
    eeba:	2300      	movs	r3, #0
    eebc:	9302      	str	r3, [sp, #8]
    eebe:	2300      	movs	r3, #0
    eec0:	9301      	str	r3, [sp, #4]
    eec2:	4b0b      	ldr	r3, [pc, #44]	; (eef0 <sys_clock_driver_init+0x104>)
    eec4:	9300      	str	r3, [sp, #0]
    eec6:	4622      	mov	r2, r4
    eec8:	462b      	mov	r3, r5
    eeca:	2000      	movs	r0, #0
    eecc:	f00d fdc3 	bl	1ca56 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    eed0:	4b08      	ldr	r3, [pc, #32]	; (eef4 <sys_clock_driver_init+0x108>)
    eed2:	781b      	ldrb	r3, [r3, #0]
    eed4:	4618      	mov	r0, r3
    eed6:	f7fd fc9f 	bl	c818 <z_nrf_clock_control_lf_on>

	return 0;
    eeda:	2300      	movs	r3, #0
}
    eedc:	4618      	mov	r0, r3
    eede:	370c      	adds	r7, #12
    eee0:	46bd      	mov	sp, r7
    eee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eee4:	40015000 	.word	0x40015000
    eee8:	2000c778 	.word	0x2000c778
    eeec:	2000c994 	.word	0x2000c994
    eef0:	0000e929 	.word	0x0000e929
    eef4:	000243d3 	.word	0x000243d3

0000eef8 <k_ms_to_ticks_ceil64>:
{
    eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eefc:	b0bd      	sub	sp, #244	; 0xf4
    eefe:	af00      	add	r7, sp, #0
    ef00:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
    ef04:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
    ef08:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    ef0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    ef10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    ef14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    ef18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    ef1c:	2301      	movs	r3, #1
    ef1e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    ef22:	2300      	movs	r3, #0
    ef24:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    ef28:	2301      	movs	r3, #1
    ef2a:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
    ef2e:	2300      	movs	r3, #0
    ef30:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    ef34:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    ef38:	2b00      	cmp	r3, #0
    ef3a:	d014      	beq.n	ef66 <k_ms_to_ticks_ceil64+0x6e>
	bool mul_ratio = const_hz &&
    ef3c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    ef40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    ef44:	429a      	cmp	r2, r3
    ef46:	d20e      	bcs.n	ef66 <k_ms_to_ticks_ceil64+0x6e>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    ef48:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    ef4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    ef50:	fbb1 f2f3 	udiv	r2, r1, r3
    ef54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    ef58:	fb02 f303 	mul.w	r3, r2, r3
    ef5c:	1acb      	subs	r3, r1, r3
    ef5e:	2b00      	cmp	r3, #0
    ef60:	d101      	bne.n	ef66 <k_ms_to_ticks_ceil64+0x6e>
    ef62:	2301      	movs	r3, #1
    ef64:	e000      	b.n	ef68 <k_ms_to_ticks_ceil64+0x70>
    ef66:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
    ef68:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    ef6c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    ef70:	f003 0301 	and.w	r3, r3, #1
    ef74:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    ef78:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    ef7c:	2b00      	cmp	r3, #0
    ef7e:	d014      	beq.n	efaa <k_ms_to_ticks_ceil64+0xb2>
	bool div_ratio = const_hz &&
    ef80:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    ef84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    ef88:	429a      	cmp	r2, r3
    ef8a:	d90e      	bls.n	efaa <k_ms_to_ticks_ceil64+0xb2>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    ef8c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    ef90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    ef94:	fbb1 f2f3 	udiv	r2, r1, r3
    ef98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    ef9c:	fb02 f303 	mul.w	r3, r2, r3
    efa0:	1acb      	subs	r3, r1, r3
    efa2:	2b00      	cmp	r3, #0
    efa4:	d101      	bne.n	efaa <k_ms_to_ticks_ceil64+0xb2>
    efa6:	2301      	movs	r3, #1
    efa8:	e000      	b.n	efac <k_ms_to_ticks_ceil64+0xb4>
    efaa:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
    efac:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    efb0:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    efb4:	f003 0301 	and.w	r3, r3, #1
    efb8:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	if (from_hz == to_hz) {
    efbc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    efc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    efc4:	429a      	cmp	r2, r3
    efc6:	d10c      	bne.n	efe2 <k_ms_to_ticks_ceil64+0xea>
		return result32 ? ((uint32_t)t) : t;
    efc8:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    efcc:	2b00      	cmp	r3, #0
    efce:	d005      	beq.n	efdc <k_ms_to_ticks_ceil64+0xe4>
    efd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    efd4:	2200      	movs	r2, #0
    efd6:	461c      	mov	r4, r3
    efd8:	4615      	mov	r5, r2
    efda:	e1de      	b.n	f39a <k_ms_to_ticks_ceil64+0x4a2>
    efdc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
    efe0:	e1db      	b.n	f39a <k_ms_to_ticks_ceil64+0x4a2>
	uint64_t off = 0;
    efe2:	f04f 0200 	mov.w	r2, #0
    efe6:	f04f 0300 	mov.w	r3, #0
    efea:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (!mul_ratio) {
    efee:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    eff2:	f083 0301 	eor.w	r3, r3, #1
    eff6:	b2db      	uxtb	r3, r3
    eff8:	2b00      	cmp	r3, #0
    effa:	d02a      	beq.n	f052 <k_ms_to_ticks_ceil64+0x15a>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
    effc:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    f000:	2b00      	cmp	r3, #0
    f002:	d006      	beq.n	f012 <k_ms_to_ticks_ceil64+0x11a>
    f004:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    f008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f00c:	fbb2 f3f3 	udiv	r3, r2, r3
    f010:	e001      	b.n	f016 <k_ms_to_ticks_ceil64+0x11e>
    f012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f016:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		if (round_up) {
    f01a:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
    f01e:	2b00      	cmp	r3, #0
    f020:	d009      	beq.n	f036 <k_ms_to_ticks_ceil64+0x13e>
			off = rdivisor - 1U;
    f022:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    f026:	3b01      	subs	r3, #1
    f028:	2200      	movs	r2, #0
    f02a:	613b      	str	r3, [r7, #16]
    f02c:	617a      	str	r2, [r7, #20]
    f02e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    f032:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		if (round_off) {
    f036:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
    f03a:	2b00      	cmp	r3, #0
    f03c:	d009      	beq.n	f052 <k_ms_to_ticks_ceil64+0x15a>
			off = rdivisor / 2U;
    f03e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    f042:	085b      	lsrs	r3, r3, #1
    f044:	2200      	movs	r2, #0
    f046:	60bb      	str	r3, [r7, #8]
    f048:	60fa      	str	r2, [r7, #12]
    f04a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    f04e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (div_ratio) {
    f052:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    f056:	2b00      	cmp	r3, #0
    f058:	d038      	beq.n	f0cc <k_ms_to_ticks_ceil64+0x1d4>
		t += off;
    f05a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    f05e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    f062:	1886      	adds	r6, r0, r2
    f064:	603e      	str	r6, [r7, #0]
    f066:	eb41 0303 	adc.w	r3, r1, r3
    f06a:	607b      	str	r3, [r7, #4]
    f06c:	e9d7 2300 	ldrd	r2, r3, [r7]
    f070:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		if (result32 && (t < BIT64(32))) {
    f074:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    f078:	2b00      	cmp	r3, #0
    f07a:	d011      	beq.n	f0a0 <k_ms_to_ticks_ceil64+0x1a8>
    f07c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
    f080:	2b01      	cmp	r3, #1
    f082:	d20d      	bcs.n	f0a0 <k_ms_to_ticks_ceil64+0x1a8>
			return ((uint32_t)t) / (from_hz / to_hz);
    f084:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    f088:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    f08c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f090:	fbb1 f3f3 	udiv	r3, r1, r3
    f094:	fbb2 f3f3 	udiv	r3, r2, r3
    f098:	2200      	movs	r2, #0
    f09a:	461c      	mov	r4, r3
    f09c:	4615      	mov	r5, r2
    f09e:	e17c      	b.n	f39a <k_ms_to_ticks_ceil64+0x4a2>
			return t / ((uint64_t)from_hz / to_hz);
    f0a0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    f0a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f0a8:	fbb2 f3f3 	udiv	r3, r2, r3
    f0ac:	2200      	movs	r2, #0
    f0ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    f0b2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    f0b6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
    f0ba:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    f0be:	f7f9 f841 	bl	8144 <__aeabi_uldivmod>
    f0c2:	4602      	mov	r2, r0
    f0c4:	460b      	mov	r3, r1
    f0c6:	4614      	mov	r4, r2
    f0c8:	461d      	mov	r5, r3
    f0ca:	e166      	b.n	f39a <k_ms_to_ticks_ceil64+0x4a2>
	} else if (mul_ratio) {
    f0cc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    f0d0:	2b00      	cmp	r3, #0
    f0d2:	d031      	beq.n	f138 <k_ms_to_ticks_ceil64+0x240>
		if (result32) {
    f0d4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    f0d8:	2b00      	cmp	r3, #0
    f0da:	d00d      	beq.n	f0f8 <k_ms_to_ticks_ceil64+0x200>
			return ((uint32_t)t) * (to_hz / from_hz);
    f0dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    f0e0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    f0e4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    f0e8:	fbb1 f2f2 	udiv	r2, r1, r2
    f0ec:	fb02 f303 	mul.w	r3, r2, r3
    f0f0:	2200      	movs	r2, #0
    f0f2:	461c      	mov	r4, r3
    f0f4:	4615      	mov	r5, r2
    f0f6:	e150      	b.n	f39a <k_ms_to_ticks_ceil64+0x4a2>
			return t * ((uint64_t)to_hz / from_hz);
    f0f8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
    f0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f100:	fbb2 f3f3 	udiv	r3, r2, r3
    f104:	2200      	movs	r2, #0
    f106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    f10a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
    f10e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    f112:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
    f116:	464a      	mov	r2, r9
    f118:	fb02 f203 	mul.w	r2, r2, r3
    f11c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    f120:	4641      	mov	r1, r8
    f122:	fb01 f303 	mul.w	r3, r1, r3
    f126:	4413      	add	r3, r2
    f128:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    f12c:	4641      	mov	r1, r8
    f12e:	fba2 4501 	umull	r4, r5, r2, r1
    f132:	442b      	add	r3, r5
    f134:	461d      	mov	r5, r3
    f136:	e130      	b.n	f39a <k_ms_to_ticks_ceil64+0x4a2>
		if (result32) {
    f138:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    f13c:	2b00      	cmp	r3, #0
    f13e:	d035      	beq.n	f1ac <k_ms_to_ticks_ceil64+0x2b4>
			return (uint32_t)((t * to_hz + off) / from_hz);
    f140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f144:	2200      	movs	r2, #0
    f146:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    f14a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
    f14e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    f152:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
    f156:	465a      	mov	r2, fp
    f158:	fb02 f203 	mul.w	r2, r2, r3
    f15c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    f160:	4651      	mov	r1, sl
    f162:	fb01 f303 	mul.w	r3, r1, r3
    f166:	4413      	add	r3, r2
    f168:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    f16c:	4651      	mov	r1, sl
    f16e:	fba2 8901 	umull	r8, r9, r2, r1
    f172:	444b      	add	r3, r9
    f174:	4699      	mov	r9, r3
    f176:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    f17a:	eb18 0102 	adds.w	r1, r8, r2
    f17e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    f182:	eb49 0303 	adc.w	r3, r9, r3
    f186:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    f18a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f18e:	2200      	movs	r2, #0
    f190:	67bb      	str	r3, [r7, #120]	; 0x78
    f192:	67fa      	str	r2, [r7, #124]	; 0x7c
    f194:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    f198:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    f19c:	f7f8 ffd2 	bl	8144 <__aeabi_uldivmod>
    f1a0:	4602      	mov	r2, r0
    f1a2:	460b      	mov	r3, r1
    f1a4:	2300      	movs	r3, #0
    f1a6:	4614      	mov	r4, r2
    f1a8:	461d      	mov	r5, r3
    f1aa:	e0f6      	b.n	f39a <k_ms_to_ticks_ceil64+0x4a2>
		} else if (const_hz && Z_TMCVT_USE_FAST_ALGO(from_hz, to_hz)) {
    f1ac:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    f1b0:	2b00      	cmp	r3, #0
    f1b2:	f000 8082 	beq.w	f2ba <k_ms_to_ticks_ceil64+0x3c2>
    f1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f1ba:	2200      	movs	r2, #0
    f1bc:	673b      	str	r3, [r7, #112]	; 0x70
    f1be:	677a      	str	r2, [r7, #116]	; 0x74
    f1c0:	4b7a      	ldr	r3, [pc, #488]	; (f3ac <k_ms_to_ticks_ceil64+0x4b4>)
    f1c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
    f1c6:	464a      	mov	r2, r9
    f1c8:	fb03 f202 	mul.w	r2, r3, r2
    f1cc:	2300      	movs	r3, #0
    f1ce:	4641      	mov	r1, r8
    f1d0:	fb01 f303 	mul.w	r3, r1, r3
    f1d4:	441a      	add	r2, r3
    f1d6:	4b75      	ldr	r3, [pc, #468]	; (f3ac <k_ms_to_ticks_ceil64+0x4b4>)
    f1d8:	4641      	mov	r1, r8
    f1da:	fba1 ab03 	umull	sl, fp, r1, r3
    f1de:	eb02 030b 	add.w	r3, r2, fp
    f1e2:	469b      	mov	fp, r3
    f1e4:	f1ba 0302 	subs.w	r3, sl, #2
    f1e8:	66bb      	str	r3, [r7, #104]	; 0x68
    f1ea:	f14b 0300 	adc.w	r3, fp, #0
    f1ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    f1f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f1f4:	f04f 0300 	mov.w	r3, #0
    f1f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
    f1fc:	f7f8 ffa2 	bl	8144 <__aeabi_uldivmod>
    f200:	4602      	mov	r2, r0
    f202:	460b      	mov	r3, r1
    f204:	4610      	mov	r0, r2
    f206:	4619      	mov	r1, r3
    f208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f20c:	2200      	movs	r2, #0
    f20e:	663b      	str	r3, [r7, #96]	; 0x60
    f210:	667a      	str	r2, [r7, #100]	; 0x64
    f212:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
    f216:	4643      	mov	r3, r8
    f218:	fb03 f201 	mul.w	r2, r3, r1
    f21c:	464b      	mov	r3, r9
    f21e:	fb00 f303 	mul.w	r3, r0, r3
    f222:	4413      	add	r3, r2
    f224:	4642      	mov	r2, r8
    f226:	fba0 2102 	umull	r2, r1, r0, r2
    f22a:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    f22e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    f232:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    f236:	4413      	add	r3, r2
    f238:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    f23c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    f240:	2b01      	cmp	r3, #1
    f242:	d23a      	bcs.n	f2ba <k_ms_to_ticks_ceil64+0x3c2>
			return ((t * to_hz + off) / from_hz);
    f244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f248:	2200      	movs	r2, #0
    f24a:	65bb      	str	r3, [r7, #88]	; 0x58
    f24c:	65fa      	str	r2, [r7, #92]	; 0x5c
    f24e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    f252:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
    f256:	462a      	mov	r2, r5
    f258:	fb02 f203 	mul.w	r2, r2, r3
    f25c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    f260:	4621      	mov	r1, r4
    f262:	fb01 f303 	mul.w	r3, r1, r3
    f266:	4413      	add	r3, r2
    f268:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    f26c:	4621      	mov	r1, r4
    f26e:	fba2 2101 	umull	r2, r1, r2, r1
    f272:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    f276:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    f27a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    f27e:	4413      	add	r3, r2
    f280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    f284:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    f288:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
    f28c:	4621      	mov	r1, r4
    f28e:	1889      	adds	r1, r1, r2
    f290:	6539      	str	r1, [r7, #80]	; 0x50
    f292:	4629      	mov	r1, r5
    f294:	eb43 0101 	adc.w	r1, r3, r1
    f298:	6579      	str	r1, [r7, #84]	; 0x54
    f29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f29e:	2200      	movs	r2, #0
    f2a0:	64bb      	str	r3, [r7, #72]	; 0x48
    f2a2:	64fa      	str	r2, [r7, #76]	; 0x4c
    f2a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
    f2a8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
    f2ac:	f7f8 ff4a 	bl	8144 <__aeabi_uldivmod>
    f2b0:	4602      	mov	r2, r0
    f2b2:	460b      	mov	r3, r1
    f2b4:	4614      	mov	r4, r2
    f2b6:	461d      	mov	r5, r3
    f2b8:	e06f      	b.n	f39a <k_ms_to_ticks_ceil64+0x4a2>
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
    f2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f2be:	2200      	movs	r2, #0
    f2c0:	643b      	str	r3, [r7, #64]	; 0x40
    f2c2:	647a      	str	r2, [r7, #68]	; 0x44
    f2c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    f2c8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    f2cc:	f7f8 ff3a 	bl	8144 <__aeabi_uldivmod>
    f2d0:	4602      	mov	r2, r0
    f2d2:	460b      	mov	r3, r1
    f2d4:	4610      	mov	r0, r2
    f2d6:	4619      	mov	r1, r3
    f2d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f2dc:	2200      	movs	r2, #0
    f2de:	63bb      	str	r3, [r7, #56]	; 0x38
    f2e0:	63fa      	str	r2, [r7, #60]	; 0x3c
    f2e2:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
    f2e6:	4643      	mov	r3, r8
    f2e8:	fb03 f201 	mul.w	r2, r3, r1
    f2ec:	464b      	mov	r3, r9
    f2ee:	fb00 f303 	mul.w	r3, r0, r3
    f2f2:	4413      	add	r3, r2
    f2f4:	4642      	mov	r2, r8
    f2f6:	fba0 2102 	umull	r2, r1, r0, r2
    f2fa:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    f2fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    f302:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    f306:	4413      	add	r3, r2
    f308:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    f30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f310:	2200      	movs	r2, #0
    f312:	633b      	str	r3, [r7, #48]	; 0x30
    f314:	637a      	str	r2, [r7, #52]	; 0x34
    f316:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    f31a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    f31e:	f7f8 ff11 	bl	8144 <__aeabi_uldivmod>
    f322:	4610      	mov	r0, r2
    f324:	4619      	mov	r1, r3
    f326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f32a:	2200      	movs	r2, #0
    f32c:	62bb      	str	r3, [r7, #40]	; 0x28
    f32e:	62fa      	str	r2, [r7, #44]	; 0x2c
    f330:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
    f334:	4643      	mov	r3, r8
    f336:	fb03 f201 	mul.w	r2, r3, r1
    f33a:	464b      	mov	r3, r9
    f33c:	fb00 f303 	mul.w	r3, r0, r3
    f340:	4413      	add	r3, r2
    f342:	4642      	mov	r2, r8
    f344:	fba0 2102 	umull	r2, r1, r0, r2
    f348:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    f34c:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    f350:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    f354:	4413      	add	r3, r2
    f356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    f35a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    f35e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
    f362:	4641      	mov	r1, r8
    f364:	1889      	adds	r1, r1, r2
    f366:	6239      	str	r1, [r7, #32]
    f368:	4649      	mov	r1, r9
    f36a:	eb43 0101 	adc.w	r1, r3, r1
    f36e:	6279      	str	r1, [r7, #36]	; 0x24
    f370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f374:	2200      	movs	r2, #0
    f376:	61bb      	str	r3, [r7, #24]
    f378:	61fa      	str	r2, [r7, #28]
    f37a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    f37e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    f382:	f7f8 fedf 	bl	8144 <__aeabi_uldivmod>
    f386:	4602      	mov	r2, r0
    f388:	460b      	mov	r3, r1
    f38a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
    f38e:	4641      	mov	r1, r8
    f390:	188c      	adds	r4, r1, r2
    f392:	4649      	mov	r1, r9
    f394:	eb43 0101 	adc.w	r1, r3, r1
    f398:	460d      	mov	r5, r1
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, false, true, false);
    f39a:	4622      	mov	r2, r4
    f39c:	462b      	mov	r3, r5
}
    f39e:	4610      	mov	r0, r2
    f3a0:	4619      	mov	r1, r3
    f3a2:	37f4      	adds	r7, #244	; 0xf4
    f3a4:	46bd      	mov	sp, r7
    f3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3aa:	bf00      	nop
    f3ac:	01e13380 	.word	0x01e13380

0000f3b0 <k_ticks_to_ms_floor64>:
 * Truncates to the next lowest output unit.
 *
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint64_t k_ticks_to_ms_floor64(uint64_t t)
{
    f3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3b4:	b0bd      	sub	sp, #244	; 0xf4
    f3b6:	af00      	add	r7, sp, #0
    f3b8:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
    f3bc:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
    f3c0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    f3c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f3c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    f3cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f3d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    f3d4:	2301      	movs	r3, #1
    f3d6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    f3da:	2300      	movs	r3, #0
    f3dc:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    f3e0:	2300      	movs	r3, #0
    f3e2:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
    f3e6:	2300      	movs	r3, #0
    f3e8:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    f3ec:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    f3f0:	2b00      	cmp	r3, #0
    f3f2:	d014      	beq.n	f41e <k_ticks_to_ms_floor64+0x6e>
	bool mul_ratio = const_hz &&
    f3f4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    f3f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f3fc:	429a      	cmp	r2, r3
    f3fe:	d20e      	bcs.n	f41e <k_ticks_to_ms_floor64+0x6e>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    f400:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    f404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f408:	fbb1 f2f3 	udiv	r2, r1, r3
    f40c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f410:	fb02 f303 	mul.w	r3, r2, r3
    f414:	1acb      	subs	r3, r1, r3
    f416:	2b00      	cmp	r3, #0
    f418:	d101      	bne.n	f41e <k_ticks_to_ms_floor64+0x6e>
    f41a:	2301      	movs	r3, #1
    f41c:	e000      	b.n	f420 <k_ticks_to_ms_floor64+0x70>
    f41e:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
    f420:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    f424:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    f428:	f003 0301 	and.w	r3, r3, #1
    f42c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    f430:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    f434:	2b00      	cmp	r3, #0
    f436:	d014      	beq.n	f462 <k_ticks_to_ms_floor64+0xb2>
	bool div_ratio = const_hz &&
    f438:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    f43c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f440:	429a      	cmp	r2, r3
    f442:	d90e      	bls.n	f462 <k_ticks_to_ms_floor64+0xb2>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    f444:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    f448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f44c:	fbb1 f2f3 	udiv	r2, r1, r3
    f450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f454:	fb02 f303 	mul.w	r3, r2, r3
    f458:	1acb      	subs	r3, r1, r3
    f45a:	2b00      	cmp	r3, #0
    f45c:	d101      	bne.n	f462 <k_ticks_to_ms_floor64+0xb2>
    f45e:	2301      	movs	r3, #1
    f460:	e000      	b.n	f464 <k_ticks_to_ms_floor64+0xb4>
    f462:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
    f464:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    f468:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    f46c:	f003 0301 	and.w	r3, r3, #1
    f470:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	if (from_hz == to_hz) {
    f474:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    f478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f47c:	429a      	cmp	r2, r3
    f47e:	d10c      	bne.n	f49a <k_ticks_to_ms_floor64+0xea>
		return result32 ? ((uint32_t)t) : t;
    f480:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    f484:	2b00      	cmp	r3, #0
    f486:	d005      	beq.n	f494 <k_ticks_to_ms_floor64+0xe4>
    f488:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    f48c:	2200      	movs	r2, #0
    f48e:	461c      	mov	r4, r3
    f490:	4615      	mov	r5, r2
    f492:	e1de      	b.n	f852 <k_ticks_to_ms_floor64+0x4a2>
    f494:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
    f498:	e1db      	b.n	f852 <k_ticks_to_ms_floor64+0x4a2>
	uint64_t off = 0;
    f49a:	f04f 0200 	mov.w	r2, #0
    f49e:	f04f 0300 	mov.w	r3, #0
    f4a2:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (!mul_ratio) {
    f4a6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    f4aa:	f083 0301 	eor.w	r3, r3, #1
    f4ae:	b2db      	uxtb	r3, r3
    f4b0:	2b00      	cmp	r3, #0
    f4b2:	d02a      	beq.n	f50a <k_ticks_to_ms_floor64+0x15a>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
    f4b4:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    f4b8:	2b00      	cmp	r3, #0
    f4ba:	d006      	beq.n	f4ca <k_ticks_to_ms_floor64+0x11a>
    f4bc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    f4c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f4c4:	fbb2 f3f3 	udiv	r3, r2, r3
    f4c8:	e001      	b.n	f4ce <k_ticks_to_ms_floor64+0x11e>
    f4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f4ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		if (round_up) {
    f4d2:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
    f4d6:	2b00      	cmp	r3, #0
    f4d8:	d009      	beq.n	f4ee <k_ticks_to_ms_floor64+0x13e>
			off = rdivisor - 1U;
    f4da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    f4de:	3b01      	subs	r3, #1
    f4e0:	2200      	movs	r2, #0
    f4e2:	613b      	str	r3, [r7, #16]
    f4e4:	617a      	str	r2, [r7, #20]
    f4e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    f4ea:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		if (round_off) {
    f4ee:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
    f4f2:	2b00      	cmp	r3, #0
    f4f4:	d009      	beq.n	f50a <k_ticks_to_ms_floor64+0x15a>
			off = rdivisor / 2U;
    f4f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    f4fa:	085b      	lsrs	r3, r3, #1
    f4fc:	2200      	movs	r2, #0
    f4fe:	60bb      	str	r3, [r7, #8]
    f500:	60fa      	str	r2, [r7, #12]
    f502:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    f506:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (div_ratio) {
    f50a:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    f50e:	2b00      	cmp	r3, #0
    f510:	d038      	beq.n	f584 <k_ticks_to_ms_floor64+0x1d4>
		t += off;
    f512:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    f516:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    f51a:	1886      	adds	r6, r0, r2
    f51c:	603e      	str	r6, [r7, #0]
    f51e:	eb41 0303 	adc.w	r3, r1, r3
    f522:	607b      	str	r3, [r7, #4]
    f524:	e9d7 2300 	ldrd	r2, r3, [r7]
    f528:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		if (result32 && (t < BIT64(32))) {
    f52c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    f530:	2b00      	cmp	r3, #0
    f532:	d011      	beq.n	f558 <k_ticks_to_ms_floor64+0x1a8>
    f534:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
    f538:	2b01      	cmp	r3, #1
    f53a:	d20d      	bcs.n	f558 <k_ticks_to_ms_floor64+0x1a8>
			return ((uint32_t)t) / (from_hz / to_hz);
    f53c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    f540:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    f544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f548:	fbb1 f3f3 	udiv	r3, r1, r3
    f54c:	fbb2 f3f3 	udiv	r3, r2, r3
    f550:	2200      	movs	r2, #0
    f552:	461c      	mov	r4, r3
    f554:	4615      	mov	r5, r2
    f556:	e17c      	b.n	f852 <k_ticks_to_ms_floor64+0x4a2>
			return t / ((uint64_t)from_hz / to_hz);
    f558:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    f55c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f560:	fbb2 f3f3 	udiv	r3, r2, r3
    f564:	2200      	movs	r2, #0
    f566:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    f56a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    f56e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
    f572:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    f576:	f7f8 fde5 	bl	8144 <__aeabi_uldivmod>
    f57a:	4602      	mov	r2, r0
    f57c:	460b      	mov	r3, r1
    f57e:	4614      	mov	r4, r2
    f580:	461d      	mov	r5, r3
    f582:	e166      	b.n	f852 <k_ticks_to_ms_floor64+0x4a2>
	} else if (mul_ratio) {
    f584:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    f588:	2b00      	cmp	r3, #0
    f58a:	d031      	beq.n	f5f0 <k_ticks_to_ms_floor64+0x240>
		if (result32) {
    f58c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    f590:	2b00      	cmp	r3, #0
    f592:	d00d      	beq.n	f5b0 <k_ticks_to_ms_floor64+0x200>
			return ((uint32_t)t) * (to_hz / from_hz);
    f594:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    f598:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    f59c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    f5a0:	fbb1 f2f2 	udiv	r2, r1, r2
    f5a4:	fb02 f303 	mul.w	r3, r2, r3
    f5a8:	2200      	movs	r2, #0
    f5aa:	461c      	mov	r4, r3
    f5ac:	4615      	mov	r5, r2
    f5ae:	e150      	b.n	f852 <k_ticks_to_ms_floor64+0x4a2>
			return t * ((uint64_t)to_hz / from_hz);
    f5b0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
    f5b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f5b8:	fbb2 f3f3 	udiv	r3, r2, r3
    f5bc:	2200      	movs	r2, #0
    f5be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    f5c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
    f5c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    f5ca:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
    f5ce:	464a      	mov	r2, r9
    f5d0:	fb02 f203 	mul.w	r2, r2, r3
    f5d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    f5d8:	4641      	mov	r1, r8
    f5da:	fb01 f303 	mul.w	r3, r1, r3
    f5de:	4413      	add	r3, r2
    f5e0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    f5e4:	4641      	mov	r1, r8
    f5e6:	fba2 4501 	umull	r4, r5, r2, r1
    f5ea:	442b      	add	r3, r5
    f5ec:	461d      	mov	r5, r3
    f5ee:	e130      	b.n	f852 <k_ticks_to_ms_floor64+0x4a2>
		if (result32) {
    f5f0:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    f5f4:	2b00      	cmp	r3, #0
    f5f6:	d035      	beq.n	f664 <k_ticks_to_ms_floor64+0x2b4>
			return (uint32_t)((t * to_hz + off) / from_hz);
    f5f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f5fc:	2200      	movs	r2, #0
    f5fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    f602:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
    f606:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    f60a:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
    f60e:	465a      	mov	r2, fp
    f610:	fb02 f203 	mul.w	r2, r2, r3
    f614:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    f618:	4651      	mov	r1, sl
    f61a:	fb01 f303 	mul.w	r3, r1, r3
    f61e:	4413      	add	r3, r2
    f620:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    f624:	4651      	mov	r1, sl
    f626:	fba2 8901 	umull	r8, r9, r2, r1
    f62a:	444b      	add	r3, r9
    f62c:	4699      	mov	r9, r3
    f62e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    f632:	eb18 0102 	adds.w	r1, r8, r2
    f636:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    f63a:	eb49 0303 	adc.w	r3, r9, r3
    f63e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    f642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f646:	2200      	movs	r2, #0
    f648:	67bb      	str	r3, [r7, #120]	; 0x78
    f64a:	67fa      	str	r2, [r7, #124]	; 0x7c
    f64c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    f650:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    f654:	f7f8 fd76 	bl	8144 <__aeabi_uldivmod>
    f658:	4602      	mov	r2, r0
    f65a:	460b      	mov	r3, r1
    f65c:	2300      	movs	r3, #0
    f65e:	4614      	mov	r4, r2
    f660:	461d      	mov	r5, r3
    f662:	e0f6      	b.n	f852 <k_ticks_to_ms_floor64+0x4a2>
		} else if (const_hz && Z_TMCVT_USE_FAST_ALGO(from_hz, to_hz)) {
    f664:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    f668:	2b00      	cmp	r3, #0
    f66a:	f000 8082 	beq.w	f772 <k_ticks_to_ms_floor64+0x3c2>
    f66e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f672:	2200      	movs	r2, #0
    f674:	673b      	str	r3, [r7, #112]	; 0x70
    f676:	677a      	str	r2, [r7, #116]	; 0x74
    f678:	4b7a      	ldr	r3, [pc, #488]	; (f864 <k_ticks_to_ms_floor64+0x4b4>)
    f67a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
    f67e:	464a      	mov	r2, r9
    f680:	fb03 f202 	mul.w	r2, r3, r2
    f684:	2300      	movs	r3, #0
    f686:	4641      	mov	r1, r8
    f688:	fb01 f303 	mul.w	r3, r1, r3
    f68c:	441a      	add	r2, r3
    f68e:	4b75      	ldr	r3, [pc, #468]	; (f864 <k_ticks_to_ms_floor64+0x4b4>)
    f690:	4641      	mov	r1, r8
    f692:	fba1 ab03 	umull	sl, fp, r1, r3
    f696:	eb02 030b 	add.w	r3, r2, fp
    f69a:	469b      	mov	fp, r3
    f69c:	f1ba 0302 	subs.w	r3, sl, #2
    f6a0:	66bb      	str	r3, [r7, #104]	; 0x68
    f6a2:	f14b 0300 	adc.w	r3, fp, #0
    f6a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    f6a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f6ac:	f04f 0300 	mov.w	r3, #0
    f6b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
    f6b4:	f7f8 fd46 	bl	8144 <__aeabi_uldivmod>
    f6b8:	4602      	mov	r2, r0
    f6ba:	460b      	mov	r3, r1
    f6bc:	4610      	mov	r0, r2
    f6be:	4619      	mov	r1, r3
    f6c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f6c4:	2200      	movs	r2, #0
    f6c6:	663b      	str	r3, [r7, #96]	; 0x60
    f6c8:	667a      	str	r2, [r7, #100]	; 0x64
    f6ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
    f6ce:	4643      	mov	r3, r8
    f6d0:	fb03 f201 	mul.w	r2, r3, r1
    f6d4:	464b      	mov	r3, r9
    f6d6:	fb00 f303 	mul.w	r3, r0, r3
    f6da:	4413      	add	r3, r2
    f6dc:	4642      	mov	r2, r8
    f6de:	fba0 2102 	umull	r2, r1, r0, r2
    f6e2:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    f6e6:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    f6ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    f6ee:	4413      	add	r3, r2
    f6f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    f6f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    f6f8:	2b01      	cmp	r3, #1
    f6fa:	d23a      	bcs.n	f772 <k_ticks_to_ms_floor64+0x3c2>
			return ((t * to_hz + off) / from_hz);
    f6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f700:	2200      	movs	r2, #0
    f702:	65bb      	str	r3, [r7, #88]	; 0x58
    f704:	65fa      	str	r2, [r7, #92]	; 0x5c
    f706:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    f70a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
    f70e:	462a      	mov	r2, r5
    f710:	fb02 f203 	mul.w	r2, r2, r3
    f714:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    f718:	4621      	mov	r1, r4
    f71a:	fb01 f303 	mul.w	r3, r1, r3
    f71e:	4413      	add	r3, r2
    f720:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    f724:	4621      	mov	r1, r4
    f726:	fba2 2101 	umull	r2, r1, r2, r1
    f72a:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    f72e:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    f732:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    f736:	4413      	add	r3, r2
    f738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    f73c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    f740:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
    f744:	4621      	mov	r1, r4
    f746:	1889      	adds	r1, r1, r2
    f748:	6539      	str	r1, [r7, #80]	; 0x50
    f74a:	4629      	mov	r1, r5
    f74c:	eb43 0101 	adc.w	r1, r3, r1
    f750:	6579      	str	r1, [r7, #84]	; 0x54
    f752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f756:	2200      	movs	r2, #0
    f758:	64bb      	str	r3, [r7, #72]	; 0x48
    f75a:	64fa      	str	r2, [r7, #76]	; 0x4c
    f75c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
    f760:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
    f764:	f7f8 fcee 	bl	8144 <__aeabi_uldivmod>
    f768:	4602      	mov	r2, r0
    f76a:	460b      	mov	r3, r1
    f76c:	4614      	mov	r4, r2
    f76e:	461d      	mov	r5, r3
    f770:	e06f      	b.n	f852 <k_ticks_to_ms_floor64+0x4a2>
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
    f772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f776:	2200      	movs	r2, #0
    f778:	643b      	str	r3, [r7, #64]	; 0x40
    f77a:	647a      	str	r2, [r7, #68]	; 0x44
    f77c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    f780:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    f784:	f7f8 fcde 	bl	8144 <__aeabi_uldivmod>
    f788:	4602      	mov	r2, r0
    f78a:	460b      	mov	r3, r1
    f78c:	4610      	mov	r0, r2
    f78e:	4619      	mov	r1, r3
    f790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f794:	2200      	movs	r2, #0
    f796:	63bb      	str	r3, [r7, #56]	; 0x38
    f798:	63fa      	str	r2, [r7, #60]	; 0x3c
    f79a:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
    f79e:	4643      	mov	r3, r8
    f7a0:	fb03 f201 	mul.w	r2, r3, r1
    f7a4:	464b      	mov	r3, r9
    f7a6:	fb00 f303 	mul.w	r3, r0, r3
    f7aa:	4413      	add	r3, r2
    f7ac:	4642      	mov	r2, r8
    f7ae:	fba0 2102 	umull	r2, r1, r0, r2
    f7b2:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    f7b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    f7ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    f7be:	4413      	add	r3, r2
    f7c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    f7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f7c8:	2200      	movs	r2, #0
    f7ca:	633b      	str	r3, [r7, #48]	; 0x30
    f7cc:	637a      	str	r2, [r7, #52]	; 0x34
    f7ce:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    f7d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    f7d6:	f7f8 fcb5 	bl	8144 <__aeabi_uldivmod>
    f7da:	4610      	mov	r0, r2
    f7dc:	4619      	mov	r1, r3
    f7de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    f7e2:	2200      	movs	r2, #0
    f7e4:	62bb      	str	r3, [r7, #40]	; 0x28
    f7e6:	62fa      	str	r2, [r7, #44]	; 0x2c
    f7e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
    f7ec:	4643      	mov	r3, r8
    f7ee:	fb03 f201 	mul.w	r2, r3, r1
    f7f2:	464b      	mov	r3, r9
    f7f4:	fb00 f303 	mul.w	r3, r0, r3
    f7f8:	4413      	add	r3, r2
    f7fa:	4642      	mov	r2, r8
    f7fc:	fba0 2102 	umull	r2, r1, r0, r2
    f800:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    f804:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    f808:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    f80c:	4413      	add	r3, r2
    f80e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    f812:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    f816:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
    f81a:	4641      	mov	r1, r8
    f81c:	1889      	adds	r1, r1, r2
    f81e:	6239      	str	r1, [r7, #32]
    f820:	4649      	mov	r1, r9
    f822:	eb43 0101 	adc.w	r1, r3, r1
    f826:	6279      	str	r1, [r7, #36]	; 0x24
    f828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    f82c:	2200      	movs	r2, #0
    f82e:	61bb      	str	r3, [r7, #24]
    f830:	61fa      	str	r2, [r7, #28]
    f832:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    f836:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    f83a:	f7f8 fc83 	bl	8144 <__aeabi_uldivmod>
    f83e:	4602      	mov	r2, r0
    f840:	460b      	mov	r3, r1
    f842:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
    f846:	4641      	mov	r1, r8
    f848:	188c      	adds	r4, r1, r2
    f84a:	4649      	mov	r1, r9
    f84c:	eb43 0101 	adc.w	r1, r3, r1
    f850:	460d      	mov	r5, r1
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, false, false, false);
    f852:	4622      	mov	r2, r4
    f854:	462b      	mov	r3, r5
}
    f856:	4610      	mov	r0, r2
    f858:	4619      	mov	r1, r3
    f85a:	37f4      	adds	r7, #244	; 0xf4
    f85c:	46bd      	mov	sp, r7
    f85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f862:	bf00      	nop
    f864:	01e13380 	.word	0x01e13380

0000f868 <k_current_get>:
{
    f868:	b580      	push	{r7, lr}
    f86a:	af00      	add	r7, sp, #0
	return z_tls_current;
    f86c:	f010 f84c 	bl	1f908 <__aeabi_read_tp>
    f870:	4603      	mov	r3, r0
    f872:	4a02      	ldr	r2, [pc, #8]	; (f87c <k_current_get+0x14>)
    f874:	589b      	ldr	r3, [r3, r2]
}
    f876:	4618      	mov	r0, r3
    f878:	bd80      	pop	{r7, pc}
    f87a:	bf00      	nop
    f87c:	00000008 	.word	0x00000008

0000f880 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    f880:	b480      	push	{r7}
    f882:	b087      	sub	sp, #28
    f884:	af00      	add	r7, sp, #0
    f886:	6078      	str	r0, [r7, #4]
	struct thread_monitor_entry *entry = thread_event_monitor;
    f888:	4b1f      	ldr	r3, [pc, #124]	; (f908 <thread_monitor_entry_get+0x88>)
    f88a:	617b      	str	r3, [r7, #20]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    f88c:	4b1e      	ldr	r3, [pc, #120]	; (f908 <thread_monitor_entry_get+0x88>)
    f88e:	613b      	str	r3, [r7, #16]
	int entry_age, oldest_entry_age = 0;
    f890:	2300      	movs	r3, #0
    f892:	60fb      	str	r3, [r7, #12]

	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    f894:	e01e      	b.n	f8d4 <thread_monitor_entry_get+0x54>
		if (entry->id == id) {
    f896:	697b      	ldr	r3, [r7, #20]
    f898:	681b      	ldr	r3, [r3, #0]
    f89a:	687a      	ldr	r2, [r7, #4]
    f89c:	429a      	cmp	r2, r3
    f89e:	d101      	bne.n	f8a4 <thread_monitor_entry_get+0x24>
			return entry;
    f8a0:	697b      	ldr	r3, [r7, #20]
    f8a2:	e02b      	b.n	f8fc <thread_monitor_entry_get+0x7c>
		} else if (entry->id == 0) {
    f8a4:	697b      	ldr	r3, [r7, #20]
    f8a6:	681b      	ldr	r3, [r3, #0]
    f8a8:	2b00      	cmp	r3, #0
    f8aa:	d102      	bne.n	f8b2 <thread_monitor_entry_get+0x32>
			/* Uninitialized field. */
			new_entry = entry;
    f8ac:	697b      	ldr	r3, [r7, #20]
    f8ae:	613b      	str	r3, [r7, #16]
			break;
    f8b0:	e01b      	b.n	f8ea <thread_monitor_entry_get+0x6a>
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    f8b2:	4b16      	ldr	r3, [pc, #88]	; (f90c <thread_monitor_entry_get+0x8c>)
    f8b4:	681a      	ldr	r2, [r3, #0]
    f8b6:	697b      	ldr	r3, [r7, #20]
    f8b8:	685b      	ldr	r3, [r3, #4]
    f8ba:	1ad3      	subs	r3, r2, r3
    f8bc:	60bb      	str	r3, [r7, #8]
		if (entry_age > oldest_entry_age) {
    f8be:	68ba      	ldr	r2, [r7, #8]
    f8c0:	68fb      	ldr	r3, [r7, #12]
    f8c2:	429a      	cmp	r2, r3
    f8c4:	dd03      	ble.n	f8ce <thread_monitor_entry_get+0x4e>
			oldest_entry_age = entry_age;
    f8c6:	68bb      	ldr	r3, [r7, #8]
    f8c8:	60fb      	str	r3, [r7, #12]
			new_entry = entry;
    f8ca:	697b      	ldr	r3, [r7, #20]
    f8cc:	613b      	str	r3, [r7, #16]
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    f8ce:	697b      	ldr	r3, [r7, #20]
    f8d0:	3308      	adds	r3, #8
    f8d2:	617b      	str	r3, [r7, #20]
    f8d4:	697b      	ldr	r3, [r7, #20]
    f8d6:	2b00      	cmp	r3, #0
    f8d8:	d007      	beq.n	f8ea <thread_monitor_entry_get+0x6a>
    f8da:	697b      	ldr	r3, [r7, #20]
    f8dc:	4a0a      	ldr	r2, [pc, #40]	; (f908 <thread_monitor_entry_get+0x88>)
    f8de:	4293      	cmp	r3, r2
    f8e0:	d303      	bcc.n	f8ea <thread_monitor_entry_get+0x6a>
    f8e2:	697b      	ldr	r3, [r7, #20]
    f8e4:	4a0a      	ldr	r2, [pc, #40]	; (f910 <thread_monitor_entry_get+0x90>)
    f8e6:	4293      	cmp	r3, r2
    f8e8:	d3d5      	bcc.n	f896 <thread_monitor_entry_get+0x16>
		}
	}

	new_entry->id = id;
    f8ea:	693b      	ldr	r3, [r7, #16]
    f8ec:	687a      	ldr	r2, [r7, #4]
    f8ee:	601a      	str	r2, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    f8f0:	4b06      	ldr	r3, [pc, #24]	; (f90c <thread_monitor_entry_get+0x8c>)
    f8f2:	681b      	ldr	r3, [r3, #0]
    f8f4:	1e5a      	subs	r2, r3, #1
    f8f6:	693b      	ldr	r3, [r7, #16]
    f8f8:	605a      	str	r2, [r3, #4]

	return new_entry;
    f8fa:	693b      	ldr	r3, [r7, #16]
}
    f8fc:	4618      	mov	r0, r3
    f8fe:	371c      	adds	r7, #28
    f900:	46bd      	mov	sp, r7
    f902:	bc80      	pop	{r7}
    f904:	4770      	bx	lr
    f906:	bf00      	nop
    f908:	2000c9cc 	.word	0x2000c9cc
    f90c:	2000ca24 	.word	0x2000ca24
    f910:	2000ca1c 	.word	0x2000ca1c

0000f914 <thread_monitor_entry_update>:

/* Update thread monitor entry RPC counter. */
static void thread_monitor_entry_update(struct thread_monitor_entry *entry)
{
    f914:	b480      	push	{r7}
    f916:	b083      	sub	sp, #12
    f918:	af00      	add	r7, sp, #0
    f91a:	6078      	str	r0, [r7, #4]
	entry->cnt = rpc_event_cnt;
    f91c:	4b04      	ldr	r3, [pc, #16]	; (f930 <thread_monitor_entry_update+0x1c>)
    f91e:	681a      	ldr	r2, [r3, #0]
    f920:	687b      	ldr	r3, [r7, #4]
    f922:	605a      	str	r2, [r3, #4]
}
    f924:	bf00      	nop
    f926:	370c      	adds	r7, #12
    f928:	46bd      	mov	sp, r7
    f92a:	bc80      	pop	{r7}
    f92c:	4770      	bx	lr
    f92e:	bf00      	nop
    f930:	2000ca24 	.word	0x2000ca24

0000f934 <can_thread_sleep>:
/* Verify that thread can be put into sleep (no RPC event occured in a
 * meantime), or whether we should return to nrf_modem_lib to re-verify if a sleep is
 * needed.
 */
static bool can_thread_sleep(struct thread_monitor_entry *entry)
{
    f934:	b580      	push	{r7, lr}
    f936:	b084      	sub	sp, #16
    f938:	af00      	add	r7, sp, #0
    f93a:	6078      	str	r0, [r7, #4]
	bool allow_to_sleep = true;
    f93c:	2301      	movs	r3, #1
    f93e:	73fb      	strb	r3, [r7, #15]

	if (rpc_event_cnt != entry->cnt) {
    f940:	687b      	ldr	r3, [r7, #4]
    f942:	685a      	ldr	r2, [r3, #4]
    f944:	4b06      	ldr	r3, [pc, #24]	; (f960 <can_thread_sleep+0x2c>)
    f946:	681b      	ldr	r3, [r3, #0]
    f948:	429a      	cmp	r2, r3
    f94a:	d004      	beq.n	f956 <can_thread_sleep+0x22>
		thread_monitor_entry_update(entry);
    f94c:	6878      	ldr	r0, [r7, #4]
    f94e:	f7ff ffe1 	bl	f914 <thread_monitor_entry_update>
		allow_to_sleep = false;
    f952:	2300      	movs	r3, #0
    f954:	73fb      	strb	r3, [r7, #15]
	}

	return allow_to_sleep;
    f956:	7bfb      	ldrb	r3, [r7, #15]
}
    f958:	4618      	mov	r0, r3
    f95a:	3710      	adds	r7, #16
    f95c:	46bd      	mov	sp, r7
    f95e:	bd80      	pop	{r7, pc}
    f960:	2000ca24 	.word	0x2000ca24

0000f964 <sleeping_thread_add>:

/* Add thread to the sleeping threads list. Will return information whether
 * the thread was allowed to sleep or not.
 */
static bool sleeping_thread_add(struct sleeping_thread *thread)
{
    f964:	b580      	push	{r7, lr}
    f966:	b088      	sub	sp, #32
    f968:	af00      	add	r7, sp, #0
    f96a:	6078      	str	r0, [r7, #4]
	bool allow_to_sleep = false;
    f96c:	2300      	movs	r3, #0
    f96e:	77fb      	strb	r3, [r7, #31]
	__asm__ volatile(
    f970:	f04f 0320 	mov.w	r3, #32
    f974:	f3ef 8211 	mrs	r2, BASEPRI
    f978:	f383 8812 	msr	BASEPRI_MAX, r3
    f97c:	f3bf 8f6f 	isb	sy
    f980:	613a      	str	r2, [r7, #16]
    f982:	60fb      	str	r3, [r7, #12]
	return key;
    f984:	693b      	ldr	r3, [r7, #16]
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();
    f986:	61bb      	str	r3, [r7, #24]

	entry = thread_monitor_entry_get(k_current_get());
    f988:	f7ff ff6e 	bl	f868 <k_current_get>
    f98c:	4603      	mov	r3, r0
    f98e:	4618      	mov	r0, r3
    f990:	f7ff ff76 	bl	f880 <thread_monitor_entry_get>
    f994:	6178      	str	r0, [r7, #20]

	if (can_thread_sleep(entry)) {
    f996:	6978      	ldr	r0, [r7, #20]
    f998:	f7ff ffcc 	bl	f934 <can_thread_sleep>
    f99c:	4603      	mov	r3, r0
    f99e:	2b00      	cmp	r3, #0
    f9a0:	d006      	beq.n	f9b0 <sleeping_thread_add+0x4c>
		allow_to_sleep = true;
    f9a2:	2301      	movs	r3, #1
    f9a4:	77fb      	strb	r3, [r7, #31]
		sys_slist_append(&sleeping_threads, &thread->node);
    f9a6:	687b      	ldr	r3, [r7, #4]
    f9a8:	4619      	mov	r1, r3
    f9aa:	4808      	ldr	r0, [pc, #32]	; (f9cc <sleeping_thread_add+0x68>)
    f9ac:	f00d f942 	bl	1cc34 <sys_slist_append>
    f9b0:	69bb      	ldr	r3, [r7, #24]
    f9b2:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
    f9b4:	68bb      	ldr	r3, [r7, #8]
    f9b6:	f383 8811 	msr	BASEPRI, r3
    f9ba:	f3bf 8f6f 	isb	sy
}
    f9be:	bf00      	nop
	}

	irq_unlock(key);

	return allow_to_sleep;
    f9c0:	7ffb      	ldrb	r3, [r7, #31]
}
    f9c2:	4618      	mov	r0, r3
    f9c4:	3720      	adds	r7, #32
    f9c6:	46bd      	mov	sp, r7
    f9c8:	bd80      	pop	{r7, pc}
    f9ca:	bf00      	nop
    f9cc:	2000ca1c 	.word	0x2000ca1c

0000f9d0 <sleeping_thread_remove>:

/* Remove a thread form the sleeping threads list. */
static void sleeping_thread_remove(struct sleeping_thread *thread)
{
    f9d0:	b580      	push	{r7, lr}
    f9d2:	b088      	sub	sp, #32
    f9d4:	af00      	add	r7, sp, #0
    f9d6:	6078      	str	r0, [r7, #4]
	__asm__ volatile(
    f9d8:	f04f 0320 	mov.w	r3, #32
    f9dc:	f3ef 8211 	mrs	r2, BASEPRI
    f9e0:	f383 8812 	msr	BASEPRI_MAX, r3
    f9e4:	f3bf 8f6f 	isb	sy
    f9e8:	613a      	str	r2, [r7, #16]
    f9ea:	60fb      	str	r3, [r7, #12]
	return key;
    f9ec:	693b      	ldr	r3, [r7, #16]
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();
    f9ee:	61fb      	str	r3, [r7, #28]

	sys_slist_find_and_remove(&sleeping_threads, &thread->node);
    f9f0:	687b      	ldr	r3, [r7, #4]
    f9f2:	4619      	mov	r1, r3
    f9f4:	480c      	ldr	r0, [pc, #48]	; (fa28 <sleeping_thread_remove+0x58>)
    f9f6:	f00d f97f 	bl	1ccf8 <sys_slist_find_and_remove>

	entry = thread_monitor_entry_get(k_current_get());
    f9fa:	f7ff ff35 	bl	f868 <k_current_get>
    f9fe:	4603      	mov	r3, r0
    fa00:	4618      	mov	r0, r3
    fa02:	f7ff ff3d 	bl	f880 <thread_monitor_entry_get>
    fa06:	61b8      	str	r0, [r7, #24]
	thread_monitor_entry_update(entry);
    fa08:	69b8      	ldr	r0, [r7, #24]
    fa0a:	f7ff ff83 	bl	f914 <thread_monitor_entry_update>
    fa0e:	69fb      	ldr	r3, [r7, #28]
    fa10:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    fa12:	697b      	ldr	r3, [r7, #20]
    fa14:	f383 8811 	msr	BASEPRI, r3
    fa18:	f3bf 8f6f 	isb	sy
}
    fa1c:	bf00      	nop

	irq_unlock(key);
}
    fa1e:	bf00      	nop
    fa20:	3720      	adds	r7, #32
    fa22:	46bd      	mov	sp, r7
    fa24:	bd80      	pop	{r7, pc}
    fa26:	bf00      	nop
    fa28:	2000ca1c 	.word	0x2000ca1c

0000fa2c <nrf_modem_os_errno_set>:
 *       the os errnos does not align with the nrf_errnos. See @ref nrf_errno.h for a list
 *       of all errnos required. When adding a translation table, the errno_sanity.c file
 *       could be removed.
 */
void nrf_modem_os_errno_set(int err_code)
{
    fa2c:	b580      	push	{r7, lr}
    fa2e:	b082      	sub	sp, #8
    fa30:	af00      	add	r7, sp, #0
    fa32:	6078      	str	r0, [r7, #4]
	__ASSERT(err_code > 0, "Tried to set negative error code, %d", err_code);
    fa34:	687b      	ldr	r3, [r7, #4]
    fa36:	2b00      	cmp	r3, #0
    fa38:	dc0d      	bgt.n	fa56 <nrf_modem_os_errno_set+0x2a>
    fa3a:	23df      	movs	r3, #223	; 0xdf
    fa3c:	4a0b      	ldr	r2, [pc, #44]	; (fa6c <nrf_modem_os_errno_set+0x40>)
    fa3e:	490c      	ldr	r1, [pc, #48]	; (fa70 <nrf_modem_os_errno_set+0x44>)
    fa40:	480c      	ldr	r0, [pc, #48]	; (fa74 <nrf_modem_os_errno_set+0x48>)
    fa42:	f00a fab7 	bl	19fb4 <assert_print>
    fa46:	6879      	ldr	r1, [r7, #4]
    fa48:	480b      	ldr	r0, [pc, #44]	; (fa78 <nrf_modem_os_errno_set+0x4c>)
    fa4a:	f00a fab3 	bl	19fb4 <assert_print>
    fa4e:	21df      	movs	r1, #223	; 0xdf
    fa50:	4806      	ldr	r0, [pc, #24]	; (fa6c <nrf_modem_os_errno_set+0x40>)
    fa52:	f00a fa9f 	bl	19f94 <assert_post_action>
	errno = err_code;
    fa56:	f00f ff57 	bl	1f908 <__aeabi_read_tp>
    fa5a:	4602      	mov	r2, r0
    fa5c:	4907      	ldr	r1, [pc, #28]	; (fa7c <nrf_modem_os_errno_set+0x50>)
    fa5e:	687b      	ldr	r3, [r7, #4]
    fa60:	5053      	str	r3, [r2, r1]
}
    fa62:	bf00      	nop
    fa64:	3708      	adds	r7, #8
    fa66:	46bd      	mov	sp, r7
    fa68:	bd80      	pop	{r7, pc}
    fa6a:	bf00      	nop
    fa6c:	00021f50 	.word	0x00021f50
    fa70:	00021f84 	.word	0x00021f84
    fa74:	00021f94 	.word	0x00021f94
    fa78:	00021fb4 	.word	0x00021fb4
    fa7c:	0000000c 	.word	0x0000000c

0000fa80 <nrf_modem_os_sem_init>:

static struct k_sem nrf_modem_os_sems[NRF_MODEM_OS_NUM_SEM_REQUIRED];

int nrf_modem_os_sem_init(void **sem,
	unsigned int initial_count, unsigned int limit)
{
    fa80:	b580      	push	{r7, lr}
    fa82:	b084      	sub	sp, #16
    fa84:	af00      	add	r7, sp, #0
    fa86:	60f8      	str	r0, [r7, #12]
    fa88:	60b9      	str	r1, [r7, #8]
    fa8a:	607a      	str	r2, [r7, #4]
	static uint8_t used;

	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
    fa8c:	68fb      	ldr	r3, [r7, #12]
    fa8e:	681b      	ldr	r3, [r3, #0]
    fa90:	2b00      	cmp	r3, #0
    fa92:	d00b      	beq.n	faac <nrf_modem_os_sem_init+0x2c>
    fa94:	68fb      	ldr	r3, [r7, #12]
    fa96:	681b      	ldr	r3, [r3, #0]
    fa98:	461a      	mov	r2, r3
    fa9a:	4b19      	ldr	r3, [pc, #100]	; (fb00 <nrf_modem_os_sem_init+0x80>)
    fa9c:	429a      	cmp	r2, r3
    fa9e:	d305      	bcc.n	faac <nrf_modem_os_sem_init+0x2c>
    faa0:	68fb      	ldr	r3, [r7, #12]
    faa2:	681b      	ldr	r3, [r3, #0]
    faa4:	461a      	mov	r2, r3
    faa6:	4b17      	ldr	r3, [pc, #92]	; (fb04 <nrf_modem_os_sem_init+0x84>)
    faa8:	429a      	cmp	r2, r3
    faaa:	d31c      	bcc.n	fae6 <nrf_modem_os_sem_init+0x66>
		goto recycle;
	}

	__ASSERT(used < NRF_MODEM_OS_NUM_SEM_REQUIRED,
    faac:	4b16      	ldr	r3, [pc, #88]	; (fb08 <nrf_modem_os_sem_init+0x88>)
    faae:	781b      	ldrb	r3, [r3, #0]
    fab0:	2b06      	cmp	r3, #6
    fab2:	d90c      	bls.n	face <nrf_modem_os_sem_init+0x4e>
    fab4:	23f3      	movs	r3, #243	; 0xf3
    fab6:	4a15      	ldr	r2, [pc, #84]	; (fb0c <nrf_modem_os_sem_init+0x8c>)
    fab8:	4915      	ldr	r1, [pc, #84]	; (fb10 <nrf_modem_os_sem_init+0x90>)
    faba:	4816      	ldr	r0, [pc, #88]	; (fb14 <nrf_modem_os_sem_init+0x94>)
    fabc:	f00a fa7a 	bl	19fb4 <assert_print>
    fac0:	4815      	ldr	r0, [pc, #84]	; (fb18 <nrf_modem_os_sem_init+0x98>)
    fac2:	f00a fa77 	bl	19fb4 <assert_print>
    fac6:	21f3      	movs	r1, #243	; 0xf3
    fac8:	4810      	ldr	r0, [pc, #64]	; (fb0c <nrf_modem_os_sem_init+0x8c>)
    faca:	f00a fa63 	bl	19f94 <assert_post_action>
		 "Not enough semaphores in glue layer");

	*sem = &nrf_modem_os_sems[used++];
    face:	4b0e      	ldr	r3, [pc, #56]	; (fb08 <nrf_modem_os_sem_init+0x88>)
    fad0:	781b      	ldrb	r3, [r3, #0]
    fad2:	1c5a      	adds	r2, r3, #1
    fad4:	b2d1      	uxtb	r1, r2
    fad6:	4a0c      	ldr	r2, [pc, #48]	; (fb08 <nrf_modem_os_sem_init+0x88>)
    fad8:	7011      	strb	r1, [r2, #0]
    fada:	011b      	lsls	r3, r3, #4
    fadc:	4a08      	ldr	r2, [pc, #32]	; (fb00 <nrf_modem_os_sem_init+0x80>)
    fade:	441a      	add	r2, r3
    fae0:	68fb      	ldr	r3, [r7, #12]
    fae2:	601a      	str	r2, [r3, #0]
    fae4:	e000      	b.n	fae8 <nrf_modem_os_sem_init+0x68>
		goto recycle;
    fae6:	bf00      	nop

recycle:
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
    fae8:	68fb      	ldr	r3, [r7, #12]
    faea:	681b      	ldr	r3, [r3, #0]
    faec:	687a      	ldr	r2, [r7, #4]
    faee:	68b9      	ldr	r1, [r7, #8]
    faf0:	4618      	mov	r0, r3
    faf2:	f00d f96d 	bl	1cdd0 <k_sem_init>
    faf6:	4603      	mov	r3, r0
}
    faf8:	4618      	mov	r0, r3
    fafa:	3710      	adds	r7, #16
    fafc:	46bd      	mov	sp, r7
    fafe:	bd80      	pop	{r7, pc}
    fb00:	2000ca28 	.word	0x2000ca28
    fb04:	2000ca98 	.word	0x2000ca98
    fb08:	2000cea0 	.word	0x2000cea0
    fb0c:	00021f50 	.word	0x00021f50
    fb10:	00021fdc 	.word	0x00021fdc
    fb14:	00021f94 	.word	0x00021f94
    fb18:	00021fe8 	.word	0x00021fe8

0000fb1c <nrf_modem_os_sem_give>:

void nrf_modem_os_sem_give(void *sem)
{
    fb1c:	b580      	push	{r7, lr}
    fb1e:	b082      	sub	sp, #8
    fb20:	af00      	add	r7, sp, #0
    fb22:	6078      	str	r0, [r7, #4]
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
    fb24:	687b      	ldr	r3, [r7, #4]
    fb26:	2b00      	cmp	r3, #0
    fb28:	d007      	beq.n	fb3a <nrf_modem_os_sem_give+0x1e>
    fb2a:	687b      	ldr	r3, [r7, #4]
    fb2c:	4a0d      	ldr	r2, [pc, #52]	; (fb64 <nrf_modem_os_sem_give+0x48>)
    fb2e:	4293      	cmp	r3, r2
    fb30:	d303      	bcc.n	fb3a <nrf_modem_os_sem_give+0x1e>
    fb32:	687b      	ldr	r3, [r7, #4]
    fb34:	4a0c      	ldr	r2, [pc, #48]	; (fb68 <nrf_modem_os_sem_give+0x4c>)
    fb36:	4293      	cmp	r3, r2
    fb38:	d30c      	bcc.n	fb54 <nrf_modem_os_sem_give+0x38>
    fb3a:	23fe      	movs	r3, #254	; 0xfe
    fb3c:	4a0b      	ldr	r2, [pc, #44]	; (fb6c <nrf_modem_os_sem_give+0x50>)
    fb3e:	490c      	ldr	r1, [pc, #48]	; (fb70 <nrf_modem_os_sem_give+0x54>)
    fb40:	480c      	ldr	r0, [pc, #48]	; (fb74 <nrf_modem_os_sem_give+0x58>)
    fb42:	f00a fa37 	bl	19fb4 <assert_print>
    fb46:	480c      	ldr	r0, [pc, #48]	; (fb78 <nrf_modem_os_sem_give+0x5c>)
    fb48:	f00a fa34 	bl	19fb4 <assert_print>
    fb4c:	21fe      	movs	r1, #254	; 0xfe
    fb4e:	4807      	ldr	r0, [pc, #28]	; (fb6c <nrf_modem_os_sem_give+0x50>)
    fb50:	f00a fa20 	bl	19f94 <assert_post_action>
		 "Uninitialised semaphore");

	k_sem_give((struct k_sem *)sem);
    fb54:	6878      	ldr	r0, [r7, #4]
    fb56:	f00d f95b 	bl	1ce10 <k_sem_give>
}
    fb5a:	bf00      	nop
    fb5c:	3708      	adds	r7, #8
    fb5e:	46bd      	mov	sp, r7
    fb60:	bd80      	pop	{r7, pc}
    fb62:	bf00      	nop
    fb64:	2000ca28 	.word	0x2000ca28
    fb68:	2000ca98 	.word	0x2000ca98
    fb6c:	00021f50 	.word	0x00021f50
    fb70:	00022010 	.word	0x00022010
    fb74:	00021f94 	.word	0x00021f94
    fb78:	00022198 	.word	0x00022198

0000fb7c <nrf_modem_os_sem_take>:

int nrf_modem_os_sem_take(void *sem, int timeout)
{
    fb7c:	b5b0      	push	{r4, r5, r7, lr}
    fb7e:	b084      	sub	sp, #16
    fb80:	af00      	add	r7, sp, #0
    fb82:	6078      	str	r0, [r7, #4]
    fb84:	6039      	str	r1, [r7, #0]
	int err;

	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
    fb86:	687b      	ldr	r3, [r7, #4]
    fb88:	2b00      	cmp	r3, #0
    fb8a:	d007      	beq.n	fb9c <nrf_modem_os_sem_take+0x20>
    fb8c:	687b      	ldr	r3, [r7, #4]
    fb8e:	4a1d      	ldr	r2, [pc, #116]	; (fc04 <nrf_modem_os_sem_take+0x88>)
    fb90:	4293      	cmp	r3, r2
    fb92:	d303      	bcc.n	fb9c <nrf_modem_os_sem_take+0x20>
    fb94:	687b      	ldr	r3, [r7, #4]
    fb96:	4a1c      	ldr	r2, [pc, #112]	; (fc08 <nrf_modem_os_sem_take+0x8c>)
    fb98:	4293      	cmp	r3, r2
    fb9a:	d30e      	bcc.n	fbba <nrf_modem_os_sem_take+0x3e>
    fb9c:	f44f 7384 	mov.w	r3, #264	; 0x108
    fba0:	4a1a      	ldr	r2, [pc, #104]	; (fc0c <nrf_modem_os_sem_take+0x90>)
    fba2:	491b      	ldr	r1, [pc, #108]	; (fc10 <nrf_modem_os_sem_take+0x94>)
    fba4:	481b      	ldr	r0, [pc, #108]	; (fc14 <nrf_modem_os_sem_take+0x98>)
    fba6:	f00a fa05 	bl	19fb4 <assert_print>
    fbaa:	481b      	ldr	r0, [pc, #108]	; (fc18 <nrf_modem_os_sem_take+0x9c>)
    fbac:	f00a fa02 	bl	19fb4 <assert_print>
    fbb0:	f44f 7184 	mov.w	r1, #264	; 0x108
    fbb4:	4815      	ldr	r0, [pc, #84]	; (fc0c <nrf_modem_os_sem_take+0x90>)
    fbb6:	f00a f9ed 	bl	19f94 <assert_post_action>
		 "Uninitialised semaphore");

	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    fbba:	683b      	ldr	r3, [r7, #0]
    fbbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fbc0:	d104      	bne.n	fbcc <nrf_modem_os_sem_take+0x50>
    fbc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fbc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fbca:	e00b      	b.n	fbe4 <nrf_modem_os_sem_take+0x68>
    fbcc:	683b      	ldr	r3, [r7, #0]
    fbce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fbd2:	17da      	asrs	r2, r3, #31
    fbd4:	461c      	mov	r4, r3
    fbd6:	4615      	mov	r5, r2
    fbd8:	4620      	mov	r0, r4
    fbda:	4629      	mov	r1, r5
    fbdc:	f7ff f98c 	bl	eef8 <k_ms_to_ticks_ceil64>
    fbe0:	4602      	mov	r2, r0
    fbe2:	460b      	mov	r3, r1
    fbe4:	6878      	ldr	r0, [r7, #4]
    fbe6:	f00d f903 	bl	1cdf0 <k_sem_take>
    fbea:	60f8      	str	r0, [r7, #12]
	if (err) {
    fbec:	68fb      	ldr	r3, [r7, #12]
    fbee:	2b00      	cmp	r3, #0
    fbf0:	d002      	beq.n	fbf8 <nrf_modem_os_sem_take+0x7c>
		return -NRF_EAGAIN;
    fbf2:	f06f 030a 	mvn.w	r3, #10
    fbf6:	e000      	b.n	fbfa <nrf_modem_os_sem_take+0x7e>
	}

	return 0;
    fbf8:	2300      	movs	r3, #0
}
    fbfa:	4618      	mov	r0, r3
    fbfc:	3710      	adds	r7, #16
    fbfe:	46bd      	mov	sp, r7
    fc00:	bdb0      	pop	{r4, r5, r7, pc}
    fc02:	bf00      	nop
    fc04:	2000ca28 	.word	0x2000ca28
    fc08:	2000ca98 	.word	0x2000ca98
    fc0c:	00021f50 	.word	0x00021f50
    fc10:	00022010 	.word	0x00022010
    fc14:	00021f94 	.word	0x00021f94
    fc18:	00022198 	.word	0x00022198

0000fc1c <nrf_modem_os_event_notify>:
{
	return k_sem_count_get(sem);
}

void nrf_modem_os_event_notify(uint32_t context)
{
    fc1c:	b580      	push	{r7, lr}
    fc1e:	b084      	sub	sp, #16
    fc20:	af00      	add	r7, sp, #0
    fc22:	6078      	str	r0, [r7, #4]
	atomic_inc(&rpc_event_cnt);
    fc24:	481c      	ldr	r0, [pc, #112]	; (fc98 <nrf_modem_os_event_notify+0x7c>)
    fc26:	f00c ff64 	bl	1caf2 <atomic_inc>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    fc2a:	481c      	ldr	r0, [pc, #112]	; (fc9c <nrf_modem_os_event_notify+0x80>)
    fc2c:	f00c ffcf 	bl	1cbce <sys_slist_peek_head>
    fc30:	4603      	mov	r3, r0
    fc32:	2b00      	cmp	r3, #0
    fc34:	d004      	beq.n	fc40 <nrf_modem_os_event_notify+0x24>
    fc36:	4819      	ldr	r0, [pc, #100]	; (fc9c <nrf_modem_os_event_notify+0x80>)
    fc38:	f00c ffc9 	bl	1cbce <sys_slist_peek_head>
    fc3c:	4603      	mov	r3, r0
    fc3e:	e000      	b.n	fc42 <nrf_modem_os_event_notify+0x26>
    fc40:	2300      	movs	r3, #0
    fc42:	60fb      	str	r3, [r7, #12]
    fc44:	e020      	b.n	fc88 <nrf_modem_os_event_notify+0x6c>
		if ((thread->context == context) || (context == 0)) {
    fc46:	68fb      	ldr	r3, [r7, #12]
    fc48:	695b      	ldr	r3, [r3, #20]
    fc4a:	687a      	ldr	r2, [r7, #4]
    fc4c:	429a      	cmp	r2, r3
    fc4e:	d002      	beq.n	fc56 <nrf_modem_os_event_notify+0x3a>
    fc50:	687b      	ldr	r3, [r7, #4]
    fc52:	2b00      	cmp	r3, #0
    fc54:	d104      	bne.n	fc60 <nrf_modem_os_event_notify+0x44>
			k_sem_give(&thread->sem);
    fc56:	68fb      	ldr	r3, [r7, #12]
    fc58:	3304      	adds	r3, #4
    fc5a:	4618      	mov	r0, r3
    fc5c:	f00d f8d8 	bl	1ce10 <k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    fc60:	68fb      	ldr	r3, [r7, #12]
    fc62:	2b00      	cmp	r3, #0
    fc64:	d00e      	beq.n	fc84 <nrf_modem_os_event_notify+0x68>
    fc66:	68fb      	ldr	r3, [r7, #12]
    fc68:	4618      	mov	r0, r3
    fc6a:	f00c ffd2 	bl	1cc12 <sys_slist_peek_next>
    fc6e:	4603      	mov	r3, r0
    fc70:	2b00      	cmp	r3, #0
    fc72:	d005      	beq.n	fc80 <nrf_modem_os_event_notify+0x64>
    fc74:	68fb      	ldr	r3, [r7, #12]
    fc76:	4618      	mov	r0, r3
    fc78:	f00c ffcb 	bl	1cc12 <sys_slist_peek_next>
    fc7c:	4603      	mov	r3, r0
    fc7e:	e002      	b.n	fc86 <nrf_modem_os_event_notify+0x6a>
    fc80:	2300      	movs	r3, #0
    fc82:	e000      	b.n	fc86 <nrf_modem_os_event_notify+0x6a>
    fc84:	2300      	movs	r3, #0
    fc86:	60fb      	str	r3, [r7, #12]
    fc88:	68fb      	ldr	r3, [r7, #12]
    fc8a:	2b00      	cmp	r3, #0
    fc8c:	d1db      	bne.n	fc46 <nrf_modem_os_event_notify+0x2a>
		}
	}
}
    fc8e:	bf00      	nop
    fc90:	bf00      	nop
    fc92:	3710      	adds	r7, #16
    fc94:	46bd      	mov	sp, r7
    fc96:	bd80      	pop	{r7, pc}
    fc98:	2000ca24 	.word	0x2000ca24
    fc9c:	2000ca1c 	.word	0x2000ca1c

0000fca0 <nrf_modem_os_alloc>:

void *nrf_modem_os_alloc(size_t bytes)
{
    fca0:	b580      	push	{r7, lr}
    fca2:	b084      	sub	sp, #16
    fca4:	af00      	add	r7, sp, #0
    fca6:	6078      	str	r0, [r7, #4]
	extern uint32_t nrf_modem_lib_failed_allocs;
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
    fca8:	f04f 0200 	mov.w	r2, #0
    fcac:	f04f 0300 	mov.w	r3, #0
    fcb0:	6879      	ldr	r1, [r7, #4]
    fcb2:	4805      	ldr	r0, [pc, #20]	; (fcc8 <nrf_modem_os_alloc+0x28>)
    fcb4:	f00e fc72 	bl	1e59c <k_heap_alloc>
    fcb8:	60f8      	str	r0, [r7, #12]

	if (IS_ENABLED(CONFIG_NRF_MODEM_LIB_MEM_DIAG_ALLOC) && !addr) {
		nrf_modem_lib_failed_allocs++;
	}

	return addr;
    fcba:	68f9      	ldr	r1, [r7, #12]
    fcbc:	460b      	mov	r3, r1
}
    fcbe:	4618      	mov	r0, r3
    fcc0:	3710      	adds	r7, #16
    fcc2:	46bd      	mov	sp, r7
    fcc4:	bd80      	pop	{r7, pc}
    fcc6:	bf00      	nop
    fcc8:	2000c9b4 	.word	0x2000c9b4

0000fccc <nrf_modem_os_free>:

void nrf_modem_os_free(void *mem)
{
    fccc:	b580      	push	{r7, lr}
    fcce:	b082      	sub	sp, #8
    fcd0:	af00      	add	r7, sp, #0
    fcd2:	6078      	str	r0, [r7, #4]
	k_heap_free(&nrf_modem_lib_heap, mem);
    fcd4:	6879      	ldr	r1, [r7, #4]
    fcd6:	4803      	ldr	r0, [pc, #12]	; (fce4 <nrf_modem_os_free+0x18>)
    fcd8:	f003 f98a 	bl	12ff0 <k_heap_free>
}
    fcdc:	bf00      	nop
    fcde:	3708      	adds	r7, #8
    fce0:	46bd      	mov	sp, r7
    fce2:	bd80      	pop	{r7, pc}
    fce4:	2000c9b4 	.word	0x2000c9b4

0000fce8 <nrf_modem_os_shm_tx_alloc>:

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
    fce8:	b580      	push	{r7, lr}
    fcea:	b084      	sub	sp, #16
    fcec:	af00      	add	r7, sp, #0
    fcee:	6078      	str	r0, [r7, #4]
	extern uint32_t nrf_modem_lib_shmem_failed_allocs;
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
    fcf0:	f04f 0200 	mov.w	r2, #0
    fcf4:	f04f 0300 	mov.w	r3, #0
    fcf8:	6879      	ldr	r1, [r7, #4]
    fcfa:	4805      	ldr	r0, [pc, #20]	; (fd10 <nrf_modem_os_shm_tx_alloc+0x28>)
    fcfc:	f00e fc4e 	bl	1e59c <k_heap_alloc>
    fd00:	60f8      	str	r0, [r7, #12]

	if (IS_ENABLED(CONFIG_NRF_MODEM_LIB_MEM_DIAG_ALLOC) && !addr) {
		nrf_modem_lib_shmem_failed_allocs++;
	}

	return addr;
    fd02:	68f9      	ldr	r1, [r7, #12]
    fd04:	460b      	mov	r3, r1
}
    fd06:	4618      	mov	r0, r3
    fd08:	3710      	adds	r7, #16
    fd0a:	46bd      	mov	sp, r7
    fd0c:	bd80      	pop	{r7, pc}
    fd0e:	bf00      	nop
    fd10:	2000c99c 	.word	0x2000c99c

0000fd14 <nrf_modem_os_shm_tx_free>:

void nrf_modem_os_shm_tx_free(void *mem)
{
    fd14:	b580      	push	{r7, lr}
    fd16:	b082      	sub	sp, #8
    fd18:	af00      	add	r7, sp, #0
    fd1a:	6078      	str	r0, [r7, #4]
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
    fd1c:	6879      	ldr	r1, [r7, #4]
    fd1e:	4803      	ldr	r0, [pc, #12]	; (fd2c <nrf_modem_os_shm_tx_free+0x18>)
    fd20:	f003 f966 	bl	12ff0 <k_heap_free>
}
    fd24:	bf00      	nop
    fd26:	3708      	adds	r7, #8
    fd28:	46bd      	mov	sp, r7
    fd2a:	bd80      	pop	{r7, pc}
    fd2c:	2000c99c 	.word	0x2000c99c

0000fd30 <on_init>:
#endif /* CONFIG_LOG */
}

/* On application initialization */
static int on_init(void)
{
    fd30:	b580      	push	{r7, lr}
    fd32:	af00      	add	r7, sp, #0
	/* The list of sleeping threads should only be initialized once at the application
	 * initialization. This is because we want to keep the list intact regardless of modem
	 * reinitialization to wake sleeping threads on modem initialization.
	 */
	sys_slist_init(&sleeping_threads);
    fd34:	4804      	ldr	r0, [pc, #16]	; (fd48 <on_init+0x18>)
    fd36:	f00c ff09 	bl	1cb4c <sys_slist_init>
	atomic_clear(&rpc_event_cnt);
    fd3a:	4804      	ldr	r0, [pc, #16]	; (fd4c <on_init+0x1c>)
    fd3c:	f00c fef9 	bl	1cb32 <atomic_clear>

	return 0;
    fd40:	2300      	movs	r3, #0
}
    fd42:	4618      	mov	r0, r3
    fd44:	bd80      	pop	{r7, pc}
    fd46:	bf00      	nop
    fd48:	2000ca1c 	.word	0x2000ca1c
    fd4c:	2000ca24 	.word	0x2000ca24

0000fd50 <z_log_minimal_level_to_char>:
{
    fd50:	b480      	push	{r7}
    fd52:	b083      	sub	sp, #12
    fd54:	af00      	add	r7, sp, #0
    fd56:	6078      	str	r0, [r7, #4]
	switch (level) {
    fd58:	687b      	ldr	r3, [r7, #4]
    fd5a:	3b01      	subs	r3, #1
    fd5c:	2b03      	cmp	r3, #3
    fd5e:	d813      	bhi.n	fd88 <z_log_minimal_level_to_char+0x38>
    fd60:	a201      	add	r2, pc, #4	; (adr r2, fd68 <z_log_minimal_level_to_char+0x18>)
    fd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fd66:	bf00      	nop
    fd68:	0000fd79 	.word	0x0000fd79
    fd6c:	0000fd7d 	.word	0x0000fd7d
    fd70:	0000fd81 	.word	0x0000fd81
    fd74:	0000fd85 	.word	0x0000fd85
		return 'E';
    fd78:	2345      	movs	r3, #69	; 0x45
    fd7a:	e006      	b.n	fd8a <z_log_minimal_level_to_char+0x3a>
		return 'W';
    fd7c:	2357      	movs	r3, #87	; 0x57
    fd7e:	e004      	b.n	fd8a <z_log_minimal_level_to_char+0x3a>
		return 'I';
    fd80:	2349      	movs	r3, #73	; 0x49
    fd82:	e002      	b.n	fd8a <z_log_minimal_level_to_char+0x3a>
		return 'D';
    fd84:	2344      	movs	r3, #68	; 0x44
    fd86:	e000      	b.n	fd8a <z_log_minimal_level_to_char+0x3a>
		return '?';
    fd88:	233f      	movs	r3, #63	; 0x3f
}
    fd8a:	4618      	mov	r0, r3
    fd8c:	370c      	adds	r7, #12
    fd8e:	46bd      	mov	sp, r7
    fd90:	bc80      	pop	{r7}
    fd92:	4770      	bx	lr

0000fd94 <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
    fd94:	b580      	push	{r7, lr}
    fd96:	b084      	sub	sp, #16
    fd98:	af00      	add	r7, sp, #0
    fd9a:	6078      	str	r0, [r7, #4]
    fd9c:	6039      	str	r1, [r7, #0]
	int err;

	if (ret != 0) {
    fd9e:	687b      	ldr	r3, [r7, #4]
    fda0:	2b00      	cmp	r3, #0
    fda2:	d140      	bne.n	fe26 <on_modem_lib_init+0x92>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
    fda4:	2303      	movs	r3, #3
    fda6:	2b03      	cmp	r3, #3
    fda8:	d908      	bls.n	fdbc <on_modem_lib_init+0x28>
    fdaa:	2004      	movs	r0, #4
    fdac:	f7ff ffd0 	bl	fd50 <z_log_minimal_level_to_char>
    fdb0:	4603      	mov	r3, r0
    fdb2:	4a1f      	ldr	r2, [pc, #124]	; (fe30 <on_modem_lib_init+0x9c>)
    fdb4:	4619      	mov	r1, r3
    fdb6:	481f      	ldr	r0, [pc, #124]	; (fe34 <on_modem_lib_init+0xa0>)
    fdb8:	f00a f91f 	bl	19ffa <z_log_minimal_printk>
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
    fdbc:	491c      	ldr	r1, [pc, #112]	; (fe30 <on_modem_lib_init+0x9c>)
    fdbe:	481e      	ldr	r0, [pc, #120]	; (fe38 <on_modem_lib_init+0xa4>)
    fdc0:	f002 f986 	bl	120d0 <nrf_modem_at_printf>
    fdc4:	60f8      	str	r0, [r7, #12]
		if (err) {
    fdc6:	68fb      	ldr	r3, [r7, #12]
    fdc8:	2b00      	cmp	r3, #0
    fdca:	d00b      	beq.n	fde4 <on_modem_lib_init+0x50>
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
    fdcc:	2303      	movs	r3, #3
    fdce:	2b00      	cmp	r3, #0
    fdd0:	d008      	beq.n	fde4 <on_modem_lib_init+0x50>
    fdd2:	2001      	movs	r0, #1
    fdd4:	f7ff ffbc 	bl	fd50 <z_log_minimal_level_to_char>
    fdd8:	4603      	mov	r3, r0
    fdda:	68fa      	ldr	r2, [r7, #12]
    fddc:	4619      	mov	r1, r3
    fdde:	4817      	ldr	r0, [pc, #92]	; (fe3c <on_modem_lib_init+0xa8>)
    fde0:	f00a f90b 	bl	19ffa <z_log_minimal_printk>
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
    fde4:	2303      	movs	r3, #3
    fde6:	2b03      	cmp	r3, #3
    fde8:	d908      	bls.n	fdfc <on_modem_lib_init+0x68>
    fdea:	2004      	movs	r0, #4
    fdec:	f7ff ffb0 	bl	fd50 <z_log_minimal_level_to_char>
    fdf0:	4603      	mov	r3, r0
    fdf2:	4a13      	ldr	r2, [pc, #76]	; (fe40 <on_modem_lib_init+0xac>)
    fdf4:	4619      	mov	r1, r3
    fdf6:	4813      	ldr	r0, [pc, #76]	; (fe44 <on_modem_lib_init+0xb0>)
    fdf8:	f00a f8ff 	bl	19ffa <z_log_minimal_printk>
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
    fdfc:	4910      	ldr	r1, [pc, #64]	; (fe40 <on_modem_lib_init+0xac>)
    fdfe:	480e      	ldr	r0, [pc, #56]	; (fe38 <on_modem_lib_init+0xa4>)
    fe00:	f002 f966 	bl	120d0 <nrf_modem_at_printf>
    fe04:	60f8      	str	r0, [r7, #12]
		if (err) {
    fe06:	68fb      	ldr	r3, [r7, #12]
    fe08:	2b00      	cmp	r3, #0
    fe0a:	d00d      	beq.n	fe28 <on_modem_lib_init+0x94>
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
    fe0c:	2303      	movs	r3, #3
    fe0e:	2b00      	cmp	r3, #0
    fe10:	d00a      	beq.n	fe28 <on_modem_lib_init+0x94>
    fe12:	2001      	movs	r0, #1
    fe14:	f7ff ff9c 	bl	fd50 <z_log_minimal_level_to_char>
    fe18:	4603      	mov	r3, r0
    fe1a:	68fa      	ldr	r2, [r7, #12]
    fe1c:	4619      	mov	r1, r3
    fe1e:	480a      	ldr	r0, [pc, #40]	; (fe48 <on_modem_lib_init+0xb4>)
    fe20:	f00a f8eb 	bl	19ffa <z_log_minimal_printk>
    fe24:	e000      	b.n	fe28 <on_modem_lib_init+0x94>
		return;
    fe26:	bf00      	nop
		}
	}
}
    fe28:	3710      	adds	r7, #16
    fe2a:	46bd      	mov	sp, r7
    fe2c:	bd80      	pop	{r7, pc}
    fe2e:	bf00      	nop
    fe30:	000221d8 	.word	0x000221d8
    fe34:	000221f8 	.word	0x000221f8
    fe38:	00022220 	.word	0x00022220
    fe3c:	00022224 	.word	0x00022224
    fe40:	00022258 	.word	0x00022258
    fe44:	00022270 	.word	0x00022270
    fe48:	00022298 	.word	0x00022298

0000fe4c <k_is_pre_kernel>:
{
    fe4c:	b480      	push	{r7}
    fe4e:	af00      	add	r7, sp, #0
	return !z_sys_post_kernel;
    fe50:	4b08      	ldr	r3, [pc, #32]	; (fe74 <k_is_pre_kernel+0x28>)
    fe52:	781b      	ldrb	r3, [r3, #0]
    fe54:	2b00      	cmp	r3, #0
    fe56:	bf14      	ite	ne
    fe58:	2301      	movne	r3, #1
    fe5a:	2300      	moveq	r3, #0
    fe5c:	b2db      	uxtb	r3, r3
    fe5e:	f083 0301 	eor.w	r3, r3, #1
    fe62:	b2db      	uxtb	r3, r3
    fe64:	f003 0301 	and.w	r3, r3, #1
    fe68:	b2db      	uxtb	r3, r3
}
    fe6a:	4618      	mov	r0, r3
    fe6c:	46bd      	mov	sp, r7
    fe6e:	bc80      	pop	{r7}
    fe70:	4770      	bx	lr
    fe72:	bf00      	nop
    fe74:	2000ceac 	.word	0x2000ceac

0000fe78 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
    fe78:	b590      	push	{r4, r7, lr}
    fe7a:	b0a9      	sub	sp, #164	; 0xa4
    fe7c:	af00      	add	r7, sp, #0
    fe7e:	60f8      	str	r0, [r7, #12]
    fe80:	60b9      	str	r1, [r7, #8]
    fe82:	607a      	str	r2, [r7, #4]
    fe84:	603b      	str	r3, [r7, #0]
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
    fe86:	f7ff ffe1 	bl	fe4c <k_is_pre_kernel>
    fe8a:	4603      	mov	r3, r0
    fe8c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
    fe90:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
    fe94:	f083 0301 	eor.w	r3, r3, #1
    fe98:	b2db      	uxtb	r3, r3
    fe9a:	2b00      	cmp	r3, #0
    fe9c:	d00b      	beq.n	feb6 <tfm_ns_interface_dispatch+0x3e>
		/* TF-M request protected by NS lock */
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
    fe9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fea6:	4816      	ldr	r0, [pc, #88]	; (ff00 <CONFIG_LV_COLOR_CHROMA_KEY_HEX>)
    fea8:	f00d f87b 	bl	1cfa2 <k_mutex_lock>
    feac:	4603      	mov	r3, r0
    feae:	2b00      	cmp	r3, #0
    feb0:	d001      	beq.n	feb6 <tfm_ns_interface_dispatch+0x3e>
			return (int32_t)TFM_ERROR_GENERIC;
    feb2:	211f      	movs	r1, #31
    feb4:	e01e      	b.n	fef4 <tfm_ns_interface_dispatch+0x7c>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
    feb6:	f107 0310 	add.w	r3, r7, #16
    feba:	4618      	mov	r0, r3
    febc:	f00a f94e 	bl	1a15c <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
    fec0:	68fc      	ldr	r4, [r7, #12]
    fec2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    fec6:	683a      	ldr	r2, [r7, #0]
    fec8:	6879      	ldr	r1, [r7, #4]
    feca:	68b8      	ldr	r0, [r7, #8]
    fecc:	47a0      	blx	r4
    fece:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	z_arm_restore_fp_context(&context_buffer);
    fed2:	f107 0310 	add.w	r3, r7, #16
    fed6:	4618      	mov	r0, r3
    fed8:	f00a f949 	bl	1a16e <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
    fedc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
    fee0:	f083 0301 	eor.w	r3, r3, #1
    fee4:	b2db      	uxtb	r3, r3
    fee6:	2b00      	cmp	r3, #0
    fee8:	d002      	beq.n	fef0 <tfm_ns_interface_dispatch+0x78>
#if !defined(CONFIG_ARM_NONSECURE_PREEMPTIBLE_SECURE_CALLS)
		/* Restore thread priority, to allow the thread to be preempted. */
		k_thread_priority_set(k_current_get(), tfm_ns_saved_prio);
#endif

		k_mutex_unlock(&tfm_mutex);
    feea:	4805      	ldr	r0, [pc, #20]	; (ff00 <CONFIG_LV_COLOR_CHROMA_KEY_HEX>)
    feec:	f00d f869 	bl	1cfc2 <k_mutex_unlock>
	}

	return result;
    fef0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
}
    fef4:	460b      	mov	r3, r1
    fef6:	4618      	mov	r0, r3
    fef8:	37a4      	adds	r7, #164	; 0xa4
    fefa:	46bd      	mov	sp, r7
    fefc:	bd90      	pop	{r4, r7, pc}
    fefe:	bf00      	nop
    ff00:	2000c754 	.word	0x2000c754

0000ff04 <ns_interface_init>:
#if defined(TFM_PSA_API)
#include "psa_manifest/sid.h"
#endif /* TFM_PSA_API */

static int ns_interface_init(void)
{
    ff04:	b580      	push	{r7, lr}
    ff06:	af00      	add	r7, sp, #0

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
    ff08:	f00d f867 	bl	1cfda <tfm_ns_interface_init>
    ff0c:	4603      	mov	r3, r0
    ff0e:	2b00      	cmp	r3, #0
    ff10:	d00c      	beq.n	ff2c <ns_interface_init+0x28>
    ff12:	235d      	movs	r3, #93	; 0x5d
    ff14:	4a07      	ldr	r2, [pc, #28]	; (ff34 <ns_interface_init+0x30>)
    ff16:	4908      	ldr	r1, [pc, #32]	; (ff38 <ns_interface_init+0x34>)
    ff18:	4808      	ldr	r0, [pc, #32]	; (ff3c <ns_interface_init+0x38>)
    ff1a:	f00a f84b 	bl	19fb4 <assert_print>
    ff1e:	4808      	ldr	r0, [pc, #32]	; (ff40 <ns_interface_init+0x3c>)
    ff20:	f00a f848 	bl	19fb4 <assert_print>
    ff24:	215d      	movs	r1, #93	; 0x5d
    ff26:	4803      	ldr	r0, [pc, #12]	; (ff34 <ns_interface_init+0x30>)
    ff28:	f00a f834 	bl	19f94 <assert_post_action>
		"TF-M NS interface init failed");

	return 0;
    ff2c:	2300      	movs	r3, #0
}
    ff2e:	4618      	mov	r0, r3
    ff30:	bd80      	pop	{r7, pc}
    ff32:	bf00      	nop
    ff34:	000222cc 	.word	0x000222cc
    ff38:	00022310 	.word	0x00022310
    ff3c:	00022338 	.word	0x00022338
    ff40:	00022358 	.word	0x00022358

0000ff44 <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

TFM_CRYPTO_API(psa_status_t, psa_generate_random)(uint8_t *output,
                                                  size_t output_size)
{
    ff44:	b580      	push	{r7, lr}
    ff46:	b094      	sub	sp, #80	; 0x50
    ff48:	af02      	add	r7, sp, #8
    ff4a:	6078      	str	r0, [r7, #4]
    ff4c:	6039      	str	r1, [r7, #0]
    struct tfm_crypto_pack_iovec iov = {
    ff4e:	f107 0318 	add.w	r3, r7, #24
    ff52:	2230      	movs	r2, #48	; 0x30
    ff54:	2100      	movs	r1, #0
    ff56:	4618      	mov	r0, r3
    ff58:	f00f fcc6 	bl	1f8e8 <memset>
        .function_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
    ff5c:	f107 0318 	add.w	r3, r7, #24
    ff60:	613b      	str	r3, [r7, #16]
    ff62:	2330      	movs	r3, #48	; 0x30
    ff64:	617b      	str	r3, [r7, #20]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
    ff66:	687b      	ldr	r3, [r7, #4]
    ff68:	60bb      	str	r3, [r7, #8]
    ff6a:	683b      	ldr	r3, [r7, #0]
    ff6c:	60fb      	str	r3, [r7, #12]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
    ff6e:	683b      	ldr	r3, [r7, #0]
    ff70:	2b00      	cmp	r3, #0
    ff72:	d101      	bne.n	ff78 <psa_generate_random+0x34>
        return PSA_SUCCESS;
    ff74:	2300      	movs	r3, #0
    ff76:	e00c      	b.n	ff92 <psa_generate_random+0x4e>
    }

    return API_DISPATCH(in_vec, out_vec);
    ff78:	f107 0210 	add.w	r2, r7, #16
    ff7c:	2301      	movs	r3, #1
    ff7e:	9301      	str	r3, [sp, #4]
    ff80:	f107 0308 	add.w	r3, r7, #8
    ff84:	9300      	str	r3, [sp, #0]
    ff86:	2301      	movs	r3, #1
    ff88:	2100      	movs	r1, #0
    ff8a:	4804      	ldr	r0, [pc, #16]	; (ff9c <psa_generate_random+0x58>)
    ff8c:	f000 f808 	bl	ffa0 <psa_call>
    ff90:	4603      	mov	r3, r0
}
    ff92:	4618      	mov	r0, r3
    ff94:	3748      	adds	r7, #72	; 0x48
    ff96:	46bd      	mov	sp, r7
    ff98:	bd80      	pop	{r7, pc}
    ff9a:	bf00      	nop
    ff9c:	40000100 	.word	0x40000100

0000ffa0 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
    ffa0:	b580      	push	{r7, lr}
    ffa2:	b086      	sub	sp, #24
    ffa4:	af02      	add	r7, sp, #8
    ffa6:	60f8      	str	r0, [r7, #12]
    ffa8:	60b9      	str	r1, [r7, #8]
    ffaa:	607a      	str	r2, [r7, #4]
    ffac:	603b      	str	r3, [r7, #0]
    if ((type > INT16_MAX) ||
    ffae:	68bb      	ldr	r3, [r7, #8]
    ffb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ffb4:	da09      	bge.n	ffca <psa_call+0x2a>
    ffb6:	68bb      	ldr	r3, [r7, #8]
    ffb8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    ffbc:	db05      	blt.n	ffca <psa_call+0x2a>
        (type < INT16_MIN) ||
    ffbe:	683b      	ldr	r3, [r7, #0]
    ffc0:	2bff      	cmp	r3, #255	; 0xff
    ffc2:	d802      	bhi.n	ffca <psa_call+0x2a>
        (in_len > UINT8_MAX) ||
    ffc4:	69fb      	ldr	r3, [r7, #28]
    ffc6:	2bff      	cmp	r3, #255	; 0xff
    ffc8:	d902      	bls.n	ffd0 <psa_call+0x30>
        (out_len > UINT8_MAX)) {
        return PSA_ERROR_PROGRAMMER_ERROR;
    ffca:	f06f 0380 	mvn.w	r3, #128	; 0x80
    ffce:	e011      	b.n	fff4 <psa_call+0x54>
    }

    return tfm_ns_interface_dispatch(
    ffd0:	68f9      	ldr	r1, [r7, #12]
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
    ffd2:	68bb      	ldr	r3, [r7, #8]
    ffd4:	041a      	lsls	r2, r3, #16
    ffd6:	683b      	ldr	r3, [r7, #0]
    ffd8:	021b      	lsls	r3, r3, #8
    ffda:	b29b      	uxth	r3, r3
    ffdc:	431a      	orrs	r2, r3
    ffde:	69fb      	ldr	r3, [r7, #28]
    ffe0:	b2db      	uxtb	r3, r3
    ffe2:	431a      	orrs	r2, r3
    return tfm_ns_interface_dispatch(
    ffe4:	6878      	ldr	r0, [r7, #4]
    ffe6:	69bb      	ldr	r3, [r7, #24]
    ffe8:	9300      	str	r3, [sp, #0]
    ffea:	4603      	mov	r3, r0
    ffec:	4803      	ldr	r0, [pc, #12]	; (fffc <psa_call+0x5c>)
    ffee:	f7ff ff43 	bl	fe78 <tfm_ns_interface_dispatch>
    fff2:	4603      	mov	r3, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
    fff4:	4618      	mov	r0, r3
    fff6:	3710      	adds	r7, #16
    fff8:	46bd      	mov	sp, r7
    fffa:	bd80      	pop	{r7, pc}
    fffc:	00007c21 	.word	0x00007c21

00010000 <nrfx_error_string_get>:
		nrfx_coredep_delay_us(usec_to_wait);
	}
}

char const *nrfx_error_string_get(nrfx_err_t code)
{
   10000:	b480      	push	{r7}
   10002:	b083      	sub	sp, #12
   10004:	af00      	add	r7, sp, #0
   10006:	6078      	str	r0, [r7, #4]
	#define NRFX_ERROR_STRING_CASE(code)  case code: return #code
	switch (code) {
   10008:	687b      	ldr	r3, [r7, #4]
   1000a:	4a33      	ldr	r2, [pc, #204]	; (100d8 <nrfx_error_string_get+0xd8>)
   1000c:	4293      	cmp	r3, r2
   1000e:	d05a      	beq.n	100c6 <nrfx_error_string_get+0xc6>
   10010:	687b      	ldr	r3, [r7, #4]
   10012:	4a31      	ldr	r2, [pc, #196]	; (100d8 <nrfx_error_string_get+0xd8>)
   10014:	4293      	cmp	r3, r2
   10016:	d858      	bhi.n	100ca <nrfx_error_string_get+0xca>
   10018:	687b      	ldr	r3, [r7, #4]
   1001a:	4a30      	ldr	r2, [pc, #192]	; (100dc <nrfx_error_string_get+0xdc>)
   1001c:	4293      	cmp	r3, r2
   1001e:	d050      	beq.n	100c2 <nrfx_error_string_get+0xc2>
   10020:	687b      	ldr	r3, [r7, #4]
   10022:	4a2e      	ldr	r2, [pc, #184]	; (100dc <nrfx_error_string_get+0xdc>)
   10024:	4293      	cmp	r3, r2
   10026:	d850      	bhi.n	100ca <nrfx_error_string_get+0xca>
   10028:	687b      	ldr	r3, [r7, #4]
   1002a:	4a2d      	ldr	r2, [pc, #180]	; (100e0 <nrfx_error_string_get+0xe0>)
   1002c:	4293      	cmp	r3, r2
   1002e:	d227      	bcs.n	10080 <nrfx_error_string_get+0x80>
   10030:	687b      	ldr	r3, [r7, #4]
   10032:	4a2c      	ldr	r2, [pc, #176]	; (100e4 <nrfx_error_string_get+0xe4>)
   10034:	4293      	cmp	r3, r2
   10036:	d348      	bcc.n	100ca <nrfx_error_string_get+0xca>
   10038:	687b      	ldr	r3, [r7, #4]
   1003a:	f103 4374 	add.w	r3, r3, #4093640704	; 0xf4000000
   1003e:	f503 03a6 	add.w	r3, r3, #5439488	; 0x530000
   10042:	2b0c      	cmp	r3, #12
   10044:	d841      	bhi.n	100ca <nrfx_error_string_get+0xca>
   10046:	a201      	add	r2, pc, #4	; (adr r2, 1004c <nrfx_error_string_get+0x4c>)
   10048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1004c:	0001008b 	.word	0x0001008b
   10050:	0001008f 	.word	0x0001008f
   10054:	00010093 	.word	0x00010093
   10058:	00010097 	.word	0x00010097
   1005c:	0001009b 	.word	0x0001009b
   10060:	0001009f 	.word	0x0001009f
   10064:	000100a3 	.word	0x000100a3
   10068:	000100a7 	.word	0x000100a7
   1006c:	000100ab 	.word	0x000100ab
   10070:	000100af 	.word	0x000100af
   10074:	000100b3 	.word	0x000100b3
   10078:	000100b7 	.word	0x000100b7
   1007c:	000100bb 	.word	0x000100bb
   10080:	687b      	ldr	r3, [r7, #4]
   10082:	4a19      	ldr	r2, [pc, #100]	; (100e8 <nrfx_error_string_get+0xe8>)
   10084:	4293      	cmp	r3, r2
   10086:	d01a      	beq.n	100be <nrfx_error_string_get+0xbe>
   10088:	e01f      	b.n	100ca <nrfx_error_string_get+0xca>
		NRFX_ERROR_STRING_CASE(NRFX_SUCCESS);
   1008a:	4b18      	ldr	r3, [pc, #96]	; (100ec <nrfx_error_string_get+0xec>)
   1008c:	e01e      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INTERNAL);
   1008e:	4b18      	ldr	r3, [pc, #96]	; (100f0 <nrfx_error_string_get+0xf0>)
   10090:	e01c      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_NO_MEM);
   10092:	4b18      	ldr	r3, [pc, #96]	; (100f4 <nrfx_error_string_get+0xf4>)
   10094:	e01a      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_NOT_SUPPORTED);
   10096:	4b18      	ldr	r3, [pc, #96]	; (100f8 <nrfx_error_string_get+0xf8>)
   10098:	e018      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INVALID_PARAM);
   1009a:	4b18      	ldr	r3, [pc, #96]	; (100fc <nrfx_error_string_get+0xfc>)
   1009c:	e016      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INVALID_STATE);
   1009e:	4b18      	ldr	r3, [pc, #96]	; (10100 <nrfx_error_string_get+0x100>)
   100a0:	e014      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INVALID_LENGTH);
   100a2:	4b18      	ldr	r3, [pc, #96]	; (10104 <nrfx_error_string_get+0x104>)
   100a4:	e012      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_TIMEOUT);
   100a6:	4b18      	ldr	r3, [pc, #96]	; (10108 <nrfx_error_string_get+0x108>)
   100a8:	e010      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_FORBIDDEN);
   100aa:	4b18      	ldr	r3, [pc, #96]	; (1010c <nrfx_error_string_get+0x10c>)
   100ac:	e00e      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_NULL);
   100ae:	4b18      	ldr	r3, [pc, #96]	; (10110 <nrfx_error_string_get+0x110>)
   100b0:	e00c      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INVALID_ADDR);
   100b2:	4b18      	ldr	r3, [pc, #96]	; (10114 <nrfx_error_string_get+0x114>)
   100b4:	e00a      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_BUSY);
   100b6:	4b18      	ldr	r3, [pc, #96]	; (10118 <nrfx_error_string_get+0x118>)
   100b8:	e008      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_ALREADY_INITIALIZED);
   100ba:	4b18      	ldr	r3, [pc, #96]	; (1011c <nrfx_error_string_get+0x11c>)
   100bc:	e006      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_DRV_TWI_ERR_OVERRUN);
   100be:	4b18      	ldr	r3, [pc, #96]	; (10120 <nrfx_error_string_get+0x120>)
   100c0:	e004      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_DRV_TWI_ERR_ANACK);
   100c2:	4b18      	ldr	r3, [pc, #96]	; (10124 <nrfx_error_string_get+0x124>)
   100c4:	e002      	b.n	100cc <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_DRV_TWI_ERR_DNACK);
   100c6:	4b18      	ldr	r3, [pc, #96]	; (10128 <nrfx_error_string_get+0x128>)
   100c8:	e000      	b.n	100cc <nrfx_error_string_get+0xcc>
		default: return "unknown";
   100ca:	4b18      	ldr	r3, [pc, #96]	; (1012c <nrfx_error_string_get+0x12c>)
	}
}
   100cc:	4618      	mov	r0, r3
   100ce:	370c      	adds	r7, #12
   100d0:	46bd      	mov	sp, r7
   100d2:	bc80      	pop	{r7}
   100d4:	4770      	bx	lr
   100d6:	bf00      	nop
   100d8:	0bae0002 	.word	0x0bae0002
   100dc:	0bae0001 	.word	0x0bae0001
   100e0:	0bad000d 	.word	0x0bad000d
   100e4:	0bad0000 	.word	0x0bad0000
   100e8:	0bae0000 	.word	0x0bae0000
   100ec:	00022378 	.word	0x00022378
   100f0:	00022388 	.word	0x00022388
   100f4:	0002239c 	.word	0x0002239c
   100f8:	000223b0 	.word	0x000223b0
   100fc:	000223cc 	.word	0x000223cc
   10100:	000223e8 	.word	0x000223e8
   10104:	00022404 	.word	0x00022404
   10108:	00022420 	.word	0x00022420
   1010c:	00022434 	.word	0x00022434
   10110:	0002244c 	.word	0x0002244c
   10114:	0002245c 	.word	0x0002245c
   10118:	00022474 	.word	0x00022474
   1011c:	00022484 	.word	0x00022484
   10120:	000224a4 	.word	0x000224a4
   10124:	000224c4 	.word	0x000224c4
   10128:	000224e4 	.word	0x000224e4
   1012c:	00022504 	.word	0x00022504

00010130 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   10130:	b580      	push	{r7, lr}
   10132:	b086      	sub	sp, #24
   10134:	af00      	add	r7, sp, #0
   10136:	6078      	str	r0, [r7, #4]
   10138:	6039      	str	r1, [r7, #0]
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   1013a:	687b      	ldr	r3, [r7, #4]
   1013c:	681b      	ldr	r3, [r3, #0]
   1013e:	617b      	str	r3, [r7, #20]
        if (prev_mask == 0)
   10140:	697b      	ldr	r3, [r7, #20]
   10142:	2b00      	cmp	r3, #0
   10144:	d101      	bne.n	1014a <nrfx_flag32_alloc+0x1a>
        {
            return NRFX_ERROR_NO_MEM;
   10146:	4b13      	ldr	r3, [pc, #76]	; (10194 <nrfx_flag32_alloc+0x64>)
   10148:	e020      	b.n	1018c <nrfx_flag32_alloc+0x5c>
        }

        idx = 31 - NRF_CLZ(prev_mask);
   1014a:	697b      	ldr	r3, [r7, #20]
   1014c:	fab3 f383 	clz	r3, r3
   10150:	b2db      	uxtb	r3, r3
   10152:	f1c3 031f 	rsb	r3, r3, #31
   10156:	b2db      	uxtb	r3, r3
   10158:	74fb      	strb	r3, [r7, #19]
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1015a:	f997 3013 	ldrsb.w	r3, [r7, #19]
   1015e:	2201      	movs	r2, #1
   10160:	fa02 f303 	lsl.w	r3, r2, r3
   10164:	43db      	mvns	r3, r3
   10166:	697a      	ldr	r2, [r7, #20]
   10168:	4013      	ands	r3, r2
   1016a:	60fb      	str	r3, [r7, #12]
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1016c:	697b      	ldr	r3, [r7, #20]
   1016e:	68fa      	ldr	r2, [r7, #12]
   10170:	4619      	mov	r1, r3
   10172:	6878      	ldr	r0, [r7, #4]
   10174:	f00c ff65 	bl	1d042 <atomic_cas>
   10178:	4603      	mov	r3, r0
   1017a:	f083 0301 	eor.w	r3, r3, #1
   1017e:	b2db      	uxtb	r3, r3
   10180:	2b00      	cmp	r3, #0
   10182:	d1da      	bne.n	1013a <nrfx_flag32_alloc+0xa>

    *p_flag = idx;
   10184:	7cfa      	ldrb	r2, [r7, #19]
   10186:	683b      	ldr	r3, [r7, #0]
   10188:	701a      	strb	r2, [r3, #0]

    return NRFX_SUCCESS;
   1018a:	4b03      	ldr	r3, [pc, #12]	; (10198 <nrfx_flag32_alloc+0x68>)
}
   1018c:	4618      	mov	r0, r3
   1018e:	3718      	adds	r7, #24
   10190:	46bd      	mov	sp, r7
   10192:	bd80      	pop	{r7, pc}
   10194:	0bad0002 	.word	0x0bad0002
   10198:	0bad0000 	.word	0x0bad0000

0001019c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1019c:	b580      	push	{r7, lr}
   1019e:	b084      	sub	sp, #16
   101a0:	af00      	add	r7, sp, #0
   101a2:	6078      	str	r0, [r7, #4]
   101a4:	460b      	mov	r3, r1
   101a6:	70fb      	strb	r3, [r7, #3]
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   101a8:	687b      	ldr	r3, [r7, #4]
   101aa:	681b      	ldr	r3, [r3, #0]
   101ac:	461a      	mov	r2, r3
   101ae:	78fb      	ldrb	r3, [r7, #3]
   101b0:	fa22 f303 	lsr.w	r3, r2, r3
   101b4:	f003 0301 	and.w	r3, r3, #1
   101b8:	2b00      	cmp	r3, #0
   101ba:	d001      	beq.n	101c0 <nrfx_flag32_free+0x24>
    {
        return NRFX_ERROR_INVALID_PARAM;
   101bc:	4b0e      	ldr	r3, [pc, #56]	; (101f8 <nrfx_flag32_free+0x5c>)
   101be:	e016      	b.n	101ee <nrfx_flag32_free+0x52>
    }

    do {
        prev_mask = *p_mask;
   101c0:	687b      	ldr	r3, [r7, #4]
   101c2:	681b      	ldr	r3, [r3, #0]
   101c4:	60fb      	str	r3, [r7, #12]
        new_mask = prev_mask | NRFX_BIT(flag);
   101c6:	78fb      	ldrb	r3, [r7, #3]
   101c8:	2201      	movs	r2, #1
   101ca:	fa02 f303 	lsl.w	r3, r2, r3
   101ce:	68fa      	ldr	r2, [r7, #12]
   101d0:	4313      	orrs	r3, r2
   101d2:	60bb      	str	r3, [r7, #8]
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   101d4:	68fb      	ldr	r3, [r7, #12]
   101d6:	68ba      	ldr	r2, [r7, #8]
   101d8:	4619      	mov	r1, r3
   101da:	6878      	ldr	r0, [r7, #4]
   101dc:	f00c ff31 	bl	1d042 <atomic_cas>
   101e0:	4603      	mov	r3, r0
   101e2:	f083 0301 	eor.w	r3, r3, #1
   101e6:	b2db      	uxtb	r3, r3
   101e8:	2b00      	cmp	r3, #0
   101ea:	d1e9      	bne.n	101c0 <nrfx_flag32_free+0x24>

    return NRFX_SUCCESS;
   101ec:	4b03      	ldr	r3, [pc, #12]	; (101fc <nrfx_flag32_free+0x60>)
}
   101ee:	4618      	mov	r0, r3
   101f0:	3710      	adds	r7, #16
   101f2:	46bd      	mov	sp, r7
   101f4:	bd80      	pop	{r7, pc}
   101f6:	bf00      	nop
   101f8:	0bad0004 	.word	0x0bad0004
   101fc:	0bad0000 	.word	0x0bad0000

00010200 <nrfx_gppi_channels_enable>:
{
    nrfy_dppi_channels_disable_all(NRF_DPPIC);
}

void nrfx_gppi_channels_enable(uint32_t mask)
{
   10200:	b580      	push	{r7, lr}
   10202:	b082      	sub	sp, #8
   10204:	af00      	add	r7, sp, #0
   10206:	6078      	str	r0, [r7, #4]
    nrfy_dppi_channels_enable(NRF_DPPIC, mask);
   10208:	6879      	ldr	r1, [r7, #4]
   1020a:	4803      	ldr	r0, [pc, #12]	; (10218 <nrfx_gppi_channels_enable+0x18>)
   1020c:	f00c ff4f 	bl	1d0ae <nrfy_dppi_channels_enable>
}
   10210:	bf00      	nop
   10212:	3708      	adds	r7, #8
   10214:	46bd      	mov	sp, r7
   10216:	bd80      	pop	{r7, pc}
   10218:	40017000 	.word	0x40017000

0001021c <nrfx_gppi_event_endpoint_setup>:
{
    nrfy_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
   1021c:	b580      	push	{r7, lr}
   1021e:	b082      	sub	sp, #8
   10220:	af00      	add	r7, sp, #0
   10222:	4603      	mov	r3, r0
   10224:	6039      	str	r1, [r7, #0]
   10226:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(eep);
   10228:	683b      	ldr	r3, [r7, #0]
   1022a:	2b00      	cmp	r3, #0
   1022c:	d109      	bne.n	10242 <nrfx_gppi_event_endpoint_setup+0x26>
   1022e:	2344      	movs	r3, #68	; 0x44
   10230:	4a09      	ldr	r2, [pc, #36]	; (10258 <nrfx_gppi_event_endpoint_setup+0x3c>)
   10232:	490a      	ldr	r1, [pc, #40]	; (1025c <nrfx_gppi_event_endpoint_setup+0x40>)
   10234:	480a      	ldr	r0, [pc, #40]	; (10260 <nrfx_gppi_event_endpoint_setup+0x44>)
   10236:	f009 febd 	bl	19fb4 <assert_print>
   1023a:	2144      	movs	r1, #68	; 0x44
   1023c:	4806      	ldr	r0, [pc, #24]	; (10258 <nrfx_gppi_event_endpoint_setup+0x3c>)
   1023e:	f009 fea9 	bl	19f94 <assert_post_action>
    NRF_DPPI_ENDPOINT_SETUP(eep, channel);
   10242:	79fb      	ldrb	r3, [r7, #7]
   10244:	683a      	ldr	r2, [r7, #0]
   10246:	3280      	adds	r2, #128	; 0x80
   10248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1024c:	6013      	str	r3, [r2, #0]
}
   1024e:	bf00      	nop
   10250:	3708      	adds	r7, #8
   10252:	46bd      	mov	sp, r7
   10254:	bd80      	pop	{r7, pc}
   10256:	bf00      	nop
   10258:	00022590 	.word	0x00022590
   1025c:	000225d0 	.word	0x000225d0
   10260:	00022570 	.word	0x00022570

00010264 <nrfx_gppi_task_endpoint_setup>:

void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
   10264:	b580      	push	{r7, lr}
   10266:	b082      	sub	sp, #8
   10268:	af00      	add	r7, sp, #0
   1026a:	4603      	mov	r3, r0
   1026c:	6039      	str	r1, [r7, #0]
   1026e:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(tep);
   10270:	683b      	ldr	r3, [r7, #0]
   10272:	2b00      	cmp	r3, #0
   10274:	d109      	bne.n	1028a <nrfx_gppi_task_endpoint_setup+0x26>
   10276:	234a      	movs	r3, #74	; 0x4a
   10278:	4a09      	ldr	r2, [pc, #36]	; (102a0 <nrfx_gppi_task_endpoint_setup+0x3c>)
   1027a:	490a      	ldr	r1, [pc, #40]	; (102a4 <nrfx_gppi_task_endpoint_setup+0x40>)
   1027c:	480a      	ldr	r0, [pc, #40]	; (102a8 <nrfx_gppi_task_endpoint_setup+0x44>)
   1027e:	f009 fe99 	bl	19fb4 <assert_print>
   10282:	214a      	movs	r1, #74	; 0x4a
   10284:	4806      	ldr	r0, [pc, #24]	; (102a0 <nrfx_gppi_task_endpoint_setup+0x3c>)
   10286:	f009 fe85 	bl	19f94 <assert_post_action>
    NRF_DPPI_ENDPOINT_SETUP(tep, channel);
   1028a:	79fb      	ldrb	r3, [r7, #7]
   1028c:	683a      	ldr	r2, [r7, #0]
   1028e:	3280      	adds	r2, #128	; 0x80
   10290:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10294:	6013      	str	r3, [r2, #0]
}
   10296:	bf00      	nop
   10298:	3708      	adds	r7, #8
   1029a:	46bd      	mov	sp, r7
   1029c:	bd80      	pop	{r7, pc}
   1029e:	bf00      	nop
   102a0:	00022590 	.word	0x00022590
   102a4:	000225d4 	.word	0x000225d4
   102a8:	00022570 	.word	0x00022570

000102ac <nrf_clock_start_task_check>:
{
   102ac:	b580      	push	{r7, lr}
   102ae:	b082      	sub	sp, #8
   102b0:	af00      	add	r7, sp, #0
   102b2:	6078      	str	r0, [r7, #4]
   102b4:	460b      	mov	r3, r1
   102b6:	70fb      	strb	r3, [r7, #3]
    switch (domain)
   102b8:	78fb      	ldrb	r3, [r7, #3]
   102ba:	2b00      	cmp	r3, #0
   102bc:	d002      	beq.n	102c4 <nrf_clock_start_task_check+0x18>
   102be:	2b01      	cmp	r3, #1
   102c0:	d00b      	beq.n	102da <nrf_clock_start_task_check+0x2e>
   102c2:	e015      	b.n	102f0 <nrf_clock_start_task_check+0x44>
            return ((p_reg->NRF_LFCLKRUN & NRF_CLOCK_LFCLKRUN_STATUS_Msk)
   102c4:	687b      	ldr	r3, [r7, #4]
   102c6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                    >> NRF_CLOCK_LFCLKRUN_STATUS_Pos);
   102ca:	f003 0301 	and.w	r3, r3, #1
   102ce:	2b00      	cmp	r3, #0
   102d0:	bf14      	ite	ne
   102d2:	2301      	movne	r3, #1
   102d4:	2300      	moveq	r3, #0
   102d6:	b2db      	uxtb	r3, r3
   102d8:	e016      	b.n	10308 <nrf_clock_start_task_check+0x5c>
            return ((p_reg->NRF_HFCLKRUN & NRF_CLOCK_HFCLKRUN_STATUS_Msk)
   102da:	687b      	ldr	r3, [r7, #4]
   102dc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
                    >> NRF_CLOCK_HFCLKRUN_STATUS_Pos);
   102e0:	f003 0301 	and.w	r3, r3, #1
   102e4:	2b00      	cmp	r3, #0
   102e6:	bf14      	ite	ne
   102e8:	2301      	movne	r3, #1
   102ea:	2300      	moveq	r3, #0
   102ec:	b2db      	uxtb	r3, r3
   102ee:	e00b      	b.n	10308 <nrf_clock_start_task_check+0x5c>
            NRFX_ASSERT(0);
   102f0:	f240 338a 	movw	r3, #906	; 0x38a
   102f4:	4a06      	ldr	r2, [pc, #24]	; (10310 <nrf_clock_start_task_check+0x64>)
   102f6:	4907      	ldr	r1, [pc, #28]	; (10314 <nrf_clock_start_task_check+0x68>)
   102f8:	4807      	ldr	r0, [pc, #28]	; (10318 <nrf_clock_start_task_check+0x6c>)
   102fa:	f009 fe5b 	bl	19fb4 <assert_print>
   102fe:	f240 318a 	movw	r1, #906	; 0x38a
   10302:	4803      	ldr	r0, [pc, #12]	; (10310 <nrf_clock_start_task_check+0x64>)
   10304:	f009 fe46 	bl	19f94 <assert_post_action>
}
   10308:	4618      	mov	r0, r3
   1030a:	3708      	adds	r7, #8
   1030c:	46bd      	mov	sp, r7
   1030e:	bd80      	pop	{r7, pc}
   10310:	000225d8 	.word	0x000225d8
   10314:	0002260c 	.word	0x0002260c
   10318:	00022610 	.word	0x00022610

0001031c <nrf_clock_is_running>:
{
   1031c:	b580      	push	{r7, lr}
   1031e:	b086      	sub	sp, #24
   10320:	af00      	add	r7, sp, #0
   10322:	60f8      	str	r0, [r7, #12]
   10324:	460b      	mov	r3, r1
   10326:	607a      	str	r2, [r7, #4]
   10328:	72fb      	strb	r3, [r7, #11]
    switch (domain)
   1032a:	7afb      	ldrb	r3, [r7, #11]
   1032c:	2b00      	cmp	r3, #0
   1032e:	d002      	beq.n	10336 <nrf_clock_is_running+0x1a>
   10330:	2b01      	cmp	r3, #1
   10332:	d017      	beq.n	10364 <nrf_clock_is_running+0x48>
   10334:	e02d      	b.n	10392 <nrf_clock_is_running+0x76>
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
   10336:	68fb      	ldr	r3, [r7, #12]
   10338:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   1033c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   10340:	2b00      	cmp	r3, #0
   10342:	bf14      	ite	ne
   10344:	2301      	movne	r3, #1
   10346:	2300      	moveq	r3, #0
   10348:	75fb      	strb	r3, [r7, #23]
            if (p_clk_src != NULL)
   1034a:	687b      	ldr	r3, [r7, #4]
   1034c:	2b00      	cmp	r3, #0
   1034e:	d02c      	beq.n	103aa <nrf_clock_is_running+0x8e>
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
   10350:	68fb      	ldr	r3, [r7, #12]
   10352:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   10356:	b2db      	uxtb	r3, r3
   10358:	f003 0303 	and.w	r3, r3, #3
   1035c:	b2da      	uxtb	r2, r3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1035e:	687b      	ldr	r3, [r7, #4]
   10360:	701a      	strb	r2, [r3, #0]
            break;
   10362:	e022      	b.n	103aa <nrf_clock_is_running+0x8e>
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
   10364:	68fb      	ldr	r3, [r7, #12]
   10366:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   1036a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   1036e:	2b00      	cmp	r3, #0
   10370:	bf14      	ite	ne
   10372:	2301      	movne	r3, #1
   10374:	2300      	moveq	r3, #0
   10376:	75fb      	strb	r3, [r7, #23]
            if (p_clk_src != NULL)
   10378:	687b      	ldr	r3, [r7, #4]
   1037a:	2b00      	cmp	r3, #0
   1037c:	d017      	beq.n	103ae <nrf_clock_is_running+0x92>
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1037e:	68fb      	ldr	r3, [r7, #12]
   10380:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   10384:	b2db      	uxtb	r3, r3
   10386:	f003 0301 	and.w	r3, r3, #1
   1038a:	b2da      	uxtb	r2, r3
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1038c:	687b      	ldr	r3, [r7, #4]
   1038e:	701a      	strb	r2, [r3, #0]
            break;
   10390:	e00d      	b.n	103ae <nrf_clock_is_running+0x92>
            NRFX_ASSERT(0);
   10392:	f240 33cb 	movw	r3, #971	; 0x3cb
   10396:	4a09      	ldr	r2, [pc, #36]	; (103bc <nrf_clock_is_running+0xa0>)
   10398:	4909      	ldr	r1, [pc, #36]	; (103c0 <nrf_clock_is_running+0xa4>)
   1039a:	480a      	ldr	r0, [pc, #40]	; (103c4 <nrf_clock_is_running+0xa8>)
   1039c:	f009 fe0a 	bl	19fb4 <assert_print>
   103a0:	f240 31cb 	movw	r1, #971	; 0x3cb
   103a4:	4805      	ldr	r0, [pc, #20]	; (103bc <nrf_clock_is_running+0xa0>)
   103a6:	f009 fdf5 	bl	19f94 <assert_post_action>
            break;
   103aa:	bf00      	nop
   103ac:	e000      	b.n	103b0 <nrf_clock_is_running+0x94>
            break;
   103ae:	bf00      	nop
    return clock_running;
   103b0:	7dfb      	ldrb	r3, [r7, #23]
}
   103b2:	4618      	mov	r0, r3
   103b4:	3718      	adds	r7, #24
   103b6:	46bd      	mov	sp, r7
   103b8:	bd80      	pop	{r7, pc}
   103ba:	bf00      	nop
   103bc:	000225d8 	.word	0x000225d8
   103c0:	0002260c 	.word	0x0002260c
   103c4:	00022610 	.word	0x00022610

000103c8 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
   103c8:	b580      	push	{r7, lr}
   103ca:	b082      	sub	sp, #8
   103cc:	af00      	add	r7, sp, #0
    #endif
    priority = NRFX_POWER_DEFAULT_CONFIG_IRQ_PRIORITY;
#elif NRFX_CHECK(NRFX_POWER_ENABLED)
    priority = NRFX_POWER_DEFAULT_CONFIG_IRQ_PRIORITY;
#elif NRFX_CHECK(NRFX_CLOCK_ENABLED)
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
   103ce:	2307      	movs	r3, #7
   103d0:	71fb      	strb	r3, [r7, #7]
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   103d2:	480a      	ldr	r0, [pc, #40]	; (103fc <nrfx_power_clock_irq_init+0x34>)
   103d4:	f00c fe8f 	bl	1d0f6 <nrfx_get_irq_number>
   103d8:	4603      	mov	r3, r0
   103da:	4618      	mov	r0, r3
   103dc:	f7fa f812 	bl	a404 <arch_irq_is_enabled>
   103e0:	4603      	mov	r3, r0
   103e2:	2b00      	cmp	r3, #0
   103e4:	d106      	bne.n	103f4 <nrfx_power_clock_irq_init+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   103e6:	4805      	ldr	r0, [pc, #20]	; (103fc <nrfx_power_clock_irq_init+0x34>)
   103e8:	f00c fe85 	bl	1d0f6 <nrfx_get_irq_number>
   103ec:	4603      	mov	r3, r0
   103ee:	4618      	mov	r0, r3
   103f0:	f009 fe38 	bl	1a064 <arch_irq_enable>
    }
}
   103f4:	bf00      	nop
   103f6:	3708      	adds	r7, #8
   103f8:	46bd      	mov	sp, r7
   103fa:	bd80      	pop	{r7, pc}
   103fc:	40005000 	.word	0x40005000

00010400 <nrfx_clock_is_running>:
{
   10400:	b580      	push	{r7, lr}
   10402:	b082      	sub	sp, #8
   10404:	af00      	add	r7, sp, #0
   10406:	4603      	mov	r3, r0
   10408:	6039      	str	r1, [r7, #0]
   1040a:	71fb      	strb	r3, [r7, #7]
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   1040c:	79fb      	ldrb	r3, [r7, #7]
   1040e:	683a      	ldr	r2, [r7, #0]
   10410:	4619      	mov	r1, r3
   10412:	4804      	ldr	r0, [pc, #16]	; (10424 <nrfx_clock_is_running+0x24>)
   10414:	f7ff ff82 	bl	1031c <nrf_clock_is_running>
   10418:	4603      	mov	r3, r0
}
   1041a:	4618      	mov	r0, r3
   1041c:	3708      	adds	r7, #8
   1041e:	46bd      	mov	sp, r7
   10420:	bd80      	pop	{r7, pc}
   10422:	bf00      	nop
   10424:	40005000 	.word	0x40005000

00010428 <z_log_minimal_level_to_char>:
{
   10428:	b480      	push	{r7}
   1042a:	b083      	sub	sp, #12
   1042c:	af00      	add	r7, sp, #0
   1042e:	6078      	str	r0, [r7, #4]
	switch (level) {
   10430:	687b      	ldr	r3, [r7, #4]
   10432:	3b01      	subs	r3, #1
   10434:	2b03      	cmp	r3, #3
   10436:	d813      	bhi.n	10460 <z_log_minimal_level_to_char+0x38>
   10438:	a201      	add	r2, pc, #4	; (adr r2, 10440 <z_log_minimal_level_to_char+0x18>)
   1043a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1043e:	bf00      	nop
   10440:	00010451 	.word	0x00010451
   10444:	00010455 	.word	0x00010455
   10448:	00010459 	.word	0x00010459
   1044c:	0001045d 	.word	0x0001045d
		return 'E';
   10450:	2345      	movs	r3, #69	; 0x45
   10452:	e006      	b.n	10462 <z_log_minimal_level_to_char+0x3a>
		return 'W';
   10454:	2357      	movs	r3, #87	; 0x57
   10456:	e004      	b.n	10462 <z_log_minimal_level_to_char+0x3a>
		return 'I';
   10458:	2349      	movs	r3, #73	; 0x49
   1045a:	e002      	b.n	10462 <z_log_minimal_level_to_char+0x3a>
		return 'D';
   1045c:	2344      	movs	r3, #68	; 0x44
   1045e:	e000      	b.n	10462 <z_log_minimal_level_to_char+0x3a>
		return '?';
   10460:	233f      	movs	r3, #63	; 0x3f
}
   10462:	4618      	mov	r0, r3
   10464:	370c      	adds	r7, #12
   10466:	46bd      	mov	sp, r7
   10468:	bc80      	pop	{r7}
   1046a:	4770      	bx	lr

0001046c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   1046c:	b580      	push	{r7, lr}
   1046e:	b086      	sub	sp, #24
   10470:	af00      	add	r7, sp, #0
   10472:	4603      	mov	r3, r0
   10474:	71fb      	strb	r3, [r7, #7]
    switch (domain)
   10476:	79fb      	ldrb	r3, [r7, #7]
   10478:	2b00      	cmp	r3, #0
   1047a:	d002      	beq.n	10482 <clock_stop+0x16>
   1047c:	2b01      	cmp	r3, #1
   1047e:	d00e      	beq.n	1049e <clock_stop+0x32>
   10480:	e01b      	b.n	104ba <clock_stop+0x4e>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
   10482:	2102      	movs	r1, #2
   10484:	4833      	ldr	r0, [pc, #204]	; (10554 <clock_stop+0xe8>)
   10486:	f00c fe5b 	bl	1d140 <nrf_clock_int_disable>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
   1048a:	f44f 7182 	mov.w	r1, #260	; 0x104
   1048e:	4831      	ldr	r0, [pc, #196]	; (10554 <clock_stop+0xe8>)
   10490:	f00c fe74 	bl	1d17c <nrf_clock_event_clear>
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_LFCLKSTOP);
   10494:	210c      	movs	r1, #12
   10496:	482f      	ldr	r0, [pc, #188]	; (10554 <clock_stop+0xe8>)
   10498:	f00c fe60 	bl	1d15c <nrf_clock_task_trigger>
            break;
   1049c:	e017      	b.n	104ce <clock_stop+0x62>
        case NRF_CLOCK_DOMAIN_HFCLK:
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);
   1049e:	2101      	movs	r1, #1
   104a0:	482c      	ldr	r0, [pc, #176]	; (10554 <clock_stop+0xe8>)
   104a2:	f00c fe4d 	bl	1d140 <nrf_clock_int_disable>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
   104a6:	f44f 7180 	mov.w	r1, #256	; 0x100
   104aa:	482a      	ldr	r0, [pc, #168]	; (10554 <clock_stop+0xe8>)
   104ac:	f00c fe66 	bl	1d17c <nrf_clock_event_clear>
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKSTOP);
   104b0:	2104      	movs	r1, #4
   104b2:	4828      	ldr	r0, [pc, #160]	; (10554 <clock_stop+0xe8>)
   104b4:	f00c fe52 	bl	1d15c <nrf_clock_task_trigger>
            break;
   104b8:	e009      	b.n	104ce <clock_stop+0x62>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   104ba:	23d8      	movs	r3, #216	; 0xd8
   104bc:	4a26      	ldr	r2, [pc, #152]	; (10558 <clock_stop+0xec>)
   104be:	4927      	ldr	r1, [pc, #156]	; (1055c <clock_stop+0xf0>)
   104c0:	4827      	ldr	r0, [pc, #156]	; (10560 <clock_stop+0xf4>)
   104c2:	f009 fd77 	bl	19fb4 <assert_print>
   104c6:	21d8      	movs	r1, #216	; 0xd8
   104c8:	4823      	ldr	r0, [pc, #140]	; (10558 <clock_stop+0xec>)
   104ca:	f009 fd63 	bl	19f94 <assert_post_action>
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   104ce:	2301      	movs	r3, #1
   104d0:	72fb      	strb	r3, [r7, #11]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   104d2:	79fb      	ldrb	r3, [r7, #7]
   104d4:	2b01      	cmp	r3, #1
   104d6:	d102      	bne.n	104de <clock_stop+0x72>
   104d8:	f107 030b 	add.w	r3, r7, #11
   104dc:	e000      	b.n	104e0 <clock_stop+0x74>
   104de:	2300      	movs	r3, #0
   104e0:	60fb      	str	r3, [r7, #12]
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   104e2:	2300      	movs	r3, #0
   104e4:	74fb      	strb	r3, [r7, #19]
   104e6:	f242 7310 	movw	r3, #10000	; 0x2710
   104ea:	617b      	str	r3, [r7, #20]
   104ec:	79fb      	ldrb	r3, [r7, #7]
   104ee:	68f9      	ldr	r1, [r7, #12]
   104f0:	4618      	mov	r0, r3
   104f2:	f7ff ff85 	bl	10400 <nrfx_clock_is_running>
   104f6:	4603      	mov	r3, r0
   104f8:	f083 0301 	eor.w	r3, r3, #1
   104fc:	b2db      	uxtb	r3, r3
   104fe:	2b00      	cmp	r3, #0
   10500:	d105      	bne.n	1050e <clock_stop+0xa2>
   10502:	68fb      	ldr	r3, [r7, #12]
   10504:	2b00      	cmp	r3, #0
   10506:	d005      	beq.n	10514 <clock_stop+0xa8>
   10508:	7afb      	ldrb	r3, [r7, #11]
   1050a:	2b01      	cmp	r3, #1
   1050c:	d002      	beq.n	10514 <clock_stop+0xa8>
   1050e:	2301      	movs	r3, #1
   10510:	74fb      	strb	r3, [r7, #19]
   10512:	e008      	b.n	10526 <clock_stop+0xba>
   10514:	2001      	movs	r0, #1
   10516:	f00c fd89 	bl	1d02c <nrfx_busy_wait>
   1051a:	697b      	ldr	r3, [r7, #20]
   1051c:	3b01      	subs	r3, #1
   1051e:	617b      	str	r3, [r7, #20]
   10520:	697b      	ldr	r3, [r7, #20]
   10522:	2b00      	cmp	r3, #0
   10524:	d1e2      	bne.n	104ec <clock_stop+0x80>
                      (p_clk_src && clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    if (!stopped)
   10526:	7cfb      	ldrb	r3, [r7, #19]
   10528:	f083 0301 	eor.w	r3, r3, #1
   1052c:	b2db      	uxtb	r3, r3
   1052e:	2b00      	cmp	r3, #0
   10530:	d00c      	beq.n	1054c <clock_stop+0xe0>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
   10532:	2300      	movs	r3, #0
   10534:	2b00      	cmp	r3, #0
   10536:	d009      	beq.n	1054c <clock_stop+0xe0>
   10538:	2001      	movs	r0, #1
   1053a:	f7ff ff75 	bl	10428 <z_log_minimal_level_to_char>
   1053e:	4603      	mov	r3, r0
   10540:	4619      	mov	r1, r3
   10542:	79fb      	ldrb	r3, [r7, #7]
   10544:	461a      	mov	r2, r3
   10546:	4807      	ldr	r0, [pc, #28]	; (10564 <clock_stop+0xf8>)
   10548:	f009 fd57 	bl	19ffa <z_log_minimal_printk>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1054c:	3718      	adds	r7, #24
   1054e:	46bd      	mov	sp, r7
   10550:	bd80      	pop	{r7, pc}
   10552:	bf00      	nop
   10554:	40005000 	.word	0x40005000
   10558:	0002263c 	.word	0x0002263c
   1055c:	0002260c 	.word	0x0002260c
   10560:	00022610 	.word	0x00022610
   10564:	0002267c 	.word	0x0002267c

00010568 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   10568:	b590      	push	{r4, r7, lr}
   1056a:	b085      	sub	sp, #20
   1056c:	af00      	add	r7, sp, #0
   1056e:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(event_handler);
   10570:	687b      	ldr	r3, [r7, #4]
   10572:	2b00      	cmp	r3, #0
   10574:	d10b      	bne.n	1058e <nrfx_clock_init+0x26>
   10576:	f240 1315 	movw	r3, #277	; 0x115
   1057a:	4a17      	ldr	r2, [pc, #92]	; (105d8 <nrfx_clock_init+0x70>)
   1057c:	4917      	ldr	r1, [pc, #92]	; (105dc <nrfx_clock_init+0x74>)
   1057e:	4818      	ldr	r0, [pc, #96]	; (105e0 <nrfx_clock_init+0x78>)
   10580:	f009 fd18 	bl	19fb4 <assert_print>
   10584:	f240 1115 	movw	r1, #277	; 0x115
   10588:	4813      	ldr	r0, [pc, #76]	; (105d8 <nrfx_clock_init+0x70>)
   1058a:	f009 fd03 	bl	19f94 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
   1058e:	4b15      	ldr	r3, [pc, #84]	; (105e4 <nrfx_clock_init+0x7c>)
   10590:	60fb      	str	r3, [r7, #12]
    if (m_clock_cb.module_initialized)
   10592:	4b15      	ldr	r3, [pc, #84]	; (105e8 <nrfx_clock_init+0x80>)
   10594:	791b      	ldrb	r3, [r3, #4]
   10596:	2b00      	cmp	r3, #0
   10598:	d002      	beq.n	105a0 <nrfx_clock_init+0x38>
    {
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1059a:	4b14      	ldr	r3, [pc, #80]	; (105ec <nrfx_clock_init+0x84>)
   1059c:	60fb      	str	r3, [r7, #12]
   1059e:	e005      	b.n	105ac <nrfx_clock_init+0x44>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   105a0:	4a11      	ldr	r2, [pc, #68]	; (105e8 <nrfx_clock_init+0x80>)
   105a2:	687b      	ldr	r3, [r7, #4]
   105a4:	6013      	str	r3, [r2, #0]
        m_clock_cb.module_initialized = true;
   105a6:	4b10      	ldr	r3, [pc, #64]	; (105e8 <nrfx_clock_init+0x80>)
   105a8:	2201      	movs	r2, #1
   105aa:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
   105ac:	2300      	movs	r3, #0
   105ae:	2b02      	cmp	r3, #2
   105b0:	d90d      	bls.n	105ce <nrfx_clock_init+0x66>
   105b2:	2003      	movs	r0, #3
   105b4:	f7ff ff38 	bl	10428 <z_log_minimal_level_to_char>
   105b8:	4603      	mov	r3, r0
   105ba:	461c      	mov	r4, r3
   105bc:	68f8      	ldr	r0, [r7, #12]
   105be:	f7ff fd1f 	bl	10000 <nrfx_error_string_get>
   105c2:	4603      	mov	r3, r0
   105c4:	4a0a      	ldr	r2, [pc, #40]	; (105f0 <nrfx_clock_init+0x88>)
   105c6:	4621      	mov	r1, r4
   105c8:	480a      	ldr	r0, [pc, #40]	; (105f4 <nrfx_clock_init+0x8c>)
   105ca:	f009 fd16 	bl	19ffa <z_log_minimal_printk>
    return err_code;
   105ce:	68fb      	ldr	r3, [r7, #12]
}
   105d0:	4618      	mov	r0, r3
   105d2:	3714      	adds	r7, #20
   105d4:	46bd      	mov	sp, r7
   105d6:	bd90      	pop	{r4, r7, pc}
   105d8:	0002263c 	.word	0x0002263c
   105dc:	000226a4 	.word	0x000226a4
   105e0:	00022610 	.word	0x00022610
   105e4:	0bad0000 	.word	0x0bad0000
   105e8:	2000ca98 	.word	0x2000ca98
   105ec:	0bad000c 	.word	0x0bad000c
   105f0:	00024114 	.word	0x00024114
   105f4:	000226b4 	.word	0x000226b4

000105f8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   105f8:	b580      	push	{r7, lr}
   105fa:	af00      	add	r7, sp, #0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   105fc:	4b14      	ldr	r3, [pc, #80]	; (10650 <nrfx_clock_enable+0x58>)
   105fe:	791b      	ldrb	r3, [r3, #4]
   10600:	f083 0301 	eor.w	r3, r3, #1
   10604:	b2db      	uxtb	r3, r3
   10606:	2b00      	cmp	r3, #0
   10608:	d00b      	beq.n	10622 <nrfx_clock_enable+0x2a>
   1060a:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1060e:	4a11      	ldr	r2, [pc, #68]	; (10654 <nrfx_clock_enable+0x5c>)
   10610:	4911      	ldr	r1, [pc, #68]	; (10658 <nrfx_clock_enable+0x60>)
   10612:	4812      	ldr	r0, [pc, #72]	; (1065c <nrfx_clock_enable+0x64>)
   10614:	f009 fcce 	bl	19fb4 <assert_print>
   10618:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1061c:	480d      	ldr	r0, [pc, #52]	; (10654 <nrfx_clock_enable+0x5c>)
   1061e:	f009 fcb9 	bl	19f94 <assert_post_action>
    nrfx_power_clock_irq_init();
   10622:	f7ff fed1 	bl	103c8 <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
   10626:	f00c fdf1 	bl	1d20c <clock_initial_lfclksrc_get>
   1062a:	4603      	mov	r3, r0
   1062c:	4619      	mov	r1, r3
   1062e:	480c      	ldr	r0, [pc, #48]	; (10660 <nrfx_clock_enable+0x68>)
   10630:	f00c fdcd 	bl	1d1ce <nrf_clock_lf_src_set>
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
   10634:	2300      	movs	r3, #0
   10636:	2b02      	cmp	r3, #2
   10638:	d907      	bls.n	1064a <nrfx_clock_enable+0x52>
   1063a:	2003      	movs	r0, #3
   1063c:	f7ff fef4 	bl	10428 <z_log_minimal_level_to_char>
   10640:	4603      	mov	r3, r0
   10642:	4619      	mov	r1, r3
   10644:	4807      	ldr	r0, [pc, #28]	; (10664 <nrfx_clock_enable+0x6c>)
   10646:	f009 fcd8 	bl	19ffa <z_log_minimal_printk>
}
   1064a:	bf00      	nop
   1064c:	bd80      	pop	{r7, pc}
   1064e:	bf00      	nop
   10650:	2000ca98 	.word	0x2000ca98
   10654:	0002263c 	.word	0x0002263c
   10658:	000226d8 	.word	0x000226d8
   1065c:	00022610 	.word	0x00022610
   10660:	40005000 	.word	0x40005000
   10664:	000226f8 	.word	0x000226f8

00010668 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   10668:	b580      	push	{r7, lr}
   1066a:	b084      	sub	sp, #16
   1066c:	af00      	add	r7, sp, #0
   1066e:	4603      	mov	r3, r0
   10670:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(m_clock_cb.module_initialized);
   10672:	4b3b      	ldr	r3, [pc, #236]	; (10760 <nrfx_clock_start+0xf8>)
   10674:	791b      	ldrb	r3, [r3, #4]
   10676:	f083 0301 	eor.w	r3, r3, #1
   1067a:	b2db      	uxtb	r3, r3
   1067c:	2b00      	cmp	r3, #0
   1067e:	d00b      	beq.n	10698 <nrfx_clock_start+0x30>
   10680:	f44f 73b4 	mov.w	r3, #360	; 0x168
   10684:	4a37      	ldr	r2, [pc, #220]	; (10764 <nrfx_clock_start+0xfc>)
   10686:	4938      	ldr	r1, [pc, #224]	; (10768 <nrfx_clock_start+0x100>)
   10688:	4838      	ldr	r0, [pc, #224]	; (1076c <nrfx_clock_start+0x104>)
   1068a:	f009 fc93 	bl	19fb4 <assert_print>
   1068e:	f44f 71b4 	mov.w	r1, #360	; 0x168
   10692:	4834      	ldr	r0, [pc, #208]	; (10764 <nrfx_clock_start+0xfc>)
   10694:	f009 fc7e 	bl	19f94 <assert_post_action>
    switch (domain)
   10698:	79fb      	ldrb	r3, [r7, #7]
   1069a:	2b00      	cmp	r3, #0
   1069c:	d002      	beq.n	106a4 <nrfx_clock_start+0x3c>
   1069e:	2b01      	cmp	r3, #1
   106a0:	d040      	beq.n	10724 <nrfx_clock_start+0xbc>
   106a2:	e04d      	b.n	10740 <nrfx_clock_start+0xd8>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc))
   106a4:	f107 030f 	add.w	r3, r7, #15
   106a8:	461a      	mov	r2, r3
   106aa:	2100      	movs	r1, #0
   106ac:	4830      	ldr	r0, [pc, #192]	; (10770 <nrfx_clock_start+0x108>)
   106ae:	f7ff fe35 	bl	1031c <nrf_clock_is_running>
   106b2:	4603      	mov	r3, r0
   106b4:	2b00      	cmp	r3, #0
   106b6:	d005      	beq.n	106c4 <nrfx_clock_start+0x5c>
                {
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
   106b8:	f107 030f 	add.w	r3, r7, #15
   106bc:	4618      	mov	r0, r3
   106be:	f00c fdac 	bl	1d21a <clock_lfclksrc_tweak>
   106c2:	e01c      	b.n	106fe <nrfx_clock_start+0x96>
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   106c4:	2100      	movs	r1, #0
   106c6:	482a      	ldr	r0, [pc, #168]	; (10770 <nrfx_clock_start+0x108>)
   106c8:	f7ff fdf0 	bl	102ac <nrf_clock_start_task_check>
   106cc:	4603      	mov	r3, r0
   106ce:	2b00      	cmp	r3, #0
   106d0:	d011      	beq.n	106f6 <nrfx_clock_start+0x8e>
                {
                    // LF clock is not active yet but was started already. Inspect its source.
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
   106d2:	4827      	ldr	r0, [pc, #156]	; (10770 <nrfx_clock_start+0x108>)
   106d4:	f00c fd8a 	bl	1d1ec <nrf_clock_lf_srccopy_get>
   106d8:	4603      	mov	r3, r0
   106da:	73fb      	strb	r3, [r7, #15]
                    if (clock_lfclksrc_tweak(&lfclksrc))
   106dc:	f107 030f 	add.w	r3, r7, #15
   106e0:	4618      	mov	r0, r3
   106e2:	f00c fd9a 	bl	1d21a <clock_lfclksrc_tweak>
   106e6:	4603      	mov	r3, r0
   106e8:	2b00      	cmp	r3, #0
   106ea:	d008      	beq.n	106fe <nrfx_clock_start+0x96>
                    {
                        // LF clock was started already and the configured source
                        // corresponds to the user configuration.
                        // No action is needed as the chosen LF clock source will become active soon.
                        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
   106ec:	2102      	movs	r1, #2
   106ee:	4820      	ldr	r0, [pc, #128]	; (10770 <nrfx_clock_start+0x108>)
   106f0:	f00c fd18 	bl	1d124 <nrf_clock_int_enable>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   106f4:	e030      	b.n	10758 <nrfx_clock_start+0xf0>
                    lfclksrc = clock_initial_lfclksrc_get();
   106f6:	f00c fd89 	bl	1d20c <clock_initial_lfclksrc_get>
   106fa:	4603      	mov	r3, r0
   106fc:	73fb      	strb	r3, [r7, #15]
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
   106fe:	7bfb      	ldrb	r3, [r7, #15]
   10700:	4619      	mov	r1, r3
   10702:	481b      	ldr	r0, [pc, #108]	; (10770 <nrfx_clock_start+0x108>)
   10704:	f00c fd63 	bl	1d1ce <nrf_clock_lf_src_set>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
   10708:	f44f 7182 	mov.w	r1, #260	; 0x104
   1070c:	4818      	ldr	r0, [pc, #96]	; (10770 <nrfx_clock_start+0x108>)
   1070e:	f00c fd35 	bl	1d17c <nrf_clock_event_clear>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
   10712:	2102      	movs	r1, #2
   10714:	4816      	ldr	r0, [pc, #88]	; (10770 <nrfx_clock_start+0x108>)
   10716:	f00c fd05 	bl	1d124 <nrf_clock_int_enable>
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_LFCLKSTART);
   1071a:	2108      	movs	r1, #8
   1071c:	4814      	ldr	r0, [pc, #80]	; (10770 <nrfx_clock_start+0x108>)
   1071e:	f00c fd1d 	bl	1d15c <nrf_clock_task_trigger>
            break;
   10722:	e019      	b.n	10758 <nrfx_clock_start+0xf0>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
   10724:	f44f 7180 	mov.w	r1, #256	; 0x100
   10728:	4811      	ldr	r0, [pc, #68]	; (10770 <nrfx_clock_start+0x108>)
   1072a:	f00c fd27 	bl	1d17c <nrf_clock_event_clear>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);
   1072e:	2101      	movs	r1, #1
   10730:	480f      	ldr	r0, [pc, #60]	; (10770 <nrfx_clock_start+0x108>)
   10732:	f00c fcf7 	bl	1d124 <nrf_clock_int_enable>
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKSTART);
   10736:	2100      	movs	r1, #0
   10738:	480d      	ldr	r0, [pc, #52]	; (10770 <nrfx_clock_start+0x108>)
   1073a:	f00c fd0f 	bl	1d15c <nrf_clock_task_trigger>
            break;
   1073e:	e00b      	b.n	10758 <nrfx_clock_start+0xf0>
            NRFX_ASSERT(0);
   10740:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   10744:	4a07      	ldr	r2, [pc, #28]	; (10764 <nrfx_clock_start+0xfc>)
   10746:	490b      	ldr	r1, [pc, #44]	; (10774 <nrfx_clock_start+0x10c>)
   10748:	4808      	ldr	r0, [pc, #32]	; (1076c <nrfx_clock_start+0x104>)
   1074a:	f009 fc33 	bl	19fb4 <assert_print>
   1074e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   10752:	4804      	ldr	r0, [pc, #16]	; (10764 <nrfx_clock_start+0xfc>)
   10754:	f009 fc1e 	bl	19f94 <assert_post_action>
}
   10758:	bf00      	nop
   1075a:	3710      	adds	r7, #16
   1075c:	46bd      	mov	sp, r7
   1075e:	bd80      	pop	{r7, pc}
   10760:	2000ca98 	.word	0x2000ca98
   10764:	0002263c 	.word	0x0002263c
   10768:	000226d8 	.word	0x000226d8
   1076c:	00022610 	.word	0x00022610
   10770:	40005000 	.word	0x40005000
   10774:	0002260c 	.word	0x0002260c

00010778 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   10778:	b580      	push	{r7, lr}
   1077a:	b082      	sub	sp, #8
   1077c:	af00      	add	r7, sp, #0
   1077e:	4603      	mov	r3, r0
   10780:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(m_clock_cb.module_initialized);
   10782:	4b0d      	ldr	r3, [pc, #52]	; (107b8 <nrfx_clock_stop+0x40>)
   10784:	791b      	ldrb	r3, [r3, #4]
   10786:	f083 0301 	eor.w	r3, r3, #1
   1078a:	b2db      	uxtb	r3, r3
   1078c:	2b00      	cmp	r3, #0
   1078e:	d00b      	beq.n	107a8 <nrfx_clock_stop+0x30>
   10790:	f240 13ad 	movw	r3, #429	; 0x1ad
   10794:	4a09      	ldr	r2, [pc, #36]	; (107bc <nrfx_clock_stop+0x44>)
   10796:	490a      	ldr	r1, [pc, #40]	; (107c0 <nrfx_clock_stop+0x48>)
   10798:	480a      	ldr	r0, [pc, #40]	; (107c4 <nrfx_clock_stop+0x4c>)
   1079a:	f009 fc0b 	bl	19fb4 <assert_print>
   1079e:	f240 11ad 	movw	r1, #429	; 0x1ad
   107a2:	4806      	ldr	r0, [pc, #24]	; (107bc <nrfx_clock_stop+0x44>)
   107a4:	f009 fbf6 	bl	19f94 <assert_post_action>
    clock_stop(domain);
   107a8:	79fb      	ldrb	r3, [r7, #7]
   107aa:	4618      	mov	r0, r3
   107ac:	f7ff fe5e 	bl	1046c <clock_stop>
}
   107b0:	bf00      	nop
   107b2:	3708      	adds	r7, #8
   107b4:	46bd      	mov	sp, r7
   107b6:	bd80      	pop	{r7, pc}
   107b8:	2000ca98 	.word	0x2000ca98
   107bc:	0002263c 	.word	0x0002263c
   107c0:	000226d8 	.word	0x000226d8
   107c4:	00022610 	.word	0x00022610

000107c8 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   107c8:	b580      	push	{r7, lr}
   107ca:	b082      	sub	sp, #8
   107cc:	af00      	add	r7, sp, #0
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   107ce:	f44f 7180 	mov.w	r1, #256	; 0x100
   107d2:	482a      	ldr	r0, [pc, #168]	; (1087c <nrfx_power_clock_irq_handler+0xb4>)
   107d4:	f00c fce7 	bl	1d1a6 <nrf_clock_event_check>
   107d8:	4603      	mov	r3, r0
   107da:	2b00      	cmp	r3, #0
   107dc:	d017      	beq.n	1080e <nrfx_power_clock_irq_handler+0x46>
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
   107de:	f44f 7180 	mov.w	r1, #256	; 0x100
   107e2:	4826      	ldr	r0, [pc, #152]	; (1087c <nrfx_power_clock_irq_handler+0xb4>)
   107e4:	f00c fcca 	bl	1d17c <nrf_clock_event_clear>
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
   107e8:	2300      	movs	r3, #0
   107ea:	2b03      	cmp	r3, #3
   107ec:	d907      	bls.n	107fe <nrfx_power_clock_irq_handler+0x36>
   107ee:	2004      	movs	r0, #4
   107f0:	f7ff fe1a 	bl	10428 <z_log_minimal_level_to_char>
   107f4:	4603      	mov	r3, r0
   107f6:	4619      	mov	r1, r3
   107f8:	4821      	ldr	r0, [pc, #132]	; (10880 <nrfx_power_clock_irq_handler+0xb8>)
   107fa:	f009 fbfe 	bl	19ffa <z_log_minimal_printk>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);
   107fe:	2101      	movs	r1, #1
   10800:	481e      	ldr	r0, [pc, #120]	; (1087c <nrfx_power_clock_irq_handler+0xb4>)
   10802:	f00c fc9d 	bl	1d140 <nrf_clock_int_disable>
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   10806:	4b1f      	ldr	r3, [pc, #124]	; (10884 <nrfx_power_clock_irq_handler+0xbc>)
   10808:	681b      	ldr	r3, [r3, #0]
   1080a:	2000      	movs	r0, #0
   1080c:	4798      	blx	r3
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1080e:	f44f 7182 	mov.w	r1, #260	; 0x104
   10812:	481a      	ldr	r0, [pc, #104]	; (1087c <nrfx_power_clock_irq_handler+0xb4>)
   10814:	f00c fcc7 	bl	1d1a6 <nrf_clock_event_check>
   10818:	4603      	mov	r3, r0
   1081a:	2b00      	cmp	r3, #0
   1081c:	d029      	beq.n	10872 <nrfx_power_clock_irq_handler+0xaa>
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
   1081e:	f44f 7182 	mov.w	r1, #260	; 0x104
   10822:	4816      	ldr	r0, [pc, #88]	; (1087c <nrfx_power_clock_irq_handler+0xb4>)
   10824:	f00c fcaa 	bl	1d17c <nrf_clock_event_clear>
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");
   10828:	2300      	movs	r3, #0
   1082a:	2b03      	cmp	r3, #3
   1082c:	d907      	bls.n	1083e <nrfx_power_clock_irq_handler+0x76>
   1082e:	2004      	movs	r0, #4
   10830:	f7ff fdfa 	bl	10428 <z_log_minimal_level_to_char>
   10834:	4603      	mov	r3, r0
   10836:	4619      	mov	r1, r3
   10838:	4813      	ldr	r0, [pc, #76]	; (10888 <nrfx_power_clock_irq_handler+0xc0>)
   1083a:	f009 fbde 	bl	19ffa <z_log_minimal_printk>

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   1083e:	1dfb      	adds	r3, r7, #7
   10840:	461a      	mov	r2, r3
   10842:	2100      	movs	r1, #0
   10844:	480d      	ldr	r0, [pc, #52]	; (1087c <nrfx_power_clock_irq_handler+0xb4>)
   10846:	f7ff fd69 	bl	1031c <nrf_clock_is_running>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1084a:	79fb      	ldrb	r3, [r7, #7]
   1084c:	2b01      	cmp	r3, #1
   1084e:	d108      	bne.n	10862 <nrfx_power_clock_irq_handler+0x9a>
        {
            // After the LFRC oscillator start switch to external source.
            nrf_clock_lf_src_set(NRF_CLOCK, (nrf_clock_lfclk_t)NRFX_CLOCK_CONFIG_LF_SRC);
   10850:	2102      	movs	r1, #2
   10852:	480a      	ldr	r0, [pc, #40]	; (1087c <nrfx_power_clock_irq_handler+0xb4>)
   10854:	f00c fcbb 	bl	1d1ce <nrf_clock_lf_src_set>
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_LFCLKSTART);
   10858:	2108      	movs	r1, #8
   1085a:	4808      	ldr	r0, [pc, #32]	; (1087c <nrfx_power_clock_irq_handler+0xb4>)
   1085c:	f00c fc7e 	bl	1d15c <nrf_clock_task_trigger>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   10860:	e007      	b.n	10872 <nrfx_power_clock_irq_handler+0xaa>
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
   10862:	2102      	movs	r1, #2
   10864:	4805      	ldr	r0, [pc, #20]	; (1087c <nrfx_power_clock_irq_handler+0xb4>)
   10866:	f00c fc6b 	bl	1d140 <nrf_clock_int_disable>
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1086a:	4b06      	ldr	r3, [pc, #24]	; (10884 <nrfx_power_clock_irq_handler+0xbc>)
   1086c:	681b      	ldr	r3, [r3, #0]
   1086e:	2001      	movs	r0, #1
   10870:	4798      	blx	r3
}
   10872:	bf00      	nop
   10874:	3708      	adds	r7, #8
   10876:	46bd      	mov	sp, r7
   10878:	bd80      	pop	{r7, pc}
   1087a:	bf00      	nop
   1087c:	40005000 	.word	0x40005000
   10880:	0002273c 	.word	0x0002273c
   10884:	2000ca98 	.word	0x2000ca98
   10888:	00022768 	.word	0x00022768

0001088c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1088c:	b580      	push	{r7, lr}
   1088e:	b082      	sub	sp, #8
   10890:	af00      	add	r7, sp, #0
   10892:	6078      	str	r0, [r7, #4]
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   10894:	6879      	ldr	r1, [r7, #4]
   10896:	4804      	ldr	r0, [pc, #16]	; (108a8 <nrfx_dppi_channel_alloc+0x1c>)
   10898:	f7ff fc4a 	bl	10130 <nrfx_flag32_alloc>
   1089c:	4603      	mov	r3, r0
}
   1089e:	4618      	mov	r0, r3
   108a0:	3708      	adds	r7, #8
   108a2:	46bd      	mov	sp, r7
   108a4:	bd80      	pop	{r7, pc}
   108a6:	bf00      	nop
   108a8:	2000c684 	.word	0x2000c684

000108ac <nrf_gpiote_in_event_get>:
    return (nrf_gpiote_task_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, TASKS_CLR[index]);
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
   108ac:	b580      	push	{r7, lr}
   108ae:	b082      	sub	sp, #8
   108b0:	af00      	add	r7, sp, #0
   108b2:	4603      	mov	r3, r0
   108b4:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   108b6:	79fb      	ldrb	r3, [r7, #7]
   108b8:	2b07      	cmp	r3, #7
   108ba:	d90b      	bls.n	108d4 <nrf_gpiote_in_event_get+0x28>
   108bc:	f240 23aa 	movw	r3, #682	; 0x2aa
   108c0:	4a09      	ldr	r2, [pc, #36]	; (108e8 <nrf_gpiote_in_event_get+0x3c>)
   108c2:	490a      	ldr	r1, [pc, #40]	; (108ec <nrf_gpiote_in_event_get+0x40>)
   108c4:	480a      	ldr	r0, [pc, #40]	; (108f0 <nrf_gpiote_in_event_get+0x44>)
   108c6:	f009 fb75 	bl	19fb4 <assert_print>
   108ca:	f240 21aa 	movw	r1, #682	; 0x2aa
   108ce:	4806      	ldr	r0, [pc, #24]	; (108e8 <nrf_gpiote_in_event_get+0x3c>)
   108d0:	f009 fb60 	bl	19f94 <assert_post_action>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   108d4:	79fb      	ldrb	r3, [r7, #7]
   108d6:	009b      	lsls	r3, r3, #2
   108d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
   108dc:	b29b      	uxth	r3, r3
}
   108de:	4618      	mov	r0, r3
   108e0:	3708      	adds	r7, #8
   108e2:	46bd      	mov	sp, r7
   108e4:	bd80      	pop	{r7, pc}
   108e6:	bf00      	nop
   108e8:	000227c4 	.word	0x000227c4
   108ec:	000227fc 	.word	0x000227fc
   108f0:	00022808 	.word	0x00022808

000108f4 <nrf_gpio_pin_port_decode>:
{
   108f4:	b580      	push	{r7, lr}
   108f6:	b084      	sub	sp, #16
   108f8:	af00      	add	r7, sp, #0
   108fa:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   108fc:	687b      	ldr	r3, [r7, #4]
   108fe:	681b      	ldr	r3, [r3, #0]
   10900:	4618      	mov	r0, r3
   10902:	f00d f881 	bl	1da08 <nrf_gpio_pin_present_check>
   10906:	4603      	mov	r3, r0
   10908:	f083 0301 	eor.w	r3, r3, #1
   1090c:	b2db      	uxtb	r3, r3
   1090e:	2b00      	cmp	r3, #0
   10910:	d00b      	beq.n	1092a <nrf_gpio_pin_port_decode+0x36>
   10912:	f240 332f 	movw	r3, #815	; 0x32f
   10916:	4a13      	ldr	r2, [pc, #76]	; (10964 <nrf_gpio_pin_port_decode+0x70>)
   10918:	4913      	ldr	r1, [pc, #76]	; (10968 <nrf_gpio_pin_port_decode+0x74>)
   1091a:	4814      	ldr	r0, [pc, #80]	; (1096c <nrf_gpio_pin_port_decode+0x78>)
   1091c:	f009 fb4a 	bl	19fb4 <assert_print>
   10920:	f240 312f 	movw	r1, #815	; 0x32f
   10924:	480f      	ldr	r0, [pc, #60]	; (10964 <nrf_gpio_pin_port_decode+0x70>)
   10926:	f009 fb35 	bl	19f94 <assert_post_action>
    NRF_GPIO_Type * p_port = NULL;
   1092a:	2300      	movs	r3, #0
   1092c:	60fb      	str	r3, [r7, #12]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1092e:	6878      	ldr	r0, [r7, #4]
   10930:	f00d f88f 	bl	1da52 <nrf_gpio_pin_port_number_extract>
   10934:	4603      	mov	r3, r0
   10936:	2b00      	cmp	r3, #0
   10938:	d102      	bne.n	10940 <nrf_gpio_pin_port_decode+0x4c>
        NRF_INTERNAL_GPIO_PORT_EXTRACT(p_port);
   1093a:	4b0d      	ldr	r3, [pc, #52]	; (10970 <nrf_gpio_pin_port_decode+0x7c>)
   1093c:	60fb      	str	r3, [r7, #12]
   1093e:	e00b      	b.n	10958 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   10940:	f44f 734e 	mov.w	r3, #824	; 0x338
   10944:	4a07      	ldr	r2, [pc, #28]	; (10964 <nrf_gpio_pin_port_decode+0x70>)
   10946:	490b      	ldr	r1, [pc, #44]	; (10974 <nrf_gpio_pin_port_decode+0x80>)
   10948:	4808      	ldr	r0, [pc, #32]	; (1096c <nrf_gpio_pin_port_decode+0x78>)
   1094a:	f009 fb33 	bl	19fb4 <assert_print>
   1094e:	f44f 714e 	mov.w	r1, #824	; 0x338
   10952:	4804      	ldr	r0, [pc, #16]	; (10964 <nrf_gpio_pin_port_decode+0x70>)
   10954:	f009 fb1e 	bl	19f94 <assert_post_action>
    return p_port;
   10958:	68fb      	ldr	r3, [r7, #12]
}
   1095a:	4618      	mov	r0, r3
   1095c:	3710      	adds	r7, #16
   1095e:	46bd      	mov	sp, r7
   10960:	bd80      	pop	{r7, pc}
   10962:	bf00      	nop
   10964:	00022828 	.word	0x00022828
   10968:	0002285c 	.word	0x0002285c
   1096c:	00022808 	.word	0x00022808
   10970:	40842500 	.word	0x40842500
   10974:	00022880 	.word	0x00022880

00010978 <nrf_gpio_cfg>:
{
   10978:	b580      	push	{r7, lr}
   1097a:	b086      	sub	sp, #24
   1097c:	af00      	add	r7, sp, #0
   1097e:	6078      	str	r0, [r7, #4]
   10980:	4608      	mov	r0, r1
   10982:	4611      	mov	r1, r2
   10984:	461a      	mov	r2, r3
   10986:	4603      	mov	r3, r0
   10988:	70fb      	strb	r3, [r7, #3]
   1098a:	460b      	mov	r3, r1
   1098c:	70bb      	strb	r3, [r7, #2]
   1098e:	4613      	mov	r3, r2
   10990:	707b      	strb	r3, [r7, #1]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10992:	1d3b      	adds	r3, r7, #4
   10994:	4618      	mov	r0, r3
   10996:	f7ff ffad 	bl	108f4 <nrf_gpio_pin_port_decode>
   1099a:	6178      	str	r0, [r7, #20]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1099c:	687a      	ldr	r2, [r7, #4]
   1099e:	697b      	ldr	r3, [r7, #20]
   109a0:	3280      	adds	r2, #128	; 0x80
   109a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   109a6:	613b      	str	r3, [r7, #16]
    uint32_t to_update = GPIO_PIN_CNF_DIR_Msk    |
   109a8:	4b11      	ldr	r3, [pc, #68]	; (109f0 <nrf_gpio_cfg+0x78>)
   109aa:	60fb      	str	r3, [r7, #12]
    cnf &= ~to_update;
   109ac:	68fb      	ldr	r3, [r7, #12]
   109ae:	43db      	mvns	r3, r3
   109b0:	693a      	ldr	r2, [r7, #16]
   109b2:	4013      	ands	r3, r2
   109b4:	613b      	str	r3, [r7, #16]
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   109b6:	78fa      	ldrb	r2, [r7, #3]
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)  |
   109b8:	78bb      	ldrb	r3, [r7, #2]
   109ba:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   109bc:	431a      	orrs	r2, r3
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
   109be:	787b      	ldrb	r3, [r7, #1]
   109c0:	009b      	lsls	r3, r3, #2
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)  |
   109c2:	431a      	orrs	r2, r3
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)  |
   109c4:	f897 3020 	ldrb.w	r3, [r7, #32]
   109c8:	021b      	lsls	r3, r3, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
   109ca:	431a      	orrs	r2, r3
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);
   109cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   109d0:	041b      	lsls	r3, r3, #16
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)  |
   109d2:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   109d4:	693a      	ldr	r2, [r7, #16]
   109d6:	4313      	orrs	r3, r2
   109d8:	613b      	str	r3, [r7, #16]
    reg->PIN_CNF[pin_number] = cnf;
   109da:	687a      	ldr	r2, [r7, #4]
   109dc:	697b      	ldr	r3, [r7, #20]
   109de:	3280      	adds	r2, #128	; 0x80
   109e0:	6939      	ldr	r1, [r7, #16]
   109e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   109e6:	bf00      	nop
   109e8:	3718      	adds	r7, #24
   109ea:	46bd      	mov	sp, r7
   109ec:	bd80      	pop	{r7, pc}
   109ee:	bf00      	nop
   109f0:	0003070f 	.word	0x0003070f

000109f4 <nrf_gpio_latches_read_and_clear>:
}

NRF_STATIC_INLINE void nrf_gpio_latches_read_and_clear(uint32_t   start_port,
                                                       uint32_t   length,
                                                       uint32_t * p_masks)
{
   109f4:	b480      	push	{r7}
   109f6:	b087      	sub	sp, #28
   109f8:	af00      	add	r7, sp, #0
   109fa:	60f8      	str	r0, [r7, #12]
   109fc:	60b9      	str	r1, [r7, #8]
   109fe:	607a      	str	r2, [r7, #4]
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   10a00:	4b14      	ldr	r3, [pc, #80]	; (10a54 <nrf_gpio_latches_read_and_clear+0x60>)
   10a02:	613b      	str	r3, [r7, #16]
    uint32_t        i;

    for (i = start_port; i < (start_port + length); i++)
   10a04:	68fb      	ldr	r3, [r7, #12]
   10a06:	617b      	str	r3, [r7, #20]
   10a08:	e017      	b.n	10a3a <nrf_gpio_latches_read_and_clear+0x46>
    {
        *p_masks = gpio_regs[i]->LATCH;
   10a0a:	697b      	ldr	r3, [r7, #20]
   10a0c:	009b      	lsls	r3, r3, #2
   10a0e:	3318      	adds	r3, #24
   10a10:	443b      	add	r3, r7
   10a12:	f853 3c08 	ldr.w	r3, [r3, #-8]
   10a16:	6a1a      	ldr	r2, [r3, #32]
   10a18:	687b      	ldr	r3, [r7, #4]
   10a1a:	601a      	str	r2, [r3, #0]

        // The LATCH register is cleared by writing a '1' to the bit that shall be cleared.
        gpio_regs[i]->LATCH = *p_masks;
   10a1c:	697b      	ldr	r3, [r7, #20]
   10a1e:	009b      	lsls	r3, r3, #2
   10a20:	3318      	adds	r3, #24
   10a22:	443b      	add	r3, r7
   10a24:	f853 3c08 	ldr.w	r3, [r3, #-8]
   10a28:	687a      	ldr	r2, [r7, #4]
   10a2a:	6812      	ldr	r2, [r2, #0]
   10a2c:	621a      	str	r2, [r3, #32]

        p_masks++;
   10a2e:	687b      	ldr	r3, [r7, #4]
   10a30:	3304      	adds	r3, #4
   10a32:	607b      	str	r3, [r7, #4]
    for (i = start_port; i < (start_port + length); i++)
   10a34:	697b      	ldr	r3, [r7, #20]
   10a36:	3301      	adds	r3, #1
   10a38:	617b      	str	r3, [r7, #20]
   10a3a:	68fa      	ldr	r2, [r7, #12]
   10a3c:	68bb      	ldr	r3, [r7, #8]
   10a3e:	4413      	add	r3, r2
   10a40:	697a      	ldr	r2, [r7, #20]
   10a42:	429a      	cmp	r2, r3
   10a44:	d3e1      	bcc.n	10a0a <nrf_gpio_latches_read_and_clear+0x16>
    }
}
   10a46:	bf00      	nop
   10a48:	bf00      	nop
   10a4a:	371c      	adds	r7, #28
   10a4c:	46bd      	mov	sp, r7
   10a4e:	bc80      	pop	{r7}
   10a50:	4770      	bx	lr
   10a52:	bf00      	nop
   10a54:	40842500 	.word	0x40842500

00010a58 <z_log_minimal_level_to_char>:
{
   10a58:	b480      	push	{r7}
   10a5a:	b083      	sub	sp, #12
   10a5c:	af00      	add	r7, sp, #0
   10a5e:	6078      	str	r0, [r7, #4]
	switch (level) {
   10a60:	687b      	ldr	r3, [r7, #4]
   10a62:	3b01      	subs	r3, #1
   10a64:	2b03      	cmp	r3, #3
   10a66:	d813      	bhi.n	10a90 <z_log_minimal_level_to_char+0x38>
   10a68:	a201      	add	r2, pc, #4	; (adr r2, 10a70 <z_log_minimal_level_to_char+0x18>)
   10a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10a6e:	bf00      	nop
   10a70:	00010a81 	.word	0x00010a81
   10a74:	00010a85 	.word	0x00010a85
   10a78:	00010a89 	.word	0x00010a89
   10a7c:	00010a8d 	.word	0x00010a8d
		return 'E';
   10a80:	2345      	movs	r3, #69	; 0x45
   10a82:	e006      	b.n	10a92 <z_log_minimal_level_to_char+0x3a>
		return 'W';
   10a84:	2357      	movs	r3, #87	; 0x57
   10a86:	e004      	b.n	10a92 <z_log_minimal_level_to_char+0x3a>
		return 'I';
   10a88:	2349      	movs	r3, #73	; 0x49
   10a8a:	e002      	b.n	10a92 <z_log_minimal_level_to_char+0x3a>
		return 'D';
   10a8c:	2344      	movs	r3, #68	; 0x44
   10a8e:	e000      	b.n	10a92 <z_log_minimal_level_to_char+0x3a>
		return '?';
   10a90:	233f      	movs	r3, #63	; 0x3f
}
   10a92:	4618      	mov	r0, r3
   10a94:	370c      	adds	r7, #12
   10a96:	46bd      	mov	sp, r7
   10a98:	bc80      	pop	{r7}
   10a9a:	4770      	bx	lr

00010a9c <pin_in_use>:
 * @param[in] pin Absolute pin.
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
   10a9c:	b580      	push	{r7, lr}
   10a9e:	b082      	sub	sp, #8
   10aa0:	af00      	add	r7, sp, #0
   10aa2:	6078      	str	r0, [r7, #4]
    return m_cb.pin_flags[get_pin_idx(pin)] & PIN_FLAG_IN_USE;
   10aa4:	6878      	ldr	r0, [r7, #4]
   10aa6:	f00d f887 	bl	1dbb8 <get_pin_idx>
   10aaa:	4603      	mov	r3, r0
   10aac:	4a07      	ldr	r2, [pc, #28]	; (10acc <pin_in_use+0x30>)
   10aae:	3308      	adds	r3, #8
   10ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10ab4:	f003 0301 	and.w	r3, r3, #1
   10ab8:	2b00      	cmp	r3, #0
   10aba:	bf14      	ite	ne
   10abc:	2301      	movne	r3, #1
   10abe:	2300      	moveq	r3, #0
   10ac0:	b2db      	uxtb	r3, r3
}
   10ac2:	4618      	mov	r0, r3
   10ac4:	3708      	adds	r7, #8
   10ac6:	46bd      	mov	sp, r7
   10ac8:	bd80      	pop	{r7, pc}
   10aca:	bf00      	nop
   10acc:	2000c688 	.word	0x2000c688

00010ad0 <pin_in_use_by_te>:
 * @param[in] pin Absolute pin.
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
   10ad0:	b580      	push	{r7, lr}
   10ad2:	b082      	sub	sp, #8
   10ad4:	af00      	add	r7, sp, #0
   10ad6:	6078      	str	r0, [r7, #4]
    return m_cb.pin_flags[get_pin_idx(pin)] & PIN_FLAG_TE_USED;
   10ad8:	6878      	ldr	r0, [r7, #4]
   10ada:	f00d f86d 	bl	1dbb8 <get_pin_idx>
   10ade:	4603      	mov	r3, r0
   10ae0:	4a07      	ldr	r2, [pc, #28]	; (10b00 <pin_in_use_by_te+0x30>)
   10ae2:	3308      	adds	r3, #8
   10ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10ae8:	f003 0320 	and.w	r3, r3, #32
   10aec:	2b00      	cmp	r3, #0
   10aee:	bf14      	ite	ne
   10af0:	2301      	movne	r3, #1
   10af2:	2300      	moveq	r3, #0
   10af4:	b2db      	uxtb	r3, r3
}
   10af6:	4618      	mov	r0, r3
   10af8:	3708      	adds	r7, #8
   10afa:	46bd      	mov	sp, r7
   10afc:	bd80      	pop	{r7, pc}
   10afe:	bf00      	nop
   10b00:	2000c688 	.word	0x2000c688

00010b04 <pin_has_trigger>:
 * @param[in] pin Absolute pin.
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
   10b04:	b580      	push	{r7, lr}
   10b06:	b082      	sub	sp, #8
   10b08:	af00      	add	r7, sp, #0
   10b0a:	6078      	str	r0, [r7, #4]
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[get_pin_idx(pin)]) != NRFX_GPIOTE_TRIGGER_NONE;
   10b0c:	6878      	ldr	r0, [r7, #4]
   10b0e:	f00d f853 	bl	1dbb8 <get_pin_idx>
   10b12:	4603      	mov	r3, r0
   10b14:	4a08      	ldr	r2, [pc, #32]	; (10b38 <pin_has_trigger+0x34>)
   10b16:	3308      	adds	r3, #8
   10b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10b1c:	089b      	lsrs	r3, r3, #2
   10b1e:	f003 0307 	and.w	r3, r3, #7
   10b22:	b2db      	uxtb	r3, r3
   10b24:	2b00      	cmp	r3, #0
   10b26:	bf14      	ite	ne
   10b28:	2301      	movne	r3, #1
   10b2a:	2300      	moveq	r3, #0
   10b2c:	b2db      	uxtb	r3, r3
}
   10b2e:	4618      	mov	r0, r3
   10b30:	3708      	adds	r7, #8
   10b32:	46bd      	mov	sp, r7
   10b34:	bd80      	pop	{r7, pc}
   10b36:	bf00      	nop
   10b38:	2000c688 	.word	0x2000c688

00010b3c <pin_is_output>:
 * @param[in] pin Absolute pin.
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
   10b3c:	b580      	push	{r7, lr}
   10b3e:	b082      	sub	sp, #8
   10b40:	af00      	add	r7, sp, #0
   10b42:	6078      	str	r0, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[get_pin_idx(pin)]);
   10b44:	6878      	ldr	r0, [r7, #4]
   10b46:	f00d f837 	bl	1dbb8 <get_pin_idx>
   10b4a:	4603      	mov	r3, r0
   10b4c:	4a07      	ldr	r2, [pc, #28]	; (10b6c <pin_is_output+0x30>)
   10b4e:	3308      	adds	r3, #8
   10b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10b54:	f003 0302 	and.w	r3, r3, #2
   10b58:	2b02      	cmp	r3, #2
   10b5a:	bf0c      	ite	eq
   10b5c:	2301      	moveq	r3, #1
   10b5e:	2300      	movne	r3, #0
   10b60:	b2db      	uxtb	r3, r3
}
   10b62:	4618      	mov	r0, r3
   10b64:	3708      	adds	r7, #8
   10b66:	46bd      	mov	sp, r7
   10b68:	bd80      	pop	{r7, pc}
   10b6a:	bf00      	nop
   10b6c:	2000c688 	.word	0x2000c688

00010b70 <pin_te_get>:
    return (nrf_gpiote_polarity_t)trigger;
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
   10b70:	b580      	push	{r7, lr}
   10b72:	b082      	sub	sp, #8
   10b74:	af00      	add	r7, sp, #0
   10b76:	6078      	str	r0, [r7, #4]
    return PIN_GET_TE_ID(m_cb.pin_flags[get_pin_idx(pin)]);
   10b78:	6878      	ldr	r0, [r7, #4]
   10b7a:	f00d f81d 	bl	1dbb8 <get_pin_idx>
   10b7e:	4603      	mov	r3, r0
   10b80:	4a06      	ldr	r2, [pc, #24]	; (10b9c <pin_te_get+0x2c>)
   10b82:	3308      	adds	r3, #8
   10b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10b88:	0b5b      	lsrs	r3, r3, #13
   10b8a:	b2db      	uxtb	r3, r3
   10b8c:	f003 0307 	and.w	r3, r3, #7
   10b90:	b2db      	uxtb	r3, r3
}
   10b92:	4618      	mov	r0, r3
   10b94:	3708      	adds	r7, #8
   10b96:	46bd      	mov	sp, r7
   10b98:	bd80      	pop	{r7, pc}
   10b9a:	bf00      	nop
   10b9c:	2000c688 	.word	0x2000c688

00010ba0 <handler_in_use>:
{
    return trigger >= NRFX_GPIOTE_TRIGGER_LOW;
}

static bool handler_in_use(int32_t handler_id)
{
   10ba0:	b480      	push	{r7}
   10ba2:	b085      	sub	sp, #20
   10ba4:	af00      	add	r7, sp, #0
   10ba6:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   10ba8:	2300      	movs	r3, #0
   10baa:	60fb      	str	r3, [r7, #12]
   10bac:	e01b      	b.n	10be6 <handler_in_use+0x46>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   10bae:	4a12      	ldr	r2, [pc, #72]	; (10bf8 <handler_in_use+0x58>)
   10bb0:	68fb      	ldr	r3, [r7, #12]
   10bb2:	3308      	adds	r3, #8
   10bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
   10bbc:	2b00      	cmp	r3, #0
   10bbe:	d008      	beq.n	10bd2 <handler_in_use+0x32>
   10bc0:	4a0d      	ldr	r2, [pc, #52]	; (10bf8 <handler_in_use+0x58>)
   10bc2:	68fb      	ldr	r3, [r7, #12]
   10bc4:	3308      	adds	r3, #8
   10bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10bca:	0a5b      	lsrs	r3, r3, #9
   10bcc:	f003 030f 	and.w	r3, r3, #15
   10bd0:	e001      	b.n	10bd6 <handler_in_use+0x36>
   10bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10bd6:	687a      	ldr	r2, [r7, #4]
   10bd8:	4293      	cmp	r3, r2
   10bda:	d101      	bne.n	10be0 <handler_in_use+0x40>
        {
            return true;
   10bdc:	2301      	movs	r3, #1
   10bde:	e006      	b.n	10bee <handler_in_use+0x4e>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   10be0:	68fb      	ldr	r3, [r7, #12]
   10be2:	3301      	adds	r3, #1
   10be4:	60fb      	str	r3, [r7, #12]
   10be6:	68fb      	ldr	r3, [r7, #12]
   10be8:	2b1f      	cmp	r3, #31
   10bea:	d9e0      	bls.n	10bae <handler_in_use+0xe>
        }
    }
    return false;
   10bec:	2300      	movs	r3, #0
}
   10bee:	4618      	mov	r0, r3
   10bf0:	3714      	adds	r7, #20
   10bf2:	46bd      	mov	sp, r7
   10bf4:	bc80      	pop	{r7}
   10bf6:	4770      	bx	lr
   10bf8:	2000c688 	.word	0x2000c688

00010bfc <release_handler>:

/* Function clears pin handler flag and releases handler slot if handler+context
 * pair is not used by other pin. */
static void release_handler(nrfx_gpiote_pin_t pin)
{
   10bfc:	b580      	push	{r7, lr}
   10bfe:	b086      	sub	sp, #24
   10c00:	af00      	add	r7, sp, #0
   10c02:	6078      	str	r0, [r7, #4]
    uint8_t idx = get_pin_idx(pin);
   10c04:	6878      	ldr	r0, [r7, #4]
   10c06:	f00c ffd7 	bl	1dbb8 <get_pin_idx>
   10c0a:	4603      	mov	r3, r0
   10c0c:	75fb      	strb	r3, [r7, #23]
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[idx]);
   10c0e:	7dfb      	ldrb	r3, [r7, #23]
   10c10:	4a26      	ldr	r2, [pc, #152]	; (10cac <release_handler+0xb0>)
   10c12:	3308      	adds	r3, #8
   10c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
   10c1c:	2b00      	cmp	r3, #0
   10c1e:	d008      	beq.n	10c32 <release_handler+0x36>
   10c20:	7dfb      	ldrb	r3, [r7, #23]
   10c22:	4a22      	ldr	r2, [pc, #136]	; (10cac <release_handler+0xb0>)
   10c24:	3308      	adds	r3, #8
   10c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10c2a:	0a5b      	lsrs	r3, r3, #9
   10c2c:	f003 030f 	and.w	r3, r3, #15
   10c30:	e001      	b.n	10c36 <release_handler+0x3a>
   10c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10c36:	613b      	str	r3, [r7, #16]

    if (handler_id == PIN_FLAG_NO_HANDLER)
   10c38:	693b      	ldr	r3, [r7, #16]
   10c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10c3e:	d031      	beq.n	10ca4 <release_handler+0xa8>
    {
        return;
    }

    m_cb.pin_flags[idx] &= ~PIN_HANDLER_MASK;
   10c40:	7dfb      	ldrb	r3, [r7, #23]
   10c42:	4a1a      	ldr	r2, [pc, #104]	; (10cac <release_handler+0xb0>)
   10c44:	3308      	adds	r3, #8
   10c46:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   10c4a:	7dfb      	ldrb	r3, [r7, #23]
   10c4c:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   10c50:	b291      	uxth	r1, r2
   10c52:	4a16      	ldr	r2, [pc, #88]	; (10cac <release_handler+0xb0>)
   10c54:	3308      	adds	r3, #8
   10c56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check if other pin is using same handler and release handler only if handler
     * is not used by others.
     */
    if (!handler_in_use(handler_id))
   10c5a:	6938      	ldr	r0, [r7, #16]
   10c5c:	f7ff ffa0 	bl	10ba0 <handler_in_use>
   10c60:	4603      	mov	r3, r0
   10c62:	f083 0301 	eor.w	r3, r3, #1
   10c66:	b2db      	uxtb	r3, r3
   10c68:	2b00      	cmp	r3, #0
   10c6a:	d01c      	beq.n	10ca6 <release_handler+0xaa>
    {
        m_cb.handlers[handler_id].handler = NULL;
   10c6c:	4a0f      	ldr	r2, [pc, #60]	; (10cac <release_handler+0xb0>)
   10c6e:	693b      	ldr	r3, [r7, #16]
   10c70:	2100      	movs	r1, #0
   10c72:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   10c76:	693b      	ldr	r3, [r7, #16]
   10c78:	b2db      	uxtb	r3, r3
   10c7a:	4619      	mov	r1, r3
   10c7c:	480c      	ldr	r0, [pc, #48]	; (10cb0 <release_handler+0xb4>)
   10c7e:	f7ff fa8d 	bl	1019c <nrfx_flag32_free>
   10c82:	60f8      	str	r0, [r7, #12]
        (void)err;
        NRFX_ASSERT(err == NRFX_SUCCESS);
   10c84:	68fb      	ldr	r3, [r7, #12]
   10c86:	4a0b      	ldr	r2, [pc, #44]	; (10cb4 <release_handler+0xb8>)
   10c88:	4293      	cmp	r3, r2
   10c8a:	d00c      	beq.n	10ca6 <release_handler+0xaa>
   10c8c:	f240 135f 	movw	r3, #351	; 0x15f
   10c90:	4a09      	ldr	r2, [pc, #36]	; (10cb8 <release_handler+0xbc>)
   10c92:	490a      	ldr	r1, [pc, #40]	; (10cbc <release_handler+0xc0>)
   10c94:	480a      	ldr	r0, [pc, #40]	; (10cc0 <release_handler+0xc4>)
   10c96:	f009 f98d 	bl	19fb4 <assert_print>
   10c9a:	f240 115f 	movw	r1, #351	; 0x15f
   10c9e:	4806      	ldr	r0, [pc, #24]	; (10cb8 <release_handler+0xbc>)
   10ca0:	f009 f978 	bl	19f94 <assert_post_action>
        return;
   10ca4:	bf00      	nop
    }
}
   10ca6:	3718      	adds	r7, #24
   10ca8:	46bd      	mov	sp, r7
   10caa:	bd80      	pop	{r7, pc}
   10cac:	2000c688 	.word	0x2000c688
   10cb0:	2000c6dc 	.word	0x2000c6dc
   10cb4:	0bad0000 	.word	0x0bad0000
   10cb8:	00022890 	.word	0x00022890
   10cbc:	000228d0 	.word	0x000228d0
   10cc0:	00022808 	.word	0x00022808

00010cc4 <pin_handler_trigger_uninit>:

/* Function releases the handler associated with the pin and sets GPIOTE channel
 * configuration to default if it was used with the pin.
 */
static void pin_handler_trigger_uninit(nrfx_gpiote_pin_t pin)
{
   10cc4:	b580      	push	{r7, lr}
   10cc6:	b082      	sub	sp, #8
   10cc8:	af00      	add	r7, sp, #0
   10cca:	6078      	str	r0, [r7, #4]
    if (pin_in_use_by_te(pin))
   10ccc:	6878      	ldr	r0, [r7, #4]
   10cce:	f7ff feff 	bl	10ad0 <pin_in_use_by_te>
   10cd2:	4603      	mov	r3, r0
   10cd4:	2b00      	cmp	r3, #0
   10cd6:	d007      	beq.n	10ce8 <pin_handler_trigger_uninit+0x24>
    {
        /* te to default */
        nrfy_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   10cd8:	6878      	ldr	r0, [r7, #4]
   10cda:	f7ff ff49 	bl	10b70 <pin_te_get>
   10cde:	4603      	mov	r3, r0
   10ce0:	4619      	mov	r1, r3
   10ce2:	4809      	ldr	r0, [pc, #36]	; (10d08 <pin_handler_trigger_uninit+0x44>)
   10ce4:	f00c fd1c 	bl	1d720 <nrfy_gpiote_te_default>
#if !defined(NRF_GPIO_LATCH_PRESENT)
        nrf_bitmask_bit_clear(pin, (uint8_t *)m_cb.port_pins);
#endif
    }

    release_handler(pin);
   10ce8:	6878      	ldr	r0, [r7, #4]
   10cea:	f7ff ff87 	bl	10bfc <release_handler>
    m_cb.pin_flags[get_pin_idx(pin)] = PIN_FLAG_NOT_USED;
   10cee:	6878      	ldr	r0, [r7, #4]
   10cf0:	f00c ff62 	bl	1dbb8 <get_pin_idx>
   10cf4:	4603      	mov	r3, r0
   10cf6:	4a05      	ldr	r2, [pc, #20]	; (10d0c <pin_handler_trigger_uninit+0x48>)
   10cf8:	3308      	adds	r3, #8
   10cfa:	2100      	movs	r1, #0
   10cfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
   10d00:	bf00      	nop
   10d02:	3708      	adds	r7, #8
   10d04:	46bd      	mov	sp, r7
   10d06:	bd80      	pop	{r7, pc}
   10d08:	40031000 	.word	0x40031000
   10d0c:	2000c688 	.word	0x2000c688

00010d10 <nrfx_gpiote_pin_uninit>:

nrfx_err_t nrfx_gpiote_pin_uninit(nrfx_gpiote_pin_t pin)
{
   10d10:	b580      	push	{r7, lr}
   10d12:	b082      	sub	sp, #8
   10d14:	af00      	add	r7, sp, #0
   10d16:	6078      	str	r0, [r7, #4]
    if (!pin_in_use(pin))
   10d18:	6878      	ldr	r0, [r7, #4]
   10d1a:	f7ff febf 	bl	10a9c <pin_in_use>
   10d1e:	4603      	mov	r3, r0
   10d20:	f083 0301 	eor.w	r3, r3, #1
   10d24:	b2db      	uxtb	r3, r3
   10d26:	2b00      	cmp	r3, #0
   10d28:	d001      	beq.n	10d2e <nrfx_gpiote_pin_uninit+0x1e>
    {
        return NRFX_ERROR_INVALID_PARAM;
   10d2a:	4b08      	ldr	r3, [pc, #32]	; (10d4c <nrfx_gpiote_pin_uninit+0x3c>)
   10d2c:	e009      	b.n	10d42 <nrfx_gpiote_pin_uninit+0x32>
    }

    nrfx_gpiote_trigger_disable(pin);
   10d2e:	6878      	ldr	r0, [r7, #4]
   10d30:	f000 fbae 	bl	11490 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   10d34:	6878      	ldr	r0, [r7, #4]
   10d36:	f7ff ffc5 	bl	10cc4 <pin_handler_trigger_uninit>
    nrfy_gpio_cfg_default(pin);
   10d3a:	6878      	ldr	r0, [r7, #4]
   10d3c:	f00c feb3 	bl	1daa6 <nrfy_gpio_cfg_default>

    return NRFX_SUCCESS;
   10d40:	4b03      	ldr	r3, [pc, #12]	; (10d50 <nrfx_gpiote_pin_uninit+0x40>)
}
   10d42:	4618      	mov	r0, r3
   10d44:	3708      	adds	r7, #8
   10d46:	46bd      	mov	sp, r7
   10d48:	bd80      	pop	{r7, pc}
   10d4a:	bf00      	nop
   10d4c:	0bad0004 	.word	0x0bad0004
   10d50:	0bad0000 	.word	0x0bad0000

00010d54 <find_handler>:

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
   10d54:	b480      	push	{r7}
   10d56:	b085      	sub	sp, #20
   10d58:	af00      	add	r7, sp, #0
   10d5a:	6078      	str	r0, [r7, #4]
   10d5c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   10d5e:	2300      	movs	r3, #0
   10d60:	60fb      	str	r3, [r7, #12]
   10d62:	e013      	b.n	10d8c <find_handler+0x38>
    {
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   10d64:	4a0e      	ldr	r2, [pc, #56]	; (10da0 <find_handler+0x4c>)
   10d66:	68fb      	ldr	r3, [r7, #12]
   10d68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   10d6c:	687a      	ldr	r2, [r7, #4]
   10d6e:	429a      	cmp	r2, r3
   10d70:	d109      	bne.n	10d86 <find_handler+0x32>
   10d72:	4a0b      	ldr	r2, [pc, #44]	; (10da0 <find_handler+0x4c>)
   10d74:	68fb      	ldr	r3, [r7, #12]
   10d76:	00db      	lsls	r3, r3, #3
   10d78:	4413      	add	r3, r2
   10d7a:	685b      	ldr	r3, [r3, #4]
   10d7c:	683a      	ldr	r2, [r7, #0]
   10d7e:	429a      	cmp	r2, r3
   10d80:	d101      	bne.n	10d86 <find_handler+0x32>
        {
            return i;
   10d82:	68fb      	ldr	r3, [r7, #12]
   10d84:	e007      	b.n	10d96 <find_handler+0x42>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   10d86:	68fb      	ldr	r3, [r7, #12]
   10d88:	3301      	adds	r3, #1
   10d8a:	60fb      	str	r3, [r7, #12]
   10d8c:	68fb      	ldr	r3, [r7, #12]
   10d8e:	2b00      	cmp	r3, #0
   10d90:	d0e8      	beq.n	10d64 <find_handler+0x10>
        }
    }

    return -1;
   10d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   10d96:	4618      	mov	r0, r3
   10d98:	3714      	adds	r7, #20
   10d9a:	46bd      	mov	sp, r7
   10d9c:	bc80      	pop	{r7}
   10d9e:	4770      	bx	lr
   10da0:	2000c688 	.word	0x2000c688

00010da4 <pin_handler_set>:

/** @brief Set new handler, if handler was not previously set allocate it. */
static nrfx_err_t pin_handler_set(nrfx_gpiote_pin_t               pin,
                                  nrfx_gpiote_interrupt_handler_t handler,
                                  void *                          p_context)
{
   10da4:	b580      	push	{r7, lr}
   10da6:	b088      	sub	sp, #32
   10da8:	af00      	add	r7, sp, #0
   10daa:	60f8      	str	r0, [r7, #12]
   10dac:	60b9      	str	r1, [r7, #8]
   10dae:	607a      	str	r2, [r7, #4]
    nrfx_err_t err;
    int32_t handler_id;

    release_handler(pin);
   10db0:	68f8      	ldr	r0, [r7, #12]
   10db2:	f7ff ff23 	bl	10bfc <release_handler>
    if (!handler)
   10db6:	68bb      	ldr	r3, [r7, #8]
   10db8:	2b00      	cmp	r3, #0
   10dba:	d101      	bne.n	10dc0 <pin_handler_set+0x1c>
    {
        return NRFX_SUCCESS;
   10dbc:	4b20      	ldr	r3, [pc, #128]	; (10e40 <pin_handler_set+0x9c>)
   10dbe:	e03b      	b.n	10e38 <pin_handler_set+0x94>
    }

    handler_id = find_handler(handler, p_context);
   10dc0:	6879      	ldr	r1, [r7, #4]
   10dc2:	68b8      	ldr	r0, [r7, #8]
   10dc4:	f7ff ffc6 	bl	10d54 <find_handler>
   10dc8:	61f8      	str	r0, [r7, #28]
    /* Handler not found, new must be allocated. */
    if (handler_id < 0)
   10dca:	69fb      	ldr	r3, [r7, #28]
   10dcc:	2b00      	cmp	r3, #0
   10dce:	da0e      	bge.n	10dee <pin_handler_set+0x4a>
    {
        uint8_t id;

        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   10dd0:	f107 0317 	add.w	r3, r7, #23
   10dd4:	4619      	mov	r1, r3
   10dd6:	481b      	ldr	r0, [pc, #108]	; (10e44 <pin_handler_set+0xa0>)
   10dd8:	f7ff f9aa 	bl	10130 <nrfx_flag32_alloc>
   10ddc:	61b8      	str	r0, [r7, #24]
        if (err != NRFX_SUCCESS)
   10dde:	69bb      	ldr	r3, [r7, #24]
   10de0:	4a17      	ldr	r2, [pc, #92]	; (10e40 <pin_handler_set+0x9c>)
   10de2:	4293      	cmp	r3, r2
   10de4:	d001      	beq.n	10dea <pin_handler_set+0x46>
        {
            return err;
   10de6:	69bb      	ldr	r3, [r7, #24]
   10de8:	e026      	b.n	10e38 <pin_handler_set+0x94>
        }
        handler_id = (int32_t)id;
   10dea:	7dfb      	ldrb	r3, [r7, #23]
   10dec:	61fb      	str	r3, [r7, #28]
    }

    m_cb.handlers[handler_id].handler = handler;
   10dee:	4916      	ldr	r1, [pc, #88]	; (10e48 <pin_handler_set+0xa4>)
   10df0:	69fb      	ldr	r3, [r7, #28]
   10df2:	68ba      	ldr	r2, [r7, #8]
   10df4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   10df8:	4a13      	ldr	r2, [pc, #76]	; (10e48 <pin_handler_set+0xa4>)
   10dfa:	69fb      	ldr	r3, [r7, #28]
   10dfc:	00db      	lsls	r3, r3, #3
   10dfe:	4413      	add	r3, r2
   10e00:	687a      	ldr	r2, [r7, #4]
   10e02:	605a      	str	r2, [r3, #4]
    m_cb.pin_flags[get_pin_idx(pin)] |= PIN_FLAG_HANDLER(handler_id);
   10e04:	68f8      	ldr	r0, [r7, #12]
   10e06:	f00c fed7 	bl	1dbb8 <get_pin_idx>
   10e0a:	4603      	mov	r3, r0
   10e0c:	4619      	mov	r1, r3
   10e0e:	460b      	mov	r3, r1
   10e10:	4a0d      	ldr	r2, [pc, #52]	; (10e48 <pin_handler_set+0xa4>)
   10e12:	3308      	adds	r3, #8
   10e14:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   10e18:	69fb      	ldr	r3, [r7, #28]
   10e1a:	b29b      	uxth	r3, r3
   10e1c:	025b      	lsls	r3, r3, #9
   10e1e:	b29b      	uxth	r3, r3
   10e20:	4313      	orrs	r3, r2
   10e22:	b29b      	uxth	r3, r3
   10e24:	4608      	mov	r0, r1
   10e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10e2a:	b299      	uxth	r1, r3
   10e2c:	4a06      	ldr	r2, [pc, #24]	; (10e48 <pin_handler_set+0xa4>)
   10e2e:	f100 0308 	add.w	r3, r0, #8
   10e32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    return NRFX_SUCCESS;
   10e36:	4b02      	ldr	r3, [pc, #8]	; (10e40 <pin_handler_set+0x9c>)
}
   10e38:	4618      	mov	r0, r3
   10e3a:	3720      	adds	r7, #32
   10e3c:	46bd      	mov	sp, r7
   10e3e:	bd80      	pop	{r7, pc}
   10e40:	0bad0000 	.word	0x0bad0000
   10e44:	2000c6dc 	.word	0x2000c6dc
   10e48:	2000c688 	.word	0x2000c688

00010e4c <get_initial_sense>:

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
   10e4c:	b580      	push	{r7, lr}
   10e4e:	b084      	sub	sp, #16
   10e50:	af00      	add	r7, sp, #0
   10e52:	6078      	str	r0, [r7, #4]
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[get_pin_idx(pin)]);
   10e54:	6878      	ldr	r0, [r7, #4]
   10e56:	f00c feaf 	bl	1dbb8 <get_pin_idx>
   10e5a:	4603      	mov	r3, r0
   10e5c:	4a11      	ldr	r2, [pc, #68]	; (10ea4 <get_initial_sense+0x58>)
   10e5e:	3308      	adds	r3, #8
   10e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10e64:	089b      	lsrs	r3, r3, #2
   10e66:	f003 0307 	and.w	r3, r3, #7
   10e6a:	73bb      	strb	r3, [r7, #14]
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   10e6c:	7bbb      	ldrb	r3, [r7, #14]
   10e6e:	2b04      	cmp	r3, #4
   10e70:	d102      	bne.n	10e78 <get_initial_sense+0x2c>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
   10e72:	2303      	movs	r3, #3
   10e74:	73fb      	strb	r3, [r7, #15]
   10e76:	e00f      	b.n	10e98 <get_initial_sense+0x4c>
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   10e78:	7bbb      	ldrb	r3, [r7, #14]
   10e7a:	2b05      	cmp	r3, #5
   10e7c:	d102      	bne.n	10e84 <get_initial_sense+0x38>
    {
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   10e7e:	2302      	movs	r3, #2
   10e80:	73fb      	strb	r3, [r7, #15]
   10e82:	e009      	b.n	10e98 <get_initial_sense+0x4c>
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrfy_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   10e84:	6878      	ldr	r0, [r7, #4]
   10e86:	f00c fe2e 	bl	1dae6 <nrfy_gpio_pin_read>
   10e8a:	4603      	mov	r3, r0
   10e8c:	2b00      	cmp	r3, #0
   10e8e:	d001      	beq.n	10e94 <get_initial_sense+0x48>
   10e90:	2303      	movs	r3, #3
   10e92:	e000      	b.n	10e96 <get_initial_sense+0x4a>
   10e94:	2302      	movs	r3, #2
   10e96:	73fb      	strb	r3, [r7, #15]
    }

    return sense;
   10e98:	7bfb      	ldrb	r3, [r7, #15]
}
   10e9a:	4618      	mov	r0, r3
   10e9c:	3710      	adds	r7, #16
   10e9e:	46bd      	mov	sp, r7
   10ea0:	bd80      	pop	{r7, pc}
   10ea2:	bf00      	nop
   10ea4:	2000c688 	.word	0x2000c688

00010ea8 <nrfx_gpiote_input_configure>:

nrfx_err_t nrfx_gpiote_input_configure(nrfx_gpiote_pin_t                    pin,
                                       nrfx_gpiote_input_config_t const *   p_input_config,
                                       nrfx_gpiote_trigger_config_t const * p_trigger_config,
                                       nrfx_gpiote_handler_config_t const * p_handler_config)
{
   10ea8:	b580      	push	{r7, lr}
   10eaa:	b08a      	sub	sp, #40	; 0x28
   10eac:	af02      	add	r7, sp, #8
   10eae:	60f8      	str	r0, [r7, #12]
   10eb0:	60b9      	str	r1, [r7, #8]
   10eb2:	607a      	str	r2, [r7, #4]
   10eb4:	603b      	str	r3, [r7, #0]
    nrfx_err_t err;
    uint8_t idx = get_pin_idx(pin);
   10eb6:	68f8      	ldr	r0, [r7, #12]
   10eb8:	f00c fe7e 	bl	1dbb8 <get_pin_idx>
   10ebc:	4603      	mov	r3, r0
   10ebe:	76fb      	strb	r3, [r7, #27]

    if (p_input_config)
   10ec0:	68bb      	ldr	r3, [r7, #8]
   10ec2:	2b00      	cmp	r3, #0
   10ec4:	d031      	beq.n	10f2a <nrfx_gpiote_input_configure+0x82>
    {
        if (pin_is_task_output(pin))
   10ec6:	68f8      	ldr	r0, [r7, #12]
   10ec8:	f00c fe81 	bl	1dbce <pin_is_task_output>
   10ecc:	4603      	mov	r3, r0
   10ece:	2b00      	cmp	r3, #0
   10ed0:	d001      	beq.n	10ed6 <nrfx_gpiote_input_configure+0x2e>
        {
            return NRFX_ERROR_INVALID_PARAM;
   10ed2:	4b64      	ldr	r3, [pc, #400]	; (11064 <nrfx_gpiote_input_configure+0x1bc>)
   10ed4:	e0c2      	b.n	1105c <nrfx_gpiote_input_configure+0x1b4>
        }

        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   10ed6:	2300      	movs	r3, #0
   10ed8:	757b      	strb	r3, [r7, #21]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   10eda:	2300      	movs	r3, #0
   10edc:	753b      	strb	r3, [r7, #20]

        nrfy_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   10ede:	68bb      	ldr	r3, [r7, #8]
   10ee0:	f107 0214 	add.w	r2, r7, #20
   10ee4:	f107 0115 	add.w	r1, r7, #21
   10ee8:	2000      	movs	r0, #0
   10eea:	9001      	str	r0, [sp, #4]
   10eec:	2000      	movs	r0, #0
   10eee:	9000      	str	r0, [sp, #0]
   10ef0:	68f8      	ldr	r0, [r7, #12]
   10ef2:	f00c fdc1 	bl	1da78 <nrfy_gpio_reconfigure>

        m_cb.pin_flags[idx] &= ~PIN_FLAG_OUTPUT;
   10ef6:	7efb      	ldrb	r3, [r7, #27]
   10ef8:	4a5b      	ldr	r2, [pc, #364]	; (11068 <nrfx_gpiote_input_configure+0x1c0>)
   10efa:	3308      	adds	r3, #8
   10efc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   10f00:	7efb      	ldrb	r3, [r7, #27]
   10f02:	f022 0202 	bic.w	r2, r2, #2
   10f06:	b291      	uxth	r1, r2
   10f08:	4a57      	ldr	r2, [pc, #348]	; (11068 <nrfx_gpiote_input_configure+0x1c0>)
   10f0a:	3308      	adds	r3, #8
   10f0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        m_cb.pin_flags[idx] |= PIN_FLAG_IN_USE;
   10f10:	7efb      	ldrb	r3, [r7, #27]
   10f12:	4a55      	ldr	r2, [pc, #340]	; (11068 <nrfx_gpiote_input_configure+0x1c0>)
   10f14:	3308      	adds	r3, #8
   10f16:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   10f1a:	7efb      	ldrb	r3, [r7, #27]
   10f1c:	f042 0201 	orr.w	r2, r2, #1
   10f20:	b291      	uxth	r1, r2
   10f22:	4a51      	ldr	r2, [pc, #324]	; (11068 <nrfx_gpiote_input_configure+0x1c0>)
   10f24:	3308      	adds	r3, #8
   10f26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }

    if (p_trigger_config)
   10f2a:	687b      	ldr	r3, [r7, #4]
   10f2c:	2b00      	cmp	r3, #0
   10f2e:	f000 8085 	beq.w	1103c <nrfx_gpiote_input_configure+0x194>
    {
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   10f32:	687b      	ldr	r3, [r7, #4]
   10f34:	781b      	ldrb	r3, [r3, #0]
   10f36:	76bb      	strb	r3, [r7, #26]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   10f38:	687b      	ldr	r3, [r7, #4]
   10f3a:	685b      	ldr	r3, [r3, #4]
   10f3c:	2b00      	cmp	r3, #0
   10f3e:	bf14      	ite	ne
   10f40:	2301      	movne	r3, #1
   10f42:	2300      	moveq	r3, #0
   10f44:	767b      	strb	r3, [r7, #25]

        if (pin_is_output(pin))
   10f46:	68f8      	ldr	r0, [r7, #12]
   10f48:	f7ff fdf8 	bl	10b3c <pin_is_output>
   10f4c:	4603      	mov	r3, r0
   10f4e:	2b00      	cmp	r3, #0
   10f50:	d004      	beq.n	10f5c <nrfx_gpiote_input_configure+0xb4>
        {
            if (use_evt)
   10f52:	7e7b      	ldrb	r3, [r7, #25]
   10f54:	2b00      	cmp	r3, #0
   10f56:	d053      	beq.n	11000 <nrfx_gpiote_input_configure+0x158>
            {
                return NRFX_ERROR_INVALID_PARAM;
   10f58:	4b42      	ldr	r3, [pc, #264]	; (11064 <nrfx_gpiote_input_configure+0x1bc>)
   10f5a:	e07f      	b.n	1105c <nrfx_gpiote_input_configure+0x1b4>
            }
        }
        else
        {
            m_cb.pin_flags[idx] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   10f5c:	7efb      	ldrb	r3, [r7, #27]
   10f5e:	4a42      	ldr	r2, [pc, #264]	; (11068 <nrfx_gpiote_input_configure+0x1c0>)
   10f60:	3308      	adds	r3, #8
   10f62:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   10f66:	7efa      	ldrb	r2, [r7, #27]
   10f68:	f641 73df 	movw	r3, #8159	; 0x1fdf
   10f6c:	400b      	ands	r3, r1
   10f6e:	b298      	uxth	r0, r3
   10f70:	493d      	ldr	r1, [pc, #244]	; (11068 <nrfx_gpiote_input_configure+0x1c0>)
   10f72:	f102 0308 	add.w	r3, r2, #8
   10f76:	4602      	mov	r2, r0
   10f78:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            if (use_evt)
   10f7c:	7e7b      	ldrb	r3, [r7, #25]
   10f7e:	2b00      	cmp	r3, #0
   10f80:	d03e      	beq.n	11000 <nrfx_gpiote_input_configure+0x158>
            {
                bool edge = trigger <= NRFX_GPIOTE_TRIGGER_TOGGLE;
   10f82:	7ebb      	ldrb	r3, [r7, #26]
   10f84:	2b03      	cmp	r3, #3
   10f86:	bf94      	ite	ls
   10f88:	2301      	movls	r3, #1
   10f8a:	2300      	movhi	r3, #0
   10f8c:	763b      	strb	r3, [r7, #24]

                /* IN event used. */
                if (!edge)
   10f8e:	7e3b      	ldrb	r3, [r7, #24]
   10f90:	f083 0301 	eor.w	r3, r3, #1
   10f94:	b2db      	uxtb	r3, r3
   10f96:	2b00      	cmp	r3, #0
   10f98:	d001      	beq.n	10f9e <nrfx_gpiote_input_configure+0xf6>
                {
                    /* IN event supports only edge trigger. */
                    return NRFX_ERROR_INVALID_PARAM;
   10f9a:	4b32      	ldr	r3, [pc, #200]	; (11064 <nrfx_gpiote_input_configure+0x1bc>)
   10f9c:	e05e      	b.n	1105c <nrfx_gpiote_input_configure+0x1b4>
                }

                uint8_t ch = *p_trigger_config->p_in_channel;
   10f9e:	687b      	ldr	r3, [r7, #4]
   10fa0:	685b      	ldr	r3, [r3, #4]
   10fa2:	781b      	ldrb	r3, [r3, #0]
   10fa4:	75fb      	strb	r3, [r7, #23]

                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   10fa6:	7ebb      	ldrb	r3, [r7, #26]
   10fa8:	2b00      	cmp	r3, #0
   10faa:	d105      	bne.n	10fb8 <nrfx_gpiote_input_configure+0x110>
                {
                    nrfy_gpiote_te_default(NRF_GPIOTE, ch);
   10fac:	7dfb      	ldrb	r3, [r7, #23]
   10fae:	4619      	mov	r1, r3
   10fb0:	482e      	ldr	r0, [pc, #184]	; (1106c <nrfx_gpiote_input_configure+0x1c4>)
   10fb2:	f00c fbb5 	bl	1d720 <nrfy_gpiote_te_default>
   10fb6:	e023      	b.n	11000 <nrfx_gpiote_input_configure+0x158>
                }
                else
                {
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   10fb8:	7ebb      	ldrb	r3, [r7, #26]
   10fba:	4618      	mov	r0, r3
   10fbc:	f00c fe43 	bl	1dc46 <gpiote_trigger_to_polarity>
   10fc0:	4603      	mov	r3, r0
   10fc2:	75bb      	strb	r3, [r7, #22]

                    nrfy_gpiote_event_disable(NRF_GPIOTE, ch);
   10fc4:	7dfb      	ldrb	r3, [r7, #23]
   10fc6:	4619      	mov	r1, r3
   10fc8:	4828      	ldr	r0, [pc, #160]	; (1106c <nrfx_gpiote_input_configure+0x1c4>)
   10fca:	f00c fb4a 	bl	1d662 <nrfy_gpiote_event_disable>
                    nrfy_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   10fce:	7df9      	ldrb	r1, [r7, #23]
   10fd0:	7dbb      	ldrb	r3, [r7, #22]
   10fd2:	68fa      	ldr	r2, [r7, #12]
   10fd4:	4825      	ldr	r0, [pc, #148]	; (1106c <nrfx_gpiote_input_configure+0x1c4>)
   10fd6:	f00c fb53 	bl	1d680 <nrfy_gpiote_event_configure>

                    m_cb.pin_flags[idx] |= PIN_FLAG_TE_ID(ch);
   10fda:	7efb      	ldrb	r3, [r7, #27]
   10fdc:	4a22      	ldr	r2, [pc, #136]	; (11068 <nrfx_gpiote_input_configure+0x1c0>)
   10fde:	3308      	adds	r3, #8
   10fe0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   10fe4:	7dfb      	ldrb	r3, [r7, #23]
   10fe6:	b29b      	uxth	r3, r3
   10fe8:	035b      	lsls	r3, r3, #13
   10fea:	b29b      	uxth	r3, r3
   10fec:	4313      	orrs	r3, r2
   10fee:	b29a      	uxth	r2, r3
   10ff0:	7efb      	ldrb	r3, [r7, #27]
   10ff2:	f042 0220 	orr.w	r2, r2, #32
   10ff6:	b291      	uxth	r1, r2
   10ff8:	4a1b      	ldr	r2, [pc, #108]	; (11068 <nrfx_gpiote_input_configure+0x1c0>)
   10ffa:	3308      	adds	r3, #8
   10ffc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        else
        {
            nrf_bitmask_bit_set(pin, (uint8_t *)m_cb.port_pins);
        }
#endif
        m_cb.pin_flags[idx] &= ~PIN_FLAG_TRIG_MODE_MASK;
   11000:	7efb      	ldrb	r3, [r7, #27]
   11002:	4a19      	ldr	r2, [pc, #100]	; (11068 <nrfx_gpiote_input_configure+0x1c0>)
   11004:	3308      	adds	r3, #8
   11006:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   1100a:	7efb      	ldrb	r3, [r7, #27]
   1100c:	f022 021c 	bic.w	r2, r2, #28
   11010:	b291      	uxth	r1, r2
   11012:	4a15      	ldr	r2, [pc, #84]	; (11068 <nrfx_gpiote_input_configure+0x1c0>)
   11014:	3308      	adds	r3, #8
   11016:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        m_cb.pin_flags[idx] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1101a:	7efb      	ldrb	r3, [r7, #27]
   1101c:	4a12      	ldr	r2, [pc, #72]	; (11068 <nrfx_gpiote_input_configure+0x1c0>)
   1101e:	3308      	adds	r3, #8
   11020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   11024:	b21a      	sxth	r2, r3
   11026:	7ebb      	ldrb	r3, [r7, #26]
   11028:	009b      	lsls	r3, r3, #2
   1102a:	b21b      	sxth	r3, r3
   1102c:	4313      	orrs	r3, r2
   1102e:	b21a      	sxth	r2, r3
   11030:	7efb      	ldrb	r3, [r7, #27]
   11032:	b291      	uxth	r1, r2
   11034:	4a0c      	ldr	r2, [pc, #48]	; (11068 <nrfx_gpiote_input_configure+0x1c0>)
   11036:	3308      	adds	r3, #8
   11038:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }

    if (p_handler_config)
   1103c:	683b      	ldr	r3, [r7, #0]
   1103e:	2b00      	cmp	r3, #0
   11040:	d009      	beq.n	11056 <nrfx_gpiote_input_configure+0x1ae>
    {
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   11042:	683b      	ldr	r3, [r7, #0]
   11044:	6819      	ldr	r1, [r3, #0]
   11046:	683b      	ldr	r3, [r7, #0]
   11048:	685b      	ldr	r3, [r3, #4]
   1104a:	461a      	mov	r2, r3
   1104c:	68f8      	ldr	r0, [r7, #12]
   1104e:	f7ff fea9 	bl	10da4 <pin_handler_set>
   11052:	61f8      	str	r0, [r7, #28]
   11054:	e001      	b.n	1105a <nrfx_gpiote_input_configure+0x1b2>
    }
    else
    {
        err = NRFX_SUCCESS;
   11056:	4b06      	ldr	r3, [pc, #24]	; (11070 <nrfx_gpiote_input_configure+0x1c8>)
   11058:	61fb      	str	r3, [r7, #28]
    }

    return err;
   1105a:	69fb      	ldr	r3, [r7, #28]
}
   1105c:	4618      	mov	r0, r3
   1105e:	3720      	adds	r7, #32
   11060:	46bd      	mov	sp, r7
   11062:	bd80      	pop	{r7, pc}
   11064:	0bad0004 	.word	0x0bad0004
   11068:	2000c688 	.word	0x2000c688
   1106c:	40031000 	.word	0x40031000
   11070:	0bad0000 	.word	0x0bad0000

00011074 <nrfx_gpiote_output_configure>:

nrfx_err_t nrfx_gpiote_output_configure(nrfx_gpiote_pin_t                   pin,
                                        nrfx_gpiote_output_config_t const * p_config,
                                        nrfx_gpiote_task_config_t const *   p_task_config)
{
   11074:	b590      	push	{r4, r7, lr}
   11076:	b08b      	sub	sp, #44	; 0x2c
   11078:	af02      	add	r7, sp, #8
   1107a:	60f8      	str	r0, [r7, #12]
   1107c:	60b9      	str	r1, [r7, #8]
   1107e:	607a      	str	r2, [r7, #4]
    uint8_t idx = get_pin_idx(pin);
   11080:	68f8      	ldr	r0, [r7, #12]
   11082:	f00c fd99 	bl	1dbb8 <get_pin_idx>
   11086:	4603      	mov	r3, r0
   11088:	77fb      	strb	r3, [r7, #31]

    if (p_config)
   1108a:	68bb      	ldr	r3, [r7, #8]
   1108c:	2b00      	cmp	r3, #0
   1108e:	d036      	beq.n	110fe <nrfx_gpiote_output_configure+0x8a>
    {
        /* Cannot configure pin to output if pin was using TE event. */
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   11090:	68f8      	ldr	r0, [r7, #12]
   11092:	f00c fdb6 	bl	1dc02 <pin_is_input>
   11096:	4603      	mov	r3, r0
   11098:	2b00      	cmp	r3, #0
   1109a:	d007      	beq.n	110ac <nrfx_gpiote_output_configure+0x38>
   1109c:	68f8      	ldr	r0, [r7, #12]
   1109e:	f7ff fd17 	bl	10ad0 <pin_in_use_by_te>
   110a2:	4603      	mov	r3, r0
   110a4:	2b00      	cmp	r3, #0
   110a6:	d001      	beq.n	110ac <nrfx_gpiote_output_configure+0x38>
        {
            return NRFX_ERROR_INVALID_PARAM;
   110a8:	4b39      	ldr	r3, [pc, #228]	; (11190 <nrfx_gpiote_output_configure+0x11c>)
   110aa:	e06d      	b.n	11188 <nrfx_gpiote_output_configure+0x114>
        }

        /* If reconfiguring to output pin that has trigger configured then accept
         * only when input is still connected. */
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   110ac:	68f8      	ldr	r0, [r7, #12]
   110ae:	f7ff fd29 	bl	10b04 <pin_has_trigger>
   110b2:	4603      	mov	r3, r0
   110b4:	2b00      	cmp	r3, #0
   110b6:	d005      	beq.n	110c4 <nrfx_gpiote_output_configure+0x50>
   110b8:	68bb      	ldr	r3, [r7, #8]
   110ba:	785b      	ldrb	r3, [r3, #1]
   110bc:	2b01      	cmp	r3, #1
   110be:	d101      	bne.n	110c4 <nrfx_gpiote_output_configure+0x50>
        {
            return NRFX_ERROR_INVALID_PARAM;
   110c0:	4b33      	ldr	r3, [pc, #204]	; (11190 <nrfx_gpiote_output_configure+0x11c>)
   110c2:	e061      	b.n	11188 <nrfx_gpiote_output_configure+0x114>
        }

        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   110c4:	2301      	movs	r3, #1
   110c6:	75fb      	strb	r3, [r7, #23]

        nrfy_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   110c8:	68bb      	ldr	r3, [r7, #8]
   110ca:	1c5a      	adds	r2, r3, #1
   110cc:	68bb      	ldr	r3, [r7, #8]
   110ce:	1c98      	adds	r0, r3, #2
   110d0:	68bb      	ldr	r3, [r7, #8]
   110d2:	f107 0117 	add.w	r1, r7, #23
   110d6:	2400      	movs	r4, #0
   110d8:	9401      	str	r4, [sp, #4]
   110da:	9300      	str	r3, [sp, #0]
   110dc:	4603      	mov	r3, r0
   110de:	68f8      	ldr	r0, [r7, #12]
   110e0:	f00c fcca 	bl	1da78 <nrfy_gpio_reconfigure>
                              &p_config->drive, NULL);

        m_cb.pin_flags[idx] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   110e4:	7ffb      	ldrb	r3, [r7, #31]
   110e6:	4a2b      	ldr	r2, [pc, #172]	; (11194 <nrfx_gpiote_output_configure+0x120>)
   110e8:	3308      	adds	r3, #8
   110ea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   110ee:	7ffb      	ldrb	r3, [r7, #31]
   110f0:	f042 0203 	orr.w	r2, r2, #3
   110f4:	b291      	uxth	r1, r2
   110f6:	4a27      	ldr	r2, [pc, #156]	; (11194 <nrfx_gpiote_output_configure+0x120>)
   110f8:	3308      	adds	r3, #8
   110fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }

    if (p_task_config)
   110fe:	687b      	ldr	r3, [r7, #4]
   11100:	2b00      	cmp	r3, #0
   11102:	d040      	beq.n	11186 <nrfx_gpiote_output_configure+0x112>
    {
        if (pin_is_input(pin))
   11104:	68f8      	ldr	r0, [r7, #12]
   11106:	f00c fd7c 	bl	1dc02 <pin_is_input>
   1110a:	4603      	mov	r3, r0
   1110c:	2b00      	cmp	r3, #0
   1110e:	d001      	beq.n	11114 <nrfx_gpiote_output_configure+0xa0>
        {
            return NRFX_ERROR_INVALID_PARAM;
   11110:	4b1f      	ldr	r3, [pc, #124]	; (11190 <nrfx_gpiote_output_configure+0x11c>)
   11112:	e039      	b.n	11188 <nrfx_gpiote_output_configure+0x114>
        }

        uint32_t ch = p_task_config->task_ch;
   11114:	687b      	ldr	r3, [r7, #4]
   11116:	781b      	ldrb	r3, [r3, #0]
   11118:	61bb      	str	r3, [r7, #24]

        nrfy_gpiote_te_default(NRF_GPIOTE, ch);
   1111a:	69b9      	ldr	r1, [r7, #24]
   1111c:	481e      	ldr	r0, [pc, #120]	; (11198 <nrfx_gpiote_output_configure+0x124>)
   1111e:	f00c faff 	bl	1d720 <nrfy_gpiote_te_default>
        m_cb.pin_flags[idx] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   11122:	7ffb      	ldrb	r3, [r7, #31]
   11124:	4a1b      	ldr	r2, [pc, #108]	; (11194 <nrfx_gpiote_output_configure+0x120>)
   11126:	3308      	adds	r3, #8
   11128:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   1112c:	7ffa      	ldrb	r2, [r7, #31]
   1112e:	f641 73df 	movw	r3, #8159	; 0x1fdf
   11132:	400b      	ands	r3, r1
   11134:	b298      	uxth	r0, r3
   11136:	4917      	ldr	r1, [pc, #92]	; (11194 <nrfx_gpiote_output_configure+0x120>)
   11138:	f102 0308 	add.w	r3, r2, #8
   1113c:	4602      	mov	r2, r0
   1113e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   11142:	687b      	ldr	r3, [r7, #4]
   11144:	785b      	ldrb	r3, [r3, #1]
   11146:	2b00      	cmp	r3, #0
   11148:	d01d      	beq.n	11186 <nrfx_gpiote_output_configure+0x112>
        {
            nrfy_gpiote_task_configure(NRF_GPIOTE, ch, pin,
                                       p_task_config->polarity,
   1114a:	687b      	ldr	r3, [r7, #4]
   1114c:	785a      	ldrb	r2, [r3, #1]
                                       p_task_config->init_val);
   1114e:	687b      	ldr	r3, [r7, #4]
   11150:	789b      	ldrb	r3, [r3, #2]
            nrfy_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   11152:	9300      	str	r3, [sp, #0]
   11154:	4613      	mov	r3, r2
   11156:	68fa      	ldr	r2, [r7, #12]
   11158:	69b9      	ldr	r1, [r7, #24]
   1115a:	480f      	ldr	r0, [pc, #60]	; (11198 <nrfx_gpiote_output_configure+0x124>)
   1115c:	f00c faca 	bl	1d6f4 <nrfy_gpiote_task_configure>
            m_cb.pin_flags[idx] |= PIN_FLAG_TE_ID(ch);
   11160:	7ffb      	ldrb	r3, [r7, #31]
   11162:	4a0c      	ldr	r2, [pc, #48]	; (11194 <nrfx_gpiote_output_configure+0x120>)
   11164:	3308      	adds	r3, #8
   11166:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   1116a:	69bb      	ldr	r3, [r7, #24]
   1116c:	b29b      	uxth	r3, r3
   1116e:	035b      	lsls	r3, r3, #13
   11170:	b29b      	uxth	r3, r3
   11172:	4313      	orrs	r3, r2
   11174:	b29a      	uxth	r2, r3
   11176:	7ffb      	ldrb	r3, [r7, #31]
   11178:	f042 0220 	orr.w	r2, r2, #32
   1117c:	b291      	uxth	r1, r2
   1117e:	4a05      	ldr	r2, [pc, #20]	; (11194 <nrfx_gpiote_output_configure+0x120>)
   11180:	3308      	adds	r3, #8
   11182:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
    }

    return NRFX_SUCCESS;
   11186:	4b05      	ldr	r3, [pc, #20]	; (1119c <nrfx_gpiote_output_configure+0x128>)
}
   11188:	4618      	mov	r0, r3
   1118a:	3724      	adds	r7, #36	; 0x24
   1118c:	46bd      	mov	sp, r7
   1118e:	bd90      	pop	{r4, r7, pc}
   11190:	0bad0004 	.word	0x0bad0004
   11194:	2000c688 	.word	0x2000c688
   11198:	40031000 	.word	0x40031000
   1119c:	0bad0000 	.word	0x0bad0000

000111a0 <nrfx_gpiote_global_callback_set>:

void nrfx_gpiote_global_callback_set(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
   111a0:	b480      	push	{r7}
   111a2:	b083      	sub	sp, #12
   111a4:	af00      	add	r7, sp, #0
   111a6:	6078      	str	r0, [r7, #4]
   111a8:	6039      	str	r1, [r7, #0]
    m_cb.global_handler.handler = handler;
   111aa:	4a05      	ldr	r2, [pc, #20]	; (111c0 <nrfx_gpiote_global_callback_set+0x20>)
   111ac:	687b      	ldr	r3, [r7, #4]
   111ae:	6093      	str	r3, [r2, #8]
    m_cb.global_handler.p_context = p_context;
   111b0:	4a03      	ldr	r2, [pc, #12]	; (111c0 <nrfx_gpiote_global_callback_set+0x20>)
   111b2:	683b      	ldr	r3, [r7, #0]
   111b4:	60d3      	str	r3, [r2, #12]
}
   111b6:	bf00      	nop
   111b8:	370c      	adds	r7, #12
   111ba:	46bd      	mov	sp, r7
   111bc:	bc80      	pop	{r7}
   111be:	4770      	bx	lr
   111c0:	2000c688 	.word	0x2000c688

000111c4 <nrfx_gpiote_channel_get>:

nrfx_err_t nrfx_gpiote_channel_get(nrfx_gpiote_pin_t pin, uint8_t *p_channel)
{
   111c4:	b580      	push	{r7, lr}
   111c6:	b082      	sub	sp, #8
   111c8:	af00      	add	r7, sp, #0
   111ca:	6078      	str	r0, [r7, #4]
   111cc:	6039      	str	r1, [r7, #0]
    NRFX_ASSERT(p_channel);
   111ce:	683b      	ldr	r3, [r7, #0]
   111d0:	2b00      	cmp	r3, #0
   111d2:	d10b      	bne.n	111ec <nrfx_gpiote_channel_get+0x28>
   111d4:	f240 2365 	movw	r3, #613	; 0x265
   111d8:	4a12      	ldr	r2, [pc, #72]	; (11224 <nrfx_gpiote_channel_get+0x60>)
   111da:	4913      	ldr	r1, [pc, #76]	; (11228 <nrfx_gpiote_channel_get+0x64>)
   111dc:	4813      	ldr	r0, [pc, #76]	; (1122c <nrfx_gpiote_channel_get+0x68>)
   111de:	f008 fee9 	bl	19fb4 <assert_print>
   111e2:	f240 2165 	movw	r1, #613	; 0x265
   111e6:	480f      	ldr	r0, [pc, #60]	; (11224 <nrfx_gpiote_channel_get+0x60>)
   111e8:	f008 fed4 	bl	19f94 <assert_post_action>

    if (pin_in_use_by_te(pin))
   111ec:	6878      	ldr	r0, [r7, #4]
   111ee:	f7ff fc6f 	bl	10ad0 <pin_in_use_by_te>
   111f2:	4603      	mov	r3, r0
   111f4:	2b00      	cmp	r3, #0
   111f6:	d010      	beq.n	1121a <nrfx_gpiote_channel_get+0x56>
    {
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[get_pin_idx(pin)]);
   111f8:	6878      	ldr	r0, [r7, #4]
   111fa:	f00c fcdd 	bl	1dbb8 <get_pin_idx>
   111fe:	4603      	mov	r3, r0
   11200:	4a0b      	ldr	r2, [pc, #44]	; (11230 <nrfx_gpiote_channel_get+0x6c>)
   11202:	3308      	adds	r3, #8
   11204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   11208:	0b5b      	lsrs	r3, r3, #13
   1120a:	b2db      	uxtb	r3, r3
   1120c:	f003 0307 	and.w	r3, r3, #7
   11210:	b2da      	uxtb	r2, r3
   11212:	683b      	ldr	r3, [r7, #0]
   11214:	701a      	strb	r2, [r3, #0]
        return NRFX_SUCCESS;
   11216:	4b07      	ldr	r3, [pc, #28]	; (11234 <nrfx_gpiote_channel_get+0x70>)
   11218:	e000      	b.n	1121c <nrfx_gpiote_channel_get+0x58>
    }
    else
    {
        return NRFX_ERROR_INVALID_PARAM;
   1121a:	4b07      	ldr	r3, [pc, #28]	; (11238 <nrfx_gpiote_channel_get+0x74>)
    }
}
   1121c:	4618      	mov	r0, r3
   1121e:	3708      	adds	r7, #8
   11220:	46bd      	mov	sp, r7
   11222:	bd80      	pop	{r7, pc}
   11224:	00022890 	.word	0x00022890
   11228:	000228e4 	.word	0x000228e4
   1122c:	00022808 	.word	0x00022808
   11230:	2000c688 	.word	0x2000c688
   11234:	0bad0000 	.word	0x0bad0000
   11238:	0bad0004 	.word	0x0bad0004

0001123c <channel_handler_get>:

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
   1123c:	b580      	push	{r7, lr}
   1123e:	b084      	sub	sp, #16
   11240:	af00      	add	r7, sp, #0
   11242:	6078      	str	r0, [r7, #4]
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[get_pin_idx(pin)]);
   11244:	6878      	ldr	r0, [r7, #4]
   11246:	f00c fcb7 	bl	1dbb8 <get_pin_idx>
   1124a:	4603      	mov	r3, r0
   1124c:	4a12      	ldr	r2, [pc, #72]	; (11298 <channel_handler_get+0x5c>)
   1124e:	3308      	adds	r3, #8
   11250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   11254:	f403 7380 	and.w	r3, r3, #256	; 0x100
   11258:	2b00      	cmp	r3, #0
   1125a:	d00b      	beq.n	11274 <channel_handler_get+0x38>
   1125c:	6878      	ldr	r0, [r7, #4]
   1125e:	f00c fcab 	bl	1dbb8 <get_pin_idx>
   11262:	4603      	mov	r3, r0
   11264:	4a0c      	ldr	r2, [pc, #48]	; (11298 <channel_handler_get+0x5c>)
   11266:	3308      	adds	r3, #8
   11268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1126c:	0a5b      	lsrs	r3, r3, #9
   1126e:	f003 030f 	and.w	r3, r3, #15
   11272:	e001      	b.n	11278 <channel_handler_get+0x3c>
   11274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11278:	60fb      	str	r3, [r7, #12]

    if (handler_id == PIN_FLAG_NO_HANDLER)
   1127a:	68fb      	ldr	r3, [r7, #12]
   1127c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11280:	d101      	bne.n	11286 <channel_handler_get+0x4a>
    {
        return NULL;
   11282:	2300      	movs	r3, #0
   11284:	e003      	b.n	1128e <channel_handler_get+0x52>
    }

    return &m_cb.handlers[handler_id];
   11286:	68fb      	ldr	r3, [r7, #12]
   11288:	00db      	lsls	r3, r3, #3
   1128a:	4a03      	ldr	r2, [pc, #12]	; (11298 <channel_handler_get+0x5c>)
   1128c:	4413      	add	r3, r2
}
   1128e:	4618      	mov	r0, r3
   11290:	3710      	adds	r7, #16
   11292:	46bd      	mov	sp, r7
   11294:	bd80      	pop	{r7, pc}
   11296:	bf00      	nop
   11298:	2000c688 	.word	0x2000c688

0001129c <nrfx_gpiote_init>:

nrfx_err_t nrfx_gpiote_init(uint8_t interrupt_priority)
{
   1129c:	b590      	push	{r4, r7, lr}
   1129e:	b085      	sub	sp, #20
   112a0:	af00      	add	r7, sp, #0
   112a2:	4603      	mov	r3, r0
   112a4:	71fb      	strb	r3, [r7, #7]
    nrfx_err_t err_code;

    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   112a6:	4b22      	ldr	r3, [pc, #136]	; (11330 <nrfx_gpiote_init+0x94>)
   112a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   112ac:	2b00      	cmp	r3, #0
   112ae:	d014      	beq.n	112da <nrfx_gpiote_init+0x3e>
    {
        err_code = NRFX_ERROR_INVALID_STATE;
   112b0:	4b20      	ldr	r3, [pc, #128]	; (11334 <nrfx_gpiote_init+0x98>)
   112b2:	60fb      	str	r3, [r7, #12]
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
   112b4:	2300      	movs	r3, #0
   112b6:	2b01      	cmp	r3, #1
   112b8:	d90d      	bls.n	112d6 <nrfx_gpiote_init+0x3a>
   112ba:	2002      	movs	r0, #2
   112bc:	f7ff fbcc 	bl	10a58 <z_log_minimal_level_to_char>
   112c0:	4603      	mov	r3, r0
   112c2:	461c      	mov	r4, r3
   112c4:	68f8      	ldr	r0, [r7, #12]
   112c6:	f7fe fe9b 	bl	10000 <nrfx_error_string_get>
   112ca:	4603      	mov	r3, r0
   112cc:	4a1a      	ldr	r2, [pc, #104]	; (11338 <nrfx_gpiote_init+0x9c>)
   112ce:	4621      	mov	r1, r4
   112d0:	481a      	ldr	r0, [pc, #104]	; (1133c <nrfx_gpiote_init+0xa0>)
   112d2:	f008 fe92 	bl	19ffa <z_log_minimal_printk>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
   112d6:	68fb      	ldr	r3, [r7, #12]
   112d8:	e026      	b.n	11328 <nrfx_gpiote_init+0x8c>
    }

    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   112da:	2240      	movs	r2, #64	; 0x40
   112dc:	2100      	movs	r1, #0
   112de:	4818      	ldr	r0, [pc, #96]	; (11340 <nrfx_gpiote_init+0xa4>)
   112e0:	f00e fb02 	bl	1f8e8 <memset>

    nrfy_gpiote_int_init(NRF_GPIOTE, (uint32_t)NRF_GPIOTE_INT_PORT_MASK, interrupt_priority, true);
   112e4:	79fa      	ldrb	r2, [r7, #7]
   112e6:	2301      	movs	r3, #1
   112e8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   112ec:	4815      	ldr	r0, [pc, #84]	; (11344 <nrfx_gpiote_init+0xa8>)
   112ee:	f00c f92e 	bl	1d54e <nrfy_gpiote_int_init>

    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   112f2:	4b0f      	ldr	r3, [pc, #60]	; (11330 <nrfx_gpiote_init+0x94>)
   112f4:	2201      	movs	r2, #1
   112f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   112fa:	4b0d      	ldr	r3, [pc, #52]	; (11330 <nrfx_gpiote_init+0x94>)
   112fc:	2201      	movs	r2, #1
   112fe:	655a      	str	r2, [r3, #84]	; 0x54

    err_code = NRFX_SUCCESS;
   11300:	4b11      	ldr	r3, [pc, #68]	; (11348 <nrfx_gpiote_init+0xac>)
   11302:	60fb      	str	r3, [r7, #12]
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
   11304:	2300      	movs	r3, #0
   11306:	2b02      	cmp	r3, #2
   11308:	d90d      	bls.n	11326 <nrfx_gpiote_init+0x8a>
   1130a:	2003      	movs	r0, #3
   1130c:	f7ff fba4 	bl	10a58 <z_log_minimal_level_to_char>
   11310:	4603      	mov	r3, r0
   11312:	461c      	mov	r4, r3
   11314:	68f8      	ldr	r0, [r7, #12]
   11316:	f7fe fe73 	bl	10000 <nrfx_error_string_get>
   1131a:	4603      	mov	r3, r0
   1131c:	4a06      	ldr	r2, [pc, #24]	; (11338 <nrfx_gpiote_init+0x9c>)
   1131e:	4621      	mov	r1, r4
   11320:	4806      	ldr	r0, [pc, #24]	; (1133c <nrfx_gpiote_init+0xa0>)
   11322:	f008 fe6a 	bl	19ffa <z_log_minimal_printk>
    return err_code;
   11326:	68fb      	ldr	r3, [r7, #12]
}
   11328:	4618      	mov	r0, r3
   1132a:	3714      	adds	r7, #20
   1132c:	46bd      	mov	sp, r7
   1132e:	bd90      	pop	{r4, r7, pc}
   11330:	2000c688 	.word	0x2000c688
   11334:	0bad0005 	.word	0x0bad0005
   11338:	00024124 	.word	0x00024124
   1133c:	000228f0 	.word	0x000228f0
   11340:	2000c698 	.word	0x2000c698
   11344:	40031000 	.word	0x40031000
   11348:	0bad0000 	.word	0x0bad0000

0001134c <nrfx_gpiote_is_init>:


bool nrfx_gpiote_is_init(void)
{
   1134c:	b480      	push	{r7}
   1134e:	af00      	add	r7, sp, #0
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   11350:	4b05      	ldr	r3, [pc, #20]	; (11368 <nrfx_gpiote_is_init+0x1c>)
   11352:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   11356:	2b00      	cmp	r3, #0
   11358:	bf14      	ite	ne
   1135a:	2301      	movne	r3, #1
   1135c:	2300      	moveq	r3, #0
   1135e:	b2db      	uxtb	r3, r3
}
   11360:	4618      	mov	r0, r3
   11362:	46bd      	mov	sp, r7
   11364:	bc80      	pop	{r7}
   11366:	4770      	bx	lr
   11368:	2000c688 	.word	0x2000c688

0001136c <nrfx_gpiote_channel_free>:
    m_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
    NRFX_LOG_INFO("Uninitialized.");
}

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
   1136c:	b580      	push	{r7, lr}
   1136e:	b082      	sub	sp, #8
   11370:	af00      	add	r7, sp, #0
   11372:	4603      	mov	r3, r0
   11374:	71fb      	strb	r3, [r7, #7]
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   11376:	79fb      	ldrb	r3, [r7, #7]
   11378:	4619      	mov	r1, r3
   1137a:	4804      	ldr	r0, [pc, #16]	; (1138c <nrfx_gpiote_channel_free+0x20>)
   1137c:	f7fe ff0e 	bl	1019c <nrfx_flag32_free>
   11380:	4603      	mov	r3, r0
}
   11382:	4618      	mov	r0, r3
   11384:	3708      	adds	r7, #8
   11386:	46bd      	mov	sp, r7
   11388:	bd80      	pop	{r7, pc}
   1138a:	bf00      	nop
   1138c:	2000c6d8 	.word	0x2000c6d8

00011390 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   11390:	b580      	push	{r7, lr}
   11392:	b082      	sub	sp, #8
   11394:	af00      	add	r7, sp, #0
   11396:	6078      	str	r0, [r7, #4]
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   11398:	6879      	ldr	r1, [r7, #4]
   1139a:	4804      	ldr	r0, [pc, #16]	; (113ac <nrfx_gpiote_channel_alloc+0x1c>)
   1139c:	f7fe fec8 	bl	10130 <nrfx_flag32_alloc>
   113a0:	4603      	mov	r3, r0
}
   113a2:	4618      	mov	r0, r3
   113a4:	3708      	adds	r7, #8
   113a6:	46bd      	mov	sp, r7
   113a8:	bd80      	pop	{r7, pc}
   113aa:	bf00      	nop
   113ac:	2000c6d8 	.word	0x2000c6d8

000113b0 <nrfx_gpiote_trigger_enable>:


#endif // defined(GPIOTE_FEATURE_CLR_PRESENT)

void nrfx_gpiote_trigger_enable(nrfx_gpiote_pin_t pin, bool int_enable)
{
   113b0:	b580      	push	{r7, lr}
   113b2:	b084      	sub	sp, #16
   113b4:	af00      	add	r7, sp, #0
   113b6:	6078      	str	r0, [r7, #4]
   113b8:	460b      	mov	r3, r1
   113ba:	70fb      	strb	r3, [r7, #3]
    NRFX_ASSERT(pin_has_trigger(pin));
   113bc:	6878      	ldr	r0, [r7, #4]
   113be:	f7ff fba1 	bl	10b04 <pin_has_trigger>
   113c2:	4603      	mov	r3, r0
   113c4:	f083 0301 	eor.w	r3, r3, #1
   113c8:	b2db      	uxtb	r3, r3
   113ca:	2b00      	cmp	r3, #0
   113cc:	d00b      	beq.n	113e6 <nrfx_gpiote_trigger_enable+0x36>
   113ce:	f44f 7359 	mov.w	r3, #868	; 0x364
   113d2:	4a2a      	ldr	r2, [pc, #168]	; (1147c <nrfx_gpiote_trigger_enable+0xcc>)
   113d4:	492a      	ldr	r1, [pc, #168]	; (11480 <nrfx_gpiote_trigger_enable+0xd0>)
   113d6:	482b      	ldr	r0, [pc, #172]	; (11484 <nrfx_gpiote_trigger_enable+0xd4>)
   113d8:	f008 fdec 	bl	19fb4 <assert_print>
   113dc:	f44f 7159 	mov.w	r1, #868	; 0x364
   113e0:	4826      	ldr	r0, [pc, #152]	; (1147c <nrfx_gpiote_trigger_enable+0xcc>)
   113e2:	f008 fdd7 	bl	19f94 <assert_post_action>

    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   113e6:	6878      	ldr	r0, [r7, #4]
   113e8:	f7ff fb72 	bl	10ad0 <pin_in_use_by_te>
   113ec:	4603      	mov	r3, r0
   113ee:	2b00      	cmp	r3, #0
   113f0:	d024      	beq.n	1143c <nrfx_gpiote_trigger_enable+0x8c>
   113f2:	6878      	ldr	r0, [r7, #4]
   113f4:	f00c fc05 	bl	1dc02 <pin_is_input>
   113f8:	4603      	mov	r3, r0
   113fa:	2b00      	cmp	r3, #0
   113fc:	d01e      	beq.n	1143c <nrfx_gpiote_trigger_enable+0x8c>
    {
        uint8_t ch = pin_te_get(pin);
   113fe:	6878      	ldr	r0, [r7, #4]
   11400:	f7ff fbb6 	bl	10b70 <pin_te_get>
   11404:	4603      	mov	r3, r0
   11406:	73fb      	strb	r3, [r7, #15]

        nrfy_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   11408:	7bfb      	ldrb	r3, [r7, #15]
   1140a:	4618      	mov	r0, r3
   1140c:	f7ff fa4e 	bl	108ac <nrf_gpiote_in_event_get>
   11410:	4603      	mov	r3, r0
   11412:	4619      	mov	r1, r3
   11414:	481c      	ldr	r0, [pc, #112]	; (11488 <nrfx_gpiote_trigger_enable+0xd8>)
   11416:	f00c f8e6 	bl	1d5e6 <nrfy_gpiote_event_clear>
        nrfy_gpiote_event_enable(NRF_GPIOTE, ch);
   1141a:	7bfb      	ldrb	r3, [r7, #15]
   1141c:	4619      	mov	r1, r3
   1141e:	481a      	ldr	r0, [pc, #104]	; (11488 <nrfx_gpiote_trigger_enable+0xd8>)
   11420:	f00c f910 	bl	1d644 <nrfy_gpiote_event_enable>
        if (int_enable)
   11424:	78fb      	ldrb	r3, [r7, #3]
   11426:	2b00      	cmp	r3, #0
   11428:	d023      	beq.n	11472 <nrfx_gpiote_trigger_enable+0xc2>
        {
            nrfy_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1142a:	7bfb      	ldrb	r3, [r7, #15]
   1142c:	2201      	movs	r2, #1
   1142e:	fa02 f303 	lsl.w	r3, r2, r3
   11432:	4619      	mov	r1, r3
   11434:	4814      	ldr	r0, [pc, #80]	; (11488 <nrfx_gpiote_trigger_enable+0xd8>)
   11436:	f00c f8e7 	bl	1d608 <nrfy_gpiote_int_enable>
    {
   1143a:	e01a      	b.n	11472 <nrfx_gpiote_trigger_enable+0xc2>
        }
    }
    else
    {
        NRFX_ASSERT(int_enable);
   1143c:	78fb      	ldrb	r3, [r7, #3]
   1143e:	f083 0301 	eor.w	r3, r3, #1
   11442:	b2db      	uxtb	r3, r3
   11444:	2b00      	cmp	r3, #0
   11446:	d00b      	beq.n	11460 <nrfx_gpiote_trigger_enable+0xb0>
   11448:	f240 3373 	movw	r3, #883	; 0x373
   1144c:	4a0b      	ldr	r2, [pc, #44]	; (1147c <nrfx_gpiote_trigger_enable+0xcc>)
   1144e:	490f      	ldr	r1, [pc, #60]	; (1148c <nrfx_gpiote_trigger_enable+0xdc>)
   11450:	480c      	ldr	r0, [pc, #48]	; (11484 <nrfx_gpiote_trigger_enable+0xd4>)
   11452:	f008 fdaf 	bl	19fb4 <assert_print>
   11456:	f240 3173 	movw	r1, #883	; 0x373
   1145a:	4808      	ldr	r0, [pc, #32]	; (1147c <nrfx_gpiote_trigger_enable+0xcc>)
   1145c:	f008 fd9a 	bl	19f94 <assert_post_action>
        nrfy_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   11460:	6878      	ldr	r0, [r7, #4]
   11462:	f7ff fcf3 	bl	10e4c <get_initial_sense>
   11466:	4603      	mov	r3, r0
   11468:	4619      	mov	r1, r3
   1146a:	6878      	ldr	r0, [r7, #4]
   1146c:	f00c fb28 	bl	1dac0 <nrfy_gpio_cfg_sense_set>
    }
}
   11470:	e000      	b.n	11474 <nrfx_gpiote_trigger_enable+0xc4>
    {
   11472:	bf00      	nop
}
   11474:	bf00      	nop
   11476:	3710      	adds	r7, #16
   11478:	46bd      	mov	sp, r7
   1147a:	bd80      	pop	{r7, pc}
   1147c:	00022890 	.word	0x00022890
   11480:	000229e8 	.word	0x000229e8
   11484:	00022808 	.word	0x00022808
   11488:	40031000 	.word	0x40031000
   1148c:	00022a00 	.word	0x00022a00

00011490 <nrfx_gpiote_trigger_disable>:

void nrfx_gpiote_trigger_disable(nrfx_gpiote_pin_t pin)
{
   11490:	b580      	push	{r7, lr}
   11492:	b084      	sub	sp, #16
   11494:	af00      	add	r7, sp, #0
   11496:	6078      	str	r0, [r7, #4]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   11498:	6878      	ldr	r0, [r7, #4]
   1149a:	f7ff fb19 	bl	10ad0 <pin_in_use_by_te>
   1149e:	4603      	mov	r3, r0
   114a0:	2b00      	cmp	r3, #0
   114a2:	d018      	beq.n	114d6 <nrfx_gpiote_trigger_disable+0x46>
   114a4:	6878      	ldr	r0, [r7, #4]
   114a6:	f00c fbac 	bl	1dc02 <pin_is_input>
   114aa:	4603      	mov	r3, r0
   114ac:	2b00      	cmp	r3, #0
   114ae:	d012      	beq.n	114d6 <nrfx_gpiote_trigger_disable+0x46>
    {
        uint8_t ch = pin_te_get(pin);
   114b0:	6878      	ldr	r0, [r7, #4]
   114b2:	f7ff fb5d 	bl	10b70 <pin_te_get>
   114b6:	4603      	mov	r3, r0
   114b8:	73fb      	strb	r3, [r7, #15]

        nrfy_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   114ba:	7bfb      	ldrb	r3, [r7, #15]
   114bc:	2201      	movs	r2, #1
   114be:	fa02 f303 	lsl.w	r3, r2, r3
   114c2:	4619      	mov	r1, r3
   114c4:	4808      	ldr	r0, [pc, #32]	; (114e8 <nrfx_gpiote_trigger_disable+0x58>)
   114c6:	f00c f8ae 	bl	1d626 <nrfy_gpiote_int_disable>
        nrfy_gpiote_event_disable(NRF_GPIOTE, ch);
   114ca:	7bfb      	ldrb	r3, [r7, #15]
   114cc:	4619      	mov	r1, r3
   114ce:	4806      	ldr	r0, [pc, #24]	; (114e8 <nrfx_gpiote_trigger_disable+0x58>)
   114d0:	f00c f8c7 	bl	1d662 <nrfy_gpiote_event_disable>
    {
   114d4:	e004      	b.n	114e0 <nrfx_gpiote_trigger_disable+0x50>
    }
    else
    {
        nrfy_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   114d6:	2100      	movs	r1, #0
   114d8:	6878      	ldr	r0, [r7, #4]
   114da:	f00c faf1 	bl	1dac0 <nrfy_gpio_cfg_sense_set>
    }
}
   114de:	bf00      	nop
   114e0:	bf00      	nop
   114e2:	3710      	adds	r7, #16
   114e4:	46bd      	mov	sp, r7
   114e6:	bd80      	pop	{r7, pc}
   114e8:	40031000 	.word	0x40031000

000114ec <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrfy_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   114ec:	b580      	push	{r7, lr}
   114ee:	b084      	sub	sp, #16
   114f0:	af00      	add	r7, sp, #0
   114f2:	6078      	str	r0, [r7, #4]
   114f4:	460b      	mov	r3, r1
   114f6:	70fb      	strb	r3, [r7, #3]
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   114f8:	6878      	ldr	r0, [r7, #4]
   114fa:	f7ff fe9f 	bl	1123c <channel_handler_get>
   114fe:	60f8      	str	r0, [r7, #12]

    if (handler)
   11500:	68fb      	ldr	r3, [r7, #12]
   11502:	2b00      	cmp	r3, #0
   11504:	d006      	beq.n	11514 <call_handler+0x28>
    {
        handler->handler(pin, trigger, handler->p_context);
   11506:	68fb      	ldr	r3, [r7, #12]
   11508:	681b      	ldr	r3, [r3, #0]
   1150a:	68fa      	ldr	r2, [r7, #12]
   1150c:	6852      	ldr	r2, [r2, #4]
   1150e:	78f9      	ldrb	r1, [r7, #3]
   11510:	6878      	ldr	r0, [r7, #4]
   11512:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   11514:	4b07      	ldr	r3, [pc, #28]	; (11534 <call_handler+0x48>)
   11516:	689b      	ldr	r3, [r3, #8]
   11518:	2b00      	cmp	r3, #0
   1151a:	d006      	beq.n	1152a <call_handler+0x3e>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1151c:	4b05      	ldr	r3, [pc, #20]	; (11534 <call_handler+0x48>)
   1151e:	689b      	ldr	r3, [r3, #8]
   11520:	4a04      	ldr	r2, [pc, #16]	; (11534 <call_handler+0x48>)
   11522:	68d2      	ldr	r2, [r2, #12]
   11524:	78f9      	ldrb	r1, [r7, #3]
   11526:	6878      	ldr	r0, [r7, #4]
   11528:	4798      	blx	r3
    }
}
   1152a:	bf00      	nop
   1152c:	3710      	adds	r7, #16
   1152e:	46bd      	mov	sp, r7
   11530:	bd80      	pop	{r7, pc}
   11532:	bf00      	nop
   11534:	2000c688 	.word	0x2000c688

00011538 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   11538:	b580      	push	{r7, lr}
   1153a:	b086      	sub	sp, #24
   1153c:	af00      	add	r7, sp, #0
    uint32_t latch[GPIO_COUNT];

    nrfy_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   1153e:	1d3b      	adds	r3, r7, #4
   11540:	461a      	mov	r2, r3
   11542:	2101      	movs	r1, #1
   11544:	2000      	movs	r0, #0
   11546:	f00c faf1 	bl	1db2c <nrfy_gpio_latches_read_and_clear>

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1154a:	2300      	movs	r3, #0
   1154c:	617b      	str	r3, [r7, #20]
   1154e:	e03e      	b.n	115ce <port_event_handle+0x96>
        {
            while (latch[i])
            {
                uint32_t pin = NRF_CTZ(latch[i]);
   11550:	697b      	ldr	r3, [r7, #20]
   11552:	009b      	lsls	r3, r3, #2
   11554:	3318      	adds	r3, #24
   11556:	443b      	add	r3, r7
   11558:	f853 3c14 	ldr.w	r3, [r3, #-20]
   1155c:	fa93 f3a3 	rbit	r3, r3
   11560:	fab3 f383 	clz	r3, r3
   11564:	613b      	str	r3, [r7, #16]

                /* Convert to absolute value. */
                uint32_t abs_pin = NRF_PIN_PORT_TO_PIN_NUMBER(pin, ports[i]);
   11566:	693b      	ldr	r3, [r7, #16]
   11568:	f003 021f 	and.w	r2, r3, #31
   1156c:	2300      	movs	r3, #0
   1156e:	015b      	lsls	r3, r3, #5
   11570:	4313      	orrs	r3, r2
   11572:	60fb      	str	r3, [r7, #12]
                nrf_gpio_pin_sense_t sense;
                nrfx_gpiote_trigger_t trigger =
                    PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[get_pin_idx(abs_pin)]);
   11574:	68f8      	ldr	r0, [r7, #12]
   11576:	f00c fb1f 	bl	1dbb8 <get_pin_idx>
   1157a:	4603      	mov	r3, r0
   1157c:	4a1e      	ldr	r2, [pc, #120]	; (115f8 <port_event_handle+0xc0>)
   1157e:	3308      	adds	r3, #8
   11580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   11584:	089b      	lsrs	r3, r3, #2
   11586:	f003 0307 	and.w	r3, r3, #7
                nrfx_gpiote_trigger_t trigger =
   1158a:	72fb      	strb	r3, [r7, #11]

                nrf_bitmask_bit_clear(pin, &latch[i]);
   1158c:	1d3a      	adds	r2, r7, #4
   1158e:	697b      	ldr	r3, [r7, #20]
   11590:	009b      	lsls	r3, r3, #2
   11592:	4413      	add	r3, r2
   11594:	4619      	mov	r1, r3
   11596:	6938      	ldr	r0, [r7, #16]
   11598:	f00c fae8 	bl	1db6c <nrf_bitmask_bit_clear>
                sense = nrfy_gpio_pin_sense_get(abs_pin);
   1159c:	68f8      	ldr	r0, [r7, #12]
   1159e:	f00c fab3 	bl	1db08 <nrfy_gpio_pin_sense_get>
   115a2:	4603      	mov	r3, r0
   115a4:	72bb      	strb	r3, [r7, #10]

                next_sense_cond_call_handler(abs_pin, trigger, sense);
   115a6:	7aba      	ldrb	r2, [r7, #10]
   115a8:	7afb      	ldrb	r3, [r7, #11]
   115aa:	4619      	mov	r1, r3
   115ac:	68f8      	ldr	r0, [r7, #12]
   115ae:	f00c fb65 	bl	1dc7c <next_sense_cond_call_handler>
                /* Try to clear LATCH bit corresponding to currently processed pin.
                 * This may not succeed if the pin's state changed during the interrupt processing
                 * and now it matches the new sense configuration. In such case,
                 * the pin will be processed again in another iteration of the outer loop. */
                nrfy_gpio_pin_latch_clear(abs_pin);
   115b2:	68f8      	ldr	r0, [r7, #12]
   115b4:	f00c facd 	bl	1db52 <nrfy_gpio_pin_latch_clear>
            while (latch[i])
   115b8:	697b      	ldr	r3, [r7, #20]
   115ba:	009b      	lsls	r3, r3, #2
   115bc:	3318      	adds	r3, #24
   115be:	443b      	add	r3, r7
   115c0:	f853 3c14 	ldr.w	r3, [r3, #-20]
   115c4:	2b00      	cmp	r3, #0
   115c6:	d1c3      	bne.n	11550 <port_event_handle+0x18>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   115c8:	697b      	ldr	r3, [r7, #20]
   115ca:	3301      	adds	r3, #1
   115cc:	617b      	str	r3, [r7, #20]
   115ce:	697b      	ldr	r3, [r7, #20]
   115d0:	2b00      	cmp	r3, #0
   115d2:	d0f1      	beq.n	115b8 <port_event_handle+0x80>
           }
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        (void)nrfy_gpiote_events_process(NRF_GPIOTE, (uint32_t)NRF_GPIOTE_INT_PORT_MASK);
   115d4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   115d8:	4808      	ldr	r0, [pc, #32]	; (115fc <port_event_handle+0xc4>)
   115da:	f00b fff3 	bl	1d5c4 <nrfy_gpiote_events_process>
    } while (latch_pending_read_and_check(latch));
   115de:	1d3b      	adds	r3, r7, #4
   115e0:	4618      	mov	r0, r3
   115e2:	f00c fb95 	bl	1dd10 <latch_pending_read_and_check>
   115e6:	4603      	mov	r3, r0
   115e8:	2b00      	cmp	r3, #0
   115ea:	d1ae      	bne.n	1154a <port_event_handle+0x12>
}
   115ec:	bf00      	nop
   115ee:	bf00      	nop
   115f0:	3718      	adds	r7, #24
   115f2:	46bd      	mov	sp, r7
   115f4:	bd80      	pop	{r7, pc}
   115f6:	bf00      	nop
   115f8:	2000c688 	.word	0x2000c688
   115fc:	40031000 	.word	0x40031000

00011600 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   11600:	b580      	push	{r7, lr}
   11602:	b086      	sub	sp, #24
   11604:	af00      	add	r7, sp, #0
   11606:	6078      	str	r0, [r7, #4]
    while (mask)
   11608:	e021      	b.n	1164e <gpiote_evt_handle+0x4e>
    {
        uint32_t ch = NRF_CTZ(mask);
   1160a:	687b      	ldr	r3, [r7, #4]
   1160c:	fa93 f3a3 	rbit	r3, r3
   11610:	fab3 f383 	clz	r3, r3
   11614:	617b      	str	r3, [r7, #20]
        mask &= ~NRFX_BIT(ch);
   11616:	2201      	movs	r2, #1
   11618:	697b      	ldr	r3, [r7, #20]
   1161a:	fa02 f303 	lsl.w	r3, r2, r3
   1161e:	43db      	mvns	r3, r3
   11620:	687a      	ldr	r2, [r7, #4]
   11622:	4013      	ands	r3, r2
   11624:	607b      	str	r3, [r7, #4]
        nrfx_gpiote_pin_t pin = nrfy_gpiote_event_pin_get(NRF_GPIOTE, ch);
   11626:	6979      	ldr	r1, [r7, #20]
   11628:	480d      	ldr	r0, [pc, #52]	; (11660 <gpiote_evt_handle+0x60>)
   1162a:	f00c f83c 	bl	1d6a6 <nrfy_gpiote_event_pin_get>
   1162e:	6138      	str	r0, [r7, #16]
        nrf_gpiote_polarity_t polarity = nrfy_gpiote_event_polarity_get(NRF_GPIOTE, ch);
   11630:	6979      	ldr	r1, [r7, #20]
   11632:	480b      	ldr	r0, [pc, #44]	; (11660 <gpiote_evt_handle+0x60>)
   11634:	f00c f84a 	bl	1d6cc <nrfy_gpiote_event_polarity_get>
   11638:	4603      	mov	r3, r0
   1163a:	73fb      	strb	r3, [r7, #15]

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1163c:	7bfb      	ldrb	r3, [r7, #15]
   1163e:	4618      	mov	r0, r3
   11640:	f00c faf6 	bl	1dc30 <gpiote_polarity_to_trigger>
   11644:	4603      	mov	r3, r0
   11646:	4619      	mov	r1, r3
   11648:	6938      	ldr	r0, [r7, #16]
   1164a:	f7ff ff4f 	bl	114ec <call_handler>
    while (mask)
   1164e:	687b      	ldr	r3, [r7, #4]
   11650:	2b00      	cmp	r3, #0
   11652:	d1da      	bne.n	1160a <gpiote_evt_handle+0xa>
    }
}
   11654:	bf00      	nop
   11656:	bf00      	nop
   11658:	3718      	adds	r7, #24
   1165a:	46bd      	mov	sp, r7
   1165c:	bd80      	pop	{r7, pc}
   1165e:	bf00      	nop
   11660:	40031000 	.word	0x40031000

00011664 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   11664:	b580      	push	{r7, lr}
   11666:	b082      	sub	sp, #8
   11668:	af00      	add	r7, sp, #0
    /* Collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    uint32_t enabled_in_events = nrf_gpiote_int_enable_check(NRF_GPIOTE, NRF_GPIOTE_INT_IN_MASK);
   1166a:	21ff      	movs	r1, #255	; 0xff
   1166c:	480d      	ldr	r0, [pc, #52]	; (116a4 <nrfx_gpiote_irq_handler+0x40>)
   1166e:	f00b fe85 	bl	1d37c <nrf_gpiote_int_enable_check>
   11672:	6038      	str	r0, [r7, #0]
    uint32_t evt_mask = nrfy_gpiote_events_process(NRF_GPIOTE,
   11674:	683b      	ldr	r3, [r7, #0]
   11676:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1167a:	4619      	mov	r1, r3
   1167c:	4809      	ldr	r0, [pc, #36]	; (116a4 <nrfx_gpiote_irq_handler+0x40>)
   1167e:	f00b ffa1 	bl	1d5c4 <nrfy_gpiote_events_process>
   11682:	6078      	str	r0, [r7, #4]
                                                   enabled_in_events |
                                                   (uint32_t)NRF_GPIOTE_INT_PORT_MASK);

    /* Handle PORT event. */
    if (evt_mask & (uint32_t)NRF_GPIOTE_INT_PORT_MASK)
   11684:	687b      	ldr	r3, [r7, #4]
   11686:	2b00      	cmp	r3, #0
   11688:	da05      	bge.n	11696 <nrfx_gpiote_irq_handler+0x32>
    {
        port_event_handle();
   1168a:	f7ff ff55 	bl	11538 <port_event_handle>
        evt_mask &= ~(uint32_t)NRF_GPIOTE_INT_PORT_MASK;
   1168e:	687b      	ldr	r3, [r7, #4]
   11690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   11694:	607b      	str	r3, [r7, #4]
    }

    /* Process pin events. */
    gpiote_evt_handle(evt_mask);
   11696:	6878      	ldr	r0, [r7, #4]
   11698:	f7ff ffb2 	bl	11600 <gpiote_evt_handle>
}
   1169c:	bf00      	nop
   1169e:	3708      	adds	r7, #8
   116a0:	46bd      	mov	sp, r7
   116a2:	bd80      	pop	{r7, pc}
   116a4:	40031000 	.word	0x40031000

000116a8 <nrf_ipc_receive_event_get>:
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
   116a8:	b580      	push	{r7, lr}
   116aa:	b082      	sub	sp, #8
   116ac:	af00      	add	r7, sp, #0
   116ae:	4603      	mov	r3, r0
   116b0:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(index < IPC_CH_NUM);
   116b2:	79fb      	ldrb	r3, [r7, #7]
   116b4:	2b07      	cmp	r3, #7
   116b6:	d90b      	bls.n	116d0 <nrf_ipc_receive_event_get+0x28>
   116b8:	f240 13e7 	movw	r3, #487	; 0x1e7
   116bc:	4a09      	ldr	r2, [pc, #36]	; (116e4 <nrf_ipc_receive_event_get+0x3c>)
   116be:	490a      	ldr	r1, [pc, #40]	; (116e8 <nrf_ipc_receive_event_get+0x40>)
   116c0:	480a      	ldr	r0, [pc, #40]	; (116ec <nrf_ipc_receive_event_get+0x44>)
   116c2:	f008 fc77 	bl	19fb4 <assert_print>
   116c6:	f240 11e7 	movw	r1, #487	; 0x1e7
   116ca:	4806      	ldr	r0, [pc, #24]	; (116e4 <nrf_ipc_receive_event_get+0x3c>)
   116cc:	f008 fc62 	bl	19f94 <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   116d0:	79fb      	ldrb	r3, [r7, #7]
   116d2:	009b      	lsls	r3, r3, #2
   116d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
   116d8:	b29b      	uxth	r3, r3
}
   116da:	4618      	mov	r0, r3
   116dc:	3708      	adds	r7, #8
   116de:	46bd      	mov	sp, r7
   116e0:	bd80      	pop	{r7, pc}
   116e2:	bf00      	nop
   116e4:	00022a20 	.word	0x00022a20
   116e8:	00022a54 	.word	0x00022a54
   116ec:	00022a60 	.word	0x00022a60

000116f0 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   116f0:	b580      	push	{r7, lr}
   116f2:	b084      	sub	sp, #16
   116f4:	af00      	add	r7, sp, #0
   116f6:	4603      	mov	r3, r0
   116f8:	60b9      	str	r1, [r7, #8]
   116fa:	607a      	str	r2, [r7, #4]
   116fc:	73fb      	strb	r3, [r7, #15]
    NRFX_ASSERT(handler);
   116fe:	68bb      	ldr	r3, [r7, #8]
   11700:	2b00      	cmp	r3, #0
   11702:	d109      	bne.n	11718 <nrfx_ipc_init+0x28>
   11704:	2334      	movs	r3, #52	; 0x34
   11706:	4a10      	ldr	r2, [pc, #64]	; (11748 <nrfx_ipc_init+0x58>)
   11708:	4910      	ldr	r1, [pc, #64]	; (1174c <nrfx_ipc_init+0x5c>)
   1170a:	4811      	ldr	r0, [pc, #68]	; (11750 <nrfx_ipc_init+0x60>)
   1170c:	f008 fc52 	bl	19fb4 <assert_print>
   11710:	2134      	movs	r1, #52	; 0x34
   11712:	480d      	ldr	r0, [pc, #52]	; (11748 <nrfx_ipc_init+0x58>)
   11714:	f008 fc3e 	bl	19f94 <assert_post_action>
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   11718:	4b0e      	ldr	r3, [pc, #56]	; (11754 <nrfx_ipc_init+0x64>)
   1171a:	791b      	ldrb	r3, [r3, #4]
   1171c:	2b00      	cmp	r3, #0
   1171e:	d001      	beq.n	11724 <nrfx_ipc_init+0x34>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
   11720:	4b0d      	ldr	r3, [pc, #52]	; (11758 <nrfx_ipc_init+0x68>)
   11722:	e00c      	b.n	1173e <nrfx_ipc_init+0x4e>
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   11724:	202a      	movs	r0, #42	; 0x2a
   11726:	f008 fc9d 	bl	1a064 <arch_irq_enable>

    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1172a:	4b0a      	ldr	r3, [pc, #40]	; (11754 <nrfx_ipc_init+0x64>)
   1172c:	2201      	movs	r2, #1
   1172e:	711a      	strb	r2, [r3, #4]
    m_cb.handler = handler;
   11730:	4a08      	ldr	r2, [pc, #32]	; (11754 <nrfx_ipc_init+0x64>)
   11732:	68bb      	ldr	r3, [r7, #8]
   11734:	6013      	str	r3, [r2, #0]
    m_cb.p_context = p_context;
   11736:	4a07      	ldr	r2, [pc, #28]	; (11754 <nrfx_ipc_init+0x64>)
   11738:	687b      	ldr	r3, [r7, #4]
   1173a:	6093      	str	r3, [r2, #8]

    return NRFX_SUCCESS;
   1173c:	4b07      	ldr	r3, [pc, #28]	; (1175c <nrfx_ipc_init+0x6c>)
}
   1173e:	4618      	mov	r0, r3
   11740:	3710      	adds	r7, #16
   11742:	46bd      	mov	sp, r7
   11744:	bd80      	pop	{r7, pc}
   11746:	bf00      	nop
   11748:	00022a80 	.word	0x00022a80
   1174c:	00022abc 	.word	0x00022abc
   11750:	00022a60 	.word	0x00022a60
   11754:	2000caa0 	.word	0x2000caa0
   11758:	0bad000c 	.word	0x0bad000c
   1175c:	0bad0000 	.word	0x0bad0000

00011760 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   11760:	b580      	push	{r7, lr}
   11762:	b084      	sub	sp, #16
   11764:	af00      	add	r7, sp, #0
   11766:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(p_config);
   11768:	687b      	ldr	r3, [r7, #4]
   1176a:	2b00      	cmp	r3, #0
   1176c:	d109      	bne.n	11782 <nrfx_ipc_config_load+0x22>
   1176e:	2346      	movs	r3, #70	; 0x46
   11770:	4a23      	ldr	r2, [pc, #140]	; (11800 <nrfx_ipc_config_load+0xa0>)
   11772:	4924      	ldr	r1, [pc, #144]	; (11804 <nrfx_ipc_config_load+0xa4>)
   11774:	4824      	ldr	r0, [pc, #144]	; (11808 <nrfx_ipc_config_load+0xa8>)
   11776:	f008 fc1d 	bl	19fb4 <assert_print>
   1177a:	2146      	movs	r1, #70	; 0x46
   1177c:	4820      	ldr	r0, [pc, #128]	; (11800 <nrfx_ipc_config_load+0xa0>)
   1177e:	f008 fc09 	bl	19f94 <assert_post_action>
    NRFX_ASSERT(m_cb.state == NRFX_DRV_STATE_INITIALIZED);
   11782:	4b22      	ldr	r3, [pc, #136]	; (1180c <nrfx_ipc_config_load+0xac>)
   11784:	791b      	ldrb	r3, [r3, #4]
   11786:	2b01      	cmp	r3, #1
   11788:	d009      	beq.n	1179e <nrfx_ipc_config_load+0x3e>
   1178a:	2347      	movs	r3, #71	; 0x47
   1178c:	4a1c      	ldr	r2, [pc, #112]	; (11800 <nrfx_ipc_config_load+0xa0>)
   1178e:	4920      	ldr	r1, [pc, #128]	; (11810 <nrfx_ipc_config_load+0xb0>)
   11790:	481d      	ldr	r0, [pc, #116]	; (11808 <nrfx_ipc_config_load+0xa8>)
   11792:	f008 fc0f 	bl	19fb4 <assert_print>
   11796:	2147      	movs	r1, #71	; 0x47
   11798:	4819      	ldr	r0, [pc, #100]	; (11800 <nrfx_ipc_config_load+0xa0>)
   1179a:	f008 fbfb 	bl	19f94 <assert_post_action>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1179e:	2300      	movs	r3, #0
   117a0:	60fb      	str	r3, [r7, #12]
   117a2:	e00c      	b.n	117be <nrfx_ipc_config_load+0x5e>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   117a4:	68fb      	ldr	r3, [r7, #12]
   117a6:	b2d9      	uxtb	r1, r3
   117a8:	687b      	ldr	r3, [r7, #4]
   117aa:	68fa      	ldr	r2, [r7, #12]
   117ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   117b0:	461a      	mov	r2, r3
   117b2:	4818      	ldr	r0, [pc, #96]	; (11814 <nrfx_ipc_config_load+0xb4>)
   117b4:	f00c fb04 	bl	1ddc0 <nrf_ipc_send_config_set>
    for (i = 0; i < IPC_CONF_NUM; ++i)
   117b8:	68fb      	ldr	r3, [r7, #12]
   117ba:	3301      	adds	r3, #1
   117bc:	60fb      	str	r3, [r7, #12]
   117be:	68fb      	ldr	r3, [r7, #12]
   117c0:	2b07      	cmp	r3, #7
   117c2:	d9ef      	bls.n	117a4 <nrfx_ipc_config_load+0x44>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   117c4:	2300      	movs	r3, #0
   117c6:	60fb      	str	r3, [r7, #12]
   117c8:	e00d      	b.n	117e6 <nrfx_ipc_config_load+0x86>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   117ca:	68fb      	ldr	r3, [r7, #12]
   117cc:	b2d9      	uxtb	r1, r3
   117ce:	687b      	ldr	r3, [r7, #4]
   117d0:	68fa      	ldr	r2, [r7, #12]
   117d2:	3208      	adds	r2, #8
   117d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   117d8:	461a      	mov	r2, r3
   117da:	480e      	ldr	r0, [pc, #56]	; (11814 <nrfx_ipc_config_load+0xb4>)
   117dc:	f00c fb03 	bl	1dde6 <nrf_ipc_receive_config_set>
    for (i = 0; i < IPC_CONF_NUM; ++i)
   117e0:	68fb      	ldr	r3, [r7, #12]
   117e2:	3301      	adds	r3, #1
   117e4:	60fb      	str	r3, [r7, #12]
   117e6:	68fb      	ldr	r3, [r7, #12]
   117e8:	2b07      	cmp	r3, #7
   117ea:	d9ee      	bls.n	117ca <nrfx_ipc_config_load+0x6a>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   117ec:	687b      	ldr	r3, [r7, #4]
   117ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   117f0:	4619      	mov	r1, r3
   117f2:	4808      	ldr	r0, [pc, #32]	; (11814 <nrfx_ipc_config_load+0xb4>)
   117f4:	f00c fabc 	bl	1dd70 <nrf_ipc_int_enable>
}
   117f8:	bf00      	nop
   117fa:	3710      	adds	r7, #16
   117fc:	46bd      	mov	sp, r7
   117fe:	bd80      	pop	{r7, pc}
   11800:	00022a80 	.word	0x00022a80
   11804:	00022ac4 	.word	0x00022ac4
   11808:	00022a60 	.word	0x00022a60
   1180c:	2000caa0 	.word	0x2000caa0
   11810:	00022ad0 	.word	0x00022ad0
   11814:	4002a000 	.word	0x4002a000

00011818 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   11818:	b580      	push	{r7, lr}
   1181a:	b082      	sub	sp, #8
   1181c:	af00      	add	r7, sp, #0
    NRFX_ASSERT(m_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1181e:	4b1d      	ldr	r3, [pc, #116]	; (11894 <nrfx_ipc_uninit+0x7c>)
   11820:	791b      	ldrb	r3, [r3, #4]
   11822:	2b01      	cmp	r3, #1
   11824:	d009      	beq.n	1183a <nrfx_ipc_uninit+0x22>
   11826:	2359      	movs	r3, #89	; 0x59
   11828:	4a1b      	ldr	r2, [pc, #108]	; (11898 <nrfx_ipc_uninit+0x80>)
   1182a:	491c      	ldr	r1, [pc, #112]	; (1189c <nrfx_ipc_uninit+0x84>)
   1182c:	481c      	ldr	r0, [pc, #112]	; (118a0 <nrfx_ipc_uninit+0x88>)
   1182e:	f008 fbc1 	bl	19fb4 <assert_print>
   11832:	2159      	movs	r1, #89	; 0x59
   11834:	4818      	ldr	r0, [pc, #96]	; (11898 <nrfx_ipc_uninit+0x80>)
   11836:	f008 fbad 	bl	19f94 <assert_post_action>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1183a:	2300      	movs	r3, #0
   1183c:	607b      	str	r3, [r7, #4]
   1183e:	e009      	b.n	11854 <nrfx_ipc_uninit+0x3c>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, 0);
   11840:	687b      	ldr	r3, [r7, #4]
   11842:	b2db      	uxtb	r3, r3
   11844:	2200      	movs	r2, #0
   11846:	4619      	mov	r1, r3
   11848:	4816      	ldr	r0, [pc, #88]	; (118a4 <nrfx_ipc_uninit+0x8c>)
   1184a:	f00c fab9 	bl	1ddc0 <nrf_ipc_send_config_set>
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1184e:	687b      	ldr	r3, [r7, #4]
   11850:	3301      	adds	r3, #1
   11852:	607b      	str	r3, [r7, #4]
   11854:	687b      	ldr	r3, [r7, #4]
   11856:	2b07      	cmp	r3, #7
   11858:	d9f2      	bls.n	11840 <nrfx_ipc_uninit+0x28>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1185a:	2300      	movs	r3, #0
   1185c:	607b      	str	r3, [r7, #4]
   1185e:	e009      	b.n	11874 <nrfx_ipc_uninit+0x5c>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
   11860:	687b      	ldr	r3, [r7, #4]
   11862:	b2db      	uxtb	r3, r3
   11864:	2200      	movs	r2, #0
   11866:	4619      	mov	r1, r3
   11868:	480e      	ldr	r0, [pc, #56]	; (118a4 <nrfx_ipc_uninit+0x8c>)
   1186a:	f00c fabc 	bl	1dde6 <nrf_ipc_receive_config_set>
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1186e:	687b      	ldr	r3, [r7, #4]
   11870:	3301      	adds	r3, #1
   11872:	607b      	str	r3, [r7, #4]
   11874:	687b      	ldr	r3, [r7, #4]
   11876:	2b07      	cmp	r3, #7
   11878:	d9f2      	bls.n	11860 <nrfx_ipc_uninit+0x48>
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
   1187a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1187e:	4809      	ldr	r0, [pc, #36]	; (118a4 <nrfx_ipc_uninit+0x8c>)
   11880:	f00c fa84 	bl	1dd8c <nrf_ipc_int_disable>
    m_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   11884:	4b03      	ldr	r3, [pc, #12]	; (11894 <nrfx_ipc_uninit+0x7c>)
   11886:	2200      	movs	r2, #0
   11888:	711a      	strb	r2, [r3, #4]
}
   1188a:	bf00      	nop
   1188c:	3708      	adds	r7, #8
   1188e:	46bd      	mov	sp, r7
   11890:	bd80      	pop	{r7, pc}
   11892:	bf00      	nop
   11894:	2000caa0 	.word	0x2000caa0
   11898:	00022a80 	.word	0x00022a80
   1189c:	00022ad0 	.word	0x00022ad0
   118a0:	00022a60 	.word	0x00022a60
   118a4:	4002a000 	.word	0x4002a000

000118a8 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   118a8:	b580      	push	{r7, lr}
   118aa:	b082      	sub	sp, #8
   118ac:	af00      	add	r7, sp, #0
   118ae:	4603      	mov	r3, r0
   118b0:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(m_cb.state == NRFX_DRV_STATE_INITIALIZED);
   118b2:	4b0d      	ldr	r3, [pc, #52]	; (118e8 <nrfx_ipc_receive_event_enable+0x40>)
   118b4:	791b      	ldrb	r3, [r3, #4]
   118b6:	2b01      	cmp	r3, #1
   118b8:	d009      	beq.n	118ce <nrfx_ipc_receive_event_enable+0x26>
   118ba:	236c      	movs	r3, #108	; 0x6c
   118bc:	4a0b      	ldr	r2, [pc, #44]	; (118ec <nrfx_ipc_receive_event_enable+0x44>)
   118be:	490c      	ldr	r1, [pc, #48]	; (118f0 <nrfx_ipc_receive_event_enable+0x48>)
   118c0:	480c      	ldr	r0, [pc, #48]	; (118f4 <nrfx_ipc_receive_event_enable+0x4c>)
   118c2:	f008 fb77 	bl	19fb4 <assert_print>
   118c6:	216c      	movs	r1, #108	; 0x6c
   118c8:	4808      	ldr	r0, [pc, #32]	; (118ec <nrfx_ipc_receive_event_enable+0x44>)
   118ca:	f008 fb63 	bl	19f94 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   118ce:	79fb      	ldrb	r3, [r7, #7]
   118d0:	2201      	movs	r2, #1
   118d2:	fa02 f303 	lsl.w	r3, r2, r3
   118d6:	4619      	mov	r1, r3
   118d8:	4807      	ldr	r0, [pc, #28]	; (118f8 <nrfx_ipc_receive_event_enable+0x50>)
   118da:	f00c fa49 	bl	1dd70 <nrf_ipc_int_enable>
}
   118de:	bf00      	nop
   118e0:	3708      	adds	r7, #8
   118e2:	46bd      	mov	sp, r7
   118e4:	bd80      	pop	{r7, pc}
   118e6:	bf00      	nop
   118e8:	2000caa0 	.word	0x2000caa0
   118ec:	00022a80 	.word	0x00022a80
   118f0:	00022ad0 	.word	0x00022ad0
   118f4:	00022a60 	.word	0x00022a60
   118f8:	4002a000 	.word	0x4002a000

000118fc <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   118fc:	b580      	push	{r7, lr}
   118fe:	b082      	sub	sp, #8
   11900:	af00      	add	r7, sp, #0
   11902:	4603      	mov	r3, r0
   11904:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(m_cb.state == NRFX_DRV_STATE_INITIALIZED);
   11906:	4b0d      	ldr	r3, [pc, #52]	; (1193c <nrfx_ipc_receive_event_disable+0x40>)
   11908:	791b      	ldrb	r3, [r3, #4]
   1190a:	2b01      	cmp	r3, #1
   1190c:	d009      	beq.n	11922 <nrfx_ipc_receive_event_disable+0x26>
   1190e:	2372      	movs	r3, #114	; 0x72
   11910:	4a0b      	ldr	r2, [pc, #44]	; (11940 <nrfx_ipc_receive_event_disable+0x44>)
   11912:	490c      	ldr	r1, [pc, #48]	; (11944 <nrfx_ipc_receive_event_disable+0x48>)
   11914:	480c      	ldr	r0, [pc, #48]	; (11948 <nrfx_ipc_receive_event_disable+0x4c>)
   11916:	f008 fb4d 	bl	19fb4 <assert_print>
   1191a:	2172      	movs	r1, #114	; 0x72
   1191c:	4808      	ldr	r0, [pc, #32]	; (11940 <nrfx_ipc_receive_event_disable+0x44>)
   1191e:	f008 fb39 	bl	19f94 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   11922:	79fb      	ldrb	r3, [r7, #7]
   11924:	2201      	movs	r2, #1
   11926:	fa02 f303 	lsl.w	r3, r2, r3
   1192a:	4619      	mov	r1, r3
   1192c:	4807      	ldr	r0, [pc, #28]	; (1194c <nrfx_ipc_receive_event_disable+0x50>)
   1192e:	f00c fa2d 	bl	1dd8c <nrf_ipc_int_disable>
}
   11932:	bf00      	nop
   11934:	3708      	adds	r7, #8
   11936:	46bd      	mov	sp, r7
   11938:	bd80      	pop	{r7, pc}
   1193a:	bf00      	nop
   1193c:	2000caa0 	.word	0x2000caa0
   11940:	00022a80 	.word	0x00022a80
   11944:	00022ad0 	.word	0x00022ad0
   11948:	00022a60 	.word	0x00022a60
   1194c:	4002a000 	.word	0x4002a000

00011950 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   11950:	b580      	push	{r7, lr}
   11952:	b084      	sub	sp, #16
   11954:	af00      	add	r7, sp, #0
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);
   11956:	4818      	ldr	r0, [pc, #96]	; (119b8 <nrfx_ipc_irq_handler+0x68>)
   11958:	f00c fa26 	bl	1dda8 <nrf_ipc_int_pending_get>
   1195c:	60b8      	str	r0, [r7, #8]
    // Clear these events
    uint32_t bitmask = events_map;
   1195e:	68bb      	ldr	r3, [r7, #8]
   11960:	60fb      	str	r3, [r7, #12]

    while (bitmask)
   11962:	e021      	b.n	119a8 <nrfx_ipc_irq_handler+0x58>
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
   11964:	68fb      	ldr	r3, [r7, #12]
   11966:	fa93 f3a3 	rbit	r3, r3
   1196a:	fab3 f383 	clz	r3, r3
   1196e:	71fb      	strb	r3, [r7, #7]
        bitmask &= ~(1UL << event_idx);
   11970:	79fb      	ldrb	r3, [r7, #7]
   11972:	2201      	movs	r2, #1
   11974:	fa02 f303 	lsl.w	r3, r2, r3
   11978:	43db      	mvns	r3, r3
   1197a:	68fa      	ldr	r2, [r7, #12]
   1197c:	4013      	ands	r3, r2
   1197e:	60fb      	str	r3, [r7, #12]
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
   11980:	79fb      	ldrb	r3, [r7, #7]
   11982:	4618      	mov	r0, r3
   11984:	f7ff fe90 	bl	116a8 <nrf_ipc_receive_event_get>
   11988:	4603      	mov	r3, r0
   1198a:	4619      	mov	r1, r3
   1198c:	480a      	ldr	r0, [pc, #40]	; (119b8 <nrfx_ipc_irq_handler+0x68>)
   1198e:	f00c f9df 	bl	1dd50 <nrf_ipc_event_clear>
        if (m_cb.handler)
   11992:	4b0a      	ldr	r3, [pc, #40]	; (119bc <nrfx_ipc_irq_handler+0x6c>)
   11994:	681b      	ldr	r3, [r3, #0]
   11996:	2b00      	cmp	r3, #0
   11998:	d006      	beq.n	119a8 <nrfx_ipc_irq_handler+0x58>
        {
            m_cb.handler(event_idx, m_cb.p_context);
   1199a:	4b08      	ldr	r3, [pc, #32]	; (119bc <nrfx_ipc_irq_handler+0x6c>)
   1199c:	681b      	ldr	r3, [r3, #0]
   1199e:	4a07      	ldr	r2, [pc, #28]	; (119bc <nrfx_ipc_irq_handler+0x6c>)
   119a0:	6891      	ldr	r1, [r2, #8]
   119a2:	79fa      	ldrb	r2, [r7, #7]
   119a4:	4610      	mov	r0, r2
   119a6:	4798      	blx	r3
    while (bitmask)
   119a8:	68fb      	ldr	r3, [r7, #12]
   119aa:	2b00      	cmp	r3, #0
   119ac:	d1da      	bne.n	11964 <nrfx_ipc_irq_handler+0x14>
        }
    }
}
   119ae:	bf00      	nop
   119b0:	bf00      	nop
   119b2:	3710      	adds	r7, #16
   119b4:	46bd      	mov	sp, r7
   119b6:	bd80      	pop	{r7, pc}
   119b8:	4002a000 	.word	0x4002a000
   119bc:	2000caa0 	.word	0x2000caa0

000119c0 <rpc_handle_data_message>:
   119c0:	b570      	push	{r4, r5, r6, lr}
   119c2:	6803      	ldr	r3, [r0, #0]
   119c4:	4604      	mov	r4, r0
   119c6:	3b03      	subs	r3, #3
   119c8:	b2db      	uxtb	r3, r3
   119ca:	2b05      	cmp	r3, #5
   119cc:	d803      	bhi.n	119d6 <rpc_handle_data_message+0x16>
   119ce:	4a09      	ldr	r2, [pc, #36]	; (119f4 <rpc_handle_data_message+0x34>)
   119d0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   119d4:	b92d      	cbnz	r5, 119e2 <rpc_handle_data_message+0x22>
   119d6:	68a0      	ldr	r0, [r4, #8]
   119d8:	b108      	cbz	r0, 119de <rpc_handle_data_message+0x1e>
   119da:	f000 f819 	bl	11a10 <rpc_transport_msg_data_rx_free>
   119de:	2000      	movs	r0, #0
   119e0:	bd70      	pop	{r4, r5, r6, pc}
   119e2:	f00c fa68 	bl	1deb6 <rpc_client_msg_from_rpc_msg_get>
   119e6:	6821      	ldr	r1, [r4, #0]
   119e8:	462b      	mov	r3, r5
   119ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   119ee:	0c09      	lsrs	r1, r1, #16
   119f0:	4718      	bx	r3
   119f2:	bf00      	nop
   119f4:	00024138 	.word	0x00024138

000119f8 <rpc_transport_msg_alloc>:
   119f8:	4b01      	ldr	r3, [pc, #4]	; (11a00 <rpc_transport_msg_alloc+0x8>)
   119fa:	681b      	ldr	r3, [r3, #0]
   119fc:	4718      	bx	r3
   119fe:	bf00      	nop
   11a00:	2000c6e4 	.word	0x2000c6e4

00011a04 <rpc_transport_msg_rx_free>:
   11a04:	4b01      	ldr	r3, [pc, #4]	; (11a0c <rpc_transport_msg_rx_free+0x8>)
   11a06:	68db      	ldr	r3, [r3, #12]
   11a08:	4718      	bx	r3
   11a0a:	bf00      	nop
   11a0c:	2000c6e4 	.word	0x2000c6e4

00011a10 <rpc_transport_msg_data_rx_free>:
   11a10:	4b01      	ldr	r3, [pc, #4]	; (11a18 <rpc_transport_msg_data_rx_free+0x8>)
   11a12:	695b      	ldr	r3, [r3, #20]
   11a14:	4718      	bx	r3
   11a16:	bf00      	nop
   11a18:	2000c6e4 	.word	0x2000c6e4

00011a1c <rpc_transport_msg_send>:
   11a1c:	4b01      	ldr	r3, [pc, #4]	; (11a24 <rpc_transport_msg_send+0x8>)
   11a1e:	689b      	ldr	r3, [r3, #8]
   11a20:	4718      	bx	r3
   11a22:	bf00      	nop
   11a24:	2000c6e4 	.word	0x2000c6e4

00011a28 <rpc_transport_ipc_msg_data_tx_size>:
   11a28:	4b01      	ldr	r3, [pc, #4]	; (11a30 <rpc_transport_ipc_msg_data_tx_size+0x8>)
   11a2a:	681b      	ldr	r3, [r3, #0]
   11a2c:	68d8      	ldr	r0, [r3, #12]
   11a2e:	4770      	bx	lr
   11a30:	2000caac 	.word	0x2000caac

00011a34 <rpc_transport_ipc_msg_rx_free>:
   11a34:	2300      	movs	r3, #0
   11a36:	b530      	push	{r4, r5, lr}
   11a38:	4910      	ldr	r1, [pc, #64]	; (11a7c <rpc_transport_ipc_msg_rx_free+0x48>)
   11a3a:	680a      	ldr	r2, [r1, #0]
   11a3c:	6814      	ldr	r4, [r2, #0]
   11a3e:	42a3      	cmp	r3, r4
   11a40:	d10b      	bne.n	11a5a <rpc_transport_ipc_msg_rx_free+0x26>
   11a42:	2300      	movs	r3, #0
   11a44:	684a      	ldr	r2, [r1, #4]
   11a46:	6811      	ldr	r1, [r2, #0]
   11a48:	428b      	cmp	r3, r1
   11a4a:	d015      	beq.n	11a78 <rpc_transport_ipc_msg_rx_free+0x44>
   11a4c:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   11a50:	68a4      	ldr	r4, [r4, #8]
   11a52:	42a0      	cmp	r0, r4
   11a54:	d008      	beq.n	11a68 <rpc_transport_ipc_msg_rx_free+0x34>
   11a56:	3301      	adds	r3, #1
   11a58:	e7f6      	b.n	11a48 <rpc_transport_ipc_msg_rx_free+0x14>
   11a5a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   11a5e:	68ad      	ldr	r5, [r5, #8]
   11a60:	42a8      	cmp	r0, r5
   11a62:	d001      	beq.n	11a68 <rpc_transport_ipc_msg_rx_free+0x34>
   11a64:	3301      	adds	r3, #1
   11a66:	e7ea      	b.n	11a3e <rpc_transport_ipc_msg_rx_free+0xa>
   11a68:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   11a6c:	6853      	ldr	r3, [r2, #4]
   11a6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11a72:	f043 0303 	orr.w	r3, r3, #3
   11a76:	6053      	str	r3, [r2, #4]
   11a78:	bd30      	pop	{r4, r5, pc}
   11a7a:	bf00      	nop
   11a7c:	2000cacc 	.word	0x2000cacc

00011a80 <rpc_transport_ipc_msg_tx_free>:
   11a80:	2200      	movs	r2, #0
   11a82:	b530      	push	{r4, r5, lr}
   11a84:	4b0b      	ldr	r3, [pc, #44]	; (11ab4 <rpc_transport_ipc_msg_tx_free+0x34>)
   11a86:	6819      	ldr	r1, [r3, #0]
   11a88:	680c      	ldr	r4, [r1, #0]
   11a8a:	4294      	cmp	r4, r2
   11a8c:	d00f      	beq.n	11aae <rpc_transport_ipc_msg_tx_free+0x2e>
   11a8e:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   11a92:	689d      	ldr	r5, [r3, #8]
   11a94:	42a8      	cmp	r0, r5
   11a96:	d10b      	bne.n	11ab0 <rpc_transport_ipc_msg_tx_free+0x30>
   11a98:	f04f 0203 	mov.w	r2, #3
   11a9c:	3304      	adds	r3, #4
   11a9e:	e8d3 1fcf 	ldaexb	r1, [r3]
   11aa2:	2900      	cmp	r1, #0
   11aa4:	d103      	bne.n	11aae <rpc_transport_ipc_msg_tx_free+0x2e>
   11aa6:	e8c3 2fc0 	stlexb	r0, r2, [r3]
   11aaa:	2800      	cmp	r0, #0
   11aac:	d1f7      	bne.n	11a9e <rpc_transport_ipc_msg_tx_free+0x1e>
   11aae:	bd30      	pop	{r4, r5, pc}
   11ab0:	3201      	adds	r2, #1
   11ab2:	e7ea      	b.n	11a8a <rpc_transport_ipc_msg_tx_free+0xa>
   11ab4:	2000cac4 	.word	0x2000cac4

00011ab8 <handle_modem_rpc_msg>:
   11ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11abc:	2500      	movs	r5, #0
   11abe:	4606      	mov	r6, r0
   11ac0:	460f      	mov	r7, r1
   11ac2:	4628      	mov	r0, r5
   11ac4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 11b2c <handle_modem_rpc_msg+0x74>
   11ac8:	6833      	ldr	r3, [r6, #0]
   11aca:	42ab      	cmp	r3, r5
   11acc:	d801      	bhi.n	11ad2 <handle_modem_rpc_msg+0x1a>
   11ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11ad2:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   11ad6:	6863      	ldr	r3, [r4, #4]
   11ad8:	b2db      	uxtb	r3, r3
   11ada:	2b01      	cmp	r3, #1
   11adc:	d117      	bne.n	11b0e <handle_modem_rpc_msg+0x56>
   11ade:	6862      	ldr	r2, [r4, #4]
   11ae0:	f8b8 3000 	ldrh.w	r3, [r8]
   11ae4:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   11ae8:	d111      	bne.n	11b0e <handle_modem_rpc_msg+0x56>
   11aea:	2f02      	cmp	r7, #2
   11aec:	68a0      	ldr	r0, [r4, #8]
   11aee:	d110      	bne.n	11b12 <handle_modem_rpc_msg+0x5a>
   11af0:	f7ff ff66 	bl	119c0 <rpc_handle_data_message>
   11af4:	b990      	cbnz	r0, 11b1c <handle_modem_rpc_msg+0x64>
   11af6:	6863      	ldr	r3, [r4, #4]
   11af8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11afc:	f043 0303 	orr.w	r3, r3, #3
   11b00:	6063      	str	r3, [r4, #4]
   11b02:	2001      	movs	r0, #1
   11b04:	f8b8 3000 	ldrh.w	r3, [r8]
   11b08:	3301      	adds	r3, #1
   11b0a:	f8a8 3000 	strh.w	r3, [r8]
   11b0e:	3501      	adds	r5, #1
   11b10:	e7da      	b.n	11ac8 <handle_modem_rpc_msg+0x10>
   11b12:	6801      	ldr	r1, [r0, #0]
   11b14:	0c09      	lsrs	r1, r1, #16
   11b16:	f00c f979 	bl	1de0c <rpc_handle_ctrl_message>
   11b1a:	e7eb      	b.n	11af4 <handle_modem_rpc_msg+0x3c>
   11b1c:	2801      	cmp	r0, #1
   11b1e:	d1f0      	bne.n	11b02 <handle_modem_rpc_msg+0x4a>
   11b20:	6863      	ldr	r3, [r4, #4]
   11b22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11b26:	f043 0302 	orr.w	r3, r3, #2
   11b2a:	e7e9      	b.n	11b00 <handle_modem_rpc_msg+0x48>
   11b2c:	2000ce98 	.word	0x2000ce98

00011b30 <rpc_message_handler>:
   11b30:	b538      	push	{r3, r4, r5, lr}
   11b32:	4d07      	ldr	r5, [pc, #28]	; (11b50 <rpc_message_handler+0x20>)
   11b34:	2101      	movs	r1, #1
   11b36:	6828      	ldr	r0, [r5, #0]
   11b38:	f7ff ffbe 	bl	11ab8 <handle_modem_rpc_msg>
   11b3c:	2102      	movs	r1, #2
   11b3e:	4604      	mov	r4, r0
   11b40:	6868      	ldr	r0, [r5, #4]
   11b42:	f7ff ffb9 	bl	11ab8 <handle_modem_rpc_msg>
   11b46:	2800      	cmp	r0, #0
   11b48:	d1f4      	bne.n	11b34 <rpc_message_handler+0x4>
   11b4a:	2c00      	cmp	r4, #0
   11b4c:	d1f2      	bne.n	11b34 <rpc_message_handler+0x4>
   11b4e:	bd38      	pop	{r3, r4, r5, pc}
   11b50:	2000cacc 	.word	0x2000cacc

00011b54 <ipc_irq_handler>:
   11b54:	b570      	push	{r4, r5, r6, lr}
   11b56:	2807      	cmp	r0, #7
   11b58:	d868      	bhi.n	11c2c <ipc_irq_handler+0xd8>
   11b5a:	e8df f000 	tbb	[pc, r0]
   11b5e:	670b      	.short	0x670b
   11b60:	674b674f 	.word	0x674b674f
   11b64:	0440      	.short	0x0440
   11b66:	f000 fd2d 	bl	125c4 <ipc_trace_handler>
   11b6a:	2003      	movs	r0, #3
   11b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11b70:	f7fe b854 	b.w	fc1c <nrf_modem_os_event_notify>
   11b74:	2003      	movs	r0, #3
   11b76:	4b2e      	ldr	r3, [pc, #184]	; (11c30 <ipc_irq_handler+0xdc>)
   11b78:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
   11b7c:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
   11b80:	4b2c      	ldr	r3, [pc, #176]	; (11c34 <ipc_irq_handler+0xe0>)
   11b82:	781d      	ldrb	r5, [r3, #0]
   11b84:	7018      	strb	r0, [r3, #0]
   11b86:	f000 fcf3 	bl	12570 <nrf_modem_state_set>
   11b8a:	4b2b      	ldr	r3, [pc, #172]	; (11c38 <ipc_irq_handler+0xe4>)
   11b8c:	b2ed      	uxtb	r5, r5
   11b8e:	6818      	ldr	r0, [r3, #0]
   11b90:	f7fd ffc4 	bl	fb1c <nrf_modem_os_sem_give>
   11b94:	2d01      	cmp	r5, #1
   11b96:	d11c      	bne.n	11bd2 <ipc_irq_handler+0x7e>
   11b98:	4b28      	ldr	r3, [pc, #160]	; (11c3c <ipc_irq_handler+0xe8>)
   11b9a:	429c      	cmp	r4, r3
   11b9c:	d010      	beq.n	11bc0 <ipc_irq_handler+0x6c>
   11b9e:	d809      	bhi.n	11bb4 <ipc_irq_handler+0x60>
   11ba0:	3b02      	subs	r3, #2
   11ba2:	429c      	cmp	r4, r3
   11ba4:	d00f      	beq.n	11bc6 <ipc_irq_handler+0x72>
   11ba6:	3301      	adds	r3, #1
   11ba8:	429c      	cmp	r4, r3
   11baa:	d00f      	beq.n	11bcc <ipc_irq_handler+0x78>
   11bac:	4b24      	ldr	r3, [pc, #144]	; (11c40 <ipc_irq_handler+0xec>)
   11bae:	601c      	str	r4, [r3, #0]
   11bb0:	2000      	movs	r0, #0
   11bb2:	e7db      	b.n	11b6c <ipc_irq_handler+0x18>
   11bb4:	4b23      	ldr	r3, [pc, #140]	; (11c44 <ipc_irq_handler+0xf0>)
   11bb6:	429c      	cmp	r4, r3
   11bb8:	d1f8      	bne.n	11bac <ipc_irq_handler+0x58>
   11bba:	f06f 040c 	mvn.w	r4, #12
   11bbe:	e7f5      	b.n	11bac <ipc_irq_handler+0x58>
   11bc0:	f06f 040b 	mvn.w	r4, #11
   11bc4:	e7f2      	b.n	11bac <ipc_irq_handler+0x58>
   11bc6:	f06f 0415 	mvn.w	r4, #21
   11bca:	e7ef      	b.n	11bac <ipc_irq_handler+0x58>
   11bcc:	f06f 0485 	mvn.w	r4, #133	; 0x85
   11bd0:	e7ec      	b.n	11bac <ipc_irq_handler+0x58>
   11bd2:	4631      	mov	r1, r6
   11bd4:	f3c4 000b 	ubfx	r0, r4, #0, #12
   11bd8:	f000 fcbe 	bl	12558 <nrf_modem_fault_handler_internal>
   11bdc:	e7e8      	b.n	11bb0 <ipc_irq_handler+0x5c>
   11bde:	2202      	movs	r2, #2
   11be0:	4b14      	ldr	r3, [pc, #80]	; (11c34 <ipc_irq_handler+0xe0>)
   11be2:	2000      	movs	r0, #0
   11be4:	701a      	strb	r2, [r3, #0]
   11be6:	f000 fcc3 	bl	12570 <nrf_modem_state_set>
   11bea:	4b13      	ldr	r3, [pc, #76]	; (11c38 <ipc_irq_handler+0xe4>)
   11bec:	6818      	ldr	r0, [r3, #0]
   11bee:	f7fd ff95 	bl	fb1c <nrf_modem_os_sem_give>
   11bf2:	e7dd      	b.n	11bb0 <ipc_irq_handler+0x5c>
   11bf4:	f7ff ff9c 	bl	11b30 <rpc_message_handler>
   11bf8:	2002      	movs	r0, #2
   11bfa:	e7b7      	b.n	11b6c <ipc_irq_handler+0x18>
   11bfc:	4b0d      	ldr	r3, [pc, #52]	; (11c34 <ipc_irq_handler+0xe0>)
   11bfe:	781a      	ldrb	r2, [r3, #0]
   11c00:	2a01      	cmp	r2, #1
   11c02:	b2d0      	uxtb	r0, r2
   11c04:	d10e      	bne.n	11c24 <ipc_irq_handler+0xd0>
   11c06:	4a10      	ldr	r2, [pc, #64]	; (11c48 <ipc_irq_handler+0xf4>)
   11c08:	6811      	ldr	r1, [r2, #0]
   11c0a:	4a10      	ldr	r2, [pc, #64]	; (11c4c <ipc_irq_handler+0xf8>)
   11c0c:	688c      	ldr	r4, [r1, #8]
   11c0e:	6054      	str	r4, [r2, #4]
   11c10:	6849      	ldr	r1, [r1, #4]
   11c12:	6011      	str	r1, [r2, #0]
   11c14:	2200      	movs	r2, #0
   11c16:	701a      	strb	r2, [r3, #0]
   11c18:	f000 fcaa 	bl	12570 <nrf_modem_state_set>
   11c1c:	4b06      	ldr	r3, [pc, #24]	; (11c38 <ipc_irq_handler+0xe4>)
   11c1e:	6818      	ldr	r0, [r3, #0]
   11c20:	f7fd ff7c 	bl	fb1c <nrf_modem_os_sem_give>
   11c24:	f7ff ff84 	bl	11b30 <rpc_message_handler>
   11c28:	2001      	movs	r0, #1
   11c2a:	e79f      	b.n	11b6c <ipc_irq_handler+0x18>
   11c2c:	bd70      	pop	{r4, r5, r6, pc}
   11c2e:	bf00      	nop
   11c30:	4002a000 	.word	0x4002a000
   11c34:	2000cea2 	.word	0x2000cea2
   11c38:	2000cab4 	.word	0x2000cab4
   11c3c:	00010022 	.word	0x00010022
   11c40:	2000cac8 	.word	0x2000cac8
   11c44:	00013032 	.word	0x00013032
   11c48:	2000cab0 	.word	0x2000cab0
   11c4c:	2000cacc 	.word	0x2000cacc

00011c50 <rpc_transport_ipc_data_msg_send>:
   11c50:	b570      	push	{r4, r5, r6, lr}
   11c52:	4b16      	ldr	r3, [pc, #88]	; (11cac <rpc_transport_ipc_data_msg_send+0x5c>)
   11c54:	6842      	ldr	r2, [r0, #4]
   11c56:	681b      	ldr	r3, [r3, #0]
   11c58:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   11c5c:	f042 0202 	orr.w	r2, r2, #2
   11c60:	1ac3      	subs	r3, r0, r3
   11c62:	6042      	str	r2, [r0, #4]
   11c64:	4812      	ldr	r0, [pc, #72]	; (11cb0 <rpc_transport_ipc_data_msg_send+0x60>)
   11c66:	4a13      	ldr	r2, [pc, #76]	; (11cb4 <rpc_transport_ipc_data_msg_send+0x64>)
   11c68:	6801      	ldr	r1, [r0, #0]
   11c6a:	f3c3 1389 	ubfx	r3, r3, #6, #10
   11c6e:	e8d2 4fdf 	ldaexh	r4, [r2]
   11c72:	1c65      	adds	r5, r4, #1
   11c74:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   11c78:	2e00      	cmp	r6, #0
   11c7a:	d1f8      	bne.n	11c6e <rpc_transport_ipc_data_msg_send+0x1e>
   11c7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   11c80:	684a      	ldr	r2, [r1, #4]
   11c82:	b292      	uxth	r2, r2
   11c84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   11c88:	604a      	str	r2, [r1, #4]
   11c8a:	6802      	ldr	r2, [r0, #0]
   11c8c:	2003      	movs	r0, #3
   11c8e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   11c92:	6853      	ldr	r3, [r2, #4]
   11c94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11c98:	f043 0301 	orr.w	r3, r3, #1
   11c9c:	6053      	str	r3, [r2, #4]
   11c9e:	f00b f8d5 	bl	1ce4c <nrf_modem_os_busywait>
   11ca2:	2201      	movs	r2, #1
   11ca4:	4b04      	ldr	r3, [pc, #16]	; (11cb8 <rpc_transport_ipc_data_msg_send+0x68>)
   11ca6:	60da      	str	r2, [r3, #12]
   11ca8:	bd70      	pop	{r4, r5, r6, pc}
   11caa:	bf00      	nop
   11cac:	2000cabc 	.word	0x2000cabc
   11cb0:	2000cac4 	.word	0x2000cac4
   11cb4:	2000ce9a 	.word	0x2000ce9a
   11cb8:	4002a000 	.word	0x4002a000

00011cbc <rpc_transport_ipc_ctrl_msg_alloc>:
   11cbc:	230a      	movs	r3, #10
   11cbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11cc0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   11cc4:	4e0c      	ldr	r6, [pc, #48]	; (11cf8 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   11cc6:	4f0d      	ldr	r7, [pc, #52]	; (11cfc <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   11cc8:	9301      	str	r3, [sp, #4]
   11cca:	6831      	ldr	r1, [r6, #0]
   11ccc:	6838      	ldr	r0, [r7, #0]
   11cce:	f00c f8cd 	bl	1de6c <rpc_transport_ipc_msg_alloc>
   11cd2:	4604      	mov	r4, r0
   11cd4:	b940      	cbnz	r0, 11ce8 <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
   11cd6:	f00b f95d 	bl	1cf94 <nrf_modem_os_is_in_isr>
   11cda:	b940      	cbnz	r0, 11cee <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   11cdc:	2001      	movs	r0, #1
   11cde:	a901      	add	r1, sp, #4
   11ce0:	f00b f8c0 	bl	1ce64 <nrf_modem_os_timedwait>
   11ce4:	306e      	adds	r0, #110	; 0x6e
   11ce6:	d1f0      	bne.n	11cca <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   11ce8:	4620      	mov	r0, r4
   11cea:	b003      	add	sp, #12
   11cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11cee:	9801      	ldr	r0, [sp, #4]
   11cf0:	4368      	muls	r0, r5
   11cf2:	f00b f8ab 	bl	1ce4c <nrf_modem_os_busywait>
   11cf6:	e7e8      	b.n	11cca <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   11cf8:	2000cab8 	.word	0x2000cab8
   11cfc:	2000cac0 	.word	0x2000cac0

00011d00 <rpc_transport_ipc_data_msg_alloc>:
   11d00:	4b05      	ldr	r3, [pc, #20]	; (11d18 <rpc_transport_ipc_data_msg_alloc+0x18>)
   11d02:	781b      	ldrb	r3, [r3, #0]
   11d04:	b92b      	cbnz	r3, 11d12 <rpc_transport_ipc_data_msg_alloc+0x12>
   11d06:	4b05      	ldr	r3, [pc, #20]	; (11d1c <rpc_transport_ipc_data_msg_alloc+0x1c>)
   11d08:	6819      	ldr	r1, [r3, #0]
   11d0a:	4b05      	ldr	r3, [pc, #20]	; (11d20 <rpc_transport_ipc_data_msg_alloc+0x20>)
   11d0c:	6818      	ldr	r0, [r3, #0]
   11d0e:	f00c b8ad 	b.w	1de6c <rpc_transport_ipc_msg_alloc>
   11d12:	2000      	movs	r0, #0
   11d14:	4770      	bx	lr
   11d16:	bf00      	nop
   11d18:	2000cea1 	.word	0x2000cea1
   11d1c:	2000cabc 	.word	0x2000cabc
   11d20:	2000cac4 	.word	0x2000cac4

00011d24 <rpc_transport_ipc_init>:
   11d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d28:	b095      	sub	sp, #84	; 0x54
   11d2a:	2238      	movs	r2, #56	; 0x38
   11d2c:	2100      	movs	r1, #0
   11d2e:	4606      	mov	r6, r0
   11d30:	a803      	add	r0, sp, #12
   11d32:	f00d fdd9 	bl	1f8e8 <memset>
   11d36:	2302      	movs	r3, #2
   11d38:	9304      	str	r3, [sp, #16]
   11d3a:	2308      	movs	r3, #8
   11d3c:	9306      	str	r3, [sp, #24]
   11d3e:	2320      	movs	r3, #32
   11d40:	9308      	str	r3, [sp, #32]
   11d42:	2304      	movs	r3, #4
   11d44:	930d      	str	r3, [sp, #52]	; 0x34
   11d46:	2310      	movs	r3, #16
   11d48:	2540      	movs	r5, #64	; 0x40
   11d4a:	930f      	str	r3, [sp, #60]	; 0x3c
   11d4c:	2380      	movs	r3, #128	; 0x80
   11d4e:	2201      	movs	r2, #1
   11d50:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
   11d54:	23d5      	movs	r3, #213	; 0xd5
   11d56:	2100      	movs	r1, #0
   11d58:	4855      	ldr	r0, [pc, #340]	; (11eb0 <rpc_transport_ipc_init+0x18c>)
   11d5a:	920b      	str	r2, [sp, #44]	; 0x2c
   11d5c:	9313      	str	r3, [sp, #76]	; 0x4c
   11d5e:	f7fd fe8f 	bl	fa80 <nrf_modem_os_sem_init>
   11d62:	4605      	mov	r5, r0
   11d64:	2800      	cmp	r0, #0
   11d66:	f040 809f 	bne.w	11ea8 <rpc_transport_ipc_init+0x184>
   11d6a:	4602      	mov	r2, r0
   11d6c:	4951      	ldr	r1, [pc, #324]	; (11eb4 <rpc_transport_ipc_init+0x190>)
   11d6e:	7930      	ldrb	r0, [r6, #4]
   11d70:	f7ff fcbe 	bl	116f0 <nrfx_ipc_init>
   11d74:	a803      	add	r0, sp, #12
   11d76:	f7ff fcf3 	bl	11760 <nrfx_ipc_config_load>
   11d7a:	6834      	ldr	r4, [r6, #0]
   11d7c:	6862      	ldr	r2, [r4, #4]
   11d7e:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   11d82:	f040 8089 	bne.w	11e98 <rpc_transport_ipc_init+0x174>
   11d86:	6961      	ldr	r1, [r4, #20]
   11d88:	68e3      	ldr	r3, [r4, #12]
   11d8a:	440b      	add	r3, r1
   11d8c:	69e1      	ldr	r1, [r4, #28]
   11d8e:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   11d92:	440b      	add	r3, r1
   11d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   11d98:	d87e      	bhi.n	11e98 <rpc_transport_ipc_init+0x174>
   11d9a:	6820      	ldr	r0, [r4, #0]
   11d9c:	4629      	mov	r1, r5
   11d9e:	f00d fda3 	bl	1f8e8 <memset>
   11da2:	6833      	ldr	r3, [r6, #0]
   11da4:	681c      	ldr	r4, [r3, #0]
   11da6:	f8d3 901c 	ldr.w	r9, [r3, #28]
   11daa:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   11dae:	9201      	str	r2, [sp, #4]
   11db0:	f104 0760 	add.w	r7, r4, #96	; 0x60
   11db4:	4a40      	ldr	r2, [pc, #256]	; (11eb8 <rpc_transport_ipc_init+0x194>)
   11db6:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
   11dba:	f104 0b20 	add.w	fp, r4, #32
   11dbe:	f1b9 0f00 	cmp.w	r9, #0
   11dc2:	d15c      	bne.n	11e7e <rpc_transport_ipc_init+0x15a>
   11dc4:	f8c2 b000 	str.w	fp, [r2]
   11dc8:	2500      	movs	r5, #0
   11dca:	f04f 0a01 	mov.w	sl, #1
   11dce:	7025      	strb	r5, [r4, #0]
   11dd0:	7065      	strb	r5, [r4, #1]
   11dd2:	f884 a002 	strb.w	sl, [r4, #2]
   11dd6:	70e5      	strb	r5, [r4, #3]
   11dd8:	6833      	ldr	r3, [r6, #0]
   11dda:	4640      	mov	r0, r8
   11ddc:	691b      	ldr	r3, [r3, #16]
   11dde:	6063      	str	r3, [r4, #4]
   11de0:	6833      	ldr	r3, [r6, #0]
   11de2:	695b      	ldr	r3, [r3, #20]
   11de4:	f8c4 b014 	str.w	fp, [r4, #20]
   11de8:	60a3      	str	r3, [r4, #8]
   11dea:	4b34      	ldr	r3, [pc, #208]	; (11ebc <rpc_transport_ipc_init+0x198>)
   11dec:	f8c4 9018 	str.w	r9, [r4, #24]
   11df0:	f8c3 8000 	str.w	r8, [r3]
   11df4:	4b32      	ldr	r3, [pc, #200]	; (11ec0 <rpc_transport_ipc_init+0x19c>)
   11df6:	60e7      	str	r7, [r4, #12]
   11df8:	601f      	str	r7, [r3, #0]
   11dfa:	2308      	movs	r3, #8
   11dfc:	f8c4 8010 	str.w	r8, [r4, #16]
   11e00:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
   11e04:	f888 5001 	strb.w	r5, [r8, #1]
   11e08:	f888 5002 	strb.w	r5, [r8, #2]
   11e0c:	f888 5003 	strb.w	r5, [r8, #3]
   11e10:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   11e14:	707d      	strb	r5, [r7, #1]
   11e16:	70bd      	strb	r5, [r7, #2]
   11e18:	70fd      	strb	r5, [r7, #3]
   11e1a:	f00c f80f 	bl	1de3c <rpc_list_preambles_init>
   11e1e:	4638      	mov	r0, r7
   11e20:	f00c f80c 	bl	1de3c <rpc_list_preambles_init>
   11e24:	4b27      	ldr	r3, [pc, #156]	; (11ec4 <rpc_transport_ipc_init+0x1a0>)
   11e26:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   11e2a:	601a      	str	r2, [r3, #0]
   11e2c:	4b26      	ldr	r3, [pc, #152]	; (11ec8 <rpc_transport_ipc_init+0x1a4>)
   11e2e:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
   11e32:	601a      	str	r2, [r3, #0]
   11e34:	6831      	ldr	r1, [r6, #0]
   11e36:	4b25      	ldr	r3, [pc, #148]	; (11ecc <rpc_transport_ipc_init+0x1a8>)
   11e38:	6019      	str	r1, [r3, #0]
   11e3a:	4b25      	ldr	r3, [pc, #148]	; (11ed0 <rpc_transport_ipc_init+0x1ac>)
   11e3c:	4925      	ldr	r1, [pc, #148]	; (11ed4 <rpc_transport_ipc_init+0x1b0>)
   11e3e:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
   11e42:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
   11e46:	4b24      	ldr	r3, [pc, #144]	; (11ed8 <rpc_transport_ipc_init+0x1b4>)
   11e48:	4c24      	ldr	r4, [pc, #144]	; (11edc <rpc_transport_ipc_init+0x1b8>)
   11e4a:	801d      	strh	r5, [r3, #0]
   11e4c:	4b24      	ldr	r3, [pc, #144]	; (11ee0 <rpc_transport_ipc_init+0x1bc>)
   11e4e:	6025      	str	r5, [r4, #0]
   11e50:	801d      	strh	r5, [r3, #0]
   11e52:	4b24      	ldr	r3, [pc, #144]	; (11ee4 <rpc_transport_ipc_init+0x1c0>)
   11e54:	f883 a000 	strb.w	sl, [r3]
   11e58:	4b23      	ldr	r3, [pc, #140]	; (11ee8 <rpc_transport_ipc_init+0x1c4>)
   11e5a:	9502      	str	r5, [sp, #8]
   11e5c:	611d      	str	r5, [r3, #16]
   11e5e:	691b      	ldr	r3, [r3, #16]
   11e60:	9302      	str	r3, [sp, #8]
   11e62:	9b02      	ldr	r3, [sp, #8]
   11e64:	4b12      	ldr	r3, [pc, #72]	; (11eb0 <rpc_transport_ipc_init+0x18c>)
   11e66:	6818      	ldr	r0, [r3, #0]
   11e68:	f7fd fe88 	bl	fb7c <nrf_modem_os_sem_take>
   11e6c:	b9c8      	cbnz	r0, 11ea2 <rpc_transport_ipc_init+0x17e>
   11e6e:	6824      	ldr	r4, [r4, #0]
   11e70:	b9a4      	cbnz	r4, 11e9c <rpc_transport_ipc_init+0x178>
   11e72:	4b1e      	ldr	r3, [pc, #120]	; (11eec <rpc_transport_ipc_init+0x1c8>)
   11e74:	701c      	strb	r4, [r3, #0]
   11e76:	4620      	mov	r0, r4
   11e78:	b015      	add	sp, #84	; 0x54
   11e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e7e:	699b      	ldr	r3, [r3, #24]
   11e80:	f104 0940 	add.w	r9, r4, #64	; 0x40
   11e84:	6463      	str	r3, [r4, #68]	; 0x44
   11e86:	6833      	ldr	r3, [r6, #0]
   11e88:	4648      	mov	r0, r9
   11e8a:	69db      	ldr	r3, [r3, #28]
   11e8c:	f8c2 b000 	str.w	fp, [r2]
   11e90:	6423      	str	r3, [r4, #64]	; 0x40
   11e92:	f000 fb7b 	bl	1258c <ipc_trace_init>
   11e96:	e797      	b.n	11dc8 <rpc_transport_ipc_init+0xa4>
   11e98:	f06f 0415 	mvn.w	r4, #21
   11e9c:	f7ff fcbc 	bl	11818 <nrfx_ipc_uninit>
   11ea0:	e7e9      	b.n	11e76 <rpc_transport_ipc_init+0x152>
   11ea2:	f06f 0473 	mvn.w	r4, #115	; 0x73
   11ea6:	e7f9      	b.n	11e9c <rpc_transport_ipc_init+0x178>
   11ea8:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   11eac:	e7e3      	b.n	11e76 <rpc_transport_ipc_init+0x152>
   11eae:	bf00      	nop
   11eb0:	2000cab4 	.word	0x2000cab4
   11eb4:	00011b55 	.word	0x00011b55
   11eb8:	2000cab0 	.word	0x2000cab0
   11ebc:	2000cac4 	.word	0x2000cac4
   11ec0:	2000cac0 	.word	0x2000cac0
   11ec4:	2000cabc 	.word	0x2000cabc
   11ec8:	2000cab8 	.word	0x2000cab8
   11ecc:	2000caac 	.word	0x2000caac
   11ed0:	4002a000 	.word	0x4002a000
   11ed4:	000249f0 	.word	0x000249f0
   11ed8:	2000ce9a 	.word	0x2000ce9a
   11edc:	2000cac8 	.word	0x2000cac8
   11ee0:	2000ce98 	.word	0x2000ce98
   11ee4:	2000cea2 	.word	0x2000cea2
   11ee8:	40005600 	.word	0x40005600
   11eec:	2000cea1 	.word	0x2000cea1

00011ef0 <rpc_transport_ipc_ctrl_msg_send>:
   11ef0:	b570      	push	{r4, r5, r6, lr}
   11ef2:	4b16      	ldr	r3, [pc, #88]	; (11f4c <rpc_transport_ipc_ctrl_msg_send+0x5c>)
   11ef4:	6842      	ldr	r2, [r0, #4]
   11ef6:	681b      	ldr	r3, [r3, #0]
   11ef8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   11efc:	f042 0201 	orr.w	r2, r2, #1
   11f00:	1ac3      	subs	r3, r0, r3
   11f02:	6042      	str	r2, [r0, #4]
   11f04:	4812      	ldr	r0, [pc, #72]	; (11f50 <rpc_transport_ipc_ctrl_msg_send+0x60>)
   11f06:	4a13      	ldr	r2, [pc, #76]	; (11f54 <rpc_transport_ipc_ctrl_msg_send+0x64>)
   11f08:	6801      	ldr	r1, [r0, #0]
   11f0a:	f3c3 1389 	ubfx	r3, r3, #6, #10
   11f0e:	e8d2 4fdf 	ldaexh	r4, [r2]
   11f12:	1c65      	adds	r5, r4, #1
   11f14:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   11f18:	2e00      	cmp	r6, #0
   11f1a:	d1f8      	bne.n	11f0e <rpc_transport_ipc_ctrl_msg_send+0x1e>
   11f1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   11f20:	684a      	ldr	r2, [r1, #4]
   11f22:	b292      	uxth	r2, r2
   11f24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   11f28:	604a      	str	r2, [r1, #4]
   11f2a:	6802      	ldr	r2, [r0, #0]
   11f2c:	2003      	movs	r0, #3
   11f2e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   11f32:	6853      	ldr	r3, [r2, #4]
   11f34:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11f38:	f043 0301 	orr.w	r3, r3, #1
   11f3c:	6053      	str	r3, [r2, #4]
   11f3e:	f00a ff85 	bl	1ce4c <nrf_modem_os_busywait>
   11f42:	2201      	movs	r2, #1
   11f44:	4b04      	ldr	r3, [pc, #16]	; (11f58 <rpc_transport_ipc_ctrl_msg_send+0x68>)
   11f46:	605a      	str	r2, [r3, #4]
   11f48:	bd70      	pop	{r4, r5, r6, pc}
   11f4a:	bf00      	nop
   11f4c:	2000cab8 	.word	0x2000cab8
   11f50:	2000cac0 	.word	0x2000cac0
   11f54:	2000ce9a 	.word	0x2000ce9a
   11f58:	4002a000 	.word	0x4002a000

00011f5c <rpc_transport_ipc_request_shutdown>:
   11f5c:	b510      	push	{r4, lr}
   11f5e:	f7ff fead 	bl	11cbc <rpc_transport_ipc_ctrl_msg_alloc>
   11f62:	2401      	movs	r4, #1
   11f64:	2200      	movs	r2, #0
   11f66:	2103      	movs	r1, #3
   11f68:	7004      	strb	r4, [r0, #0]
   11f6a:	7081      	strb	r1, [r0, #2]
   11f6c:	7042      	strb	r2, [r0, #1]
   11f6e:	70c2      	strb	r2, [r0, #3]
   11f70:	f7ff ffbe 	bl	11ef0 <rpc_transport_ipc_ctrl_msg_send>
   11f74:	4b05      	ldr	r3, [pc, #20]	; (11f8c <rpc_transport_ipc_request_shutdown+0x30>)
   11f76:	701c      	strb	r4, [r3, #0]
   11f78:	f00b ff73 	bl	1de62 <rpc_transport_ipc_data_rx_suspend>
   11f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11f80:	4b03      	ldr	r3, [pc, #12]	; (11f90 <rpc_transport_ipc_request_shutdown+0x34>)
   11f82:	f247 5130 	movw	r1, #30000	; 0x7530
   11f86:	6818      	ldr	r0, [r3, #0]
   11f88:	f7fd bdf8 	b.w	fb7c <nrf_modem_os_sem_take>
   11f8c:	2000cea1 	.word	0x2000cea1
   11f90:	2000cab4 	.word	0x2000cab4

00011f94 <rpc_transport_ipc_msg_data_rx_free>:
   11f94:	b510      	push	{r4, lr}
   11f96:	4b0a      	ldr	r3, [pc, #40]	; (11fc0 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
   11f98:	4604      	mov	r4, r0
   11f9a:	781b      	ldrb	r3, [r3, #0]
   11f9c:	2b03      	cmp	r3, #3
   11f9e:	d00e      	beq.n	11fbe <rpc_transport_ipc_msg_data_rx_free+0x2a>
   11fa0:	f7ff fe8c 	bl	11cbc <rpc_transport_ipc_ctrl_msg_alloc>
   11fa4:	b158      	cbz	r0, 11fbe <rpc_transport_ipc_msg_data_rx_free+0x2a>
   11fa6:	2101      	movs	r1, #1
   11fa8:	2200      	movs	r2, #0
   11faa:	7001      	strb	r1, [r0, #0]
   11fac:	2102      	movs	r1, #2
   11fae:	6084      	str	r4, [r0, #8]
   11fb0:	7042      	strb	r2, [r0, #1]
   11fb2:	7081      	strb	r1, [r0, #2]
   11fb4:	70c2      	strb	r2, [r0, #3]
   11fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11fba:	f7ff bf99 	b.w	11ef0 <rpc_transport_ipc_ctrl_msg_send>
   11fbe:	bd10      	pop	{r4, pc}
   11fc0:	2000cea2 	.word	0x2000cea2

00011fc4 <at_cmd_send>:
   11fc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11fc8:	4605      	mov	r5, r0
   11fca:	2000      	movs	r0, #0
   11fcc:	4617      	mov	r7, r2
   11fce:	4688      	mov	r8, r1
   11fd0:	461e      	mov	r6, r3
   11fd2:	f00b ff72 	bl	1deba <rpc_client_msg_alloc>
   11fd6:	4602      	mov	r2, r0
   11fd8:	b940      	cbnz	r0, 11fec <at_cmd_send+0x28>
   11fda:	b115      	cbz	r5, 11fe2 <at_cmd_send+0x1e>
   11fdc:	4628      	mov	r0, r5
   11fde:	f00b ff96 	bl	1df0e <rpc_client_msg_data_tx_free>
   11fe2:	f06f 000b 	mvn.w	r0, #11
   11fe6:	b002      	add	sp, #8
   11fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11fec:	f06f 0358 	mvn.w	r3, #88	; 0x58
   11ff0:	2400      	movs	r4, #0
   11ff2:	7303      	strb	r3, [r0, #12]
   11ff4:	2304      	movs	r3, #4
   11ff6:	6005      	str	r5, [r0, #0]
   11ff8:	4d0e      	ldr	r5, [pc, #56]	; (12034 <at_cmd_send+0x70>)
   11ffa:	7203      	strb	r3, [r0, #8]
   11ffc:	7344      	strb	r4, [r0, #13]
   11ffe:	7384      	strb	r4, [r0, #14]
   12000:	73c4      	strb	r4, [r0, #15]
   12002:	7244      	strb	r4, [r0, #9]
   12004:	7284      	strb	r4, [r0, #10]
   12006:	72c4      	strb	r4, [r0, #11]
   12008:	f8c0 8004 	str.w	r8, [r0, #4]
   1200c:	4639      	mov	r1, r7
   1200e:	2003      	movs	r0, #3
   12010:	702c      	strb	r4, [r5, #0]
   12012:	f00b ff6e 	bl	1def2 <rpc_client_msg_send>
   12016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1201a:	9301      	str	r3, [sp, #4]
   1201c:	782b      	ldrb	r3, [r5, #0]
   1201e:	42b3      	cmp	r3, r6
   12020:	d101      	bne.n	12026 <at_cmd_send+0x62>
   12022:	2000      	movs	r0, #0
   12024:	e7df      	b.n	11fe6 <at_cmd_send+0x22>
   12026:	2002      	movs	r0, #2
   12028:	a901      	add	r1, sp, #4
   1202a:	f00a ff1b 	bl	1ce64 <nrf_modem_os_timedwait>
   1202e:	2800      	cmp	r0, #0
   12030:	d0f4      	beq.n	1201c <at_cmd_send+0x58>
   12032:	e7d8      	b.n	11fe6 <at_cmd_send+0x22>
   12034:	2000cea3 	.word	0x2000cea3

00012038 <at_response_match>:
   12038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1203a:	4605      	mov	r5, r0
   1203c:	2400      	movs	r4, #0
   1203e:	4f0f      	ldr	r7, [pc, #60]	; (1207c <at_response_match+0x44>)
   12040:	f857 6b04 	ldr.w	r6, [r7], #4
   12044:	4628      	mov	r0, r5
   12046:	4631      	mov	r1, r6
   12048:	f00d fb10 	bl	1f66c <strstr>
   1204c:	b928      	cbnz	r0, 1205a <at_response_match+0x22>
   1204e:	3401      	adds	r4, #1
   12050:	2c04      	cmp	r4, #4
   12052:	d1f5      	bne.n	12040 <at_response_match+0x8>
   12054:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   12058:	e00d      	b.n	12076 <at_response_match+0x3e>
   1205a:	b16c      	cbz	r4, 12078 <at_response_match+0x40>
   1205c:	1ea3      	subs	r3, r4, #2
   1205e:	2b01      	cmp	r3, #1
   12060:	d8f8      	bhi.n	12054 <at_response_match+0x1c>
   12062:	4630      	mov	r0, r6
   12064:	f7f6 f9d6 	bl	8414 <strlen>
   12068:	220a      	movs	r2, #10
   1206a:	2100      	movs	r1, #0
   1206c:	4428      	add	r0, r5
   1206e:	f005 fc19 	bl	178a4 <strtol>
   12072:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   12076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12078:	4620      	mov	r0, r4
   1207a:	e7fc      	b.n	12076 <at_response_match+0x3e>
   1207c:	00024150 	.word	0x00024150

00012080 <at_cmd_vsprintf>:
   12080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12084:	2500      	movs	r5, #0
   12086:	4681      	mov	r9, r0
   12088:	460f      	mov	r7, r1
   1208a:	4810      	ldr	r0, [pc, #64]	; (120cc <at_cmd_vsprintf+0x4c>)
   1208c:	4629      	mov	r1, r5
   1208e:	4690      	mov	r8, r2
   12090:	461e      	mov	r6, r3
   12092:	9301      	str	r3, [sp, #4]
   12094:	f006 fade 	bl	18654 <vsnprintf>
   12098:	1e04      	subs	r4, r0, #0
   1209a:	db11      	blt.n	120c0 <at_cmd_vsprintf+0x40>
   1209c:	3401      	adds	r4, #1
   1209e:	4620      	mov	r0, r4
   120a0:	f00b ff33 	bl	1df0a <rpc_client_msg_data_tx_alloc>
   120a4:	f8c9 0000 	str.w	r0, [r9]
   120a8:	b168      	cbz	r0, 120c6 <at_cmd_vsprintf+0x46>
   120aa:	4633      	mov	r3, r6
   120ac:	4642      	mov	r2, r8
   120ae:	4621      	mov	r1, r4
   120b0:	9601      	str	r6, [sp, #4]
   120b2:	f006 facf 	bl	18654 <vsnprintf>
   120b6:	4628      	mov	r0, r5
   120b8:	603c      	str	r4, [r7, #0]
   120ba:	b003      	add	sp, #12
   120bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   120c0:	f06f 0015 	mvn.w	r0, #21
   120c4:	e7f9      	b.n	120ba <at_cmd_vsprintf+0x3a>
   120c6:	f06f 000b 	mvn.w	r0, #11
   120ca:	e7f6      	b.n	120ba <at_cmd_vsprintf+0x3a>
   120cc:	00023d43 	.word	0x00023d43

000120d0 <nrf_modem_at_printf>:
   120d0:	b40f      	push	{r0, r1, r2, r3}
   120d2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   120d4:	9c08      	ldr	r4, [sp, #32]
   120d6:	f000 fa51 	bl	1257c <nrf_modem_state_is_initialized>
   120da:	2800      	cmp	r0, #0
   120dc:	d02f      	beq.n	1213e <nrf_modem_at_printf+0x6e>
   120de:	2c00      	cmp	r4, #0
   120e0:	d030      	beq.n	12144 <nrf_modem_at_printf+0x74>
   120e2:	4e1b      	ldr	r6, [pc, #108]	; (12150 <nrf_modem_at_printf+0x80>)
   120e4:	4b1b      	ldr	r3, [pc, #108]	; (12154 <nrf_modem_at_printf+0x84>)
   120e6:	6830      	ldr	r0, [r6, #0]
   120e8:	6819      	ldr	r1, [r3, #0]
   120ea:	f7fd fd47 	bl	fb7c <nrf_modem_os_sem_take>
   120ee:	bb60      	cbnz	r0, 1214a <nrf_modem_at_printf+0x7a>
   120f0:	4622      	mov	r2, r4
   120f2:	ab09      	add	r3, sp, #36	; 0x24
   120f4:	a903      	add	r1, sp, #12
   120f6:	a802      	add	r0, sp, #8
   120f8:	9301      	str	r3, [sp, #4]
   120fa:	f7ff ffc1 	bl	12080 <at_cmd_vsprintf>
   120fe:	4604      	mov	r4, r0
   12100:	b9a0      	cbnz	r0, 1212c <nrf_modem_at_printf+0x5c>
   12102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   12106:	2302      	movs	r3, #2
   12108:	2201      	movs	r2, #1
   1210a:	f7ff ff5b 	bl	11fc4 <at_cmd_send>
   1210e:	4604      	mov	r4, r0
   12110:	b960      	cbnz	r0, 1212c <nrf_modem_at_printf+0x5c>
   12112:	4d11      	ldr	r5, [pc, #68]	; (12158 <nrf_modem_at_printf+0x88>)
   12114:	682b      	ldr	r3, [r5, #0]
   12116:	6818      	ldr	r0, [r3, #0]
   12118:	f7ff ff8e 	bl	12038 <at_response_match>
   1211c:	682b      	ldr	r3, [r5, #0]
   1211e:	4604      	mov	r4, r0
   12120:	6818      	ldr	r0, [r3, #0]
   12122:	f00b fef0 	bl	1df06 <rpc_client_msg_data_rx_free>
   12126:	6828      	ldr	r0, [r5, #0]
   12128:	f00b feea 	bl	1df00 <rpc_client_msg_rx_free>
   1212c:	6830      	ldr	r0, [r6, #0]
   1212e:	f7fd fcf5 	bl	fb1c <nrf_modem_os_sem_give>
   12132:	4620      	mov	r0, r4
   12134:	b004      	add	sp, #16
   12136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1213a:	b004      	add	sp, #16
   1213c:	4770      	bx	lr
   1213e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12142:	e7f6      	b.n	12132 <nrf_modem_at_printf+0x62>
   12144:	f06f 040d 	mvn.w	r4, #13
   12148:	e7f3      	b.n	12132 <nrf_modem_at_printf+0x62>
   1214a:	f06f 040a 	mvn.w	r4, #10
   1214e:	e7f0      	b.n	12132 <nrf_modem_at_printf+0x62>
   12150:	2000cae0 	.word	0x2000cae0
   12154:	2000cae4 	.word	0x2000cae4
   12158:	2000cadc 	.word	0x2000cadc

0001215c <rpc_at_event_handler>:
   1215c:	b538      	push	{r3, r4, r5, lr}
   1215e:	68c3      	ldr	r3, [r0, #12]
   12160:	4604      	mov	r4, r0
   12162:	2ba7      	cmp	r3, #167	; 0xa7
   12164:	d003      	beq.n	1216e <rpc_at_event_handler+0x12>
   12166:	6820      	ldr	r0, [r4, #0]
   12168:	f00b fecd 	bl	1df06 <rpc_client_msg_data_rx_free>
   1216c:	e008      	b.n	12180 <rpc_at_event_handler+0x24>
   1216e:	2903      	cmp	r1, #3
   12170:	d008      	beq.n	12184 <rpc_at_event_handler+0x28>
   12172:	2904      	cmp	r1, #4
   12174:	d026      	beq.n	121c4 <rpc_at_event_handler+0x68>
   12176:	2902      	cmp	r1, #2
   12178:	bf02      	ittt	eq
   1217a:	2201      	moveq	r2, #1
   1217c:	4b15      	ldreq	r3, [pc, #84]	; (121d4 <rpc_at_event_handler+0x78>)
   1217e:	701a      	strbeq	r2, [r3, #0]
   12180:	2000      	movs	r0, #0
   12182:	bd38      	pop	{r3, r4, r5, pc}
   12184:	4b13      	ldr	r3, [pc, #76]	; (121d4 <rpc_at_event_handler+0x78>)
   12186:	781a      	ldrb	r2, [r3, #0]
   12188:	2a02      	cmp	r2, #2
   1218a:	d106      	bne.n	1219a <rpc_at_event_handler+0x3e>
   1218c:	6800      	ldr	r0, [r0, #0]
   1218e:	b108      	cbz	r0, 12194 <rpc_at_event_handler+0x38>
   12190:	f00b feb9 	bl	1df06 <rpc_client_msg_data_rx_free>
   12194:	2000      	movs	r0, #0
   12196:	b2c0      	uxtb	r0, r0
   12198:	e7f3      	b.n	12182 <rpc_at_event_handler+0x26>
   1219a:	4d0f      	ldr	r5, [pc, #60]	; (121d8 <rpc_at_event_handler+0x7c>)
   1219c:	682a      	ldr	r2, [r5, #0]
   1219e:	b15a      	cbz	r2, 121b8 <rpc_at_event_handler+0x5c>
   121a0:	6800      	ldr	r0, [r0, #0]
   121a2:	4790      	blx	r2
   121a4:	2300      	movs	r3, #0
   121a6:	6820      	ldr	r0, [r4, #0]
   121a8:	602b      	str	r3, [r5, #0]
   121aa:	f00b feac 	bl	1df06 <rpc_client_msg_data_rx_free>
   121ae:	4b0b      	ldr	r3, [pc, #44]	; (121dc <rpc_at_event_handler+0x80>)
   121b0:	6818      	ldr	r0, [r3, #0]
   121b2:	f7fd fcb3 	bl	fb1c <nrf_modem_os_sem_give>
   121b6:	e7ed      	b.n	12194 <rpc_at_event_handler+0x38>
   121b8:	4a09      	ldr	r2, [pc, #36]	; (121e0 <rpc_at_event_handler+0x84>)
   121ba:	6010      	str	r0, [r2, #0]
   121bc:	2202      	movs	r2, #2
   121be:	2001      	movs	r0, #1
   121c0:	701a      	strb	r2, [r3, #0]
   121c2:	e7e8      	b.n	12196 <rpc_at_event_handler+0x3a>
   121c4:	4b07      	ldr	r3, [pc, #28]	; (121e4 <rpc_at_event_handler+0x88>)
   121c6:	681b      	ldr	r3, [r3, #0]
   121c8:	2b00      	cmp	r3, #0
   121ca:	d0cc      	beq.n	12166 <rpc_at_event_handler+0xa>
   121cc:	6800      	ldr	r0, [r0, #0]
   121ce:	4798      	blx	r3
   121d0:	e7c9      	b.n	12166 <rpc_at_event_handler+0xa>
   121d2:	bf00      	nop
   121d4:	2000cea3 	.word	0x2000cea3
   121d8:	2000cad4 	.word	0x2000cad4
   121dc:	2000cae0 	.word	0x2000cae0
   121e0:	2000cadc 	.word	0x2000cadc
   121e4:	2000cad8 	.word	0x2000cad8

000121e8 <sock_find>:
   121e8:	b530      	push	{r4, r5, lr}
   121ea:	4602      	mov	r2, r0
   121ec:	2300      	movs	r3, #0
   121ee:	2564      	movs	r5, #100	; 0x64
   121f0:	4905      	ldr	r1, [pc, #20]	; (12208 <sock_find+0x20>)
   121f2:	fb05 f403 	mul.w	r4, r5, r3
   121f6:	1860      	adds	r0, r4, r1
   121f8:	590c      	ldr	r4, [r1, r4]
   121fa:	4294      	cmp	r4, r2
   121fc:	d003      	beq.n	12206 <sock_find+0x1e>
   121fe:	3301      	adds	r3, #1
   12200:	2b08      	cmp	r3, #8
   12202:	d1f6      	bne.n	121f2 <sock_find+0xa>
   12204:	2000      	movs	r0, #0
   12206:	bd30      	pop	{r4, r5, pc}
   12208:	2000cae8 	.word	0x2000cae8

0001220c <sock_rpc_flow_control_set>:
   1220c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12210:	1e02      	subs	r2, r0, #0
   12212:	4c10      	ldr	r4, [pc, #64]	; (12254 <sock_rpc_flow_control_set+0x48>)
   12214:	bf18      	it	ne
   12216:	2201      	movne	r2, #1
   12218:	4606      	mov	r6, r0
   1221a:	2500      	movs	r5, #0
   1221c:	46a0      	mov	r8, r4
   1221e:	f04f 0964 	mov.w	r9, #100	; 0x64
   12222:	4b0d      	ldr	r3, [pc, #52]	; (12258 <sock_rpc_flow_control_set+0x4c>)
   12224:	4f0d      	ldr	r7, [pc, #52]	; (1225c <sock_rpc_flow_control_set+0x50>)
   12226:	701a      	strb	r2, [r3, #0]
   12228:	6823      	ldr	r3, [r4, #0]
   1222a:	42bb      	cmp	r3, r7
   1222c:	d00a      	beq.n	12244 <sock_rpc_flow_control_set+0x38>
   1222e:	fb09 8305 	mla	r3, r9, r5, r8
   12232:	7f1a      	ldrb	r2, [r3, #28]
   12234:	f366 1286 	bfi	r2, r6, #6, #1
   12238:	771a      	strb	r2, [r3, #28]
   1223a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1223c:	b113      	cbz	r3, 12244 <sock_rpc_flow_control_set+0x38>
   1223e:	4620      	mov	r0, r4
   12240:	f00b fea1 	bl	1df86 <sock_pollcb>
   12244:	3501      	adds	r5, #1
   12246:	2d08      	cmp	r5, #8
   12248:	f104 0464 	add.w	r4, r4, #100	; 0x64
   1224c:	d1ec      	bne.n	12228 <sock_rpc_flow_control_set+0x1c>
   1224e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12252:	bf00      	nop
   12254:	2000cae8 	.word	0x2000cae8
   12258:	2000cea4 	.word	0x2000cea4
   1225c:	1badf11e 	.word	0x1badf11e

00012260 <sock_apn_rate_control_set>:
   12260:	b570      	push	{r4, r5, r6, lr}
   12262:	2300      	movs	r3, #0
   12264:	2664      	movs	r6, #100	; 0x64
   12266:	4a07      	ldr	r2, [pc, #28]	; (12284 <sock_apn_rate_control_set+0x24>)
   12268:	fb06 f503 	mul.w	r5, r6, r3
   1226c:	18ac      	adds	r4, r5, r2
   1226e:	5955      	ldr	r5, [r2, r5]
   12270:	3301      	adds	r3, #1
   12272:	4285      	cmp	r5, r0
   12274:	bf02      	ittt	eq
   12276:	7f25      	ldrbeq	r5, [r4, #28]
   12278:	f361 15c7 	bfieq	r5, r1, #7, #1
   1227c:	7725      	strbeq	r5, [r4, #28]
   1227e:	2b08      	cmp	r3, #8
   12280:	d1f2      	bne.n	12268 <sock_apn_rate_control_set+0x8>
   12282:	bd70      	pop	{r4, r5, r6, pc}
   12284:	2000cae8 	.word	0x2000cae8

00012288 <on_getaddrinfo_res>:
   12288:	2301      	movs	r3, #1
   1228a:	4a03      	ldr	r2, [pc, #12]	; (12298 <on_getaddrinfo_res+0x10>)
   1228c:	7013      	strb	r3, [r2, #0]
   1228e:	4a03      	ldr	r2, [pc, #12]	; (1229c <on_getaddrinfo_res+0x14>)
   12290:	6010      	str	r0, [r2, #0]
   12292:	4618      	mov	r0, r3
   12294:	4770      	bx	lr
   12296:	bf00      	nop
   12298:	2000cea5 	.word	0x2000cea5
   1229c:	2000ce08 	.word	0x2000ce08

000122a0 <on_tls_attach_res>:
   122a0:	b510      	push	{r4, lr}
   122a2:	6943      	ldr	r3, [r0, #20]
   122a4:	460c      	mov	r4, r1
   122a6:	b15b      	cbz	r3, 122c0 <on_tls_attach_res+0x20>
   122a8:	7f0b      	ldrb	r3, [r1, #28]
   122aa:	f36f 1304 	bfc	r3, #4, #1
   122ae:	770b      	strb	r3, [r1, #28]
   122b0:	6940      	ldr	r0, [r0, #20]
   122b2:	f000 f89b 	bl	123ec <rpc_error_to_nrf_errno>
   122b6:	4b03      	ldr	r3, [pc, #12]	; (122c4 <on_tls_attach_res+0x24>)
   122b8:	61a0      	str	r0, [r4, #24]
   122ba:	6818      	ldr	r0, [r3, #0]
   122bc:	f7fd fc2e 	bl	fb1c <nrf_modem_os_sem_give>
   122c0:	2000      	movs	r0, #0
   122c2:	bd10      	pop	{r4, pc}
   122c4:	2000ce0c 	.word	0x2000ce0c

000122c8 <on_tls_handshake_ntf>:
   122c8:	b510      	push	{r4, lr}
   122ca:	7f0b      	ldrb	r3, [r1, #28]
   122cc:	460c      	mov	r4, r1
   122ce:	f36f 1304 	bfc	r3, #4, #1
   122d2:	770b      	strb	r3, [r1, #28]
   122d4:	6900      	ldr	r0, [r0, #16]
   122d6:	b958      	cbnz	r0, 122f0 <on_tls_handshake_ntf+0x28>
   122d8:	b2db      	uxtb	r3, r3
   122da:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   122de:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   122e2:	770b      	strb	r3, [r1, #28]
   122e4:	4b04      	ldr	r3, [pc, #16]	; (122f8 <on_tls_handshake_ntf+0x30>)
   122e6:	6818      	ldr	r0, [r3, #0]
   122e8:	f7fd fc18 	bl	fb1c <nrf_modem_os_sem_give>
   122ec:	2000      	movs	r0, #0
   122ee:	bd10      	pop	{r4, pc}
   122f0:	f000 f87c 	bl	123ec <rpc_error_to_nrf_errno>
   122f4:	61a0      	str	r0, [r4, #24]
   122f6:	e7f5      	b.n	122e4 <on_tls_handshake_ntf+0x1c>
   122f8:	2000ce0c 	.word	0x2000ce0c

000122fc <tls_attach>:
   122fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12300:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 123e8 <tls_attach+0xec>
   12304:	4605      	mov	r5, r0
   12306:	f8d8 0000 	ldr.w	r0, [r8]
   1230a:	9101      	str	r1, [sp, #4]
   1230c:	f7fd fc36 	bl	fb7c <nrf_modem_os_sem_take>
   12310:	4607      	mov	r7, r0
   12312:	b150      	cbz	r0, 1232a <tls_attach+0x2e>
   12314:	9b01      	ldr	r3, [sp, #4]
   12316:	2b00      	cmp	r3, #0
   12318:	d163      	bne.n	123e2 <tls_attach+0xe6>
   1231a:	2310      	movs	r3, #16
   1231c:	61ab      	str	r3, [r5, #24]
   1231e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12322:	4638      	mov	r0, r7
   12324:	b002      	add	sp, #8
   12326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1232a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1232c:	b1a8      	cbz	r0, 1235a <tls_attach+0x5e>
   1232e:	f7f6 f871 	bl	8414 <strlen>
   12332:	1c46      	adds	r6, r0, #1
   12334:	4630      	mov	r0, r6
   12336:	f00b fdc0 	bl	1deba <rpc_client_msg_alloc>
   1233a:	4604      	mov	r4, r0
   1233c:	b978      	cbnz	r0, 1235e <tls_attach+0x62>
   1233e:	4628      	mov	r0, r5
   12340:	f00b fe5d 	bl	1dffe <sock_is_nonblock>
   12344:	b108      	cbz	r0, 1234a <tls_attach+0x4e>
   12346:	2369      	movs	r3, #105	; 0x69
   12348:	61ab      	str	r3, [r5, #24]
   1234a:	f8d8 0000 	ldr.w	r0, [r8]
   1234e:	f7fd fbe5 	bl	fb1c <nrf_modem_os_sem_give>
   12352:	2069      	movs	r0, #105	; 0x69
   12354:	f7fd fb6a 	bl	fa2c <nrf_modem_os_errno_set>
   12358:	e7e1      	b.n	1231e <tls_attach+0x22>
   1235a:	463e      	mov	r6, r7
   1235c:	e7ea      	b.n	12334 <tls_attach+0x38>
   1235e:	682b      	ldr	r3, [r5, #0]
   12360:	2204      	movs	r2, #4
   12362:	6103      	str	r3, [r0, #16]
   12364:	2300      	movs	r3, #0
   12366:	7202      	strb	r2, [r0, #8]
   12368:	7243      	strb	r3, [r0, #9]
   1236a:	7283      	strb	r3, [r0, #10]
   1236c:	72c3      	strb	r3, [r0, #11]
   1236e:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
   12372:	f105 0144 	add.w	r1, r5, #68	; 0x44
   12376:	3201      	adds	r2, #1
   12378:	0092      	lsls	r2, r2, #2
   1237a:	6082      	str	r2, [r0, #8]
   1237c:	3014      	adds	r0, #20
   1237e:	f00d faa6 	bl	1f8ce <__aeabi_memcpy>
   12382:	b1e6      	cbz	r6, 123be <tls_attach+0xc2>
   12384:	4632      	mov	r2, r6
   12386:	6c29      	ldr	r1, [r5, #64]	; 0x40
   12388:	6820      	ldr	r0, [r4, #0]
   1238a:	f00d f953 	bl	1f634 <strncpy>
   1238e:	6066      	str	r6, [r4, #4]
   12390:	7f2b      	ldrb	r3, [r5, #28]
   12392:	2004      	movs	r0, #4
   12394:	f043 0310 	orr.w	r3, r3, #16
   12398:	4622      	mov	r2, r4
   1239a:	f247 0181 	movw	r1, #28801	; 0x7081
   1239e:	772b      	strb	r3, [r5, #28]
   123a0:	f00b fda7 	bl	1def2 <rpc_client_msg_send>
   123a4:	4628      	mov	r0, r5
   123a6:	f00b fe2a 	bl	1dffe <sock_is_nonblock>
   123aa:	2800      	cmp	r0, #0
   123ac:	d1b9      	bne.n	12322 <tls_attach+0x26>
   123ae:	4628      	mov	r0, r5
   123b0:	f00b fe21 	bl	1dff6 <sock_is_attaching>
   123b4:	b940      	cbnz	r0, 123c8 <tls_attach+0xcc>
   123b6:	69a8      	ldr	r0, [r5, #24]
   123b8:	2800      	cmp	r0, #0
   123ba:	d0b2      	beq.n	12322 <tls_attach+0x26>
   123bc:	e7ca      	b.n	12354 <tls_attach+0x58>
   123be:	7026      	strb	r6, [r4, #0]
   123c0:	7066      	strb	r6, [r4, #1]
   123c2:	70a6      	strb	r6, [r4, #2]
   123c4:	70e6      	strb	r6, [r4, #3]
   123c6:	e7e2      	b.n	1238e <tls_attach+0x92>
   123c8:	2002      	movs	r0, #2
   123ca:	a901      	add	r1, sp, #4
   123cc:	f00a fd4a 	bl	1ce64 <nrf_modem_os_timedwait>
   123d0:	f110 0f0b 	cmn.w	r0, #11
   123d4:	d005      	beq.n	123e2 <tls_attach+0xe6>
   123d6:	2800      	cmp	r0, #0
   123d8:	d0e9      	beq.n	123ae <tls_attach+0xb2>
   123da:	2800      	cmp	r0, #0
   123dc:	bfb8      	it	lt
   123de:	4240      	neglt	r0, r0
   123e0:	e7b8      	b.n	12354 <tls_attach+0x58>
   123e2:	2074      	movs	r0, #116	; 0x74
   123e4:	e7b6      	b.n	12354 <tls_attach+0x58>
   123e6:	bf00      	nop
   123e8:	2000ce0c 	.word	0x2000ce0c

000123ec <rpc_error_to_nrf_errno>:
   123ec:	2870      	cmp	r0, #112	; 0x70
   123ee:	bf9a      	itte	ls
   123f0:	4b02      	ldrls	r3, [pc, #8]	; (123fc <rpc_error_to_nrf_errno+0x10>)
   123f2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   123f6:	4802      	ldrhi	r0, [pc, #8]	; (12400 <rpc_error_to_nrf_errno+0x14>)
   123f8:	4770      	bx	lr
   123fa:	bf00      	nop
   123fc:	00024160 	.word	0x00024160
   12400:	baadbaad 	.word	0xbaadbaad

00012404 <rpc_gnss_event_handler>:
   12404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12408:	6805      	ldr	r5, [r0, #0]
   1240a:	4607      	mov	r7, r0
   1240c:	460c      	mov	r4, r1
   1240e:	b13d      	cbz	r5, 12420 <rpc_gnss_event_handler+0x1c>
   12410:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   12414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   12418:	d105      	bne.n	12426 <rpc_gnss_event_handler+0x22>
   1241a:	4b3f      	ldr	r3, [pc, #252]	; (12518 <rpc_gnss_event_handler+0x114>)
   1241c:	e9c3 1500 	strd	r1, r5, [r3]
   12420:	2000      	movs	r0, #0
   12422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12426:	4e3d      	ldr	r6, [pc, #244]	; (1251c <rpc_gnss_event_handler+0x118>)
   12428:	6833      	ldr	r3, [r6, #0]
   1242a:	b163      	cbz	r3, 12446 <rpc_gnss_event_handler+0x42>
   1242c:	f244 0204 	movw	r2, #16388	; 0x4004
   12430:	4291      	cmp	r1, r2
   12432:	d060      	beq.n	124f6 <rpc_gnss_event_handler+0xf2>
   12434:	d80b      	bhi.n	1244e <rpc_gnss_event_handler+0x4a>
   12436:	f244 0302 	movw	r3, #16386	; 0x4002
   1243a:	4299      	cmp	r1, r3
   1243c:	d04a      	beq.n	124d4 <rpc_gnss_event_handler+0xd0>
   1243e:	f244 0303 	movw	r3, #16387	; 0x4003
   12442:	4299      	cmp	r1, r3
   12444:	d04f      	beq.n	124e6 <rpc_gnss_event_handler+0xe2>
   12446:	6838      	ldr	r0, [r7, #0]
   12448:	f00b fd5d 	bl	1df06 <rpc_client_msg_data_rx_free>
   1244c:	e7e8      	b.n	12420 <rpc_gnss_event_handler+0x1c>
   1244e:	f244 2201 	movw	r2, #16897	; 0x4201
   12452:	f421 7380 	bic.w	r3, r1, #256	; 0x100
   12456:	4293      	cmp	r3, r2
   12458:	d00f      	beq.n	1247a <rpc_gnss_event_handler+0x76>
   1245a:	f244 1303 	movw	r3, #16643	; 0x4103
   1245e:	4299      	cmp	r1, r3
   12460:	d1f1      	bne.n	12446 <rpc_gnss_event_handler+0x42>
   12462:	4c2f      	ldr	r4, [pc, #188]	; (12520 <rpc_gnss_event_handler+0x11c>)
   12464:	6820      	ldr	r0, [r4, #0]
   12466:	b108      	cbz	r0, 1246c <rpc_gnss_event_handler+0x68>
   12468:	f00b fd4d 	bl	1df06 <rpc_client_msg_data_rx_free>
   1246c:	2201      	movs	r2, #1
   1246e:	4b2d      	ldr	r3, [pc, #180]	; (12524 <rpc_gnss_event_handler+0x120>)
   12470:	701a      	strb	r2, [r3, #0]
   12472:	6025      	str	r5, [r4, #0]
   12474:	2004      	movs	r0, #4
   12476:	6833      	ldr	r3, [r6, #0]
   12478:	e024      	b.n	124c4 <rpc_gnss_event_handler+0xc0>
   1247a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 12528 <rpc_gnss_event_handler+0x124>
   1247e:	f8d8 0000 	ldr.w	r0, [r8]
   12482:	b108      	cbz	r0, 12488 <rpc_gnss_event_handler+0x84>
   12484:	f00b fd3f 	bl	1df06 <rpc_client_msg_data_rx_free>
   12488:	f244 3301 	movw	r3, #17153	; 0x4301
   1248c:	429c      	cmp	r4, r3
   1248e:	bf0c      	ite	eq
   12490:	2203      	moveq	r2, #3
   12492:	2202      	movne	r2, #2
   12494:	f895 7051 	ldrb.w	r7, [r5, #81]	; 0x51
   12498:	4b24      	ldr	r3, [pc, #144]	; (1252c <rpc_gnss_event_handler+0x128>)
   1249a:	4c25      	ldr	r4, [pc, #148]	; (12530 <rpc_gnss_event_handler+0x12c>)
   1249c:	701a      	strb	r2, [r3, #0]
   1249e:	f8c8 5000 	str.w	r5, [r8]
   124a2:	f017 0508 	ands.w	r5, r7, #8
   124a6:	6833      	ldr	r3, [r6, #0]
   124a8:	7822      	ldrb	r2, [r4, #0]
   124aa:	d00d      	beq.n	124c8 <rpc_gnss_event_handler+0xc4>
   124ac:	b91a      	cbnz	r2, 124b6 <rpc_gnss_event_handler+0xb2>
   124ae:	2005      	movs	r0, #5
   124b0:	4798      	blx	r3
   124b2:	2301      	movs	r3, #1
   124b4:	7023      	strb	r3, [r4, #0]
   124b6:	07fb      	lsls	r3, r7, #31
   124b8:	d502      	bpl.n	124c0 <rpc_gnss_event_handler+0xbc>
   124ba:	2002      	movs	r0, #2
   124bc:	6833      	ldr	r3, [r6, #0]
   124be:	4798      	blx	r3
   124c0:	2001      	movs	r0, #1
   124c2:	6833      	ldr	r3, [r6, #0]
   124c4:	4798      	blx	r3
   124c6:	e7ab      	b.n	12420 <rpc_gnss_event_handler+0x1c>
   124c8:	2a00      	cmp	r2, #0
   124ca:	d0f4      	beq.n	124b6 <rpc_gnss_event_handler+0xb2>
   124cc:	2006      	movs	r0, #6
   124ce:	4798      	blx	r3
   124d0:	7025      	strb	r5, [r4, #0]
   124d2:	e7f0      	b.n	124b6 <rpc_gnss_event_handler+0xb2>
   124d4:	4c17      	ldr	r4, [pc, #92]	; (12534 <rpc_gnss_event_handler+0x130>)
   124d6:	6820      	ldr	r0, [r4, #0]
   124d8:	b108      	cbz	r0, 124de <rpc_gnss_event_handler+0xda>
   124da:	f00b fd14 	bl	1df06 <rpc_client_msg_data_rx_free>
   124de:	2003      	movs	r0, #3
   124e0:	6833      	ldr	r3, [r6, #0]
   124e2:	6025      	str	r5, [r4, #0]
   124e4:	e7ee      	b.n	124c4 <rpc_gnss_event_handler+0xc0>
   124e6:	4c0e      	ldr	r4, [pc, #56]	; (12520 <rpc_gnss_event_handler+0x11c>)
   124e8:	6820      	ldr	r0, [r4, #0]
   124ea:	b108      	cbz	r0, 124f0 <rpc_gnss_event_handler+0xec>
   124ec:	f00b fd0b 	bl	1df06 <rpc_client_msg_data_rx_free>
   124f0:	2200      	movs	r2, #0
   124f2:	4b0c      	ldr	r3, [pc, #48]	; (12524 <rpc_gnss_event_handler+0x120>)
   124f4:	e7bc      	b.n	12470 <rpc_gnss_event_handler+0x6c>
   124f6:	782a      	ldrb	r2, [r5, #0]
   124f8:	2a03      	cmp	r2, #3
   124fa:	d8a4      	bhi.n	12446 <rpc_gnss_event_handler+0x42>
   124fc:	e8df f002 	tbb	[pc, r2]
   12500:	09070502 	.word	0x09070502
   12504:	2007      	movs	r0, #7
   12506:	4798      	blx	r3
   12508:	e79d      	b.n	12446 <rpc_gnss_event_handler+0x42>
   1250a:	2008      	movs	r0, #8
   1250c:	e7fb      	b.n	12506 <rpc_gnss_event_handler+0x102>
   1250e:	2009      	movs	r0, #9
   12510:	e7f9      	b.n	12506 <rpc_gnss_event_handler+0x102>
   12512:	200a      	movs	r0, #10
   12514:	e7f7      	b.n	12506 <rpc_gnss_event_handler+0x102>
   12516:	bf00      	nop
   12518:	2000ce20 	.word	0x2000ce20
   1251c:	2000ce10 	.word	0x2000ce10
   12520:	2000ce14 	.word	0x2000ce14
   12524:	2000cea6 	.word	0x2000cea6
   12528:	2000ce1c 	.word	0x2000ce1c
   1252c:	2000cea7 	.word	0x2000cea7
   12530:	2000cea8 	.word	0x2000cea8
   12534:	2000ce18 	.word	0x2000ce18

00012538 <rpc_softsim_event_handler>:
   12538:	b538      	push	{r3, r4, r5, lr}
   1253a:	4b06      	ldr	r3, [pc, #24]	; (12554 <rpc_softsim_event_handler+0x1c>)
   1253c:	681c      	ldr	r4, [r3, #0]
   1253e:	b134      	cbz	r4, 1254e <rpc_softsim_event_handler+0x16>
   12540:	6843      	ldr	r3, [r0, #4]
   12542:	8985      	ldrh	r5, [r0, #12]
   12544:	6802      	ldr	r2, [r0, #0]
   12546:	89c1      	ldrh	r1, [r0, #14]
   12548:	b29b      	uxth	r3, r3
   1254a:	b2e8      	uxtb	r0, r5
   1254c:	47a0      	blx	r4
   1254e:	2000      	movs	r0, #0
   12550:	bd38      	pop	{r3, r4, r5, pc}
   12552:	bf00      	nop
   12554:	2000ce28 	.word	0x2000ce28

00012558 <nrf_modem_fault_handler_internal>:
   12558:	b507      	push	{r0, r1, r2, lr}
   1255a:	4b04      	ldr	r3, [pc, #16]	; (1256c <nrf_modem_fault_handler_internal+0x14>)
   1255c:	e9cd 0100 	strd	r0, r1, [sp]
   12560:	681b      	ldr	r3, [r3, #0]
   12562:	4668      	mov	r0, sp
   12564:	4798      	blx	r3
   12566:	b003      	add	sp, #12
   12568:	f85d fb04 	ldr.w	pc, [sp], #4
   1256c:	2000ce2c 	.word	0x2000ce2c

00012570 <nrf_modem_state_set>:
   12570:	4b01      	ldr	r3, [pc, #4]	; (12578 <nrf_modem_state_set+0x8>)
   12572:	7018      	strb	r0, [r3, #0]
   12574:	4770      	bx	lr
   12576:	bf00      	nop
   12578:	2000cea9 	.word	0x2000cea9

0001257c <nrf_modem_state_is_initialized>:
   1257c:	4b02      	ldr	r3, [pc, #8]	; (12588 <nrf_modem_state_is_initialized+0xc>)
   1257e:	7818      	ldrb	r0, [r3, #0]
   12580:	1e43      	subs	r3, r0, #1
   12582:	4258      	negs	r0, r3
   12584:	4158      	adcs	r0, r3
   12586:	4770      	bx	lr
   12588:	2000cea9 	.word	0x2000cea9

0001258c <ipc_trace_init>:
   1258c:	2100      	movs	r1, #0
   1258e:	4b07      	ldr	r3, [pc, #28]	; (125ac <ipc_trace_init+0x20>)
   12590:	2201      	movs	r2, #1
   12592:	7019      	strb	r1, [r3, #0]
   12594:	4b06      	ldr	r3, [pc, #24]	; (125b0 <ipc_trace_init+0x24>)
   12596:	7019      	strb	r1, [r3, #0]
   12598:	4b06      	ldr	r3, [pc, #24]	; (125b4 <ipc_trace_init+0x28>)
   1259a:	6019      	str	r1, [r3, #0]
   1259c:	4b06      	ldr	r3, [pc, #24]	; (125b8 <ipc_trace_init+0x2c>)
   1259e:	6019      	str	r1, [r3, #0]
   125a0:	4b06      	ldr	r3, [pc, #24]	; (125bc <ipc_trace_init+0x30>)
   125a2:	6018      	str	r0, [r3, #0]
   125a4:	4806      	ldr	r0, [pc, #24]	; (125c0 <ipc_trace_init+0x34>)
   125a6:	f7fd ba6b 	b.w	fa80 <nrf_modem_os_sem_init>
   125aa:	bf00      	nop
   125ac:	2000ceaa 	.word	0x2000ceaa
   125b0:	2000ceab 	.word	0x2000ceab
   125b4:	2000ce34 	.word	0x2000ce34
   125b8:	2000ce38 	.word	0x2000ce38
   125bc:	2000ce48 	.word	0x2000ce48
   125c0:	2000ce30 	.word	0x2000ce30

000125c4 <ipc_trace_handler>:
   125c4:	b470      	push	{r4, r5, r6}
   125c6:	4b2d      	ldr	r3, [pc, #180]	; (1267c <ipc_trace_handler+0xb8>)
   125c8:	681b      	ldr	r3, [r3, #0]
   125ca:	6919      	ldr	r1, [r3, #16]
   125cc:	6958      	ldr	r0, [r3, #20]
   125ce:	7c1a      	ldrb	r2, [r3, #16]
   125d0:	2200      	movs	r2, #0
   125d2:	741a      	strb	r2, [r3, #16]
   125d4:	7c5c      	ldrb	r4, [r3, #17]
   125d6:	745a      	strb	r2, [r3, #17]
   125d8:	7c9c      	ldrb	r4, [r3, #18]
   125da:	749a      	strb	r2, [r3, #18]
   125dc:	7cdc      	ldrb	r4, [r3, #19]
   125de:	74da      	strb	r2, [r3, #19]
   125e0:	7d1c      	ldrb	r4, [r3, #20]
   125e2:	751a      	strb	r2, [r3, #20]
   125e4:	7d5c      	ldrb	r4, [r3, #21]
   125e6:	755a      	strb	r2, [r3, #21]
   125e8:	7d9c      	ldrb	r4, [r3, #22]
   125ea:	2903      	cmp	r1, #3
   125ec:	759a      	strb	r2, [r3, #22]
   125ee:	7ddc      	ldrb	r4, [r3, #23]
   125f0:	75da      	strb	r2, [r3, #23]
   125f2:	d029      	beq.n	12648 <ipc_trace_handler+0x84>
   125f4:	2904      	cmp	r1, #4
   125f6:	d033      	beq.n	12660 <ipc_trace_handler+0x9c>
   125f8:	2901      	cmp	r1, #1
   125fa:	d12f      	bne.n	1265c <ipc_trace_handler+0x98>
   125fc:	6885      	ldr	r5, [r0, #8]
   125fe:	4e20      	ldr	r6, [pc, #128]	; (12680 <ipc_trace_handler+0xbc>)
   12600:	4295      	cmp	r5, r2
   12602:	d110      	bne.n	12626 <ipc_trace_handler+0x62>
   12604:	2101      	movs	r1, #1
   12606:	7a1a      	ldrb	r2, [r3, #8]
   12608:	2200      	movs	r2, #0
   1260a:	7219      	strb	r1, [r3, #8]
   1260c:	7a59      	ldrb	r1, [r3, #9]
   1260e:	725a      	strb	r2, [r3, #9]
   12610:	7a99      	ldrb	r1, [r3, #10]
   12612:	729a      	strb	r2, [r3, #10]
   12614:	7ada      	ldrb	r2, [r3, #11]
   12616:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   1261a:	72da      	strb	r2, [r3, #11]
   1261c:	4b19      	ldr	r3, [pc, #100]	; (12684 <ipc_trace_handler+0xc0>)
   1261e:	bc70      	pop	{r4, r5, r6}
   12620:	6818      	ldr	r0, [r3, #0]
   12622:	f7fd ba7b 	b.w	fb1c <nrf_modem_os_sem_give>
   12626:	1c91      	adds	r1, r2, #2
   12628:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1262c:	684c      	ldr	r4, [r1, #4]
   1262e:	7821      	ldrb	r1, [r4, #0]
   12630:	2962      	cmp	r1, #98	; 0x62
   12632:	d007      	beq.n	12644 <ipc_trace_handler+0x80>
   12634:	3963      	subs	r1, #99	; 0x63
   12636:	bf18      	it	ne
   12638:	2101      	movne	r1, #1
   1263a:	0049      	lsls	r1, r1, #1
   1263c:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
   12640:	3201      	adds	r2, #1
   12642:	e7dd      	b.n	12600 <ipc_trace_handler+0x3c>
   12644:	2101      	movs	r1, #1
   12646:	e7f9      	b.n	1263c <ipc_trace_handler+0x78>
   12648:	7a18      	ldrb	r0, [r3, #8]
   1264a:	7219      	strb	r1, [r3, #8]
   1264c:	7a59      	ldrb	r1, [r3, #9]
   1264e:	725a      	strb	r2, [r3, #9]
   12650:	7a99      	ldrb	r1, [r3, #10]
   12652:	729a      	strb	r2, [r3, #10]
   12654:	7ada      	ldrb	r2, [r3, #11]
   12656:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   1265a:	72da      	strb	r2, [r3, #11]
   1265c:	bc70      	pop	{r4, r5, r6}
   1265e:	4770      	bx	lr
   12660:	7a18      	ldrb	r0, [r3, #8]
   12662:	7219      	strb	r1, [r3, #8]
   12664:	7a59      	ldrb	r1, [r3, #9]
   12666:	725a      	strb	r2, [r3, #9]
   12668:	7a99      	ldrb	r1, [r3, #10]
   1266a:	729a      	strb	r2, [r3, #10]
   1266c:	7ada      	ldrb	r2, [r3, #11]
   1266e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   12672:	72da      	strb	r2, [r3, #11]
   12674:	2201      	movs	r2, #1
   12676:	4b04      	ldr	r3, [pc, #16]	; (12688 <ipc_trace_handler+0xc4>)
   12678:	701a      	strb	r2, [r3, #0]
   1267a:	e7ef      	b.n	1265c <ipc_trace_handler+0x98>
   1267c:	2000ce48 	.word	0x2000ce48
   12680:	2000ce3c 	.word	0x2000ce3c
   12684:	2000ce30 	.word	0x2000ce30
   12688:	2000ceab 	.word	0x2000ceab

0001268c <z_device_state_init>:
 *
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
   1268c:	b580      	push	{r7, lr}
   1268e:	b082      	sub	sp, #8
   12690:	af00      	add	r7, sp, #0
	STRUCT_SECTION_FOREACH(device, dev) {
   12692:	4b14      	ldr	r3, [pc, #80]	; (126e4 <z_device_state_init+0x58>)
   12694:	607b      	str	r3, [r7, #4]
   12696:	e005      	b.n	126a4 <z_device_state_init+0x18>
		z_object_init(dev);
   12698:	6878      	ldr	r0, [r7, #4]
   1269a:	f00b fe8e 	bl	1e3ba <z_object_init>
	STRUCT_SECTION_FOREACH(device, dev) {
   1269e:	687b      	ldr	r3, [r7, #4]
   126a0:	3314      	adds	r3, #20
   126a2:	607b      	str	r3, [r7, #4]
   126a4:	687b      	ldr	r3, [r7, #4]
   126a6:	4a10      	ldr	r2, [pc, #64]	; (126e8 <z_device_state_init+0x5c>)
   126a8:	4293      	cmp	r3, r2
   126aa:	d90c      	bls.n	126c6 <z_device_state_init+0x3a>
   126ac:	2317      	movs	r3, #23
   126ae:	4a0f      	ldr	r2, [pc, #60]	; (126ec <z_device_state_init+0x60>)
   126b0:	490f      	ldr	r1, [pc, #60]	; (126f0 <z_device_state_init+0x64>)
   126b2:	4810      	ldr	r0, [pc, #64]	; (126f4 <z_device_state_init+0x68>)
   126b4:	f007 fc7e 	bl	19fb4 <assert_print>
   126b8:	480f      	ldr	r0, [pc, #60]	; (126f8 <z_device_state_init+0x6c>)
   126ba:	f007 fc7b 	bl	19fb4 <assert_print>
   126be:	2117      	movs	r1, #23
   126c0:	480a      	ldr	r0, [pc, #40]	; (126ec <z_device_state_init+0x60>)
   126c2:	f007 fc67 	bl	19f94 <assert_post_action>
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	4a07      	ldr	r2, [pc, #28]	; (126e8 <z_device_state_init+0x5c>)
   126ca:	4293      	cmp	r3, r2
   126cc:	bf34      	ite	cc
   126ce:	2301      	movcc	r3, #1
   126d0:	2300      	movcs	r3, #0
   126d2:	b2db      	uxtb	r3, r3
   126d4:	2b00      	cmp	r3, #0
   126d6:	d1df      	bne.n	12698 <z_device_state_init+0xc>
	}
}
   126d8:	bf00      	nop
   126da:	bf00      	nop
   126dc:	3708      	adds	r7, #8
   126de:	46bd      	mov	sp, r7
   126e0:	bd80      	pop	{r7, pc}
   126e2:	bf00      	nop
   126e4:	0001f97c 	.word	0x0001f97c
   126e8:	0001f9e0 	.word	0x0001f9e0
   126ec:	00022b10 	.word	0x00022b10
   126f0:	00022b34 	.word	0x00022b34
   126f4:	00022b4c 	.word	0x00022b4c
   126f8:	00022b6c 	.word	0x00022b6c

000126fc <k_current_get>:
{
   126fc:	b580      	push	{r7, lr}
   126fe:	af00      	add	r7, sp, #0
	return z_tls_current;
   12700:	f00d f902 	bl	1f908 <__aeabi_read_tp>
   12704:	4603      	mov	r3, r0
   12706:	4a02      	ldr	r2, [pc, #8]	; (12710 <k_current_get+0x14>)
   12708:	589b      	ldr	r3, [r3, r2]
}
   1270a:	4618      	mov	r0, r3
   1270c:	bd80      	pop	{r7, pc}
   1270e:	bf00      	nop
   12710:	00000008 	.word	0x00000008

00012714 <z_log_minimal_level_to_char>:
{
   12714:	b480      	push	{r7}
   12716:	b083      	sub	sp, #12
   12718:	af00      	add	r7, sp, #0
   1271a:	6078      	str	r0, [r7, #4]
	switch (level) {
   1271c:	687b      	ldr	r3, [r7, #4]
   1271e:	3b01      	subs	r3, #1
   12720:	2b03      	cmp	r3, #3
   12722:	d813      	bhi.n	1274c <z_log_minimal_level_to_char+0x38>
   12724:	a201      	add	r2, pc, #4	; (adr r2, 1272c <z_log_minimal_level_to_char+0x18>)
   12726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1272a:	bf00      	nop
   1272c:	0001273d 	.word	0x0001273d
   12730:	00012741 	.word	0x00012741
   12734:	00012745 	.word	0x00012745
   12738:	00012749 	.word	0x00012749
		return 'E';
   1273c:	2345      	movs	r3, #69	; 0x45
   1273e:	e006      	b.n	1274e <z_log_minimal_level_to_char+0x3a>
		return 'W';
   12740:	2357      	movs	r3, #87	; 0x57
   12742:	e004      	b.n	1274e <z_log_minimal_level_to_char+0x3a>
		return 'I';
   12744:	2349      	movs	r3, #73	; 0x49
   12746:	e002      	b.n	1274e <z_log_minimal_level_to_char+0x3a>
		return 'D';
   12748:	2344      	movs	r3, #68	; 0x44
   1274a:	e000      	b.n	1274e <z_log_minimal_level_to_char+0x3a>
		return '?';
   1274c:	233f      	movs	r3, #63	; 0x3f
}
   1274e:	4618      	mov	r0, r3
   12750:	370c      	adds	r7, #12
   12752:	46bd      	mov	sp, r7
   12754:	bc80      	pop	{r7}
   12756:	4770      	bx	lr

00012758 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   12758:	b580      	push	{r7, lr}
   1275a:	b082      	sub	sp, #8
   1275c:	af00      	add	r7, sp, #0
   1275e:	6078      	str	r0, [r7, #4]
   12760:	6039      	str	r1, [r7, #0]
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   12762:	2303      	movs	r3, #3
   12764:	2b00      	cmp	r3, #0
   12766:	d007      	beq.n	12778 <k_sys_fatal_error_handler+0x20>
   12768:	2001      	movs	r0, #1
   1276a:	f7ff ffd3 	bl	12714 <z_log_minimal_level_to_char>
   1276e:	4603      	mov	r3, r0
   12770:	4619      	mov	r1, r3
   12772:	4803      	ldr	r0, [pc, #12]	; (12780 <k_sys_fatal_error_handler+0x28>)
   12774:	f007 fc41 	bl	19ffa <z_log_minimal_printk>
	arch_system_halt(reason);
   12778:	6878      	ldr	r0, [r7, #4]
   1277a:	f00b fe5e 	bl	1e43a <arch_system_halt>
   1277e:	bf00      	nop
   12780:	00022b8c 	.word	0x00022b8c

00012784 <thread_name_get>:
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
}
/* LCOV_EXCL_STOP */

static const char *thread_name_get(struct k_thread *thread)
{
   12784:	b580      	push	{r7, lr}
   12786:	b084      	sub	sp, #16
   12788:	af00      	add	r7, sp, #0
   1278a:	6078      	str	r0, [r7, #4]
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1278c:	687b      	ldr	r3, [r7, #4]
   1278e:	2b00      	cmp	r3, #0
   12790:	d004      	beq.n	1279c <thread_name_get+0x18>
   12792:	6878      	ldr	r0, [r7, #4]
   12794:	f00b ff81 	bl	1e69a <k_thread_name_get>
   12798:	4603      	mov	r3, r0
   1279a:	e000      	b.n	1279e <thread_name_get+0x1a>
   1279c:	2300      	movs	r3, #0
   1279e:	60fb      	str	r3, [r7, #12]

	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   127a0:	68fb      	ldr	r3, [r7, #12]
   127a2:	2b00      	cmp	r3, #0
   127a4:	d003      	beq.n	127ae <thread_name_get+0x2a>
   127a6:	68fb      	ldr	r3, [r7, #12]
   127a8:	781b      	ldrb	r3, [r3, #0]
   127aa:	2b00      	cmp	r3, #0
   127ac:	d101      	bne.n	127b2 <thread_name_get+0x2e>
		thread_name = "unknown";
   127ae:	4b03      	ldr	r3, [pc, #12]	; (127bc <thread_name_get+0x38>)
   127b0:	60fb      	str	r3, [r7, #12]
	}

	return thread_name;
   127b2:	68fb      	ldr	r3, [r7, #12]
}
   127b4:	4618      	mov	r0, r3
   127b6:	3710      	adds	r7, #16
   127b8:	46bd      	mov	sp, r7
   127ba:	bd80      	pop	{r7, pc}
   127bc:	00022ba0 	.word	0x00022ba0

000127c0 <reason_to_str>:

static const char *reason_to_str(unsigned int reason)
{
   127c0:	b480      	push	{r7}
   127c2:	b083      	sub	sp, #12
   127c4:	af00      	add	r7, sp, #0
   127c6:	6078      	str	r0, [r7, #4]
	switch (reason) {
   127c8:	687b      	ldr	r3, [r7, #4]
   127ca:	2b04      	cmp	r3, #4
   127cc:	d816      	bhi.n	127fc <reason_to_str+0x3c>
   127ce:	a201      	add	r2, pc, #4	; (adr r2, 127d4 <reason_to_str+0x14>)
   127d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   127d4:	000127e9 	.word	0x000127e9
   127d8:	000127ed 	.word	0x000127ed
   127dc:	000127f1 	.word	0x000127f1
   127e0:	000127f5 	.word	0x000127f5
   127e4:	000127f9 	.word	0x000127f9
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
   127e8:	4b07      	ldr	r3, [pc, #28]	; (12808 <reason_to_str+0x48>)
   127ea:	e008      	b.n	127fe <reason_to_str+0x3e>
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
   127ec:	4b07      	ldr	r3, [pc, #28]	; (1280c <reason_to_str+0x4c>)
   127ee:	e006      	b.n	127fe <reason_to_str+0x3e>
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   127f0:	4b07      	ldr	r3, [pc, #28]	; (12810 <reason_to_str+0x50>)
   127f2:	e004      	b.n	127fe <reason_to_str+0x3e>
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   127f4:	4b07      	ldr	r3, [pc, #28]	; (12814 <reason_to_str+0x54>)
   127f6:	e002      	b.n	127fe <reason_to_str+0x3e>
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   127f8:	4b07      	ldr	r3, [pc, #28]	; (12818 <reason_to_str+0x58>)
   127fa:	e000      	b.n	127fe <reason_to_str+0x3e>
	default:
		return "Unknown error";
   127fc:	4b07      	ldr	r3, [pc, #28]	; (1281c <reason_to_str+0x5c>)
	}
}
   127fe:	4618      	mov	r0, r3
   12800:	370c      	adds	r7, #12
   12802:	46bd      	mov	sp, r7
   12804:	bc80      	pop	{r7}
   12806:	4770      	bx	lr
   12808:	00022ba8 	.word	0x00022ba8
   1280c:	00022bb8 	.word	0x00022bb8
   12810:	00022bcc 	.word	0x00022bcc
   12814:	00022bdc 	.word	0x00022bdc
   12818:	00022be8 	.word	0x00022be8
   1281c:	00022bf8 	.word	0x00022bf8

00012820 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12820:	b5b0      	push	{r4, r5, r7, lr}
   12822:	b08e      	sub	sp, #56	; 0x38
   12824:	af02      	add	r7, sp, #8
   12826:	6078      	str	r0, [r7, #4]
   12828:	6039      	str	r1, [r7, #0]
	__asm__ volatile(
   1282a:	f04f 0320 	mov.w	r3, #32
   1282e:	f3ef 8211 	mrs	r2, BASEPRI
   12832:	f383 8812 	msr	BASEPRI_MAX, r3
   12836:	f3bf 8f6f 	isb	sy
   1283a:	627a      	str	r2, [r7, #36]	; 0x24
   1283c:	623b      	str	r3, [r7, #32]
	return key;
   1283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	/* We can't allow this code to be preempted, but don't need to
	 * synchronize between CPUs, so an arch-layer lock is
	 * appropriate.
	 */
	unsigned int key = arch_irq_lock();
   12840:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct k_thread *thread = IS_ENABLED(CONFIG_MULTITHREADING) ?
			k_current_get() : NULL;
   12842:	f7ff ff5b 	bl	126fc <k_current_get>
   12846:	62b8      	str	r0, [r7, #40]	; 0x28

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   12848:	2303      	movs	r3, #3
   1284a:	2b00      	cmp	r3, #0
   1284c:	d012      	beq.n	12874 <z_fatal_error+0x54>
   1284e:	2001      	movs	r0, #1
   12850:	f7ff ff60 	bl	12714 <z_log_minimal_level_to_char>
   12854:	4603      	mov	r3, r0
   12856:	461d      	mov	r5, r3
   12858:	6878      	ldr	r0, [r7, #4]
   1285a:	f7ff ffb1 	bl	127c0 <reason_to_str>
   1285e:	4604      	mov	r4, r0
   12860:	f00b fdfb 	bl	1e45a <get_cpu>
   12864:	4603      	mov	r3, r0
   12866:	9300      	str	r3, [sp, #0]
   12868:	4623      	mov	r3, r4
   1286a:	687a      	ldr	r2, [r7, #4]
   1286c:	4629      	mov	r1, r5
   1286e:	4835      	ldr	r0, [pc, #212]	; (12944 <z_fatal_error+0x124>)
   12870:	f007 fbc3 	bl	19ffa <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   12874:	683b      	ldr	r3, [r7, #0]
   12876:	2b00      	cmp	r3, #0
   12878:	d017      	beq.n	128aa <z_fatal_error+0x8a>
   1287a:	683b      	ldr	r3, [r7, #0]
   1287c:	61fb      	str	r3, [r7, #28]
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1287e:	69fb      	ldr	r3, [r7, #28]
   12880:	69db      	ldr	r3, [r3, #28]
   12882:	f3c3 0308 	ubfx	r3, r3, #0, #9
   12886:	2b00      	cmp	r3, #0
   12888:	bf14      	ite	ne
   1288a:	2301      	movne	r3, #1
   1288c:	2300      	moveq	r3, #0
   1288e:	b2db      	uxtb	r3, r3
   12890:	2b00      	cmp	r3, #0
   12892:	d00a      	beq.n	128aa <z_fatal_error+0x8a>
		LOG_ERR("Fault during interrupt handling\n");
   12894:	2303      	movs	r3, #3
   12896:	2b00      	cmp	r3, #0
   12898:	d007      	beq.n	128aa <z_fatal_error+0x8a>
   1289a:	2001      	movs	r0, #1
   1289c:	f7ff ff3a 	bl	12714 <z_log_minimal_level_to_char>
   128a0:	4603      	mov	r3, r0
   128a2:	4619      	mov	r1, r3
   128a4:	4828      	ldr	r0, [pc, #160]	; (12948 <z_fatal_error+0x128>)
   128a6:	f007 fba8 	bl	19ffa <z_log_minimal_printk>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   128aa:	2303      	movs	r3, #3
   128ac:	2b00      	cmp	r3, #0
   128ae:	d00d      	beq.n	128cc <z_fatal_error+0xac>
   128b0:	2001      	movs	r0, #1
   128b2:	f7ff ff2f 	bl	12714 <z_log_minimal_level_to_char>
   128b6:	4603      	mov	r3, r0
   128b8:	461c      	mov	r4, r3
   128ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   128bc:	f7ff ff62 	bl	12784 <thread_name_get>
   128c0:	4603      	mov	r3, r0
   128c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   128c4:	4621      	mov	r1, r4
   128c6:	4821      	ldr	r0, [pc, #132]	; (1294c <z_fatal_error+0x12c>)
   128c8:	f007 fb97 	bl	19ffa <z_log_minimal_printk>
		thread_name_get(thread));

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
   128cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   128ce:	6839      	ldr	r1, [r7, #0]
   128d0:	6878      	ldr	r0, [r7, #4]
   128d2:	f00b fda7 	bl	1e424 <coredump>
#endif

	k_sys_fatal_error_handler(reason, esf);
   128d6:	6839      	ldr	r1, [r7, #0]
   128d8:	6878      	ldr	r0, [r7, #4]
   128da:	f7ff ff3d 	bl	12758 <k_sys_fatal_error_handler>
		}
#endif /* CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	} else {
		/* Test mode */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
		if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   128de:	683b      	ldr	r3, [r7, #0]
   128e0:	2b00      	cmp	r3, #0
   128e2:	d015      	beq.n	12910 <z_fatal_error+0xf0>
   128e4:	683b      	ldr	r3, [r7, #0]
   128e6:	61bb      	str	r3, [r7, #24]
   128e8:	69bb      	ldr	r3, [r7, #24]
   128ea:	69db      	ldr	r3, [r3, #28]
   128ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
   128f0:	2b00      	cmp	r3, #0
   128f2:	bf14      	ite	ne
   128f4:	2301      	movne	r3, #1
   128f6:	2300      	moveq	r3, #0
   128f8:	b2db      	uxtb	r3, r3
   128fa:	2b00      	cmp	r3, #0
   128fc:	d008      	beq.n	12910 <z_fatal_error+0xf0>
   128fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12900:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   12902:	697b      	ldr	r3, [r7, #20]
   12904:	f383 8811 	msr	BASEPRI, r3
   12908:	f3bf 8f6f 	isb	sy
}
   1290c:	bf00      	nop
				arch_irq_unlock(key);
				return;
			}
#else
			arch_irq_unlock(key);
			return;
   1290e:	e016      	b.n	1293e <z_fatal_error+0x11e>
#endif /* CONFIG_STACK_SENTINEL */
		} else {
			/* Abort the thread only if the fault is not due to
			 * a spurious ISR handler triggered.
			 */
			if (reason == K_ERR_SPURIOUS_IRQ) {
   12910:	687b      	ldr	r3, [r7, #4]
   12912:	2b01      	cmp	r3, #1
   12914:	d108      	bne.n	12928 <z_fatal_error+0x108>
   12916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12918:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   1291a:	693b      	ldr	r3, [r7, #16]
   1291c:	f383 8811 	msr	BASEPRI, r3
   12920:	f3bf 8f6f 	isb	sy
}
   12924:	bf00      	nop
				arch_irq_unlock(key);
				return;
   12926:	e00a      	b.n	1293e <z_fatal_error+0x11e>
   12928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1292a:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   1292c:	68fb      	ldr	r3, [r7, #12]
   1292e:	f383 8811 	msr	BASEPRI, r3
   12932:	f3bf 8f6f 	isb	sy
}
   12936:	bf00      	nop
	}

	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
   12938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1293a:	f00b fd68 	bl	1e40e <k_thread_abort>
	}
}
   1293e:	3730      	adds	r7, #48	; 0x30
   12940:	46bd      	mov	sp, r7
   12942:	bdb0      	pop	{r4, r5, r7, pc}
   12944:	00022c08 	.word	0x00022c08
   12948:	00022c38 	.word	0x00022c38
   1294c:	00022c60 	.word	0x00022c60

00012950 <__NVIC_SetPriority>:
{
   12950:	b480      	push	{r7}
   12952:	b083      	sub	sp, #12
   12954:	af00      	add	r7, sp, #0
   12956:	4603      	mov	r3, r0
   12958:	6039      	str	r1, [r7, #0]
   1295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   1295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   12960:	2b00      	cmp	r3, #0
   12962:	db0a      	blt.n	1297a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12964:	683b      	ldr	r3, [r7, #0]
   12966:	b2da      	uxtb	r2, r3
   12968:	490c      	ldr	r1, [pc, #48]	; (1299c <__NVIC_SetPriority+0x4c>)
   1296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1296e:	0152      	lsls	r2, r2, #5
   12970:	b2d2      	uxtb	r2, r2
   12972:	440b      	add	r3, r1
   12974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   12978:	e00a      	b.n	12990 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1297a:	683b      	ldr	r3, [r7, #0]
   1297c:	b2da      	uxtb	r2, r3
   1297e:	4908      	ldr	r1, [pc, #32]	; (129a0 <__NVIC_SetPriority+0x50>)
   12980:	79fb      	ldrb	r3, [r7, #7]
   12982:	f003 030f 	and.w	r3, r3, #15
   12986:	3b04      	subs	r3, #4
   12988:	0152      	lsls	r2, r2, #5
   1298a:	b2d2      	uxtb	r2, r2
   1298c:	440b      	add	r3, r1
   1298e:	761a      	strb	r2, [r3, #24]
}
   12990:	bf00      	nop
   12992:	370c      	adds	r7, #12
   12994:	46bd      	mov	sp, r7
   12996:	bc80      	pop	{r7}
   12998:	4770      	bx	lr
   1299a:	bf00      	nop
   1299c:	e000e100 	.word	0xe000e100
   129a0:	e000ed00 	.word	0xe000ed00

000129a4 <z_dummy_thread_init>:
 * use it to properly store state, which will just be discarded.
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
   129a4:	b580      	push	{r7, lr}
   129a6:	b082      	sub	sp, #8
   129a8:	af00      	add	r7, sp, #0
   129aa:	6078      	str	r0, [r7, #4]
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   129ac:	687b      	ldr	r3, [r7, #4]
   129ae:	2201      	movs	r2, #1
   129b0:	735a      	strb	r2, [r3, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   129b2:	687b      	ldr	r3, [r7, #4]
   129b4:	2201      	movs	r2, #1
   129b6:	731a      	strb	r2, [r3, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   129b8:	687b      	ldr	r3, [r7, #4]
   129ba:	2200      	movs	r2, #0
   129bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	dummy_thread->stack_info.size = 0U;
   129c0:	687b      	ldr	r3, [r7, #4]
   129c2:	2200      	movs	r2, #0
   129c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
   129c8:	6878      	ldr	r0, [r7, #4]
   129ca:	f004 ff5b 	bl	17884 <k_thread_system_pool_assign>

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   129ce:	4a03      	ldr	r2, [pc, #12]	; (129dc <z_dummy_thread_init+0x38>)
   129d0:	687b      	ldr	r3, [r7, #4]
   129d2:	6093      	str	r3, [r2, #8]
}
   129d4:	bf00      	nop
   129d6:	3708      	adds	r7, #8
   129d8:	46bd      	mov	sp, r7
   129da:	bd80      	pop	{r7, pc}
   129dc:	2000ce4c 	.word	0x2000ce4c

000129e0 <z_bss_zero>:
 *
 * This routine clears the BSS region, so all bytes are 0.
 */
__boot_func
void z_bss_zero(void)
{
   129e0:	b580      	push	{r7, lr}
   129e2:	af00      	add	r7, sp, #0
		 * to see
		 */
		return;
	}

	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   129e4:	4a04      	ldr	r2, [pc, #16]	; (129f8 <z_bss_zero+0x18>)
   129e6:	4b05      	ldr	r3, [pc, #20]	; (129fc <z_bss_zero+0x1c>)
   129e8:	1ad3      	subs	r3, r2, r3
   129ea:	461a      	mov	r2, r3
   129ec:	2100      	movs	r1, #0
   129ee:	4803      	ldr	r0, [pc, #12]	; (129fc <z_bss_zero+0x1c>)
   129f0:	f00b fd86 	bl	1e500 <z_early_memset>
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	z_early_memset(&__gcov_bss_start, 0,
		       ((uintptr_t) &__gcov_bss_end - (uintptr_t) &__gcov_bss_start));
#endif
}
   129f4:	bd80      	pop	{r7, pc}
   129f6:	bf00      	nop
   129f8:	2000ceb0 	.word	0x2000ceb0
   129fc:	2000c768 	.word	0x2000c768

00012a00 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   12a00:	b580      	push	{r7, lr}
   12a02:	b086      	sub	sp, #24
   12a04:	af00      	add	r7, sp, #0
   12a06:	4603      	mov	r3, r0
   12a08:	71fb      	strb	r3, [r7, #7]
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   12a0a:	79fb      	ldrb	r3, [r7, #7]
   12a0c:	4a24      	ldr	r2, [pc, #144]	; (12aa0 <z_sys_init_run_level+0xa0>)
   12a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a12:	617b      	str	r3, [r7, #20]
   12a14:	e036      	b.n	12a84 <z_sys_init_run_level+0x84>
		const struct device *dev = entry->dev;
   12a16:	697b      	ldr	r3, [r7, #20]
   12a18:	685b      	ldr	r3, [r3, #4]
   12a1a:	60fb      	str	r3, [r7, #12]

		if (dev != NULL) {
   12a1c:	68fb      	ldr	r3, [r7, #12]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d02a      	beq.n	12a78 <z_sys_init_run_level+0x78>
			int rc = 0;
   12a22:	2300      	movs	r3, #0
   12a24:	613b      	str	r3, [r7, #16]

			if (entry->init_fn.dev != NULL) {
   12a26:	697b      	ldr	r3, [r7, #20]
   12a28:	681b      	ldr	r3, [r3, #0]
   12a2a:	2b00      	cmp	r3, #0
   12a2c:	d017      	beq.n	12a5e <z_sys_init_run_level+0x5e>
				rc = entry->init_fn.dev(dev);
   12a2e:	697b      	ldr	r3, [r7, #20]
   12a30:	681b      	ldr	r3, [r3, #0]
   12a32:	68f8      	ldr	r0, [r7, #12]
   12a34:	4798      	blx	r3
   12a36:	6138      	str	r0, [r7, #16]
				/* Mark device initialized. If initialization
				 * failed, record the error condition.
				 */
				if (rc != 0) {
   12a38:	693b      	ldr	r3, [r7, #16]
   12a3a:	2b00      	cmp	r3, #0
   12a3c:	d00f      	beq.n	12a5e <z_sys_init_run_level+0x5e>
					if (rc < 0) {
   12a3e:	693b      	ldr	r3, [r7, #16]
   12a40:	2b00      	cmp	r3, #0
   12a42:	da02      	bge.n	12a4a <z_sys_init_run_level+0x4a>
						rc = -rc;
   12a44:	693b      	ldr	r3, [r7, #16]
   12a46:	425b      	negs	r3, r3
   12a48:	613b      	str	r3, [r7, #16]
					}
					if (rc > UINT8_MAX) {
   12a4a:	693b      	ldr	r3, [r7, #16]
   12a4c:	2bff      	cmp	r3, #255	; 0xff
   12a4e:	dd01      	ble.n	12a54 <z_sys_init_run_level+0x54>
						rc = UINT8_MAX;
   12a50:	23ff      	movs	r3, #255	; 0xff
   12a52:	613b      	str	r3, [r7, #16]
					}
					dev->state->init_res = rc;
   12a54:	68fb      	ldr	r3, [r7, #12]
   12a56:	68db      	ldr	r3, [r3, #12]
   12a58:	693a      	ldr	r2, [r7, #16]
   12a5a:	b2d2      	uxtb	r2, r2
   12a5c:	701a      	strb	r2, [r3, #0]
				}
			}

			dev->state->initialized = true;
   12a5e:	68fb      	ldr	r3, [r7, #12]
   12a60:	68da      	ldr	r2, [r3, #12]
   12a62:	7853      	ldrb	r3, [r2, #1]
   12a64:	f043 0301 	orr.w	r3, r3, #1
   12a68:	7053      	strb	r3, [r2, #1]

			if (rc == 0) {
   12a6a:	693b      	ldr	r3, [r7, #16]
   12a6c:	2b00      	cmp	r3, #0
   12a6e:	d106      	bne.n	12a7e <z_sys_init_run_level+0x7e>
				/* Run automatic device runtime enablement */
				(void)pm_device_runtime_auto_enable(dev);
   12a70:	68f8      	ldr	r0, [r7, #12]
   12a72:	f00b fd3b 	bl	1e4ec <pm_device_runtime_auto_enable>
   12a76:	e002      	b.n	12a7e <z_sys_init_run_level+0x7e>
			}
		} else {
			(void)entry->init_fn.sys();
   12a78:	697b      	ldr	r3, [r7, #20]
   12a7a:	681b      	ldr	r3, [r3, #0]
   12a7c:	4798      	blx	r3
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   12a7e:	697b      	ldr	r3, [r7, #20]
   12a80:	3308      	adds	r3, #8
   12a82:	617b      	str	r3, [r7, #20]
   12a84:	79fb      	ldrb	r3, [r7, #7]
   12a86:	3301      	adds	r3, #1
   12a88:	4a05      	ldr	r2, [pc, #20]	; (12aa0 <z_sys_init_run_level+0xa0>)
   12a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a8e:	697a      	ldr	r2, [r7, #20]
   12a90:	429a      	cmp	r2, r3
   12a92:	d3c0      	bcc.n	12a16 <z_sys_init_run_level+0x16>
		}
	}
}
   12a94:	bf00      	nop
   12a96:	bf00      	nop
   12a98:	3718      	adds	r7, #24
   12a9a:	46bd      	mov	sp, r7
   12a9c:	bd80      	pop	{r7, pc}
   12a9e:	bf00      	nop
   12aa0:	2000c710 	.word	0x2000c710

00012aa4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   12aa4:	b580      	push	{r7, lr}
   12aa6:	b084      	sub	sp, #16
   12aa8:	af00      	add	r7, sp, #0
   12aaa:	60f8      	str	r0, [r7, #12]
   12aac:	60b9      	str	r1, [r7, #8]
   12aae:	607a      	str	r2, [r7, #4]
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   12ab0:	4b0c      	ldr	r3, [pc, #48]	; (12ae4 <bg_thread_main+0x40>)
   12ab2:	2201      	movs	r2, #1
   12ab4:	701a      	strb	r2, [r3, #0]

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   12ab6:	2003      	movs	r0, #3
   12ab8:	f7ff ffa2 	bl	12a00 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   12abc:	f00c fdb4 	bl	1f628 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   12ac0:	2004      	movs	r0, #4
   12ac2:	f7ff ff9d 	bl	12a00 <z_sys_init_run_level>

	z_init_static_threads();
   12ac6:	f000 fe89 	bl	137dc <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   12aca:	f7f6 fc2d 	bl	9328 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   12ace:	4b06      	ldr	r3, [pc, #24]	; (12ae8 <bg_thread_main+0x44>)
   12ad0:	7b1b      	ldrb	r3, [r3, #12]
   12ad2:	f023 0301 	bic.w	r3, r3, #1
   12ad6:	b2da      	uxtb	r2, r3
   12ad8:	4b03      	ldr	r3, [pc, #12]	; (12ae8 <bg_thread_main+0x44>)
   12ada:	731a      	strb	r2, [r3, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   12adc:	bf00      	nop
   12ade:	3710      	adds	r7, #16
   12ae0:	46bd      	mov	sp, r7
   12ae2:	bd80      	pop	{r7, pc}
   12ae4:	2000ceac 	.word	0x2000ceac
   12ae8:	2000c788 	.word	0x2000c788

00012aec <init_idle_thread>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   12aec:	b580      	push	{r7, lr}
   12aee:	b08c      	sub	sp, #48	; 0x30
   12af0:	af06      	add	r7, sp, #24
   12af2:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = &z_idle_threads[i];
   12af4:	687a      	ldr	r2, [r7, #4]
   12af6:	4613      	mov	r3, r2
   12af8:	009b      	lsls	r3, r3, #2
   12afa:	4413      	add	r3, r2
   12afc:	015b      	lsls	r3, r3, #5
   12afe:	4a16      	ldr	r2, [pc, #88]	; (12b58 <init_idle_thread+0x6c>)
   12b00:	4413      	add	r3, r2
   12b02:	617b      	str	r3, [r7, #20]
	k_thread_stack_t *stack = z_idle_stacks[i];
   12b04:	687a      	ldr	r2, [r7, #4]
   12b06:	4613      	mov	r3, r2
   12b08:	009b      	lsls	r3, r3, #2
   12b0a:	4413      	add	r3, r2
   12b0c:	019b      	lsls	r3, r3, #6
   12b0e:	4a13      	ldr	r2, [pc, #76]	; (12b5c <init_idle_thread+0x70>)
   12b10:	4413      	add	r3, r2
   12b12:	613b      	str	r3, [r7, #16]

#if CONFIG_MP_MAX_NUM_CPUS > 1
	char tname[8];
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = "idle";
   12b14:	4b12      	ldr	r3, [pc, #72]	; (12b60 <init_idle_thread+0x74>)
   12b16:	60fb      	str	r3, [r7, #12]
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   12b18:	687a      	ldr	r2, [r7, #4]
   12b1a:	4613      	mov	r3, r2
   12b1c:	009b      	lsls	r3, r3, #2
   12b1e:	4413      	add	r3, r2
   12b20:	009b      	lsls	r3, r3, #2
   12b22:	4a10      	ldr	r2, [pc, #64]	; (12b64 <init_idle_thread+0x78>)
   12b24:	4413      	add	r3, r2
	z_setup_new_thread(thread, stack,
   12b26:	68fa      	ldr	r2, [r7, #12]
   12b28:	9205      	str	r2, [sp, #20]
   12b2a:	2201      	movs	r2, #1
   12b2c:	9204      	str	r2, [sp, #16]
   12b2e:	220f      	movs	r2, #15
   12b30:	9203      	str	r2, [sp, #12]
   12b32:	2200      	movs	r2, #0
   12b34:	9202      	str	r2, [sp, #8]
   12b36:	2200      	movs	r2, #0
   12b38:	9201      	str	r2, [sp, #4]
   12b3a:	9300      	str	r3, [sp, #0]
   12b3c:	4b0a      	ldr	r3, [pc, #40]	; (12b68 <init_idle_thread+0x7c>)
   12b3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   12b42:	6939      	ldr	r1, [r7, #16]
   12b44:	6978      	ldr	r0, [r7, #20]
   12b46:	f000 fdc9 	bl	136dc <z_setup_new_thread>
			  NULL, NULL, K_IDLE_PRIO, K_ESSENTIAL,
			  tname);
	z_mark_thread_as_started(thread);
   12b4a:	6978      	ldr	r0, [r7, #20]
   12b4c:	f00b fcb8 	bl	1e4c0 <z_mark_thread_as_started>

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   12b50:	bf00      	nop
   12b52:	3718      	adds	r7, #24
   12b54:	46bd      	mov	sp, r7
   12b56:	bd80      	pop	{r7, pc}
   12b58:	2000c828 	.word	0x2000c828
   12b5c:	2000d2b0 	.word	0x2000d2b0
   12b60:	00022d20 	.word	0x00022d20
   12b64:	2000ce4c 	.word	0x2000ce4c
   12b68:	000139b5 	.word	0x000139b5

00012b6c <z_init_cpu>:

void z_init_cpu(int id)
{
   12b6c:	b580      	push	{r7, lr}
   12b6e:	b082      	sub	sp, #8
   12b70:	af00      	add	r7, sp, #0
   12b72:	6078      	str	r0, [r7, #4]
	init_idle_thread(id);
   12b74:	6878      	ldr	r0, [r7, #4]
   12b76:	f7ff ffb9 	bl	12aec <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   12b7a:	687a      	ldr	r2, [r7, #4]
   12b7c:	4613      	mov	r3, r2
   12b7e:	009b      	lsls	r3, r3, #2
   12b80:	4413      	add	r3, r2
   12b82:	015b      	lsls	r3, r3, #5
   12b84:	4a18      	ldr	r2, [pc, #96]	; (12be8 <z_init_cpu+0x7c>)
   12b86:	1899      	adds	r1, r3, r2
   12b88:	4818      	ldr	r0, [pc, #96]	; (12bec <z_init_cpu+0x80>)
   12b8a:	687a      	ldr	r2, [r7, #4]
   12b8c:	4613      	mov	r3, r2
   12b8e:	009b      	lsls	r3, r3, #2
   12b90:	4413      	add	r3, r2
   12b92:	009b      	lsls	r3, r3, #2
   12b94:	4403      	add	r3, r0
   12b96:	330c      	adds	r3, #12
   12b98:	6019      	str	r1, [r3, #0]
	_kernel.cpus[id].id = id;
   12b9a:	687b      	ldr	r3, [r7, #4]
   12b9c:	b2d8      	uxtb	r0, r3
   12b9e:	4913      	ldr	r1, [pc, #76]	; (12bec <z_init_cpu+0x80>)
   12ba0:	687a      	ldr	r2, [r7, #4]
   12ba2:	4613      	mov	r3, r2
   12ba4:	009b      	lsls	r3, r3, #2
   12ba6:	4413      	add	r3, r2
   12ba8:	009b      	lsls	r3, r3, #2
   12baa:	440b      	add	r3, r1
   12bac:	3310      	adds	r3, #16
   12bae:	4602      	mov	r2, r0
   12bb0:	701a      	strb	r2, [r3, #0]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	02db      	lsls	r3, r3, #11
   12bb6:	4a0e      	ldr	r2, [pc, #56]	; (12bf0 <z_init_cpu+0x84>)
   12bb8:	4413      	add	r3, r2
   12bba:	4618      	mov	r0, r3
   12bbc:	f00b fc76 	bl	1e4ac <Z_KERNEL_STACK_BUFFER>
   12bc0:	4603      	mov	r3, r0
   12bc2:	f503 6100 	add.w	r1, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
   12bc6:	4809      	ldr	r0, [pc, #36]	; (12bec <z_init_cpu+0x80>)
   12bc8:	687a      	ldr	r2, [r7, #4]
   12bca:	4613      	mov	r3, r2
   12bcc:	009b      	lsls	r3, r3, #2
   12bce:	4413      	add	r3, r2
   12bd0:	009b      	lsls	r3, r3, #2
   12bd2:	4403      	add	r3, r0
   12bd4:	3304      	adds	r3, #4
   12bd6:	6019      	str	r1, [r3, #0]

	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
   12bd8:	4806      	ldr	r0, [pc, #24]	; (12bf4 <z_init_cpu+0x88>)
   12bda:	f00b fc5a 	bl	1e492 <atomic_inc>
}
   12bde:	bf00      	nop
   12be0:	3708      	adds	r7, #8
   12be2:	46bd      	mov	sp, r7
   12be4:	bd80      	pop	{r7, pc}
   12be6:	bf00      	nop
   12be8:	2000c828 	.word	0x2000c828
   12bec:	2000ce4c 	.word	0x2000ce4c
   12bf0:	2000d3f0 	.word	0x2000d3f0
   12bf4:	2000ce6c 	.word	0x2000ce6c

00012bf8 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   12bf8:	b580      	push	{r7, lr}
   12bfa:	b088      	sub	sp, #32
   12bfc:	af06      	add	r7, sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   12bfe:	f003 fbfb 	bl	163f8 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   12c02:	4b12      	ldr	r3, [pc, #72]	; (12c4c <prepare_multithreading+0x54>)
   12c04:	4a12      	ldr	r2, [pc, #72]	; (12c50 <prepare_multithreading+0x58>)
   12c06:	615a      	str	r2, [r3, #20]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   12c08:	4b12      	ldr	r3, [pc, #72]	; (12c54 <prepare_multithreading+0x5c>)
   12c0a:	9305      	str	r3, [sp, #20]
   12c0c:	2301      	movs	r3, #1
   12c0e:	9304      	str	r3, [sp, #16]
   12c10:	2300      	movs	r3, #0
   12c12:	9303      	str	r3, [sp, #12]
   12c14:	2300      	movs	r3, #0
   12c16:	9302      	str	r3, [sp, #8]
   12c18:	2300      	movs	r3, #0
   12c1a:	9301      	str	r3, [sp, #4]
   12c1c:	2300      	movs	r3, #0
   12c1e:	9300      	str	r3, [sp, #0]
   12c20:	4b0d      	ldr	r3, [pc, #52]	; (12c58 <prepare_multithreading+0x60>)
   12c22:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12c26:	490d      	ldr	r1, [pc, #52]	; (12c5c <prepare_multithreading+0x64>)
   12c28:	4809      	ldr	r0, [pc, #36]	; (12c50 <prepare_multithreading+0x58>)
   12c2a:	f000 fd57 	bl	136dc <z_setup_new_thread>
   12c2e:	6078      	str	r0, [r7, #4]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
   12c30:	4807      	ldr	r0, [pc, #28]	; (12c50 <prepare_multithreading+0x58>)
   12c32:	f00b fc45 	bl	1e4c0 <z_mark_thread_as_started>
	z_ready_thread(&z_main_thread);
   12c36:	4806      	ldr	r0, [pc, #24]	; (12c50 <prepare_multithreading+0x58>)
   12c38:	f002 fa28 	bl	1508c <z_ready_thread>

	z_init_cpu(0);
   12c3c:	2000      	movs	r0, #0
   12c3e:	f7ff ff95 	bl	12b6c <z_init_cpu>

	return stack_ptr;
   12c42:	687b      	ldr	r3, [r7, #4]
}
   12c44:	4618      	mov	r0, r3
   12c46:	3708      	adds	r7, #8
   12c48:	46bd      	mov	sp, r7
   12c4a:	bd80      	pop	{r7, pc}
   12c4c:	2000ce4c 	.word	0x2000ce4c
   12c50:	2000c788 	.word	0x2000c788
   12c54:	00022d28 	.word	0x00022d28
   12c58:	00012aa5 	.word	0x00012aa5
   12c5c:	2000ceb0 	.word	0x2000ceb0

00012c60 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   12c60:	b580      	push	{r7, lr}
   12c62:	b082      	sub	sp, #8
   12c64:	af00      	add	r7, sp, #0
   12c66:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   12c68:	4a02      	ldr	r2, [pc, #8]	; (12c74 <switch_to_main_thread+0x14>)
   12c6a:	6879      	ldr	r1, [r7, #4]
   12c6c:	4802      	ldr	r0, [pc, #8]	; (12c78 <switch_to_main_thread+0x18>)
   12c6e:	f7f7 fcef 	bl	a650 <arch_switch_to_main_thread>
   12c72:	bf00      	nop
   12c74:	00012aa5 	.word	0x00012aa5
   12c78:	2000c788 	.word	0x2000c788

00012c7c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   12c7c:	b580      	push	{r7, lr}
   12c7e:	b0ac      	sub	sp, #176	; 0xb0
   12c80:	af00      	add	r7, sp, #0
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();
   12c82:	f00b fc2d 	bl	1e4e0 <gcov_static_init>

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   12c86:	2000      	movs	r0, #0
   12c88:	f7ff feba 	bl	12a00 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   12c8c:	4833      	ldr	r0, [pc, #204]	; (12d5c <z_cstart+0xe0>)
   12c8e:	f00b fc0d 	bl	1e4ac <Z_KERNEL_STACK_BUFFER>
   12c92:	4603      	mov	r3, r0
	uint32_t msp =
   12c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
   12c98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   12c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   12ca0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   12ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   12ca8:	f383 8808 	msr	MSP, r3
}
   12cac:	bf00      	nop
			   K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[0]);

	__set_MSP(msp);
#if defined(CONFIG_BUILTIN_STACK_GUARD)
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_MSPLIM((uint32_t)z_interrupt_stacks[0]);
   12cae:	4b2b      	ldr	r3, [pc, #172]	; (12d5c <z_cstart+0xe0>)
   12cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   12cb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   12cb8:	f383 880a 	msr	MSPLIM, r3
#endif
}
   12cbc:	bf00      	nop
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
#endif
#endif /* CONFIG_STACK_ALIGN_DOUBLE_WORD */
}
   12cbe:	bf00      	nop
static ALWAYS_INLINE void z_arm_exc_setup(void)
{
	/* PendSV is set to lowest priority, regardless of it being used.
	 * This is done as the IRQ is always enabled.
	 */
	NVIC_SetPriority(PendSV_IRQn, _EXC_PENDSV_PRIO);
   12cc0:	21ff      	movs	r1, #255	; 0xff
   12cc2:	f06f 0001 	mvn.w	r0, #1
   12cc6:	f7ff fe43 	bl	12950 <__NVIC_SetPriority>

#ifdef CONFIG_CPU_CORTEX_M_HAS_BASEPRI
	/* Note: SVCall IRQ priority level is left to default (0)
	 * for Cortex-M variants without BASEPRI (e.g. ARMv6-M).
	 */
	NVIC_SetPriority(SVCall_IRQn, _EXC_SVC_PRIO);
   12cca:	2100      	movs	r1, #0
   12ccc:	f06f 0004 	mvn.w	r0, #4
   12cd0:	f7ff fe3e 	bl	12950 <__NVIC_SetPriority>
#endif

#ifdef CONFIG_CPU_CORTEX_M_HAS_PROGRAMMABLE_FAULT_PRIOS
	NVIC_SetPriority(MemoryManagement_IRQn, _EXC_FAULT_PRIO);
   12cd4:	2100      	movs	r1, #0
   12cd6:	f06f 000b 	mvn.w	r0, #11
   12cda:	f7ff fe39 	bl	12950 <__NVIC_SetPriority>
	NVIC_SetPriority(BusFault_IRQn, _EXC_FAULT_PRIO);
   12cde:	2100      	movs	r1, #0
   12ce0:	f06f 000a 	mvn.w	r0, #10
   12ce4:	f7ff fe34 	bl	12950 <__NVIC_SetPriority>
	NVIC_SetPriority(UsageFault_IRQn, _EXC_FAULT_PRIO);
   12ce8:	2100      	movs	r1, #0
   12cea:	f06f 0009 	mvn.w	r0, #9
   12cee:	f7ff fe2f 	bl	12950 <__NVIC_SetPriority>
#if defined(CONFIG_CORTEX_M_DEBUG_MONITOR_HOOK)
	NVIC_SetPriority(DebugMonitor_IRQn, IRQ_PRIO_LOWEST);
#elif defined(CONFIG_CPU_CORTEX_M_HAS_DWT)
	NVIC_SetPriority(DebugMonitor_IRQn, _EXC_FAULT_PRIO);
   12cf2:	2100      	movs	r1, #0
   12cf4:	f06f 0003 	mvn.w	r0, #3
   12cf8:	f7ff fe2a 	bl	12950 <__NVIC_SetPriority>
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   12cfc:	4b18      	ldr	r3, [pc, #96]	; (12d60 <z_cstart+0xe4>)
   12cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12d00:	4a17      	ldr	r2, [pc, #92]	; (12d60 <z_cstart+0xe4>)
   12d02:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   12d06:	6253      	str	r3, [r2, #36]	; 0x24
	 * always enabled, so we must ensure the interrupt priority
	 * is set to a level lower than the kernel interrupts (for
	 * the assert mechanism to work properly) in case the SysTick
	 * interrupt is accidentally raised.
	 */
	NVIC_SetPriority(SysTick_IRQn, _EXC_IRQ_DEFAULT_PRIO);
   12d08:	2120      	movs	r1, #32
   12d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d0e:	f7ff fe1f 	bl	12950 <__NVIC_SetPriority>
#endif /* CPU_CORTEX_M_HAS_SYSTICK && ! CORTEX_M_SYSTICK */

}
   12d12:	bf00      	nop

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   12d14:	f7f8 fa28 	bl	b168 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   12d18:	f7f7 fa98 	bl	a24c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   12d1c:	4b10      	ldr	r3, [pc, #64]	; (12d60 <z_cstart+0xe4>)
   12d1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12d22:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   12d24:	4b0e      	ldr	r3, [pc, #56]	; (12d60 <z_cstart+0xe4>)
   12d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12d2a:	62da      	str	r2, [r3, #44]	; 0x2c
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12d2c:	bf00      	nop
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   12d2e:	f7f8 ff23 	bl	bb78 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   12d32:	f7f8 fb29 	bl	b388 <z_arm_configure_static_mpu_regions>
#endif /* CONFIG_ARM_MPU */
#if defined(CONFIG_ARM_AARCH32_MMU)
	z_arm_mmu_init();
#endif /* CONFIG_ARM_AARCH32_MMU */
}
   12d36:	bf00      	nop
	/* Note: The z_ready_thread() call in prepare_multithreading() requires
	 * a dummy thread even if CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN=y
	 */
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
   12d38:	463b      	mov	r3, r7
   12d3a:	4618      	mov	r0, r3
   12d3c:	f7ff fe32 	bl	129a4 <z_dummy_thread_init>
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   12d40:	f7ff fca4 	bl	1268c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   12d44:	2001      	movs	r0, #1
   12d46:	f7ff fe5b 	bl	12a00 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   12d4a:	2002      	movs	r0, #2
   12d4c:	f7ff fe58 	bl	12a00 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   12d50:	f7ff ff52 	bl	12bf8 <prepare_multithreading>
   12d54:	4603      	mov	r3, r0
   12d56:	4618      	mov	r0, r3
   12d58:	f7ff ff82 	bl	12c60 <switch_to_main_thread>
   12d5c:	2000d3f0 	.word	0x2000d3f0
   12d60:	e000ed00 	.word	0xe000ed00

00012d64 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   12d64:	b580      	push	{r7, lr}
   12d66:	b082      	sub	sp, #8
   12d68:	af00      	add	r7, sp, #0
	STRUCT_SECTION_FOREACH(k_heap, h) {
   12d6a:	4b16      	ldr	r3, [pc, #88]	; (12dc4 <statics_init+0x60>)
   12d6c:	607b      	str	r3, [r7, #4]
   12d6e:	e00a      	b.n	12d86 <statics_init+0x22>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   12d70:	687b      	ldr	r3, [r7, #4]
   12d72:	6859      	ldr	r1, [r3, #4]
   12d74:	687b      	ldr	r3, [r7, #4]
   12d76:	689b      	ldr	r3, [r3, #8]
   12d78:	461a      	mov	r2, r3
   12d7a:	6878      	ldr	r0, [r7, #4]
   12d7c:	f00b fbf9 	bl	1e572 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   12d80:	687b      	ldr	r3, [r7, #4]
   12d82:	3318      	adds	r3, #24
   12d84:	607b      	str	r3, [r7, #4]
   12d86:	687b      	ldr	r3, [r7, #4]
   12d88:	4a0f      	ldr	r2, [pc, #60]	; (12dc8 <statics_init+0x64>)
   12d8a:	4293      	cmp	r3, r2
   12d8c:	d90c      	bls.n	12da8 <statics_init+0x44>
   12d8e:	2318      	movs	r3, #24
   12d90:	4a0e      	ldr	r2, [pc, #56]	; (12dcc <statics_init+0x68>)
   12d92:	490f      	ldr	r1, [pc, #60]	; (12dd0 <statics_init+0x6c>)
   12d94:	480f      	ldr	r0, [pc, #60]	; (12dd4 <statics_init+0x70>)
   12d96:	f007 f90d 	bl	19fb4 <assert_print>
   12d9a:	480f      	ldr	r0, [pc, #60]	; (12dd8 <statics_init+0x74>)
   12d9c:	f007 f90a 	bl	19fb4 <assert_print>
   12da0:	2118      	movs	r1, #24
   12da2:	480a      	ldr	r0, [pc, #40]	; (12dcc <statics_init+0x68>)
   12da4:	f007 f8f6 	bl	19f94 <assert_post_action>
   12da8:	687b      	ldr	r3, [r7, #4]
   12daa:	4a07      	ldr	r2, [pc, #28]	; (12dc8 <statics_init+0x64>)
   12dac:	4293      	cmp	r3, r2
   12dae:	bf34      	ite	cc
   12db0:	2301      	movcc	r3, #1
   12db2:	2300      	movcs	r3, #0
   12db4:	b2db      	uxtb	r3, r3
   12db6:	2b00      	cmp	r3, #0
   12db8:	d1da      	bne.n	12d70 <statics_init+0xc>
		}
	}
	return 0;
   12dba:	2300      	movs	r3, #0
}
   12dbc:	4618      	mov	r0, r3
   12dbe:	3708      	adds	r7, #8
   12dc0:	46bd      	mov	sp, r7
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	2000c73c 	.word	0x2000c73c
   12dc8:	2000c754 	.word	0x2000c754
   12dcc:	00022d30 	.word	0x00022d30
   12dd0:	00022d54 	.word	0x00022d54
   12dd4:	00022d6c 	.word	0x00022d6c
   12dd8:	00022d8c 	.word	0x00022d8c

00012ddc <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   12ddc:	b580      	push	{r7, lr}
   12dde:	b09c      	sub	sp, #112	; 0x70
   12de0:	af02      	add	r7, sp, #8
   12de2:	60f8      	str	r0, [r7, #12]
   12de4:	60b9      	str	r1, [r7, #8]
   12de6:	607a      	str	r2, [r7, #4]
	k_timepoint_t end = sys_timepoint_calc(timeout);
   12de8:	f107 0120 	add.w	r1, r7, #32
   12dec:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
   12df0:	4608      	mov	r0, r1
   12df2:	f00c fa82 	bl	1f2fa <sys_timepoint_calc>
	void *ret = NULL;
   12df6:	2300      	movs	r3, #0
   12df8:	667b      	str	r3, [r7, #100]	; 0x64

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   12dfa:	68fb      	ldr	r3, [r7, #12]
   12dfc:	3314      	adds	r3, #20
   12dfe:	65bb      	str	r3, [r7, #88]	; 0x58
	__asm__ volatile(
   12e00:	f04f 0320 	mov.w	r3, #32
   12e04:	f3ef 8211 	mrs	r2, BASEPRI
   12e08:	f383 8812 	msr	BASEPRI_MAX, r3
   12e0c:	f3bf 8f6f 	isb	sy
   12e10:	657a      	str	r2, [r7, #84]	; 0x54
   12e12:	653b      	str	r3, [r7, #80]	; 0x50
	return key;
   12e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	k.key = arch_irq_lock();
   12e16:	613b      	str	r3, [r7, #16]
   12e18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   12e1c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   12e1e:	f000 fd7d 	bl	1391c <z_spin_lock_valid>
   12e22:	4603      	mov	r3, r0
   12e24:	f083 0301 	eor.w	r3, r3, #1
   12e28:	b2db      	uxtb	r3, r3
   12e2a:	2b00      	cmp	r3, #0
   12e2c:	d00d      	beq.n	12e4a <k_heap_aligned_alloc+0x6e>
   12e2e:	2372      	movs	r3, #114	; 0x72
   12e30:	4a66      	ldr	r2, [pc, #408]	; (12fcc <k_heap_aligned_alloc+0x1f0>)
   12e32:	4967      	ldr	r1, [pc, #412]	; (12fd0 <k_heap_aligned_alloc+0x1f4>)
   12e34:	4867      	ldr	r0, [pc, #412]	; (12fd4 <k_heap_aligned_alloc+0x1f8>)
   12e36:	f007 f8bd 	bl	19fb4 <assert_print>
   12e3a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   12e3c:	4866      	ldr	r0, [pc, #408]	; (12fd8 <k_heap_aligned_alloc+0x1fc>)
   12e3e:	f007 f8b9 	bl	19fb4 <assert_print>
   12e42:	2172      	movs	r1, #114	; 0x72
   12e44:	4861      	ldr	r0, [pc, #388]	; (12fcc <k_heap_aligned_alloc+0x1f0>)
   12e46:	f007 f8a5 	bl	19f94 <assert_post_action>
}
   12e4a:	bf00      	nop
   12e4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12e4e:	64bb      	str	r3, [r7, #72]	; 0x48
	z_spin_lock_set_owner(l);
   12e50:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   12e52:	f000 fd9b 	bl	1398c <z_spin_lock_set_owner>
}
   12e56:	bf00      	nop
	return k;
   12e58:	693b      	ldr	r3, [r7, #16]
   12e5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12e5c:	f3ef 8305 	mrs	r3, IPSR
   12e60:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
   12e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	return (__get_IPSR()) ? (true) : (false);
   12e64:	2b00      	cmp	r3, #0
   12e66:	bf14      	ite	ne
   12e68:	2301      	movne	r3, #1
   12e6a:	2300      	moveq	r3, #0
   12e6c:	b2db      	uxtb	r3, r3

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   12e6e:	2b00      	cmp	r3, #0
   12e70:	d016      	beq.n	12ea0 <k_heap_aligned_alloc+0xc4>
   12e72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
   12e76:	f04f 0000 	mov.w	r0, #0
   12e7a:	f04f 0100 	mov.w	r1, #0
   12e7e:	428b      	cmp	r3, r1
   12e80:	bf08      	it	eq
   12e82:	4282      	cmpeq	r2, r0
   12e84:	d00c      	beq.n	12ea0 <k_heap_aligned_alloc+0xc4>
   12e86:	234a      	movs	r3, #74	; 0x4a
   12e88:	4a54      	ldr	r2, [pc, #336]	; (12fdc <k_heap_aligned_alloc+0x200>)
   12e8a:	4955      	ldr	r1, [pc, #340]	; (12fe0 <k_heap_aligned_alloc+0x204>)
   12e8c:	4851      	ldr	r0, [pc, #324]	; (12fd4 <k_heap_aligned_alloc+0x1f8>)
   12e8e:	f007 f891 	bl	19fb4 <assert_print>
   12e92:	4854      	ldr	r0, [pc, #336]	; (12fe4 <k_heap_aligned_alloc+0x208>)
   12e94:	f007 f88e 	bl	19fb4 <assert_print>
   12e98:	214a      	movs	r1, #74	; 0x4a
   12e9a:	4850      	ldr	r0, [pc, #320]	; (12fdc <k_heap_aligned_alloc+0x200>)
   12e9c:	f007 f87a 	bl	19f94 <assert_post_action>

	bool blocked_alloc = false;
   12ea0:	2300      	movs	r3, #0
   12ea2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	while (ret == NULL) {
   12ea6:	e063      	b.n	12f70 <k_heap_aligned_alloc+0x194>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   12ea8:	68fb      	ldr	r3, [r7, #12]
   12eaa:	687a      	ldr	r2, [r7, #4]
   12eac:	68b9      	ldr	r1, [r7, #8]
   12eae:	4618      	mov	r0, r3
   12eb0:	f7f6 fb8c 	bl	95cc <sys_heap_aligned_alloc>
   12eb4:	6678      	str	r0, [r7, #100]	; 0x64

		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   12eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   12eb8:	2b00      	cmp	r3, #0
   12eba:	d15c      	bne.n	12f76 <k_heap_aligned_alloc+0x19a>
		    (ret != NULL) || K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   12ebc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
   12ec0:	f04f 0000 	mov.w	r0, #0
   12ec4:	f04f 0100 	mov.w	r1, #0
   12ec8:	428b      	cmp	r3, r1
   12eca:	bf08      	it	eq
   12ecc:	4282      	cmpeq	r2, r0
   12ece:	d052      	beq.n	12f76 <k_heap_aligned_alloc+0x19a>
			break;
		}

		if (!blocked_alloc) {
   12ed0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
   12ed4:	f083 0301 	eor.w	r3, r3, #1
   12ed8:	b2db      	uxtb	r3, r3
   12eda:	2b00      	cmp	r3, #0
   12edc:	d100      	bne.n	12ee0 <k_heap_aligned_alloc+0x104>
   12ede:	e002      	b.n	12ee6 <k_heap_aligned_alloc+0x10a>
			blocked_alloc = true;
   12ee0:	2301      	movs	r3, #1
   12ee2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		timeout = sys_timepoint_timeout(end);
   12ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   12eea:	f107 0070 	add.w	r0, r7, #112	; 0x70
   12eee:	f00c fa69 	bl	1f3c4 <sys_timepoint_timeout>
		(void) z_pend_curr(&h->lock, key, &h->wait_q, timeout);
   12ef2:	68fb      	ldr	r3, [r7, #12]
   12ef4:	f103 0014 	add.w	r0, r3, #20
   12ef8:	68fb      	ldr	r3, [r7, #12]
   12efa:	f103 010c 	add.w	r1, r3, #12
   12efe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
   12f02:	e9cd 2300 	strd	r2, r3, [sp]
   12f06:	460a      	mov	r2, r1
   12f08:	69f9      	ldr	r1, [r7, #28]
   12f0a:	f002 fcb3 	bl	15874 <z_pend_curr>
		key = k_spin_lock(&h->lock);
   12f0e:	68fb      	ldr	r3, [r7, #12]
   12f10:	3314      	adds	r3, #20
   12f12:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
   12f14:	f04f 0320 	mov.w	r3, #32
   12f18:	f3ef 8211 	mrs	r2, BASEPRI
   12f1c:	f383 8812 	msr	BASEPRI_MAX, r3
   12f20:	f3bf 8f6f 	isb	sy
   12f24:	643a      	str	r2, [r7, #64]	; 0x40
   12f26:	63fb      	str	r3, [r7, #60]	; 0x3c
	return key;
   12f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	k.key = arch_irq_lock();
   12f2a:	617b      	str	r3, [r7, #20]
   12f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   12f2e:	63bb      	str	r3, [r7, #56]	; 0x38
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   12f30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   12f32:	f000 fcf3 	bl	1391c <z_spin_lock_valid>
   12f36:	4603      	mov	r3, r0
   12f38:	f083 0301 	eor.w	r3, r3, #1
   12f3c:	b2db      	uxtb	r3, r3
   12f3e:	2b00      	cmp	r3, #0
   12f40:	d00d      	beq.n	12f5e <k_heap_aligned_alloc+0x182>
   12f42:	2372      	movs	r3, #114	; 0x72
   12f44:	4a21      	ldr	r2, [pc, #132]	; (12fcc <k_heap_aligned_alloc+0x1f0>)
   12f46:	4922      	ldr	r1, [pc, #136]	; (12fd0 <k_heap_aligned_alloc+0x1f4>)
   12f48:	4822      	ldr	r0, [pc, #136]	; (12fd4 <k_heap_aligned_alloc+0x1f8>)
   12f4a:	f007 f833 	bl	19fb4 <assert_print>
   12f4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   12f50:	4821      	ldr	r0, [pc, #132]	; (12fd8 <k_heap_aligned_alloc+0x1fc>)
   12f52:	f007 f82f 	bl	19fb4 <assert_print>
   12f56:	2172      	movs	r1, #114	; 0x72
   12f58:	481c      	ldr	r0, [pc, #112]	; (12fcc <k_heap_aligned_alloc+0x1f0>)
   12f5a:	f007 f81b 	bl	19f94 <assert_post_action>
}
   12f5e:	bf00      	nop
   12f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   12f62:	637b      	str	r3, [r7, #52]	; 0x34
	z_spin_lock_set_owner(l);
   12f64:	6b78      	ldr	r0, [r7, #52]	; 0x34
   12f66:	f000 fd11 	bl	1398c <z_spin_lock_set_owner>
}
   12f6a:	bf00      	nop
	return k;
   12f6c:	697b      	ldr	r3, [r7, #20]
   12f6e:	61fb      	str	r3, [r7, #28]
	while (ret == NULL) {
   12f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   12f72:	2b00      	cmp	r3, #0
   12f74:	d098      	beq.n	12ea8 <k_heap_aligned_alloc+0xcc>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
   12f76:	68fb      	ldr	r3, [r7, #12]
   12f78:	3314      	adds	r3, #20
   12f7a:	633b      	str	r3, [r7, #48]	; 0x30
   12f7c:	69fb      	ldr	r3, [r7, #28]
   12f7e:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12f82:	f000 fce7 	bl	13954 <z_spin_unlock_valid>
   12f86:	4603      	mov	r3, r0
   12f88:	f083 0301 	eor.w	r3, r3, #1
   12f8c:	b2db      	uxtb	r3, r3
   12f8e:	2b00      	cmp	r3, #0
   12f90:	d00d      	beq.n	12fae <k_heap_aligned_alloc+0x1d2>
   12f92:	23f0      	movs	r3, #240	; 0xf0
   12f94:	4a0d      	ldr	r2, [pc, #52]	; (12fcc <k_heap_aligned_alloc+0x1f0>)
   12f96:	4914      	ldr	r1, [pc, #80]	; (12fe8 <k_heap_aligned_alloc+0x20c>)
   12f98:	480e      	ldr	r0, [pc, #56]	; (12fd4 <k_heap_aligned_alloc+0x1f8>)
   12f9a:	f007 f80b 	bl	19fb4 <assert_print>
   12f9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
   12fa0:	4812      	ldr	r0, [pc, #72]	; (12fec <k_heap_aligned_alloc+0x210>)
   12fa2:	f007 f807 	bl	19fb4 <assert_print>
   12fa6:	21f0      	movs	r1, #240	; 0xf0
   12fa8:	4808      	ldr	r0, [pc, #32]	; (12fcc <k_heap_aligned_alloc+0x1f0>)
   12faa:	f006 fff3 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   12fae:	69bb      	ldr	r3, [r7, #24]
   12fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   12fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12fb4:	f383 8811 	msr	BASEPRI, r3
   12fb8:	f3bf 8f6f 	isb	sy
}
   12fbc:	bf00      	nop
}
   12fbe:	bf00      	nop
	return ret;
   12fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
   12fc2:	4618      	mov	r0, r3
   12fc4:	3768      	adds	r7, #104	; 0x68
   12fc6:	46bd      	mov	sp, r7
   12fc8:	bd80      	pop	{r7, pc}
   12fca:	bf00      	nop
   12fcc:	00022dac 	.word	0x00022dac
   12fd0:	00022ddc 	.word	0x00022ddc
   12fd4:	00022d6c 	.word	0x00022d6c
   12fd8:	00022df4 	.word	0x00022df4
   12fdc:	00022d30 	.word	0x00022d30
   12fe0:	00022e0c 	.word	0x00022e0c
   12fe4:	00022e54 	.word	0x00022e54
   12fe8:	00022e58 	.word	0x00022e58
   12fec:	00022e70 	.word	0x00022e70

00012ff0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   12ff0:	b580      	push	{r7, lr}
   12ff2:	b08c      	sub	sp, #48	; 0x30
   12ff4:	af00      	add	r7, sp, #0
   12ff6:	6078      	str	r0, [r7, #4]
   12ff8:	6039      	str	r1, [r7, #0]
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   12ffa:	687b      	ldr	r3, [r7, #4]
   12ffc:	3314      	adds	r3, #20
   12ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   13000:	f04f 0320 	mov.w	r3, #32
   13004:	f3ef 8211 	mrs	r2, BASEPRI
   13008:	f383 8812 	msr	BASEPRI_MAX, r3
   1300c:	f3bf 8f6f 	isb	sy
   13010:	62ba      	str	r2, [r7, #40]	; 0x28
   13012:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   13014:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
   13016:	60bb      	str	r3, [r7, #8]
   13018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1301a:	623b      	str	r3, [r7, #32]
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   1301c:	6a38      	ldr	r0, [r7, #32]
   1301e:	f000 fc7d 	bl	1391c <z_spin_lock_valid>
   13022:	4603      	mov	r3, r0
   13024:	f083 0301 	eor.w	r3, r3, #1
   13028:	b2db      	uxtb	r3, r3
   1302a:	2b00      	cmp	r3, #0
   1302c:	d00d      	beq.n	1304a <k_heap_free+0x5a>
   1302e:	2372      	movs	r3, #114	; 0x72
   13030:	4a29      	ldr	r2, [pc, #164]	; (130d8 <k_heap_free+0xe8>)
   13032:	492a      	ldr	r1, [pc, #168]	; (130dc <k_heap_free+0xec>)
   13034:	482a      	ldr	r0, [pc, #168]	; (130e0 <k_heap_free+0xf0>)
   13036:	f006 ffbd 	bl	19fb4 <assert_print>
   1303a:	6a39      	ldr	r1, [r7, #32]
   1303c:	4829      	ldr	r0, [pc, #164]	; (130e4 <k_heap_free+0xf4>)
   1303e:	f006 ffb9 	bl	19fb4 <assert_print>
   13042:	2172      	movs	r1, #114	; 0x72
   13044:	4824      	ldr	r0, [pc, #144]	; (130d8 <k_heap_free+0xe8>)
   13046:	f006 ffa5 	bl	19f94 <assert_post_action>
}
   1304a:	bf00      	nop
   1304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1304e:	61fb      	str	r3, [r7, #28]
	z_spin_lock_set_owner(l);
   13050:	69f8      	ldr	r0, [r7, #28]
   13052:	f000 fc9b 	bl	1398c <z_spin_lock_set_owner>
}
   13056:	bf00      	nop
	return k;
   13058:	68bb      	ldr	r3, [r7, #8]
   1305a:	613b      	str	r3, [r7, #16]

	sys_heap_free(&h->heap, mem);
   1305c:	687b      	ldr	r3, [r7, #4]
   1305e:	6839      	ldr	r1, [r7, #0]
   13060:	4618      	mov	r0, r3
   13062:	f7f6 fa55 	bl	9510 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   13066:	687b      	ldr	r3, [r7, #4]
   13068:	330c      	adds	r3, #12
   1306a:	4618      	mov	r0, r3
   1306c:	f00b ffd9 	bl	1f022 <z_unpend_all>
   13070:	4603      	mov	r3, r0
   13072:	2b00      	cmp	r3, #0
   13074:	d006      	beq.n	13084 <k_heap_free+0x94>
		z_reschedule(&h->lock, key);
   13076:	687b      	ldr	r3, [r7, #4]
   13078:	3314      	adds	r3, #20
   1307a:	6939      	ldr	r1, [r7, #16]
   1307c:	4618      	mov	r0, r3
   1307e:	f002 ffbb 	bl	15ff8 <z_reschedule>
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   13082:	e024      	b.n	130ce <k_heap_free+0xde>
		k_spin_unlock(&h->lock, key);
   13084:	687b      	ldr	r3, [r7, #4]
   13086:	3314      	adds	r3, #20
   13088:	61bb      	str	r3, [r7, #24]
   1308a:	693b      	ldr	r3, [r7, #16]
   1308c:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1308e:	69b8      	ldr	r0, [r7, #24]
   13090:	f000 fc60 	bl	13954 <z_spin_unlock_valid>
   13094:	4603      	mov	r3, r0
   13096:	f083 0301 	eor.w	r3, r3, #1
   1309a:	b2db      	uxtb	r3, r3
   1309c:	2b00      	cmp	r3, #0
   1309e:	d00d      	beq.n	130bc <k_heap_free+0xcc>
   130a0:	23f0      	movs	r3, #240	; 0xf0
   130a2:	4a0d      	ldr	r2, [pc, #52]	; (130d8 <k_heap_free+0xe8>)
   130a4:	4910      	ldr	r1, [pc, #64]	; (130e8 <k_heap_free+0xf8>)
   130a6:	480e      	ldr	r0, [pc, #56]	; (130e0 <k_heap_free+0xf0>)
   130a8:	f006 ff84 	bl	19fb4 <assert_print>
   130ac:	69b9      	ldr	r1, [r7, #24]
   130ae:	480f      	ldr	r0, [pc, #60]	; (130ec <k_heap_free+0xfc>)
   130b0:	f006 ff80 	bl	19fb4 <assert_print>
   130b4:	21f0      	movs	r1, #240	; 0xf0
   130b6:	4808      	ldr	r0, [pc, #32]	; (130d8 <k_heap_free+0xe8>)
   130b8:	f006 ff6c 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   130bc:	68fb      	ldr	r3, [r7, #12]
   130be:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   130c0:	697b      	ldr	r3, [r7, #20]
   130c2:	f383 8811 	msr	BASEPRI, r3
   130c6:	f3bf 8f6f 	isb	sy
}
   130ca:	bf00      	nop
}
   130cc:	bf00      	nop
}
   130ce:	bf00      	nop
   130d0:	3730      	adds	r7, #48	; 0x30
   130d2:	46bd      	mov	sp, r7
   130d4:	bd80      	pop	{r7, pc}
   130d6:	bf00      	nop
   130d8:	00022dac 	.word	0x00022dac
   130dc:	00022ddc 	.word	0x00022ddc
   130e0:	00022d6c 	.word	0x00022d6c
   130e4:	00022df4 	.word	0x00022df4
   130e8:	00022e58 	.word	0x00022e58
   130ec:	00022e70 	.word	0x00022e70

000130f0 <k_ms_to_ticks_ceil64>:
{
   130f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130f4:	b0bd      	sub	sp, #244	; 0xf4
   130f6:	af00      	add	r7, sp, #0
   130f8:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
   130fc:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
   13100:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
   13104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   13108:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   1310c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
   13114:	2301      	movs	r3, #1
   13116:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
   1311a:	2300      	movs	r3, #0
   1311c:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
   13120:	2301      	movs	r3, #1
   13122:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
   13126:	2300      	movs	r3, #0
   13128:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   1312c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
   13130:	2b00      	cmp	r3, #0
   13132:	d014      	beq.n	1315e <k_ms_to_ticks_ceil64+0x6e>
	bool mul_ratio = const_hz &&
   13134:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   13138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   1313c:	429a      	cmp	r2, r3
   1313e:	d20e      	bcs.n	1315e <k_ms_to_ticks_ceil64+0x6e>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   13140:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
   13144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   13148:	fbb1 f2f3 	udiv	r2, r1, r3
   1314c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   13150:	fb02 f303 	mul.w	r3, r2, r3
   13154:	1acb      	subs	r3, r1, r3
   13156:	2b00      	cmp	r3, #0
   13158:	d101      	bne.n	1315e <k_ms_to_ticks_ceil64+0x6e>
   1315a:	2301      	movs	r3, #1
   1315c:	e000      	b.n	13160 <k_ms_to_ticks_ceil64+0x70>
   1315e:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   13160:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
   13164:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   13168:	f003 0301 	and.w	r3, r3, #1
   1316c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   13170:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
   13174:	2b00      	cmp	r3, #0
   13176:	d014      	beq.n	131a2 <k_ms_to_ticks_ceil64+0xb2>
	bool div_ratio = const_hz &&
   13178:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   1317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   13180:	429a      	cmp	r2, r3
   13182:	d90e      	bls.n	131a2 <k_ms_to_ticks_ceil64+0xb2>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   13184:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
   13188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   1318c:	fbb1 f2f3 	udiv	r2, r1, r3
   13190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   13194:	fb02 f303 	mul.w	r3, r2, r3
   13198:	1acb      	subs	r3, r1, r3
   1319a:	2b00      	cmp	r3, #0
   1319c:	d101      	bne.n	131a2 <k_ms_to_ticks_ceil64+0xb2>
   1319e:	2301      	movs	r3, #1
   131a0:	e000      	b.n	131a4 <k_ms_to_ticks_ceil64+0xb4>
   131a2:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   131a4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
   131a8:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
   131ac:	f003 0301 	and.w	r3, r3, #1
   131b0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	if (from_hz == to_hz) {
   131b4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   131b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   131bc:	429a      	cmp	r2, r3
   131be:	d10c      	bne.n	131da <k_ms_to_ticks_ceil64+0xea>
		return result32 ? ((uint32_t)t) : t;
   131c0:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
   131c4:	2b00      	cmp	r3, #0
   131c6:	d005      	beq.n	131d4 <k_ms_to_ticks_ceil64+0xe4>
   131c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   131cc:	2200      	movs	r2, #0
   131ce:	461c      	mov	r4, r3
   131d0:	4615      	mov	r5, r2
   131d2:	e1de      	b.n	13592 <k_ms_to_ticks_ceil64+0x4a2>
   131d4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
   131d8:	e1db      	b.n	13592 <k_ms_to_ticks_ceil64+0x4a2>
	uint64_t off = 0;
   131da:	f04f 0200 	mov.w	r2, #0
   131de:	f04f 0300 	mov.w	r3, #0
   131e2:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (!mul_ratio) {
   131e6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   131ea:	f083 0301 	eor.w	r3, r3, #1
   131ee:	b2db      	uxtb	r3, r3
   131f0:	2b00      	cmp	r3, #0
   131f2:	d02a      	beq.n	1324a <k_ms_to_ticks_ceil64+0x15a>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   131f4:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
   131f8:	2b00      	cmp	r3, #0
   131fa:	d006      	beq.n	1320a <k_ms_to_ticks_ceil64+0x11a>
   131fc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   13200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   13204:	fbb2 f3f3 	udiv	r3, r2, r3
   13208:	e001      	b.n	1320e <k_ms_to_ticks_ceil64+0x11e>
   1320a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   1320e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		if (round_up) {
   13212:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
   13216:	2b00      	cmp	r3, #0
   13218:	d009      	beq.n	1322e <k_ms_to_ticks_ceil64+0x13e>
			off = rdivisor - 1U;
   1321a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   1321e:	3b01      	subs	r3, #1
   13220:	2200      	movs	r2, #0
   13222:	613b      	str	r3, [r7, #16]
   13224:	617a      	str	r2, [r7, #20]
   13226:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1322a:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		if (round_off) {
   1322e:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
   13232:	2b00      	cmp	r3, #0
   13234:	d009      	beq.n	1324a <k_ms_to_ticks_ceil64+0x15a>
			off = rdivisor / 2U;
   13236:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   1323a:	085b      	lsrs	r3, r3, #1
   1323c:	2200      	movs	r2, #0
   1323e:	60bb      	str	r3, [r7, #8]
   13240:	60fa      	str	r2, [r7, #12]
   13242:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   13246:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (div_ratio) {
   1324a:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
   1324e:	2b00      	cmp	r3, #0
   13250:	d038      	beq.n	132c4 <k_ms_to_ticks_ceil64+0x1d4>
		t += off;
   13252:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
   13256:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
   1325a:	1886      	adds	r6, r0, r2
   1325c:	603e      	str	r6, [r7, #0]
   1325e:	eb41 0303 	adc.w	r3, r1, r3
   13262:	607b      	str	r3, [r7, #4]
   13264:	e9d7 2300 	ldrd	r2, r3, [r7]
   13268:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		if (result32 && (t < BIT64(32))) {
   1326c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
   13270:	2b00      	cmp	r3, #0
   13272:	d011      	beq.n	13298 <k_ms_to_ticks_ceil64+0x1a8>
   13274:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
   13278:	2b01      	cmp	r3, #1
   1327a:	d20d      	bcs.n	13298 <k_ms_to_ticks_ceil64+0x1a8>
			return ((uint32_t)t) / (from_hz / to_hz);
   1327c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
   13280:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
   13284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   13288:	fbb1 f3f3 	udiv	r3, r1, r3
   1328c:	fbb2 f3f3 	udiv	r3, r2, r3
   13290:	2200      	movs	r2, #0
   13292:	461c      	mov	r4, r3
   13294:	4615      	mov	r5, r2
   13296:	e17c      	b.n	13592 <k_ms_to_ticks_ceil64+0x4a2>
			return t / ((uint64_t)from_hz / to_hz);
   13298:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   1329c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   132a0:	fbb2 f3f3 	udiv	r3, r2, r3
   132a4:	2200      	movs	r2, #0
   132a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   132aa:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
   132ae:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
   132b2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
   132b6:	f7f4 ff45 	bl	8144 <__aeabi_uldivmod>
   132ba:	4602      	mov	r2, r0
   132bc:	460b      	mov	r3, r1
   132be:	4614      	mov	r4, r2
   132c0:	461d      	mov	r5, r3
   132c2:	e166      	b.n	13592 <k_ms_to_ticks_ceil64+0x4a2>
	} else if (mul_ratio) {
   132c4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   132c8:	2b00      	cmp	r3, #0
   132ca:	d031      	beq.n	13330 <k_ms_to_ticks_ceil64+0x240>
		if (result32) {
   132cc:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
   132d0:	2b00      	cmp	r3, #0
   132d2:	d00d      	beq.n	132f0 <k_ms_to_ticks_ceil64+0x200>
			return ((uint32_t)t) * (to_hz / from_hz);
   132d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   132d8:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
   132dc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   132e0:	fbb1 f2f2 	udiv	r2, r1, r2
   132e4:	fb02 f303 	mul.w	r3, r2, r3
   132e8:	2200      	movs	r2, #0
   132ea:	461c      	mov	r4, r3
   132ec:	4615      	mov	r5, r2
   132ee:	e150      	b.n	13592 <k_ms_to_ticks_ceil64+0x4a2>
			return t * ((uint64_t)to_hz / from_hz);
   132f0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
   132f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   132f8:	fbb2 f3f3 	udiv	r3, r2, r3
   132fc:	2200      	movs	r2, #0
   132fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   13302:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
   13306:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   1330a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
   1330e:	464a      	mov	r2, r9
   13310:	fb02 f203 	mul.w	r2, r2, r3
   13314:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   13318:	4641      	mov	r1, r8
   1331a:	fb01 f303 	mul.w	r3, r1, r3
   1331e:	4413      	add	r3, r2
   13320:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
   13324:	4641      	mov	r1, r8
   13326:	fba2 4501 	umull	r4, r5, r2, r1
   1332a:	442b      	add	r3, r5
   1332c:	461d      	mov	r5, r3
   1332e:	e130      	b.n	13592 <k_ms_to_ticks_ceil64+0x4a2>
		if (result32) {
   13330:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
   13334:	2b00      	cmp	r3, #0
   13336:	d035      	beq.n	133a4 <k_ms_to_ticks_ceil64+0x2b4>
			return (uint32_t)((t * to_hz + off) / from_hz);
   13338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   1333c:	2200      	movs	r2, #0
   1333e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   13342:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
   13346:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   1334a:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
   1334e:	465a      	mov	r2, fp
   13350:	fb02 f203 	mul.w	r2, r2, r3
   13354:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   13358:	4651      	mov	r1, sl
   1335a:	fb01 f303 	mul.w	r3, r1, r3
   1335e:	4413      	add	r3, r2
   13360:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
   13364:	4651      	mov	r1, sl
   13366:	fba2 8901 	umull	r8, r9, r2, r1
   1336a:	444b      	add	r3, r9
   1336c:	4699      	mov	r9, r3
   1336e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
   13372:	eb18 0102 	adds.w	r1, r8, r2
   13376:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
   1337a:	eb49 0303 	adc.w	r3, r9, r3
   1337e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   13386:	2200      	movs	r2, #0
   13388:	67bb      	str	r3, [r7, #120]	; 0x78
   1338a:	67fa      	str	r2, [r7, #124]	; 0x7c
   1338c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
   13390:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
   13394:	f7f4 fed6 	bl	8144 <__aeabi_uldivmod>
   13398:	4602      	mov	r2, r0
   1339a:	460b      	mov	r3, r1
   1339c:	2300      	movs	r3, #0
   1339e:	4614      	mov	r4, r2
   133a0:	461d      	mov	r5, r3
   133a2:	e0f6      	b.n	13592 <k_ms_to_ticks_ceil64+0x4a2>
		} else if (const_hz && Z_TMCVT_USE_FAST_ALGO(from_hz, to_hz)) {
   133a4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
   133a8:	2b00      	cmp	r3, #0
   133aa:	f000 8082 	beq.w	134b2 <k_ms_to_ticks_ceil64+0x3c2>
   133ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   133b2:	2200      	movs	r2, #0
   133b4:	673b      	str	r3, [r7, #112]	; 0x70
   133b6:	677a      	str	r2, [r7, #116]	; 0x74
   133b8:	4b7a      	ldr	r3, [pc, #488]	; (135a4 <k_ms_to_ticks_ceil64+0x4b4>)
   133ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
   133be:	464a      	mov	r2, r9
   133c0:	fb03 f202 	mul.w	r2, r3, r2
   133c4:	2300      	movs	r3, #0
   133c6:	4641      	mov	r1, r8
   133c8:	fb01 f303 	mul.w	r3, r1, r3
   133cc:	441a      	add	r2, r3
   133ce:	4b75      	ldr	r3, [pc, #468]	; (135a4 <k_ms_to_ticks_ceil64+0x4b4>)
   133d0:	4641      	mov	r1, r8
   133d2:	fba1 ab03 	umull	sl, fp, r1, r3
   133d6:	eb02 030b 	add.w	r3, r2, fp
   133da:	469b      	mov	fp, r3
   133dc:	f1ba 0302 	subs.w	r3, sl, #2
   133e0:	66bb      	str	r3, [r7, #104]	; 0x68
   133e2:	f14b 0300 	adc.w	r3, fp, #0
   133e6:	66fb      	str	r3, [r7, #108]	; 0x6c
   133e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   133ec:	f04f 0300 	mov.w	r3, #0
   133f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   133f4:	f7f4 fea6 	bl	8144 <__aeabi_uldivmod>
   133f8:	4602      	mov	r2, r0
   133fa:	460b      	mov	r3, r1
   133fc:	4610      	mov	r0, r2
   133fe:	4619      	mov	r1, r3
   13400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   13404:	2200      	movs	r2, #0
   13406:	663b      	str	r3, [r7, #96]	; 0x60
   13408:	667a      	str	r2, [r7, #100]	; 0x64
   1340a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
   1340e:	4643      	mov	r3, r8
   13410:	fb03 f201 	mul.w	r2, r3, r1
   13414:	464b      	mov	r3, r9
   13416:	fb00 f303 	mul.w	r3, r0, r3
   1341a:	4413      	add	r3, r2
   1341c:	4642      	mov	r2, r8
   1341e:	fba0 2102 	umull	r2, r1, r0, r2
   13422:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
   13426:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
   1342a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
   1342e:	4413      	add	r3, r2
   13430:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   13434:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   13438:	2b01      	cmp	r3, #1
   1343a:	d23a      	bcs.n	134b2 <k_ms_to_ticks_ceil64+0x3c2>
			return ((t * to_hz + off) / from_hz);
   1343c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   13440:	2200      	movs	r2, #0
   13442:	65bb      	str	r3, [r7, #88]	; 0x58
   13444:	65fa      	str	r2, [r7, #92]	; 0x5c
   13446:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   1344a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
   1344e:	462a      	mov	r2, r5
   13450:	fb02 f203 	mul.w	r2, r2, r3
   13454:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   13458:	4621      	mov	r1, r4
   1345a:	fb01 f303 	mul.w	r3, r1, r3
   1345e:	4413      	add	r3, r2
   13460:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
   13464:	4621      	mov	r1, r4
   13466:	fba2 2101 	umull	r2, r1, r2, r1
   1346a:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
   1346e:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
   13472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   13476:	4413      	add	r3, r2
   13478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
   1347c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
   13480:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
   13484:	4621      	mov	r1, r4
   13486:	1889      	adds	r1, r1, r2
   13488:	6539      	str	r1, [r7, #80]	; 0x50
   1348a:	4629      	mov	r1, r5
   1348c:	eb43 0101 	adc.w	r1, r3, r1
   13490:	6579      	str	r1, [r7, #84]	; 0x54
   13492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   13496:	2200      	movs	r2, #0
   13498:	64bb      	str	r3, [r7, #72]	; 0x48
   1349a:	64fa      	str	r2, [r7, #76]	; 0x4c
   1349c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   134a0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
   134a4:	f7f4 fe4e 	bl	8144 <__aeabi_uldivmod>
   134a8:	4602      	mov	r2, r0
   134aa:	460b      	mov	r3, r1
   134ac:	4614      	mov	r4, r2
   134ae:	461d      	mov	r5, r3
   134b0:	e06f      	b.n	13592 <k_ms_to_ticks_ceil64+0x4a2>
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
   134b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   134b6:	2200      	movs	r2, #0
   134b8:	643b      	str	r3, [r7, #64]	; 0x40
   134ba:	647a      	str	r2, [r7, #68]	; 0x44
   134bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
   134c0:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
   134c4:	f7f4 fe3e 	bl	8144 <__aeabi_uldivmod>
   134c8:	4602      	mov	r2, r0
   134ca:	460b      	mov	r3, r1
   134cc:	4610      	mov	r0, r2
   134ce:	4619      	mov	r1, r3
   134d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   134d4:	2200      	movs	r2, #0
   134d6:	63bb      	str	r3, [r7, #56]	; 0x38
   134d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   134da:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
   134de:	4643      	mov	r3, r8
   134e0:	fb03 f201 	mul.w	r2, r3, r1
   134e4:	464b      	mov	r3, r9
   134e6:	fb00 f303 	mul.w	r3, r0, r3
   134ea:	4413      	add	r3, r2
   134ec:	4642      	mov	r2, r8
   134ee:	fba0 2102 	umull	r2, r1, r0, r2
   134f2:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
   134f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
   134fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   134fe:	4413      	add	r3, r2
   13500:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   13504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   13508:	2200      	movs	r2, #0
   1350a:	633b      	str	r3, [r7, #48]	; 0x30
   1350c:	637a      	str	r2, [r7, #52]	; 0x34
   1350e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
   13512:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   13516:	f7f4 fe15 	bl	8144 <__aeabi_uldivmod>
   1351a:	4610      	mov	r0, r2
   1351c:	4619      	mov	r1, r3
   1351e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   13522:	2200      	movs	r2, #0
   13524:	62bb      	str	r3, [r7, #40]	; 0x28
   13526:	62fa      	str	r2, [r7, #44]	; 0x2c
   13528:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
   1352c:	4643      	mov	r3, r8
   1352e:	fb03 f201 	mul.w	r2, r3, r1
   13532:	464b      	mov	r3, r9
   13534:	fb00 f303 	mul.w	r3, r0, r3
   13538:	4413      	add	r3, r2
   1353a:	4642      	mov	r2, r8
   1353c:	fba0 2102 	umull	r2, r1, r0, r2
   13540:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
   13544:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
   13548:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1354c:	4413      	add	r3, r2
   1354e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   13552:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
   13556:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
   1355a:	4641      	mov	r1, r8
   1355c:	1889      	adds	r1, r1, r2
   1355e:	6239      	str	r1, [r7, #32]
   13560:	4649      	mov	r1, r9
   13562:	eb43 0101 	adc.w	r1, r3, r1
   13566:	6279      	str	r1, [r7, #36]	; 0x24
   13568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   1356c:	2200      	movs	r2, #0
   1356e:	61bb      	str	r3, [r7, #24]
   13570:	61fa      	str	r2, [r7, #28]
   13572:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   13576:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   1357a:	f7f4 fde3 	bl	8144 <__aeabi_uldivmod>
   1357e:	4602      	mov	r2, r0
   13580:	460b      	mov	r3, r1
   13582:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
   13586:	4641      	mov	r1, r8
   13588:	188c      	adds	r4, r1, r2
   1358a:	4649      	mov	r1, r9
   1358c:	eb43 0101 	adc.w	r1, r3, r1
   13590:	460d      	mov	r5, r1
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, false, true, false);
   13592:	4622      	mov	r2, r4
   13594:	462b      	mov	r3, r5
}
   13596:	4610      	mov	r0, r2
   13598:	4619      	mov	r1, r3
   1359a:	37f4      	adds	r7, #244	; 0xf4
   1359c:	46bd      	mov	sp, r7
   1359e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135a2:	bf00      	nop
   135a4:	01e13380 	.word	0x01e13380

000135a8 <z_add_thread_timeout>:
}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
   135a8:	b580      	push	{r7, lr}
   135aa:	b084      	sub	sp, #16
   135ac:	af00      	add	r7, sp, #0
   135ae:	60f8      	str	r0, [r7, #12]
   135b0:	e9c7 2300 	strd	r2, r3, [r7]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   135b4:	68fb      	ldr	r3, [r7, #12]
   135b6:	f103 0018 	add.w	r0, r3, #24
   135ba:	e9d7 2300 	ldrd	r2, r3, [r7]
   135be:	4903      	ldr	r1, [pc, #12]	; (135cc <z_add_thread_timeout+0x24>)
   135c0:	f003 fb6c 	bl	16c9c <z_add_timeout>
}
   135c4:	bf00      	nop
   135c6:	3710      	adds	r7, #16
   135c8:	46bd      	mov	sp, r7
   135ca:	bd80      	pop	{r7, pc}
   135cc:	0001ef57 	.word	0x0001ef57

000135d0 <z_is_idle_thread_entry>:
{
	(void) z_reschedule_irqlock(arch_irq_lock());
}

static inline bool z_is_idle_thread_entry(void *entry_point)
{
   135d0:	b480      	push	{r7}
   135d2:	b083      	sub	sp, #12
   135d4:	af00      	add	r7, sp, #0
   135d6:	6078      	str	r0, [r7, #4]
	return entry_point == idle;
   135d8:	687b      	ldr	r3, [r7, #4]
   135da:	4a05      	ldr	r2, [pc, #20]	; (135f0 <z_is_idle_thread_entry+0x20>)
   135dc:	4293      	cmp	r3, r2
   135de:	bf0c      	ite	eq
   135e0:	2301      	moveq	r3, #1
   135e2:	2300      	movne	r3, #0
   135e4:	b2db      	uxtb	r3, r3
}
   135e6:	4618      	mov	r0, r3
   135e8:	370c      	adds	r7, #12
   135ea:	46bd      	mov	sp, r7
   135ec:	bc80      	pop	{r7}
   135ee:	4770      	bx	lr
   135f0:	000139b5 	.word	0x000139b5

000135f4 <z_log_minimal_level_to_char>:
{
   135f4:	b480      	push	{r7}
   135f6:	b083      	sub	sp, #12
   135f8:	af00      	add	r7, sp, #0
   135fa:	6078      	str	r0, [r7, #4]
	switch (level) {
   135fc:	687b      	ldr	r3, [r7, #4]
   135fe:	3b01      	subs	r3, #1
   13600:	2b03      	cmp	r3, #3
   13602:	d813      	bhi.n	1362c <z_log_minimal_level_to_char+0x38>
   13604:	a201      	add	r2, pc, #4	; (adr r2, 1360c <z_log_minimal_level_to_char+0x18>)
   13606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1360a:	bf00      	nop
   1360c:	0001361d 	.word	0x0001361d
   13610:	00013621 	.word	0x00013621
   13614:	00013625 	.word	0x00013625
   13618:	00013629 	.word	0x00013629
		return 'E';
   1361c:	2345      	movs	r3, #69	; 0x45
   1361e:	e006      	b.n	1362e <z_log_minimal_level_to_char+0x3a>
		return 'W';
   13620:	2357      	movs	r3, #87	; 0x57
   13622:	e004      	b.n	1362e <z_log_minimal_level_to_char+0x3a>
		return 'I';
   13624:	2349      	movs	r3, #73	; 0x49
   13626:	e002      	b.n	1362e <z_log_minimal_level_to_char+0x3a>
		return 'D';
   13628:	2344      	movs	r3, #68	; 0x44
   1362a:	e000      	b.n	1362e <z_log_minimal_level_to_char+0x3a>
		return '?';
   1362c:	233f      	movs	r3, #63	; 0x3f
}
   1362e:	4618      	mov	r0, r3
   13630:	370c      	adds	r7, #12
   13632:	46bd      	mov	sp, r7
   13634:	bc80      	pop	{r7}
   13636:	4770      	bx	lr

00013638 <setup_thread_stack>:
#endif /* CONFIG_STACK_GROWS_UP */
#endif /* CONFIG_STACK_POINTER_RANDOM */

static char *setup_thread_stack(struct k_thread *new_thread,
				k_thread_stack_t *stack, size_t stack_size)
{
   13638:	b580      	push	{r7, lr}
   1363a:	b08e      	sub	sp, #56	; 0x38
   1363c:	af04      	add	r7, sp, #16
   1363e:	60f8      	str	r0, [r7, #12]
   13640:	60b9      	str	r1, [r7, #8]
   13642:	607a      	str	r2, [r7, #4]
	size_t stack_obj_size, stack_buf_size;
	char *stack_ptr, *stack_buf_start;
	size_t delta = 0;
   13644:	2300      	movs	r3, #0
   13646:	627b      	str	r3, [r7, #36]	; 0x24
		stack_buf_size = stack_obj_size - K_THREAD_STACK_RESERVED;
	} else
#endif
	{
		/* Object cannot host a user mode thread */
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   13648:	687b      	ldr	r3, [r7, #4]
   1364a:	3307      	adds	r3, #7
   1364c:	f023 0307 	bic.w	r3, r3, #7
   13650:	623b      	str	r3, [r7, #32]
		stack_buf_start = Z_KERNEL_STACK_BUFFER(stack);
   13652:	68b8      	ldr	r0, [r7, #8]
   13654:	f00a ffd6 	bl	1e604 <Z_KERNEL_STACK_BUFFER>
   13658:	61f8      	str	r0, [r7, #28]
		stack_buf_size = stack_obj_size - K_KERNEL_STACK_RESERVED;
   1365a:	6a3b      	ldr	r3, [r7, #32]
   1365c:	61bb      	str	r3, [r7, #24]
	}

	/* Initial stack pointer at the high end of the stack object, may
	 * be reduced later in this function by TLS or random offset
	 */
	stack_ptr = (char *)stack + stack_obj_size;
   1365e:	68ba      	ldr	r2, [r7, #8]
   13660:	6a3b      	ldr	r3, [r7, #32]
   13662:	4413      	add	r3, r2
   13664:	617b      	str	r3, [r7, #20]

	LOG_DBG("stack %p for thread %p: obj_size=%zu buf_start=%p "
   13666:	2303      	movs	r3, #3
   13668:	2b03      	cmp	r3, #3
   1366a:	d911      	bls.n	13690 <setup_thread_stack+0x58>
   1366c:	2004      	movs	r0, #4
   1366e:	f7ff ffc1 	bl	135f4 <z_log_minimal_level_to_char>
   13672:	4603      	mov	r3, r0
   13674:	4619      	mov	r1, r3
   13676:	697b      	ldr	r3, [r7, #20]
   13678:	9303      	str	r3, [sp, #12]
   1367a:	69bb      	ldr	r3, [r7, #24]
   1367c:	9302      	str	r3, [sp, #8]
   1367e:	69fb      	ldr	r3, [r7, #28]
   13680:	9301      	str	r3, [sp, #4]
   13682:	6a3b      	ldr	r3, [r7, #32]
   13684:	9300      	str	r3, [sp, #0]
   13686:	68fb      	ldr	r3, [r7, #12]
   13688:	68ba      	ldr	r2, [r7, #8]
   1368a:	4813      	ldr	r0, [pc, #76]	; (136d8 <setup_thread_stack+0xa0>)
   1368c:	f006 fcb5 	bl	19ffa <z_log_minimal_printk>
	 */
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	/* TLS is always last within the stack buffer */
	delta += arch_tls_stack_setup(new_thread, stack_ptr);
   13690:	6979      	ldr	r1, [r7, #20]
   13692:	68f8      	ldr	r0, [r7, #12]
   13694:	f006 fd2e 	bl	1a0f4 <arch_tls_stack_setup>
   13698:	4602      	mov	r2, r0
   1369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1369c:	4413      	add	r3, r2
   1369e:	627b      	str	r3, [r7, #36]	; 0x24
		(struct _thread_userspace_local_data *)(stack_ptr - delta);
#endif
#if CONFIG_STACK_POINTER_RANDOM
	delta += random_offset(stack_buf_size);
#endif
	delta = ROUND_UP(delta, ARCH_STACK_PTR_ALIGN);
   136a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   136a2:	3307      	adds	r3, #7
   136a4:	f023 0307 	bic.w	r3, r3, #7
   136a8:	627b      	str	r3, [r7, #36]	; 0x24
	 * will need to appropriately update this.
	 *
	 * The bounds tracked here correspond to the area of the stack object
	 * that the thread can access, which includes TLS.
	 */
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   136aa:	69fa      	ldr	r2, [r7, #28]
   136ac:	68fb      	ldr	r3, [r7, #12]
   136ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	new_thread->stack_info.size = stack_buf_size;
   136b2:	68fb      	ldr	r3, [r7, #12]
   136b4:	69ba      	ldr	r2, [r7, #24]
   136b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	new_thread->stack_info.delta = delta;
   136ba:	68fb      	ldr	r3, [r7, #12]
   136bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   136be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif
	stack_ptr -= delta;
   136c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   136c4:	425b      	negs	r3, r3
   136c6:	697a      	ldr	r2, [r7, #20]
   136c8:	4413      	add	r3, r2
   136ca:	617b      	str	r3, [r7, #20]

	return stack_ptr;
   136cc:	697b      	ldr	r3, [r7, #20]
}
   136ce:	4618      	mov	r0, r3
   136d0:	3728      	adds	r7, #40	; 0x28
   136d2:	46bd      	mov	sp, r7
   136d4:	bd80      	pop	{r7, pc}
   136d6:	bf00      	nop
   136d8:	00022e90 	.word	0x00022e90

000136dc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   136dc:	b580      	push	{r7, lr}
   136de:	b08a      	sub	sp, #40	; 0x28
   136e0:	af04      	add	r7, sp, #16
   136e2:	60f8      	str	r0, [r7, #12]
   136e4:	60b9      	str	r1, [r7, #8]
   136e6:	607a      	str	r2, [r7, #4]
   136e8:	603b      	str	r3, [r7, #0]
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   136ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   136ec:	2b0f      	cmp	r3, #15
   136ee:	d108      	bne.n	13702 <z_setup_new_thread+0x26>
   136f0:	6838      	ldr	r0, [r7, #0]
   136f2:	f7ff ff6d 	bl	135d0 <z_is_idle_thread_entry>
   136f6:	4603      	mov	r3, r0
   136f8:	f083 0301 	eor.w	r3, r3, #1
   136fc:	b2db      	uxtb	r3, r3
   136fe:	2b00      	cmp	r3, #0
   13700:	d019      	beq.n	13736 <z_setup_new_thread+0x5a>
   13702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13704:	f113 0f10 	cmn.w	r3, #16
   13708:	db02      	blt.n	13710 <z_setup_new_thread+0x34>
   1370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1370c:	2b0e      	cmp	r3, #14
   1370e:	dd12      	ble.n	13736 <z_setup_new_thread+0x5a>
   13710:	f240 231a 	movw	r3, #538	; 0x21a
   13714:	4a2c      	ldr	r2, [pc, #176]	; (137c8 <z_setup_new_thread+0xec>)
   13716:	492d      	ldr	r1, [pc, #180]	; (137cc <z_setup_new_thread+0xf0>)
   13718:	482d      	ldr	r0, [pc, #180]	; (137d0 <z_setup_new_thread+0xf4>)
   1371a:	f006 fc4b 	bl	19fb4 <assert_print>
   1371e:	f06f 030f 	mvn.w	r3, #15
   13722:	220e      	movs	r2, #14
   13724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13726:	482b      	ldr	r0, [pc, #172]	; (137d4 <z_setup_new_thread+0xf8>)
   13728:	f006 fc44 	bl	19fb4 <assert_print>
   1372c:	f240 211a 	movw	r1, #538	; 0x21a
   13730:	4825      	ldr	r0, [pc, #148]	; (137c8 <z_setup_new_thread+0xec>)
   13732:	f006 fc2f 	bl	19f94 <assert_post_action>
	new_thread->syscall_frame = NULL;

	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);
   13736:	68fb      	ldr	r3, [r7, #12]
   13738:	3358      	adds	r3, #88	; 0x58
   1373a:	4618      	mov	r0, r3
   1373c:	f00a ff90 	bl	1e660 <z_waitq_init>

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   13740:	68f8      	ldr	r0, [r7, #12]
   13742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13744:	2204      	movs	r2, #4
   13746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13748:	f00a ffda 	bl	1e700 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   1374c:	687a      	ldr	r2, [r7, #4]
   1374e:	68b9      	ldr	r1, [r7, #8]
   13750:	68f8      	ldr	r0, [r7, #12]
   13752:	f7ff ff71 	bl	13638 <setup_thread_stack>
   13756:	6178      	str	r0, [r7, #20]
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   13758:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1375a:	9302      	str	r3, [sp, #8]
   1375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1375e:	9301      	str	r3, [sp, #4]
   13760:	6a3b      	ldr	r3, [r7, #32]
   13762:	9300      	str	r3, [sp, #0]
   13764:	683b      	ldr	r3, [r7, #0]
   13766:	697a      	ldr	r2, [r7, #20]
   13768:	68b9      	ldr	r1, [r7, #8]
   1376a:	68f8      	ldr	r0, [r7, #12]
   1376c:	f7f6 ff36 	bl	a5dc <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   13770:	68fb      	ldr	r3, [r7, #12]
   13772:	2200      	movs	r2, #0
   13774:	655a      	str	r2, [r3, #84]	; 0x54
	new_thread->next_thread = _kernel.threads;
	_kernel.threads = new_thread;
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   13776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13778:	2b00      	cmp	r3, #0
   1377a:	d00b      	beq.n	13794 <z_setup_new_thread+0xb8>
		strncpy(new_thread->name, name,
   1377c:	68fb      	ldr	r3, [r7, #12]
   1377e:	3360      	adds	r3, #96	; 0x60
   13780:	221f      	movs	r2, #31
   13782:	6b79      	ldr	r1, [r7, #52]	; 0x34
   13784:	4618      	mov	r0, r3
   13786:	f00b ff55 	bl	1f634 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1378a:	68fb      	ldr	r3, [r7, #12]
   1378c:	2200      	movs	r2, #0
   1378e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
   13792:	e003      	b.n	1379c <z_setup_new_thread+0xc0>
	} else {
		new_thread->name[0] = '\0';
   13794:	68fb      	ldr	r3, [r7, #12]
   13796:	2200      	movs	r2, #0
   13798:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1379c:	4b0e      	ldr	r3, [pc, #56]	; (137d8 <z_setup_new_thread+0xfc>)
   1379e:	689b      	ldr	r3, [r3, #8]
   137a0:	2b00      	cmp	r3, #0
   137a2:	d105      	bne.n	137b0 <z_setup_new_thread+0xd4>
		new_thread->resource_pool = NULL;
   137a4:	68fb      	ldr	r3, [r7, #12]
   137a6:	2200      	movs	r2, #0
   137a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		return stack_ptr;
   137ac:	697b      	ldr	r3, [r7, #20]
   137ae:	e007      	b.n	137c0 <z_setup_new_thread+0xe4>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   137b0:	4b09      	ldr	r3, [pc, #36]	; (137d8 <z_setup_new_thread+0xfc>)
   137b2:	689b      	ldr	r3, [r3, #8]
   137b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   137b8:	68fb      	ldr	r3, [r7, #12]
   137ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
   137be:	697b      	ldr	r3, [r7, #20]
}
   137c0:	4618      	mov	r0, r3
   137c2:	3718      	adds	r7, #24
   137c4:	46bd      	mov	sp, r7
   137c6:	bd80      	pop	{r7, pc}
   137c8:	00022ee4 	.word	0x00022ee4
   137cc:	00022f08 	.word	0x00022f08
   137d0:	00022f88 	.word	0x00022f88
   137d4:	00022fa8 	.word	0x00022fa8
   137d8:	2000ce4c 	.word	0x2000ce4c

000137dc <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   137dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   137de:	b08d      	sub	sp, #52	; 0x34
   137e0:	af06      	add	r7, sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   137e2:	4b48      	ldr	r3, [pc, #288]	; (13904 <z_init_static_threads+0x128>)
   137e4:	617b      	str	r3, [r7, #20]
   137e6:	e02f      	b.n	13848 <z_init_static_threads+0x6c>
		z_setup_new_thread(
   137e8:	697b      	ldr	r3, [r7, #20]
   137ea:	681b      	ldr	r3, [r3, #0]
   137ec:	60fb      	str	r3, [r7, #12]
   137ee:	697b      	ldr	r3, [r7, #20]
   137f0:	685a      	ldr	r2, [r3, #4]
   137f2:	60ba      	str	r2, [r7, #8]
   137f4:	697b      	ldr	r3, [r7, #20]
   137f6:	689e      	ldr	r6, [r3, #8]
   137f8:	607e      	str	r6, [r7, #4]
   137fa:	697b      	ldr	r3, [r7, #20]
   137fc:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   13800:	f8c7 c000 	str.w	ip, [r7]
   13804:	697b      	ldr	r3, [r7, #20]
   13806:	691b      	ldr	r3, [r3, #16]
   13808:	697a      	ldr	r2, [r7, #20]
   1380a:	6952      	ldr	r2, [r2, #20]
   1380c:	6979      	ldr	r1, [r7, #20]
   1380e:	6989      	ldr	r1, [r1, #24]
   13810:	6978      	ldr	r0, [r7, #20]
   13812:	69c0      	ldr	r0, [r0, #28]
   13814:	697e      	ldr	r6, [r7, #20]
   13816:	6a36      	ldr	r6, [r6, #32]
   13818:	f8d7 e014 	ldr.w	lr, [r7, #20]
   1381c:	f8de e028 	ldr.w	lr, [lr, #40]	; 0x28
   13820:	f8cd e014 	str.w	lr, [sp, #20]
   13824:	9604      	str	r6, [sp, #16]
   13826:	9003      	str	r0, [sp, #12]
   13828:	9102      	str	r1, [sp, #8]
   1382a:	9201      	str	r2, [sp, #4]
   1382c:	9300      	str	r3, [sp, #0]
   1382e:	683b      	ldr	r3, [r7, #0]
   13830:	687a      	ldr	r2, [r7, #4]
   13832:	68b9      	ldr	r1, [r7, #8]
   13834:	68f8      	ldr	r0, [r7, #12]
   13836:	f7ff ff51 	bl	136dc <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1383a:	697b      	ldr	r3, [r7, #20]
   1383c:	681b      	ldr	r3, [r3, #0]
   1383e:	697a      	ldr	r2, [r7, #20]
   13840:	655a      	str	r2, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   13842:	697b      	ldr	r3, [r7, #20]
   13844:	332c      	adds	r3, #44	; 0x2c
   13846:	617b      	str	r3, [r7, #20]
   13848:	697b      	ldr	r3, [r7, #20]
   1384a:	4a2f      	ldr	r2, [pc, #188]	; (13908 <z_init_static_threads+0x12c>)
   1384c:	4293      	cmp	r3, r2
   1384e:	d90e      	bls.n	1386e <z_init_static_threads+0x92>
   13850:	f240 23f3 	movw	r3, #755	; 0x2f3
   13854:	4a2d      	ldr	r2, [pc, #180]	; (1390c <z_init_static_threads+0x130>)
   13856:	492e      	ldr	r1, [pc, #184]	; (13910 <z_init_static_threads+0x134>)
   13858:	482e      	ldr	r0, [pc, #184]	; (13914 <z_init_static_threads+0x138>)
   1385a:	f006 fbab 	bl	19fb4 <assert_print>
   1385e:	482e      	ldr	r0, [pc, #184]	; (13918 <z_init_static_threads+0x13c>)
   13860:	f006 fba8 	bl	19fb4 <assert_print>
   13864:	f240 21f3 	movw	r1, #755	; 0x2f3
   13868:	4828      	ldr	r0, [pc, #160]	; (1390c <z_init_static_threads+0x130>)
   1386a:	f006 fb93 	bl	19f94 <assert_post_action>
   1386e:	697b      	ldr	r3, [r7, #20]
   13870:	4a25      	ldr	r2, [pc, #148]	; (13908 <z_init_static_threads+0x12c>)
   13872:	4293      	cmp	r3, r2
   13874:	bf34      	ite	cc
   13876:	2301      	movcc	r3, #1
   13878:	2300      	movcs	r3, #0
   1387a:	b2db      	uxtb	r3, r3
   1387c:	2b00      	cmp	r3, #0
   1387e:	d1b3      	bne.n	137e8 <z_init_static_threads+0xc>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   13880:	f002 fc24 	bl	160cc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   13884:	4b1f      	ldr	r3, [pc, #124]	; (13904 <z_init_static_threads+0x128>)
   13886:	613b      	str	r3, [r7, #16]
   13888:	e019      	b.n	138be <z_init_static_threads+0xe2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1388a:	693b      	ldr	r3, [r7, #16]
   1388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1388e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   13892:	d011      	beq.n	138b8 <z_init_static_threads+0xdc>
			schedule_new_thread(thread_data->init_thread,
   13894:	693b      	ldr	r3, [r7, #16]
   13896:	681e      	ldr	r6, [r3, #0]
					    K_MSEC(thread_data->init_delay));
   13898:	693b      	ldr	r3, [r7, #16]
   1389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1389c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   138a0:	17da      	asrs	r2, r3, #31
   138a2:	461c      	mov	r4, r3
   138a4:	4615      	mov	r5, r2
   138a6:	4620      	mov	r0, r4
   138a8:	4629      	mov	r1, r5
   138aa:	f7ff fc21 	bl	130f0 <k_ms_to_ticks_ceil64>
   138ae:	4602      	mov	r2, r0
   138b0:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   138b2:	4630      	mov	r0, r6
   138b4:	f00a ff07 	bl	1e6c6 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   138b8:	693b      	ldr	r3, [r7, #16]
   138ba:	332c      	adds	r3, #44	; 0x2c
   138bc:	613b      	str	r3, [r7, #16]
   138be:	693b      	ldr	r3, [r7, #16]
   138c0:	4a11      	ldr	r2, [pc, #68]	; (13908 <z_init_static_threads+0x12c>)
   138c2:	4293      	cmp	r3, r2
   138c4:	d90e      	bls.n	138e4 <z_init_static_threads+0x108>
   138c6:	f240 3312 	movw	r3, #786	; 0x312
   138ca:	4a10      	ldr	r2, [pc, #64]	; (1390c <z_init_static_threads+0x130>)
   138cc:	4910      	ldr	r1, [pc, #64]	; (13910 <z_init_static_threads+0x134>)
   138ce:	4811      	ldr	r0, [pc, #68]	; (13914 <z_init_static_threads+0x138>)
   138d0:	f006 fb70 	bl	19fb4 <assert_print>
   138d4:	4810      	ldr	r0, [pc, #64]	; (13918 <z_init_static_threads+0x13c>)
   138d6:	f006 fb6d 	bl	19fb4 <assert_print>
   138da:	f240 3112 	movw	r1, #786	; 0x312
   138de:	480b      	ldr	r0, [pc, #44]	; (1390c <z_init_static_threads+0x130>)
   138e0:	f006 fb58 	bl	19f94 <assert_post_action>
   138e4:	693b      	ldr	r3, [r7, #16]
   138e6:	4a08      	ldr	r2, [pc, #32]	; (13908 <z_init_static_threads+0x12c>)
   138e8:	4293      	cmp	r3, r2
   138ea:	bf34      	ite	cc
   138ec:	2301      	movcc	r3, #1
   138ee:	2300      	movcs	r3, #0
   138f0:	b2db      	uxtb	r3, r3
   138f2:	2b00      	cmp	r3, #0
   138f4:	d1c9      	bne.n	1388a <z_init_static_threads+0xae>
		}
	}
	k_sched_unlock();
   138f6:	f002 fc77 	bl	161e8 <k_sched_unlock>
}
   138fa:	bf00      	nop
   138fc:	371c      	adds	r7, #28
   138fe:	46bd      	mov	sp, r7
   13900:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13902:	bf00      	nop
   13904:	0001fbe8 	.word	0x0001fbe8
   13908:	0001fbe8 	.word	0x0001fbe8
   1390c:	00022ee4 	.word	0x00022ee4
   13910:	00023018 	.word	0x00023018
   13914:	00022f88 	.word	0x00022f88
   13918:	00023048 	.word	0x00023048

0001391c <z_spin_lock_valid>:
/* These spinlock assertion predicates are defined here because having
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
   1391c:	b480      	push	{r7}
   1391e:	b085      	sub	sp, #20
   13920:	af00      	add	r7, sp, #0
   13922:	6078      	str	r0, [r7, #4]
	uintptr_t thread_cpu = l->thread_cpu;
   13924:	687b      	ldr	r3, [r7, #4]
   13926:	681b      	ldr	r3, [r3, #0]
   13928:	60fb      	str	r3, [r7, #12]

	if (thread_cpu != 0U) {
   1392a:	68fb      	ldr	r3, [r7, #12]
   1392c:	2b00      	cmp	r3, #0
   1392e:	d008      	beq.n	13942 <z_spin_lock_valid+0x26>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   13930:	68fb      	ldr	r3, [r7, #12]
   13932:	f003 0303 	and.w	r3, r3, #3
   13936:	4a06      	ldr	r2, [pc, #24]	; (13950 <z_spin_lock_valid+0x34>)
   13938:	7c12      	ldrb	r2, [r2, #16]
   1393a:	4293      	cmp	r3, r2
   1393c:	d101      	bne.n	13942 <z_spin_lock_valid+0x26>
			return false;
   1393e:	2300      	movs	r3, #0
   13940:	e000      	b.n	13944 <z_spin_lock_valid+0x28>
		}
	}
	return true;
   13942:	2301      	movs	r3, #1
}
   13944:	4618      	mov	r0, r3
   13946:	3714      	adds	r7, #20
   13948:	46bd      	mov	sp, r7
   1394a:	bc80      	pop	{r7}
   1394c:	4770      	bx	lr
   1394e:	bf00      	nop
   13950:	2000ce4c 	.word	0x2000ce4c

00013954 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
   13954:	b480      	push	{r7}
   13956:	b083      	sub	sp, #12
   13958:	af00      	add	r7, sp, #0
   1395a:	6078      	str	r0, [r7, #4]
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1395c:	687b      	ldr	r3, [r7, #4]
   1395e:	681a      	ldr	r2, [r3, #0]
   13960:	4b09      	ldr	r3, [pc, #36]	; (13988 <z_spin_unlock_valid+0x34>)
   13962:	7c1b      	ldrb	r3, [r3, #16]
   13964:	4619      	mov	r1, r3
   13966:	4b08      	ldr	r3, [pc, #32]	; (13988 <z_spin_unlock_valid+0x34>)
   13968:	689b      	ldr	r3, [r3, #8]
   1396a:	430b      	orrs	r3, r1
   1396c:	429a      	cmp	r2, r3
   1396e:	d001      	beq.n	13974 <z_spin_unlock_valid+0x20>
		return false;
   13970:	2300      	movs	r3, #0
   13972:	e003      	b.n	1397c <z_spin_unlock_valid+0x28>
	}
	l->thread_cpu = 0;
   13974:	687b      	ldr	r3, [r7, #4]
   13976:	2200      	movs	r2, #0
   13978:	601a      	str	r2, [r3, #0]
	return true;
   1397a:	2301      	movs	r3, #1
}
   1397c:	4618      	mov	r0, r3
   1397e:	370c      	adds	r7, #12
   13980:	46bd      	mov	sp, r7
   13982:	bc80      	pop	{r7}
   13984:	4770      	bx	lr
   13986:	bf00      	nop
   13988:	2000ce4c 	.word	0x2000ce4c

0001398c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
   1398c:	b480      	push	{r7}
   1398e:	b083      	sub	sp, #12
   13990:	af00      	add	r7, sp, #0
   13992:	6078      	str	r0, [r7, #4]
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   13994:	4b06      	ldr	r3, [pc, #24]	; (139b0 <z_spin_lock_set_owner+0x24>)
   13996:	7c1b      	ldrb	r3, [r3, #16]
   13998:	461a      	mov	r2, r3
   1399a:	4b05      	ldr	r3, [pc, #20]	; (139b0 <z_spin_lock_set_owner+0x24>)
   1399c:	689b      	ldr	r3, [r3, #8]
   1399e:	431a      	orrs	r2, r3
   139a0:	687b      	ldr	r3, [r7, #4]
   139a2:	601a      	str	r2, [r3, #0]
}
   139a4:	bf00      	nop
   139a6:	370c      	adds	r7, #12
   139a8:	46bd      	mov	sp, r7
   139aa:	bc80      	pop	{r7}
   139ac:	4770      	bx	lr
   139ae:	bf00      	nop
   139b0:	2000ce4c 	.word	0x2000ce4c

000139b4 <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
   139b4:	b580      	push	{r7, lr}
   139b6:	b088      	sub	sp, #32
   139b8:	af00      	add	r7, sp, #0
   139ba:	60f8      	str	r0, [r7, #12]
   139bc:	60b9      	str	r1, [r7, #8]
   139be:	607a      	str	r2, [r7, #4]
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   139c0:	4b0e      	ldr	r3, [pc, #56]	; (139fc <idle+0x48>)
   139c2:	689b      	ldr	r3, [r3, #8]
   139c4:	f993 300e 	ldrsb.w	r3, [r3, #14]
   139c8:	2b00      	cmp	r3, #0
   139ca:	da09      	bge.n	139e0 <idle+0x2c>
   139cc:	2329      	movs	r3, #41	; 0x29
   139ce:	4a0c      	ldr	r2, [pc, #48]	; (13a00 <idle+0x4c>)
   139d0:	490c      	ldr	r1, [pc, #48]	; (13a04 <idle+0x50>)
   139d2:	480d      	ldr	r0, [pc, #52]	; (13a08 <idle+0x54>)
   139d4:	f006 faee 	bl	19fb4 <assert_print>
   139d8:	2129      	movs	r1, #41	; 0x29
   139da:	4809      	ldr	r0, [pc, #36]	; (13a00 <idle+0x4c>)
   139dc:	f006 fada 	bl	19f94 <assert_post_action>
	__asm__ volatile(
   139e0:	f04f 0320 	mov.w	r3, #32
   139e4:	f3ef 8211 	mrs	r2, BASEPRI
   139e8:	f383 8812 	msr	BASEPRI_MAX, r3
   139ec:	f3bf 8f6f 	isb	sy
   139f0:	61fa      	str	r2, [r7, #28]
   139f2:	61bb      	str	r3, [r7, #24]
	return key;
   139f4:	bf00      	nop
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
			k_cpu_idle();
		}
#else
		k_cpu_idle();
   139f6:	f00a fea3 	bl	1e740 <k_cpu_idle>
		if (IS_ENABLED(CONFIG_SMP) && !IS_ENABLED(CONFIG_SCHED_IPI_SUPPORTED)) {
   139fa:	e7f1      	b.n	139e0 <idle+0x2c>
   139fc:	2000ce4c 	.word	0x2000ce4c
   13a00:	000230ac 	.word	0x000230ac
   13a04:	000230d0 	.word	0x000230d0
   13a08:	000230f8 	.word	0x000230f8

00013a0c <z_log_minimal_level_to_char>:
{
   13a0c:	b480      	push	{r7}
   13a0e:	b083      	sub	sp, #12
   13a10:	af00      	add	r7, sp, #0
   13a12:	6078      	str	r0, [r7, #4]
	switch (level) {
   13a14:	687b      	ldr	r3, [r7, #4]
   13a16:	3b01      	subs	r3, #1
   13a18:	2b03      	cmp	r3, #3
   13a1a:	d813      	bhi.n	13a44 <z_log_minimal_level_to_char+0x38>
   13a1c:	a201      	add	r2, pc, #4	; (adr r2, 13a24 <z_log_minimal_level_to_char+0x18>)
   13a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13a22:	bf00      	nop
   13a24:	00013a35 	.word	0x00013a35
   13a28:	00013a39 	.word	0x00013a39
   13a2c:	00013a3d 	.word	0x00013a3d
   13a30:	00013a41 	.word	0x00013a41
		return 'E';
   13a34:	2345      	movs	r3, #69	; 0x45
   13a36:	e006      	b.n	13a46 <z_log_minimal_level_to_char+0x3a>
		return 'W';
   13a38:	2357      	movs	r3, #87	; 0x57
   13a3a:	e004      	b.n	13a46 <z_log_minimal_level_to_char+0x3a>
		return 'I';
   13a3c:	2349      	movs	r3, #73	; 0x49
   13a3e:	e002      	b.n	13a46 <z_log_minimal_level_to_char+0x3a>
		return 'D';
   13a40:	2344      	movs	r3, #68	; 0x44
   13a42:	e000      	b.n	13a46 <z_log_minimal_level_to_char+0x3a>
		return '?';
   13a44:	233f      	movs	r3, #63	; 0x3f
}
   13a46:	4618      	mov	r0, r3
   13a48:	370c      	adds	r7, #12
   13a4a:	46bd      	mov	sp, r7
   13a4c:	bc80      	pop	{r7}
   13a4e:	4770      	bx	lr

00013a50 <adjust_owner_prio>:

	return new_prio;
}

static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
{
   13a50:	b5b0      	push	{r4, r5, r7, lr}
   13a52:	b084      	sub	sp, #16
   13a54:	af02      	add	r7, sp, #8
   13a56:	6078      	str	r0, [r7, #4]
   13a58:	6039      	str	r1, [r7, #0]
	if (mutex->owner->base.prio != new_prio) {
   13a5a:	687b      	ldr	r3, [r7, #4]
   13a5c:	689b      	ldr	r3, [r3, #8]
   13a5e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   13a62:	461a      	mov	r2, r3
   13a64:	683b      	ldr	r3, [r7, #0]
   13a66:	4293      	cmp	r3, r2
   13a68:	d029      	beq.n	13abe <adjust_owner_prio+0x6e>

		LOG_DBG("%p (ready (y/n): %c) prio changed to %d (was %d)",
   13a6a:	2303      	movs	r3, #3
   13a6c:	2b03      	cmp	r3, #3
   13a6e:	d91e      	bls.n	13aae <adjust_owner_prio+0x5e>
   13a70:	2004      	movs	r0, #4
   13a72:	f7ff ffcb 	bl	13a0c <z_log_minimal_level_to_char>
   13a76:	4603      	mov	r3, r0
   13a78:	461d      	mov	r5, r3
   13a7a:	687b      	ldr	r3, [r7, #4]
   13a7c:	689c      	ldr	r4, [r3, #8]
   13a7e:	687b      	ldr	r3, [r7, #4]
   13a80:	689b      	ldr	r3, [r3, #8]
   13a82:	4618      	mov	r0, r3
   13a84:	f00a feda 	bl	1e83c <z_is_thread_ready>
   13a88:	4603      	mov	r3, r0
   13a8a:	2b00      	cmp	r3, #0
   13a8c:	d001      	beq.n	13a92 <adjust_owner_prio+0x42>
   13a8e:	2279      	movs	r2, #121	; 0x79
   13a90:	e000      	b.n	13a94 <adjust_owner_prio+0x44>
   13a92:	226e      	movs	r2, #110	; 0x6e
   13a94:	687b      	ldr	r3, [r7, #4]
   13a96:	689b      	ldr	r3, [r3, #8]
   13a98:	f993 300e 	ldrsb.w	r3, [r3, #14]
   13a9c:	9301      	str	r3, [sp, #4]
   13a9e:	683b      	ldr	r3, [r7, #0]
   13aa0:	9300      	str	r3, [sp, #0]
   13aa2:	4613      	mov	r3, r2
   13aa4:	4622      	mov	r2, r4
   13aa6:	4629      	mov	r1, r5
   13aa8:	4807      	ldr	r0, [pc, #28]	; (13ac8 <adjust_owner_prio+0x78>)
   13aaa:	f006 faa6 	bl	19ffa <z_log_minimal_printk>
			mutex->owner, z_is_thread_ready(mutex->owner) ?
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		return z_set_prio(mutex->owner, new_prio);
   13aae:	687b      	ldr	r3, [r7, #4]
   13ab0:	689b      	ldr	r3, [r3, #8]
   13ab2:	6839      	ldr	r1, [r7, #0]
   13ab4:	4618      	mov	r0, r3
   13ab6:	f002 f95b 	bl	15d70 <z_set_prio>
   13aba:	4603      	mov	r3, r0
   13abc:	e000      	b.n	13ac0 <adjust_owner_prio+0x70>
	}
	return false;
   13abe:	2300      	movs	r3, #0
}
   13ac0:	4618      	mov	r0, r3
   13ac2:	3708      	adds	r7, #8
   13ac4:	46bd      	mov	sp, r7
   13ac6:	bdb0      	pop	{r4, r5, r7, pc}
   13ac8:	0002316c 	.word	0x0002316c

00013acc <z_impl_k_mutex_lock>:

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   13acc:	b580      	push	{r7, lr}
   13ace:	b0a2      	sub	sp, #136	; 0x88
   13ad0:	af02      	add	r7, sp, #8
   13ad2:	60f8      	str	r0, [r7, #12]
   13ad4:	e9c7 2300 	strd	r2, r3, [r7]
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;
   13ad8:	2300      	movs	r3, #0
   13ada:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13ade:	f3ef 8305 	mrs	r3, IPSR
   13ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
   13ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13ae6:	2b00      	cmp	r3, #0
   13ae8:	bf14      	ite	ne
   13aea:	2301      	movne	r3, #1
   13aec:	2300      	moveq	r3, #0
   13aee:	b2db      	uxtb	r3, r3

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   13af0:	2b00      	cmp	r3, #0
   13af2:	d00c      	beq.n	13b0e <z_impl_k_mutex_lock+0x42>
   13af4:	2365      	movs	r3, #101	; 0x65
   13af6:	4a9d      	ldr	r2, [pc, #628]	; (13d6c <z_impl_k_mutex_lock+0x2a0>)
   13af8:	499d      	ldr	r1, [pc, #628]	; (13d70 <z_impl_k_mutex_lock+0x2a4>)
   13afa:	489e      	ldr	r0, [pc, #632]	; (13d74 <z_impl_k_mutex_lock+0x2a8>)
   13afc:	f006 fa5a 	bl	19fb4 <assert_print>
   13b00:	489d      	ldr	r0, [pc, #628]	; (13d78 <z_impl_k_mutex_lock+0x2ac>)
   13b02:	f006 fa57 	bl	19fb4 <assert_print>
   13b06:	2165      	movs	r1, #101	; 0x65
   13b08:	4898      	ldr	r0, [pc, #608]	; (13d6c <z_impl_k_mutex_lock+0x2a0>)
   13b0a:	f006 fa43 	bl	19f94 <assert_post_action>
   13b0e:	4b9b      	ldr	r3, [pc, #620]	; (13d7c <z_impl_k_mutex_lock+0x2b0>)
   13b10:	66bb      	str	r3, [r7, #104]	; 0x68
	__asm__ volatile(
   13b12:	f04f 0320 	mov.w	r3, #32
   13b16:	f3ef 8211 	mrs	r2, BASEPRI
   13b1a:	f383 8812 	msr	BASEPRI_MAX, r3
   13b1e:	f3bf 8f6f 	isb	sy
   13b22:	667a      	str	r2, [r7, #100]	; 0x64
   13b24:	663b      	str	r3, [r7, #96]	; 0x60
	return key;
   13b26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
	k.key = arch_irq_lock();
   13b28:	61bb      	str	r3, [r7, #24]
   13b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   13b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   13b2e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   13b30:	f7ff fef4 	bl	1391c <z_spin_lock_valid>
   13b34:	4603      	mov	r3, r0
   13b36:	f083 0301 	eor.w	r3, r3, #1
   13b3a:	b2db      	uxtb	r3, r3
   13b3c:	2b00      	cmp	r3, #0
   13b3e:	d00d      	beq.n	13b5c <z_impl_k_mutex_lock+0x90>
   13b40:	2372      	movs	r3, #114	; 0x72
   13b42:	4a8f      	ldr	r2, [pc, #572]	; (13d80 <z_impl_k_mutex_lock+0x2b4>)
   13b44:	498f      	ldr	r1, [pc, #572]	; (13d84 <z_impl_k_mutex_lock+0x2b8>)
   13b46:	488b      	ldr	r0, [pc, #556]	; (13d74 <z_impl_k_mutex_lock+0x2a8>)
   13b48:	f006 fa34 	bl	19fb4 <assert_print>
   13b4c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   13b4e:	488e      	ldr	r0, [pc, #568]	; (13d88 <z_impl_k_mutex_lock+0x2bc>)
   13b50:	f006 fa30 	bl	19fb4 <assert_print>
   13b54:	2172      	movs	r1, #114	; 0x72
   13b56:	488a      	ldr	r0, [pc, #552]	; (13d80 <z_impl_k_mutex_lock+0x2b4>)
   13b58:	f006 fa1c 	bl	19f94 <assert_post_action>
}
   13b5c:	bf00      	nop
   13b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   13b60:	65bb      	str	r3, [r7, #88]	; 0x58
	z_spin_lock_set_owner(l);
   13b62:	6db8      	ldr	r0, [r7, #88]	; 0x58
   13b64:	f7ff ff12 	bl	1398c <z_spin_lock_set_owner>
}
   13b68:	bf00      	nop
	return k;
   13b6a:	69bb      	ldr	r3, [r7, #24]
   13b6c:	62bb      	str	r3, [r7, #40]	; 0x28

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   13b6e:	68fb      	ldr	r3, [r7, #12]
   13b70:	68db      	ldr	r3, [r3, #12]
   13b72:	2b00      	cmp	r3, #0
   13b74:	bf0c      	ite	eq
   13b76:	2301      	moveq	r3, #1
   13b78:	2300      	movne	r3, #0
   13b7a:	b2db      	uxtb	r3, r3
   13b7c:	2b00      	cmp	r3, #0
   13b7e:	d10a      	bne.n	13b96 <z_impl_k_mutex_lock+0xca>
   13b80:	68fb      	ldr	r3, [r7, #12]
   13b82:	689a      	ldr	r2, [r3, #8]
   13b84:	4b81      	ldr	r3, [pc, #516]	; (13d8c <z_impl_k_mutex_lock+0x2c0>)
   13b86:	689b      	ldr	r3, [r3, #8]
   13b88:	429a      	cmp	r2, r3
   13b8a:	bf0c      	ite	eq
   13b8c:	2301      	moveq	r3, #1
   13b8e:	2300      	movne	r3, #0
   13b90:	b2db      	uxtb	r3, r3
   13b92:	2b00      	cmp	r3, #0
   13b94:	d001      	beq.n	13b9a <z_impl_k_mutex_lock+0xce>
   13b96:	2301      	movs	r3, #1
   13b98:	e000      	b.n	13b9c <z_impl_k_mutex_lock+0xd0>
   13b9a:	2300      	movs	r3, #0
   13b9c:	2b00      	cmp	r3, #0
   13b9e:	d051      	beq.n	13c44 <z_impl_k_mutex_lock+0x178>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   13ba0:	68fb      	ldr	r3, [r7, #12]
   13ba2:	68db      	ldr	r3, [r3, #12]
					_current->base.prio :
   13ba4:	2b00      	cmp	r3, #0
   13ba6:	d104      	bne.n	13bb2 <z_impl_k_mutex_lock+0xe6>
   13ba8:	4b78      	ldr	r3, [pc, #480]	; (13d8c <z_impl_k_mutex_lock+0x2c0>)
   13baa:	689b      	ldr	r3, [r3, #8]
   13bac:	f993 300e 	ldrsb.w	r3, [r3, #14]
   13bb0:	e001      	b.n	13bb6 <z_impl_k_mutex_lock+0xea>
   13bb2:	68fb      	ldr	r3, [r7, #12]
   13bb4:	691b      	ldr	r3, [r3, #16]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   13bb6:	68fa      	ldr	r2, [r7, #12]
   13bb8:	6113      	str	r3, [r2, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   13bba:	68fb      	ldr	r3, [r7, #12]
   13bbc:	68db      	ldr	r3, [r3, #12]
   13bbe:	1c5a      	adds	r2, r3, #1
   13bc0:	68fb      	ldr	r3, [r7, #12]
   13bc2:	60da      	str	r2, [r3, #12]
		mutex->owner = _current;
   13bc4:	4b71      	ldr	r3, [pc, #452]	; (13d8c <z_impl_k_mutex_lock+0x2c0>)
   13bc6:	689a      	ldr	r2, [r3, #8]
   13bc8:	68fb      	ldr	r3, [r7, #12]
   13bca:	609a      	str	r2, [r3, #8]

		LOG_DBG("%p took mutex %p, count: %d, orig prio: %d",
   13bcc:	2303      	movs	r3, #3
   13bce:	2b03      	cmp	r3, #3
   13bd0:	d912      	bls.n	13bf8 <z_impl_k_mutex_lock+0x12c>
   13bd2:	2004      	movs	r0, #4
   13bd4:	f7ff ff1a 	bl	13a0c <z_log_minimal_level_to_char>
   13bd8:	4603      	mov	r3, r0
   13bda:	4618      	mov	r0, r3
   13bdc:	4b6b      	ldr	r3, [pc, #428]	; (13d8c <z_impl_k_mutex_lock+0x2c0>)
   13bde:	6899      	ldr	r1, [r3, #8]
   13be0:	68fb      	ldr	r3, [r7, #12]
   13be2:	68db      	ldr	r3, [r3, #12]
   13be4:	68fa      	ldr	r2, [r7, #12]
   13be6:	6912      	ldr	r2, [r2, #16]
   13be8:	9201      	str	r2, [sp, #4]
   13bea:	9300      	str	r3, [sp, #0]
   13bec:	68fb      	ldr	r3, [r7, #12]
   13bee:	460a      	mov	r2, r1
   13bf0:	4601      	mov	r1, r0
   13bf2:	4867      	ldr	r0, [pc, #412]	; (13d90 <z_impl_k_mutex_lock+0x2c4>)
   13bf4:	f006 fa01 	bl	19ffa <z_log_minimal_printk>
   13bf8:	4b60      	ldr	r3, [pc, #384]	; (13d7c <z_impl_k_mutex_lock+0x2b0>)
   13bfa:	657b      	str	r3, [r7, #84]	; 0x54
   13bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13bfe:	61fb      	str	r3, [r7, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13c00:	6d78      	ldr	r0, [r7, #84]	; 0x54
   13c02:	f7ff fea7 	bl	13954 <z_spin_unlock_valid>
   13c06:	4603      	mov	r3, r0
   13c08:	f083 0301 	eor.w	r3, r3, #1
   13c0c:	b2db      	uxtb	r3, r3
   13c0e:	2b00      	cmp	r3, #0
   13c10:	d00d      	beq.n	13c2e <z_impl_k_mutex_lock+0x162>
   13c12:	23f0      	movs	r3, #240	; 0xf0
   13c14:	4a5a      	ldr	r2, [pc, #360]	; (13d80 <z_impl_k_mutex_lock+0x2b4>)
   13c16:	495f      	ldr	r1, [pc, #380]	; (13d94 <z_impl_k_mutex_lock+0x2c8>)
   13c18:	4856      	ldr	r0, [pc, #344]	; (13d74 <z_impl_k_mutex_lock+0x2a8>)
   13c1a:	f006 f9cb 	bl	19fb4 <assert_print>
   13c1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
   13c20:	485d      	ldr	r0, [pc, #372]	; (13d98 <z_impl_k_mutex_lock+0x2cc>)
   13c22:	f006 f9c7 	bl	19fb4 <assert_print>
   13c26:	21f0      	movs	r1, #240	; 0xf0
   13c28:	4855      	ldr	r0, [pc, #340]	; (13d80 <z_impl_k_mutex_lock+0x2b4>)
   13c2a:	f006 f9b3 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   13c2e:	69fb      	ldr	r3, [r7, #28]
   13c30:	653b      	str	r3, [r7, #80]	; 0x50
	__asm__ volatile(
   13c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13c34:	f383 8811 	msr	BASEPRI, r3
   13c38:	f3bf 8f6f 	isb	sy
}
   13c3c:	bf00      	nop
}
   13c3e:	bf00      	nop

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   13c40:	2300      	movs	r3, #0
   13c42:	e160      	b.n	13f06 <z_impl_k_mutex_lock+0x43a>
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   13c44:	e9d7 2300 	ldrd	r2, r3, [r7]
   13c48:	f04f 0000 	mov.w	r0, #0
   13c4c:	f04f 0100 	mov.w	r1, #0
   13c50:	428b      	cmp	r3, r1
   13c52:	bf08      	it	eq
   13c54:	4282      	cmpeq	r2, r0
   13c56:	bf0c      	ite	eq
   13c58:	2301      	moveq	r3, #1
   13c5a:	2300      	movne	r3, #0
   13c5c:	b2db      	uxtb	r3, r3
   13c5e:	2b00      	cmp	r3, #0
   13c60:	d026      	beq.n	13cb0 <z_impl_k_mutex_lock+0x1e4>
   13c62:	4b46      	ldr	r3, [pc, #280]	; (13d7c <z_impl_k_mutex_lock+0x2b0>)
   13c64:	64fb      	str	r3, [r7, #76]	; 0x4c
   13c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c68:	617b      	str	r3, [r7, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13c6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   13c6c:	f7ff fe72 	bl	13954 <z_spin_unlock_valid>
   13c70:	4603      	mov	r3, r0
   13c72:	f083 0301 	eor.w	r3, r3, #1
   13c76:	b2db      	uxtb	r3, r3
   13c78:	2b00      	cmp	r3, #0
   13c7a:	d00d      	beq.n	13c98 <z_impl_k_mutex_lock+0x1cc>
   13c7c:	23f0      	movs	r3, #240	; 0xf0
   13c7e:	4a40      	ldr	r2, [pc, #256]	; (13d80 <z_impl_k_mutex_lock+0x2b4>)
   13c80:	4944      	ldr	r1, [pc, #272]	; (13d94 <z_impl_k_mutex_lock+0x2c8>)
   13c82:	483c      	ldr	r0, [pc, #240]	; (13d74 <z_impl_k_mutex_lock+0x2a8>)
   13c84:	f006 f996 	bl	19fb4 <assert_print>
   13c88:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   13c8a:	4843      	ldr	r0, [pc, #268]	; (13d98 <z_impl_k_mutex_lock+0x2cc>)
   13c8c:	f006 f992 	bl	19fb4 <assert_print>
   13c90:	21f0      	movs	r1, #240	; 0xf0
   13c92:	483b      	ldr	r0, [pc, #236]	; (13d80 <z_impl_k_mutex_lock+0x2b4>)
   13c94:	f006 f97e 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   13c98:	697b      	ldr	r3, [r7, #20]
   13c9a:	64bb      	str	r3, [r7, #72]	; 0x48
	__asm__ volatile(
   13c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13c9e:	f383 8811 	msr	BASEPRI, r3
   13ca2:	f3bf 8f6f 	isb	sy
}
   13ca6:	bf00      	nop
}
   13ca8:	bf00      	nop
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   13caa:	f06f 030f 	mvn.w	r3, #15
   13cae:	e12a      	b.n	13f06 <z_impl_k_mutex_lock+0x43a>
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mutex, lock, mutex, timeout);

	new_prio = new_prio_for_inheritance(_current->base.prio,
   13cb0:	4b36      	ldr	r3, [pc, #216]	; (13d8c <z_impl_k_mutex_lock+0x2c0>)
   13cb2:	689b      	ldr	r3, [r3, #8]
   13cb4:	f993 300e 	ldrsb.w	r3, [r3, #14]
   13cb8:	461a      	mov	r2, r3
					    mutex->owner->base.prio);
   13cba:	68fb      	ldr	r3, [r7, #12]
   13cbc:	689b      	ldr	r3, [r3, #8]
   13cbe:	f993 300e 	ldrsb.w	r3, [r3, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   13cc2:	4619      	mov	r1, r3
   13cc4:	4610      	mov	r0, r2
   13cc6:	f00a fe27 	bl	1e918 <new_prio_for_inheritance>
   13cca:	67b8      	str	r0, [r7, #120]	; 0x78

	LOG_DBG("adjusting prio up on mutex %p", mutex);
   13ccc:	2303      	movs	r3, #3
   13cce:	2b03      	cmp	r3, #3
   13cd0:	d908      	bls.n	13ce4 <z_impl_k_mutex_lock+0x218>
   13cd2:	2004      	movs	r0, #4
   13cd4:	f7ff fe9a 	bl	13a0c <z_log_minimal_level_to_char>
   13cd8:	4603      	mov	r3, r0
   13cda:	68fa      	ldr	r2, [r7, #12]
   13cdc:	4619      	mov	r1, r3
   13cde:	482f      	ldr	r0, [pc, #188]	; (13d9c <z_impl_k_mutex_lock+0x2d0>)
   13ce0:	f006 f98b 	bl	19ffa <z_log_minimal_printk>

	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   13ce4:	68fb      	ldr	r3, [r7, #12]
   13ce6:	689b      	ldr	r3, [r3, #8]
   13ce8:	f993 300e 	ldrsb.w	r3, [r3, #14]
   13cec:	4619      	mov	r1, r3
   13cee:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   13cf0:	f00a fdf7 	bl	1e8e2 <z_is_prio_higher>
   13cf4:	4603      	mov	r3, r0
   13cf6:	2b00      	cmp	r3, #0
   13cf8:	d006      	beq.n	13d08 <z_impl_k_mutex_lock+0x23c>
		resched = adjust_owner_prio(mutex, new_prio);
   13cfa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
   13cfc:	68f8      	ldr	r0, [r7, #12]
   13cfe:	f7ff fea7 	bl	13a50 <adjust_owner_prio>
   13d02:	4603      	mov	r3, r0
   13d04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}

	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   13d08:	68f9      	ldr	r1, [r7, #12]
   13d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
   13d0e:	e9cd 2300 	strd	r2, r3, [sp]
   13d12:	460a      	mov	r2, r1
   13d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   13d16:	4819      	ldr	r0, [pc, #100]	; (13d7c <z_impl_k_mutex_lock+0x2b0>)
   13d18:	f001 fdac 	bl	15874 <z_pend_curr>
   13d1c:	6778      	str	r0, [r7, #116]	; 0x74

	LOG_DBG("on mutex %p got_mutex value: %d", mutex, got_mutex);
   13d1e:	2303      	movs	r3, #3
   13d20:	2b03      	cmp	r3, #3
   13d22:	d909      	bls.n	13d38 <z_impl_k_mutex_lock+0x26c>
   13d24:	2004      	movs	r0, #4
   13d26:	f7ff fe71 	bl	13a0c <z_log_minimal_level_to_char>
   13d2a:	4603      	mov	r3, r0
   13d2c:	4619      	mov	r1, r3
   13d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d30:	68fa      	ldr	r2, [r7, #12]
   13d32:	481b      	ldr	r0, [pc, #108]	; (13da0 <z_impl_k_mutex_lock+0x2d4>)
   13d34:	f006 f961 	bl	19ffa <z_log_minimal_printk>

	LOG_DBG("%p got mutex %p (y/n): %c", _current, mutex,
   13d38:	2303      	movs	r3, #3
   13d3a:	2b03      	cmp	r3, #3
   13d3c:	d911      	bls.n	13d62 <z_impl_k_mutex_lock+0x296>
   13d3e:	2004      	movs	r0, #4
   13d40:	f7ff fe64 	bl	13a0c <z_log_minimal_level_to_char>
   13d44:	4603      	mov	r3, r0
   13d46:	4619      	mov	r1, r3
   13d48:	4b10      	ldr	r3, [pc, #64]	; (13d8c <z_impl_k_mutex_lock+0x2c0>)
   13d4a:	689a      	ldr	r2, [r3, #8]
   13d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d4e:	2b00      	cmp	r3, #0
   13d50:	d001      	beq.n	13d56 <z_impl_k_mutex_lock+0x28a>
   13d52:	2379      	movs	r3, #121	; 0x79
   13d54:	e000      	b.n	13d58 <z_impl_k_mutex_lock+0x28c>
   13d56:	236e      	movs	r3, #110	; 0x6e
   13d58:	9300      	str	r3, [sp, #0]
   13d5a:	68fb      	ldr	r3, [r7, #12]
   13d5c:	4811      	ldr	r0, [pc, #68]	; (13da4 <z_impl_k_mutex_lock+0x2d8>)
   13d5e:	f006 f94c 	bl	19ffa <z_log_minimal_printk>
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   13d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d64:	2b00      	cmp	r3, #0
   13d66:	d11f      	bne.n	13da8 <z_impl_k_mutex_lock+0x2dc>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);
		return 0;
   13d68:	2300      	movs	r3, #0
   13d6a:	e0cc      	b.n	13f06 <z_impl_k_mutex_lock+0x43a>
   13d6c:	000231a4 	.word	0x000231a4
   13d70:	000231c8 	.word	0x000231c8
   13d74:	000231dc 	.word	0x000231dc
   13d78:	000231fc 	.word	0x000231fc
   13d7c:	2000ce70 	.word	0x2000ce70
   13d80:	00023224 	.word	0x00023224
   13d84:	00023254 	.word	0x00023254
   13d88:	0002326c 	.word	0x0002326c
   13d8c:	2000ce4c 	.word	0x2000ce4c
   13d90:	00023284 	.word	0x00023284
   13d94:	000232b4 	.word	0x000232b4
   13d98:	000232cc 	.word	0x000232cc
   13d9c:	000232e4 	.word	0x000232e4
   13da0:	00023308 	.word	0x00023308
   13da4:	00023330 	.word	0x00023330
	}

	/* timed out */

	LOG_DBG("%p timeout on mutex %p", _current, mutex);
   13da8:	2303      	movs	r3, #3
   13daa:	2b03      	cmp	r3, #3
   13dac:	d90a      	bls.n	13dc4 <z_impl_k_mutex_lock+0x2f8>
   13dae:	2004      	movs	r0, #4
   13db0:	f7ff fe2c 	bl	13a0c <z_log_minimal_level_to_char>
   13db4:	4603      	mov	r3, r0
   13db6:	4619      	mov	r1, r3
   13db8:	4b55      	ldr	r3, [pc, #340]	; (13f10 <z_impl_k_mutex_lock+0x444>)
   13dba:	689a      	ldr	r2, [r3, #8]
   13dbc:	68fb      	ldr	r3, [r7, #12]
   13dbe:	4855      	ldr	r0, [pc, #340]	; (13f14 <z_impl_k_mutex_lock+0x448>)
   13dc0:	f006 f91b 	bl	19ffa <z_log_minimal_printk>
   13dc4:	4b54      	ldr	r3, [pc, #336]	; (13f18 <z_impl_k_mutex_lock+0x44c>)
   13dc6:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
   13dc8:	f04f 0320 	mov.w	r3, #32
   13dcc:	f3ef 8211 	mrs	r2, BASEPRI
   13dd0:	f383 8812 	msr	BASEPRI_MAX, r3
   13dd4:	f3bf 8f6f 	isb	sy
   13dd8:	643a      	str	r2, [r7, #64]	; 0x40
   13dda:	63fb      	str	r3, [r7, #60]	; 0x3c
	return key;
   13ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	k.key = arch_irq_lock();
   13dde:	623b      	str	r3, [r7, #32]
   13de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13de2:	63bb      	str	r3, [r7, #56]	; 0x38
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   13de4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   13de6:	f7ff fd99 	bl	1391c <z_spin_lock_valid>
   13dea:	4603      	mov	r3, r0
   13dec:	f083 0301 	eor.w	r3, r3, #1
   13df0:	b2db      	uxtb	r3, r3
   13df2:	2b00      	cmp	r3, #0
   13df4:	d00d      	beq.n	13e12 <z_impl_k_mutex_lock+0x346>
   13df6:	2372      	movs	r3, #114	; 0x72
   13df8:	4a48      	ldr	r2, [pc, #288]	; (13f1c <z_impl_k_mutex_lock+0x450>)
   13dfa:	4949      	ldr	r1, [pc, #292]	; (13f20 <z_impl_k_mutex_lock+0x454>)
   13dfc:	4849      	ldr	r0, [pc, #292]	; (13f24 <z_impl_k_mutex_lock+0x458>)
   13dfe:	f006 f8d9 	bl	19fb4 <assert_print>
   13e02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   13e04:	4848      	ldr	r0, [pc, #288]	; (13f28 <z_impl_k_mutex_lock+0x45c>)
   13e06:	f006 f8d5 	bl	19fb4 <assert_print>
   13e0a:	2172      	movs	r1, #114	; 0x72
   13e0c:	4843      	ldr	r0, [pc, #268]	; (13f1c <z_impl_k_mutex_lock+0x450>)
   13e0e:	f006 f8c1 	bl	19f94 <assert_post_action>
}
   13e12:	bf00      	nop
   13e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13e16:	637b      	str	r3, [r7, #52]	; 0x34
	z_spin_lock_set_owner(l);
   13e18:	6b78      	ldr	r0, [r7, #52]	; 0x34
   13e1a:	f7ff fdb7 	bl	1398c <z_spin_lock_set_owner>
}
   13e1e:	bf00      	nop
	return k;
   13e20:	6a3b      	ldr	r3, [r7, #32]
   13e22:	62bb      	str	r3, [r7, #40]	; 0x28

	/*
	 * Check if mutex was unlocked after this thread was unpended.
	 * If so, skip adjusting owner's priority down.
	 */
	if (likely(mutex->owner != NULL)) {
   13e24:	68fb      	ldr	r3, [r7, #12]
   13e26:	689b      	ldr	r3, [r3, #8]
   13e28:	2b00      	cmp	r3, #0
   13e2a:	bf14      	ite	ne
   13e2c:	2301      	movne	r3, #1
   13e2e:	2300      	moveq	r3, #0
   13e30:	b2db      	uxtb	r3, r3
   13e32:	2b00      	cmp	r3, #0
   13e34:	d038      	beq.n	13ea8 <z_impl_k_mutex_lock+0x3dc>
		struct k_thread *waiter = z_waitq_head(&mutex->wait_q);
   13e36:	68fb      	ldr	r3, [r7, #12]
   13e38:	4618      	mov	r0, r3
   13e3a:	f00a fd60 	bl	1e8fe <z_waitq_head>
   13e3e:	6738      	str	r0, [r7, #112]	; 0x70

		new_prio = (waiter != NULL) ?
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   13e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   13e42:	2b00      	cmp	r3, #0
   13e44:	d00b      	beq.n	13e5e <z_impl_k_mutex_lock+0x392>
   13e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   13e48:	f993 300e 	ldrsb.w	r3, [r3, #14]
   13e4c:	461a      	mov	r2, r3
   13e4e:	68fb      	ldr	r3, [r7, #12]
   13e50:	691b      	ldr	r3, [r3, #16]
   13e52:	4619      	mov	r1, r3
   13e54:	4610      	mov	r0, r2
   13e56:	f00a fd5f 	bl	1e918 <new_prio_for_inheritance>
   13e5a:	4603      	mov	r3, r0
   13e5c:	e001      	b.n	13e62 <z_impl_k_mutex_lock+0x396>
   13e5e:	68fb      	ldr	r3, [r7, #12]
   13e60:	691b      	ldr	r3, [r3, #16]
		new_prio = (waiter != NULL) ?
   13e62:	67bb      	str	r3, [r7, #120]	; 0x78
			mutex->owner_orig_prio;

		LOG_DBG("adjusting prio down on mutex %p", mutex);
   13e64:	2303      	movs	r3, #3
   13e66:	2b03      	cmp	r3, #3
   13e68:	d908      	bls.n	13e7c <z_impl_k_mutex_lock+0x3b0>
   13e6a:	2004      	movs	r0, #4
   13e6c:	f7ff fdce 	bl	13a0c <z_log_minimal_level_to_char>
   13e70:	4603      	mov	r3, r0
   13e72:	68fa      	ldr	r2, [r7, #12]
   13e74:	4619      	mov	r1, r3
   13e76:	482d      	ldr	r0, [pc, #180]	; (13f2c <z_impl_k_mutex_lock+0x460>)
   13e78:	f006 f8bf 	bl	19ffa <z_log_minimal_printk>

		resched = adjust_owner_prio(mutex, new_prio) || resched;
   13e7c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
   13e7e:	68f8      	ldr	r0, [r7, #12]
   13e80:	f7ff fde6 	bl	13a50 <adjust_owner_prio>
   13e84:	4603      	mov	r3, r0
   13e86:	2b00      	cmp	r3, #0
   13e88:	d103      	bne.n	13e92 <z_impl_k_mutex_lock+0x3c6>
   13e8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13e8e:	2b00      	cmp	r3, #0
   13e90:	d001      	beq.n	13e96 <z_impl_k_mutex_lock+0x3ca>
   13e92:	2301      	movs	r3, #1
   13e94:	e000      	b.n	13e98 <z_impl_k_mutex_lock+0x3cc>
   13e96:	2300      	movs	r3, #0
   13e98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
   13e9c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13ea0:	f003 0301 	and.w	r3, r3, #1
   13ea4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}

	if (resched) {
   13ea8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13eac:	2b00      	cmp	r3, #0
   13eae:	d004      	beq.n	13eba <z_impl_k_mutex_lock+0x3ee>
		z_reschedule(&lock, key);
   13eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   13eb2:	4819      	ldr	r0, [pc, #100]	; (13f18 <z_impl_k_mutex_lock+0x44c>)
   13eb4:	f002 f8a0 	bl	15ff8 <z_reschedule>
   13eb8:	e023      	b.n	13f02 <z_impl_k_mutex_lock+0x436>
   13eba:	4b17      	ldr	r3, [pc, #92]	; (13f18 <z_impl_k_mutex_lock+0x44c>)
   13ebc:	633b      	str	r3, [r7, #48]	; 0x30
   13ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13ec0:	627b      	str	r3, [r7, #36]	; 0x24
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13ec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13ec4:	f7ff fd46 	bl	13954 <z_spin_unlock_valid>
   13ec8:	4603      	mov	r3, r0
   13eca:	f083 0301 	eor.w	r3, r3, #1
   13ece:	b2db      	uxtb	r3, r3
   13ed0:	2b00      	cmp	r3, #0
   13ed2:	d00d      	beq.n	13ef0 <z_impl_k_mutex_lock+0x424>
   13ed4:	23f0      	movs	r3, #240	; 0xf0
   13ed6:	4a11      	ldr	r2, [pc, #68]	; (13f1c <z_impl_k_mutex_lock+0x450>)
   13ed8:	4915      	ldr	r1, [pc, #84]	; (13f30 <z_impl_k_mutex_lock+0x464>)
   13eda:	4812      	ldr	r0, [pc, #72]	; (13f24 <z_impl_k_mutex_lock+0x458>)
   13edc:	f006 f86a 	bl	19fb4 <assert_print>
   13ee0:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13ee2:	4814      	ldr	r0, [pc, #80]	; (13f34 <z_impl_k_mutex_lock+0x468>)
   13ee4:	f006 f866 	bl	19fb4 <assert_print>
   13ee8:	21f0      	movs	r1, #240	; 0xf0
   13eea:	480c      	ldr	r0, [pc, #48]	; (13f1c <z_impl_k_mutex_lock+0x450>)
   13eec:	f006 f852 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   13ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   13ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13ef6:	f383 8811 	msr	BASEPRI, r3
   13efa:	f3bf 8f6f 	isb	sy
}
   13efe:	bf00      	nop
}
   13f00:	bf00      	nop
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
   13f02:	f06f 030a 	mvn.w	r3, #10
}
   13f06:	4618      	mov	r0, r3
   13f08:	3780      	adds	r7, #128	; 0x80
   13f0a:	46bd      	mov	sp, r7
   13f0c:	bd80      	pop	{r7, pc}
   13f0e:	bf00      	nop
   13f10:	2000ce4c 	.word	0x2000ce4c
   13f14:	00023350 	.word	0x00023350
   13f18:	2000ce70 	.word	0x2000ce70
   13f1c:	00023224 	.word	0x00023224
   13f20:	00023254 	.word	0x00023254
   13f24:	000231dc 	.word	0x000231dc
   13f28:	0002326c 	.word	0x0002326c
   13f2c:	0002336c 	.word	0x0002336c
   13f30:	000232b4 	.word	0x000232b4
   13f34:	000232cc 	.word	0x000232cc

00013f38 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   13f38:	b580      	push	{r7, lr}
   13f3a:	b092      	sub	sp, #72	; 0x48
   13f3c:	af02      	add	r7, sp, #8
   13f3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13f40:	f3ef 8305 	mrs	r3, IPSR
   13f44:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
   13f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13f48:	2b00      	cmp	r3, #0
   13f4a:	bf14      	ite	ne
   13f4c:	2301      	movne	r3, #1
   13f4e:	2300      	moveq	r3, #0
   13f50:	b2db      	uxtb	r3, r3
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   13f52:	2b00      	cmp	r3, #0
   13f54:	d00c      	beq.n	13f70 <z_impl_k_mutex_unlock+0x38>
   13f56:	23cd      	movs	r3, #205	; 0xcd
   13f58:	4a6d      	ldr	r2, [pc, #436]	; (14110 <z_impl_k_mutex_unlock+0x1d8>)
   13f5a:	496e      	ldr	r1, [pc, #440]	; (14114 <z_impl_k_mutex_unlock+0x1dc>)
   13f5c:	486e      	ldr	r0, [pc, #440]	; (14118 <z_impl_k_mutex_unlock+0x1e0>)
   13f5e:	f006 f829 	bl	19fb4 <assert_print>
   13f62:	486e      	ldr	r0, [pc, #440]	; (1411c <z_impl_k_mutex_unlock+0x1e4>)
   13f64:	f006 f826 	bl	19fb4 <assert_print>
   13f68:	21cd      	movs	r1, #205	; 0xcd
   13f6a:	4869      	ldr	r0, [pc, #420]	; (14110 <z_impl_k_mutex_unlock+0x1d8>)
   13f6c:	f006 f812 	bl	19f94 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   13f70:	687b      	ldr	r3, [r7, #4]
   13f72:	689b      	ldr	r3, [r3, #8]
   13f74:	2b00      	cmp	r3, #0
   13f76:	d102      	bne.n	13f7e <z_impl_k_mutex_unlock+0x46>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EINVAL);

		return -EINVAL;
   13f78:	f06f 0315 	mvn.w	r3, #21
   13f7c:	e0c4      	b.n	14108 <z_impl_k_mutex_unlock+0x1d0>
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   13f7e:	687b      	ldr	r3, [r7, #4]
   13f80:	689a      	ldr	r2, [r3, #8]
   13f82:	4b67      	ldr	r3, [pc, #412]	; (14120 <z_impl_k_mutex_unlock+0x1e8>)
   13f84:	689b      	ldr	r3, [r3, #8]
   13f86:	429a      	cmp	r2, r3
   13f88:	d002      	beq.n	13f90 <z_impl_k_mutex_unlock+0x58>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EPERM);

		return -EPERM;
   13f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f8e:	e0bb      	b.n	14108 <z_impl_k_mutex_unlock+0x1d0>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   13f90:	687b      	ldr	r3, [r7, #4]
   13f92:	68db      	ldr	r3, [r3, #12]
   13f94:	2b00      	cmp	r3, #0
   13f96:	d109      	bne.n	13fac <z_impl_k_mutex_unlock+0x74>
   13f98:	23e5      	movs	r3, #229	; 0xe5
   13f9a:	4a5d      	ldr	r2, [pc, #372]	; (14110 <z_impl_k_mutex_unlock+0x1d8>)
   13f9c:	4961      	ldr	r1, [pc, #388]	; (14124 <z_impl_k_mutex_unlock+0x1ec>)
   13f9e:	485e      	ldr	r0, [pc, #376]	; (14118 <z_impl_k_mutex_unlock+0x1e0>)
   13fa0:	f006 f808 	bl	19fb4 <assert_print>
   13fa4:	21e5      	movs	r1, #229	; 0xe5
   13fa6:	485a      	ldr	r0, [pc, #360]	; (14110 <z_impl_k_mutex_unlock+0x1d8>)
   13fa8:	f005 fff4 	bl	19f94 <assert_post_action>

	LOG_DBG("mutex %p lock_count: %d", mutex, mutex->lock_count);
   13fac:	2303      	movs	r3, #3
   13fae:	2b03      	cmp	r3, #3
   13fb0:	d90a      	bls.n	13fc8 <z_impl_k_mutex_unlock+0x90>
   13fb2:	2004      	movs	r0, #4
   13fb4:	f7ff fd2a 	bl	13a0c <z_log_minimal_level_to_char>
   13fb8:	4603      	mov	r3, r0
   13fba:	4619      	mov	r1, r3
   13fbc:	687b      	ldr	r3, [r7, #4]
   13fbe:	68db      	ldr	r3, [r3, #12]
   13fc0:	687a      	ldr	r2, [r7, #4]
   13fc2:	4859      	ldr	r0, [pc, #356]	; (14128 <z_impl_k_mutex_unlock+0x1f0>)
   13fc4:	f006 f819 	bl	19ffa <z_log_minimal_printk>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   13fc8:	687b      	ldr	r3, [r7, #4]
   13fca:	68db      	ldr	r3, [r3, #12]
   13fcc:	2b01      	cmp	r3, #1
   13fce:	d905      	bls.n	13fdc <z_impl_k_mutex_unlock+0xa4>
		mutex->lock_count--;
   13fd0:	687b      	ldr	r3, [r7, #4]
   13fd2:	68db      	ldr	r3, [r3, #12]
   13fd4:	1e5a      	subs	r2, r3, #1
   13fd6:	687b      	ldr	r3, [r7, #4]
   13fd8:	60da      	str	r2, [r3, #12]
		goto k_mutex_unlock_return;
   13fda:	e094      	b.n	14106 <z_impl_k_mutex_unlock+0x1ce>
   13fdc:	4b53      	ldr	r3, [pc, #332]	; (1412c <z_impl_k_mutex_unlock+0x1f4>)
   13fde:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   13fe0:	f04f 0320 	mov.w	r3, #32
   13fe4:	f3ef 8211 	mrs	r2, BASEPRI
   13fe8:	f383 8812 	msr	BASEPRI_MAX, r3
   13fec:	f3bf 8f6f 	isb	sy
   13ff0:	633a      	str	r2, [r7, #48]	; 0x30
   13ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
   13ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = arch_irq_lock();
   13ff6:	60bb      	str	r3, [r7, #8]
   13ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   13ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13ffe:	f7ff fc8d 	bl	1391c <z_spin_lock_valid>
   14002:	4603      	mov	r3, r0
   14004:	f083 0301 	eor.w	r3, r3, #1
   14008:	b2db      	uxtb	r3, r3
   1400a:	2b00      	cmp	r3, #0
   1400c:	d00d      	beq.n	1402a <z_impl_k_mutex_unlock+0xf2>
   1400e:	2372      	movs	r3, #114	; 0x72
   14010:	4a47      	ldr	r2, [pc, #284]	; (14130 <z_impl_k_mutex_unlock+0x1f8>)
   14012:	4948      	ldr	r1, [pc, #288]	; (14134 <z_impl_k_mutex_unlock+0x1fc>)
   14014:	4840      	ldr	r0, [pc, #256]	; (14118 <z_impl_k_mutex_unlock+0x1e0>)
   14016:	f005 ffcd 	bl	19fb4 <assert_print>
   1401a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1401c:	4846      	ldr	r0, [pc, #280]	; (14138 <z_impl_k_mutex_unlock+0x200>)
   1401e:	f005 ffc9 	bl	19fb4 <assert_print>
   14022:	2172      	movs	r1, #114	; 0x72
   14024:	4842      	ldr	r0, [pc, #264]	; (14130 <z_impl_k_mutex_unlock+0x1f8>)
   14026:	f005 ffb5 	bl	19f94 <assert_post_action>
}
   1402a:	bf00      	nop
   1402c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1402e:	627b      	str	r3, [r7, #36]	; 0x24
	z_spin_lock_set_owner(l);
   14030:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14032:	f7ff fcab 	bl	1398c <z_spin_lock_set_owner>
}
   14036:	bf00      	nop
	return k;
   14038:	68bb      	ldr	r3, [r7, #8]
   1403a:	613b      	str	r3, [r7, #16]
	}

	k_spinlock_key_t key = k_spin_lock(&lock);

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1403c:	687b      	ldr	r3, [r7, #4]
   1403e:	691b      	ldr	r3, [r3, #16]
   14040:	4619      	mov	r1, r3
   14042:	6878      	ldr	r0, [r7, #4]
   14044:	f7ff fd04 	bl	13a50 <adjust_owner_prio>

	/* Get the new owner, if any */
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   14048:	687b      	ldr	r3, [r7, #4]
   1404a:	4618      	mov	r0, r3
   1404c:	f001 fd58 	bl	15b00 <z_unpend_first_thread>
   14050:	63f8      	str	r0, [r7, #60]	; 0x3c

	mutex->owner = new_owner;
   14052:	687b      	ldr	r3, [r7, #4]
   14054:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14056:	609a      	str	r2, [r3, #8]

	LOG_DBG("new owner of mutex %p: %p (prio: %d)",
   14058:	2303      	movs	r3, #3
   1405a:	2b03      	cmp	r3, #3
   1405c:	d912      	bls.n	14084 <z_impl_k_mutex_unlock+0x14c>
   1405e:	2004      	movs	r0, #4
   14060:	f7ff fcd4 	bl	13a0c <z_log_minimal_level_to_char>
   14064:	4603      	mov	r3, r0
   14066:	4619      	mov	r1, r3
   14068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1406a:	2b00      	cmp	r3, #0
   1406c:	d003      	beq.n	14076 <z_impl_k_mutex_unlock+0x13e>
   1406e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14070:	f993 300e 	ldrsb.w	r3, [r3, #14]
   14074:	e000      	b.n	14078 <z_impl_k_mutex_unlock+0x140>
   14076:	4b31      	ldr	r3, [pc, #196]	; (1413c <z_impl_k_mutex_unlock+0x204>)
   14078:	9300      	str	r3, [sp, #0]
   1407a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1407c:	687a      	ldr	r2, [r7, #4]
   1407e:	4830      	ldr	r0, [pc, #192]	; (14140 <z_impl_k_mutex_unlock+0x208>)
   14080:	f005 ffbb 	bl	19ffa <z_log_minimal_printk>
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner != NULL) {
   14084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14086:	2b00      	cmp	r3, #0
   14088:	d016      	beq.n	140b8 <z_impl_k_mutex_unlock+0x180>
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * adjust its priority
		 */
		mutex->owner_orig_prio = new_owner->base.prio;
   1408a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1408c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   14090:	461a      	mov	r2, r3
   14092:	687b      	ldr	r3, [r7, #4]
   14094:	611a      	str	r2, [r3, #16]
   14096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14098:	623b      	str	r3, [r7, #32]
   1409a:	2300      	movs	r3, #0
   1409c:	61fb      	str	r3, [r7, #28]

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1409e:	6a3b      	ldr	r3, [r7, #32]
   140a0:	69fa      	ldr	r2, [r7, #28]
   140a2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
   140a6:	bf00      	nop
		arch_thread_return_value_set(new_owner, 0);
		z_ready_thread(new_owner);
   140a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   140aa:	f000 ffef 	bl	1508c <z_ready_thread>
		z_reschedule(&lock, key);
   140ae:	6939      	ldr	r1, [r7, #16]
   140b0:	481e      	ldr	r0, [pc, #120]	; (1412c <z_impl_k_mutex_unlock+0x1f4>)
   140b2:	f001 ffa1 	bl	15ff8 <z_reschedule>
   140b6:	e026      	b.n	14106 <z_impl_k_mutex_unlock+0x1ce>
	} else {
		mutex->lock_count = 0U;
   140b8:	687b      	ldr	r3, [r7, #4]
   140ba:	2200      	movs	r2, #0
   140bc:	60da      	str	r2, [r3, #12]
   140be:	4b1b      	ldr	r3, [pc, #108]	; (1412c <z_impl_k_mutex_unlock+0x1f4>)
   140c0:	61bb      	str	r3, [r7, #24]
   140c2:	693b      	ldr	r3, [r7, #16]
   140c4:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   140c6:	69b8      	ldr	r0, [r7, #24]
   140c8:	f7ff fc44 	bl	13954 <z_spin_unlock_valid>
   140cc:	4603      	mov	r3, r0
   140ce:	f083 0301 	eor.w	r3, r3, #1
   140d2:	b2db      	uxtb	r3, r3
   140d4:	2b00      	cmp	r3, #0
   140d6:	d00d      	beq.n	140f4 <z_impl_k_mutex_unlock+0x1bc>
   140d8:	23f0      	movs	r3, #240	; 0xf0
   140da:	4a15      	ldr	r2, [pc, #84]	; (14130 <z_impl_k_mutex_unlock+0x1f8>)
   140dc:	4919      	ldr	r1, [pc, #100]	; (14144 <z_impl_k_mutex_unlock+0x20c>)
   140de:	480e      	ldr	r0, [pc, #56]	; (14118 <z_impl_k_mutex_unlock+0x1e0>)
   140e0:	f005 ff68 	bl	19fb4 <assert_print>
   140e4:	69b9      	ldr	r1, [r7, #24]
   140e6:	4818      	ldr	r0, [pc, #96]	; (14148 <z_impl_k_mutex_unlock+0x210>)
   140e8:	f005 ff64 	bl	19fb4 <assert_print>
   140ec:	21f0      	movs	r1, #240	; 0xf0
   140ee:	4810      	ldr	r0, [pc, #64]	; (14130 <z_impl_k_mutex_unlock+0x1f8>)
   140f0:	f005 ff50 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   140f4:	68fb      	ldr	r3, [r7, #12]
   140f6:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   140f8:	697b      	ldr	r3, [r7, #20]
   140fa:	f383 8811 	msr	BASEPRI, r3
   140fe:	f3bf 8f6f 	isb	sy
}
   14102:	bf00      	nop
}
   14104:	bf00      	nop


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   14106:	2300      	movs	r3, #0
}
   14108:	4618      	mov	r0, r3
   1410a:	3740      	adds	r7, #64	; 0x40
   1410c:	46bd      	mov	sp, r7
   1410e:	bd80      	pop	{r7, pc}
   14110:	000231a4 	.word	0x000231a4
   14114:	000231c8 	.word	0x000231c8
   14118:	000231dc 	.word	0x000231dc
   1411c:	000231fc 	.word	0x000231fc
   14120:	2000ce4c 	.word	0x2000ce4c
   14124:	00023394 	.word	0x00023394
   14128:	000233ac 	.word	0x000233ac
   1412c:	2000ce70 	.word	0x2000ce70
   14130:	00023224 	.word	0x00023224
   14134:	00023254 	.word	0x00023254
   14138:	0002326c 	.word	0x0002326c
   1413c:	fffffc18 	.word	0xfffffc18
   14140:	000233cc 	.word	0x000233cc
   14144:	000232b4 	.word	0x000232b4
   14148:	000232cc 	.word	0x000232cc

0001414c <z_impl_k_sem_give>:
	return false;
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1414c:	b580      	push	{r7, lr}
   1414e:	b090      	sub	sp, #64	; 0x40
   14150:	af00      	add	r7, sp, #0
   14152:	6078      	str	r0, [r7, #4]
   14154:	4b46      	ldr	r3, [pc, #280]	; (14270 <z_impl_k_sem_give+0x124>)
   14156:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   14158:	f04f 0320 	mov.w	r3, #32
   1415c:	f3ef 8211 	mrs	r2, BASEPRI
   14160:	f383 8812 	msr	BASEPRI_MAX, r3
   14164:	f3bf 8f6f 	isb	sy
   14168:	633a      	str	r2, [r7, #48]	; 0x30
   1416a:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
   1416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = arch_irq_lock();
   1416e:	60bb      	str	r3, [r7, #8]
   14170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14172:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   14174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   14176:	f7ff fbd1 	bl	1391c <z_spin_lock_valid>
   1417a:	4603      	mov	r3, r0
   1417c:	f083 0301 	eor.w	r3, r3, #1
   14180:	b2db      	uxtb	r3, r3
   14182:	2b00      	cmp	r3, #0
   14184:	d00d      	beq.n	141a2 <z_impl_k_sem_give+0x56>
   14186:	2372      	movs	r3, #114	; 0x72
   14188:	4a3a      	ldr	r2, [pc, #232]	; (14274 <z_impl_k_sem_give+0x128>)
   1418a:	493b      	ldr	r1, [pc, #236]	; (14278 <z_impl_k_sem_give+0x12c>)
   1418c:	483b      	ldr	r0, [pc, #236]	; (1427c <z_impl_k_sem_give+0x130>)
   1418e:	f005 ff11 	bl	19fb4 <assert_print>
   14192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14194:	483a      	ldr	r0, [pc, #232]	; (14280 <z_impl_k_sem_give+0x134>)
   14196:	f005 ff0d 	bl	19fb4 <assert_print>
   1419a:	2172      	movs	r1, #114	; 0x72
   1419c:	4835      	ldr	r0, [pc, #212]	; (14274 <z_impl_k_sem_give+0x128>)
   1419e:	f005 fef9 	bl	19f94 <assert_post_action>
}
   141a2:	bf00      	nop
   141a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   141a6:	627b      	str	r3, [r7, #36]	; 0x24
	z_spin_lock_set_owner(l);
   141a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   141aa:	f7ff fbef 	bl	1398c <z_spin_lock_set_owner>
}
   141ae:	bf00      	nop
	return k;
   141b0:	68bb      	ldr	r3, [r7, #8]
   141b2:	613b      	str	r3, [r7, #16]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;
	bool resched = true;
   141b4:	2301      	movs	r3, #1
   141b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   141ba:	687b      	ldr	r3, [r7, #4]
   141bc:	4618      	mov	r0, r3
   141be:	f001 fc9f 	bl	15b00 <z_unpend_first_thread>
   141c2:	63b8      	str	r0, [r7, #56]	; 0x38

	if (thread != NULL) {
   141c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   141c6:	2b00      	cmp	r3, #0
   141c8:	d00c      	beq.n	141e4 <z_impl_k_sem_give+0x98>
   141ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   141cc:	623b      	str	r3, [r7, #32]
   141ce:	2300      	movs	r3, #0
   141d0:	61fb      	str	r3, [r7, #28]
	thread->arch.swap_return_value = value;
   141d2:	6a3b      	ldr	r3, [r7, #32]
   141d4:	69fa      	ldr	r2, [r7, #28]
   141d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
   141da:	bf00      	nop
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   141dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   141de:	f000 ff55 	bl	1508c <z_ready_thread>
   141e2:	e013      	b.n	1420c <z_impl_k_sem_give+0xc0>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   141e4:	687b      	ldr	r3, [r7, #4]
   141e6:	689b      	ldr	r3, [r3, #8]
   141e8:	687a      	ldr	r2, [r7, #4]
   141ea:	6891      	ldr	r1, [r2, #8]
   141ec:	687a      	ldr	r2, [r7, #4]
   141ee:	68d2      	ldr	r2, [r2, #12]
   141f0:	4291      	cmp	r1, r2
   141f2:	d001      	beq.n	141f8 <z_impl_k_sem_give+0xac>
   141f4:	2201      	movs	r2, #1
   141f6:	e000      	b.n	141fa <z_impl_k_sem_give+0xae>
   141f8:	2200      	movs	r2, #0
   141fa:	441a      	add	r2, r3
   141fc:	687b      	ldr	r3, [r7, #4]
   141fe:	609a      	str	r2, [r3, #8]
		resched = handle_poll_events(sem);
   14200:	6878      	ldr	r0, [r7, #4]
   14202:	f00a fbe8 	bl	1e9d6 <handle_poll_events>
   14206:	4603      	mov	r3, r0
   14208:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (resched) {
   1420c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   14210:	2b00      	cmp	r3, #0
   14212:	d004      	beq.n	1421e <z_impl_k_sem_give+0xd2>
		z_reschedule(&lock, key);
   14214:	6939      	ldr	r1, [r7, #16]
   14216:	4816      	ldr	r0, [pc, #88]	; (14270 <z_impl_k_sem_give+0x124>)
   14218:	f001 feee 	bl	15ff8 <z_reschedule>
	} else {
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1421c:	e023      	b.n	14266 <z_impl_k_sem_give+0x11a>
   1421e:	4b14      	ldr	r3, [pc, #80]	; (14270 <z_impl_k_sem_give+0x124>)
   14220:	61bb      	str	r3, [r7, #24]
   14222:	693b      	ldr	r3, [r7, #16]
   14224:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14226:	69b8      	ldr	r0, [r7, #24]
   14228:	f7ff fb94 	bl	13954 <z_spin_unlock_valid>
   1422c:	4603      	mov	r3, r0
   1422e:	f083 0301 	eor.w	r3, r3, #1
   14232:	b2db      	uxtb	r3, r3
   14234:	2b00      	cmp	r3, #0
   14236:	d00d      	beq.n	14254 <z_impl_k_sem_give+0x108>
   14238:	23f0      	movs	r3, #240	; 0xf0
   1423a:	4a0e      	ldr	r2, [pc, #56]	; (14274 <z_impl_k_sem_give+0x128>)
   1423c:	4911      	ldr	r1, [pc, #68]	; (14284 <z_impl_k_sem_give+0x138>)
   1423e:	480f      	ldr	r0, [pc, #60]	; (1427c <z_impl_k_sem_give+0x130>)
   14240:	f005 feb8 	bl	19fb4 <assert_print>
   14244:	69b9      	ldr	r1, [r7, #24]
   14246:	4810      	ldr	r0, [pc, #64]	; (14288 <z_impl_k_sem_give+0x13c>)
   14248:	f005 feb4 	bl	19fb4 <assert_print>
   1424c:	21f0      	movs	r1, #240	; 0xf0
   1424e:	4809      	ldr	r0, [pc, #36]	; (14274 <z_impl_k_sem_give+0x128>)
   14250:	f005 fea0 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   14254:	68fb      	ldr	r3, [r7, #12]
   14256:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   14258:	697b      	ldr	r3, [r7, #20]
   1425a:	f383 8811 	msr	BASEPRI, r3
   1425e:	f3bf 8f6f 	isb	sy
}
   14262:	bf00      	nop
}
   14264:	bf00      	nop
   14266:	bf00      	nop
   14268:	3740      	adds	r7, #64	; 0x40
   1426a:	46bd      	mov	sp, r7
   1426c:	bd80      	pop	{r7, pc}
   1426e:	bf00      	nop
   14270:	2000ce74 	.word	0x2000ce74
   14274:	000233f8 	.word	0x000233f8
   14278:	00023428 	.word	0x00023428
   1427c:	00023440 	.word	0x00023440
   14280:	00023460 	.word	0x00023460
   14284:	00023478 	.word	0x00023478
   14288:	00023490 	.word	0x00023490

0001428c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1428c:	b580      	push	{r7, lr}
   1428e:	b096      	sub	sp, #88	; 0x58
   14290:	af02      	add	r7, sp, #8
   14292:	60f8      	str	r0, [r7, #12]
   14294:	e9c7 2300 	strd	r2, r3, [r7]
	int ret = 0;
   14298:	2300      	movs	r3, #0
   1429a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1429c:	f3ef 8305 	mrs	r3, IPSR
   142a0:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
   142a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   142a4:	2b00      	cmp	r3, #0
   142a6:	bf14      	ite	ne
   142a8:	2301      	movne	r3, #1
   142aa:	2300      	moveq	r3, #0
   142ac:	b2db      	uxtb	r3, r3

	__ASSERT(((arch_is_in_isr() == false) ||
   142ae:	2b00      	cmp	r3, #0
   142b0:	d016      	beq.n	142e0 <z_impl_k_sem_take+0x54>
   142b2:	e9d7 2300 	ldrd	r2, r3, [r7]
   142b6:	f04f 0000 	mov.w	r0, #0
   142ba:	f04f 0100 	mov.w	r1, #0
   142be:	428b      	cmp	r3, r1
   142c0:	bf08      	it	eq
   142c2:	4282      	cmpeq	r2, r0
   142c4:	d00c      	beq.n	142e0 <z_impl_k_sem_take+0x54>
   142c6:	2380      	movs	r3, #128	; 0x80
   142c8:	4a59      	ldr	r2, [pc, #356]	; (14430 <z_impl_k_sem_take+0x1a4>)
   142ca:	495a      	ldr	r1, [pc, #360]	; (14434 <z_impl_k_sem_take+0x1a8>)
   142cc:	485a      	ldr	r0, [pc, #360]	; (14438 <z_impl_k_sem_take+0x1ac>)
   142ce:	f005 fe71 	bl	19fb4 <assert_print>
   142d2:	485a      	ldr	r0, [pc, #360]	; (1443c <z_impl_k_sem_take+0x1b0>)
   142d4:	f005 fe6e 	bl	19fb4 <assert_print>
   142d8:	2180      	movs	r1, #128	; 0x80
   142da:	4855      	ldr	r0, [pc, #340]	; (14430 <z_impl_k_sem_take+0x1a4>)
   142dc:	f005 fe5a 	bl	19f94 <assert_post_action>
   142e0:	4b57      	ldr	r3, [pc, #348]	; (14440 <z_impl_k_sem_take+0x1b4>)
   142e2:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
   142e4:	f04f 0320 	mov.w	r3, #32
   142e8:	f3ef 8211 	mrs	r2, BASEPRI
   142ec:	f383 8812 	msr	BASEPRI_MAX, r3
   142f0:	f3bf 8f6f 	isb	sy
   142f4:	643a      	str	r2, [r7, #64]	; 0x40
   142f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	return key;
   142f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	k.key = arch_irq_lock();
   142fa:	61bb      	str	r3, [r7, #24]
   142fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   142fe:	63bb      	str	r3, [r7, #56]	; 0x38
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   14300:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   14302:	f7ff fb0b 	bl	1391c <z_spin_lock_valid>
   14306:	4603      	mov	r3, r0
   14308:	f083 0301 	eor.w	r3, r3, #1
   1430c:	b2db      	uxtb	r3, r3
   1430e:	2b00      	cmp	r3, #0
   14310:	d00d      	beq.n	1432e <z_impl_k_sem_take+0xa2>
   14312:	2372      	movs	r3, #114	; 0x72
   14314:	4a4b      	ldr	r2, [pc, #300]	; (14444 <z_impl_k_sem_take+0x1b8>)
   14316:	494c      	ldr	r1, [pc, #304]	; (14448 <z_impl_k_sem_take+0x1bc>)
   14318:	4847      	ldr	r0, [pc, #284]	; (14438 <z_impl_k_sem_take+0x1ac>)
   1431a:	f005 fe4b 	bl	19fb4 <assert_print>
   1431e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   14320:	484a      	ldr	r0, [pc, #296]	; (1444c <z_impl_k_sem_take+0x1c0>)
   14322:	f005 fe47 	bl	19fb4 <assert_print>
   14326:	2172      	movs	r1, #114	; 0x72
   14328:	4846      	ldr	r0, [pc, #280]	; (14444 <z_impl_k_sem_take+0x1b8>)
   1432a:	f005 fe33 	bl	19f94 <assert_post_action>
}
   1432e:	bf00      	nop
   14330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14332:	637b      	str	r3, [r7, #52]	; 0x34
	z_spin_lock_set_owner(l);
   14334:	6b78      	ldr	r0, [r7, #52]	; 0x34
   14336:	f7ff fb29 	bl	1398c <z_spin_lock_set_owner>
}
   1433a:	bf00      	nop
	return k;
   1433c:	69bb      	ldr	r3, [r7, #24]
   1433e:	623b      	str	r3, [r7, #32]

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   14340:	68fb      	ldr	r3, [r7, #12]
   14342:	689b      	ldr	r3, [r3, #8]
   14344:	2b00      	cmp	r3, #0
   14346:	bf14      	ite	ne
   14348:	2301      	movne	r3, #1
   1434a:	2300      	moveq	r3, #0
   1434c:	b2db      	uxtb	r3, r3
   1434e:	2b00      	cmp	r3, #0
   14350:	d02b      	beq.n	143aa <z_impl_k_sem_take+0x11e>
		sem->count--;
   14352:	68fb      	ldr	r3, [r7, #12]
   14354:	689b      	ldr	r3, [r3, #8]
   14356:	1e5a      	subs	r2, r3, #1
   14358:	68fb      	ldr	r3, [r7, #12]
   1435a:	609a      	str	r2, [r3, #8]
   1435c:	4b38      	ldr	r3, [pc, #224]	; (14440 <z_impl_k_sem_take+0x1b4>)
   1435e:	633b      	str	r3, [r7, #48]	; 0x30
   14360:	6a3b      	ldr	r3, [r7, #32]
   14362:	61fb      	str	r3, [r7, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14364:	6b38      	ldr	r0, [r7, #48]	; 0x30
   14366:	f7ff faf5 	bl	13954 <z_spin_unlock_valid>
   1436a:	4603      	mov	r3, r0
   1436c:	f083 0301 	eor.w	r3, r3, #1
   14370:	b2db      	uxtb	r3, r3
   14372:	2b00      	cmp	r3, #0
   14374:	d00d      	beq.n	14392 <z_impl_k_sem_take+0x106>
   14376:	23f0      	movs	r3, #240	; 0xf0
   14378:	4a32      	ldr	r2, [pc, #200]	; (14444 <z_impl_k_sem_take+0x1b8>)
   1437a:	4935      	ldr	r1, [pc, #212]	; (14450 <z_impl_k_sem_take+0x1c4>)
   1437c:	482e      	ldr	r0, [pc, #184]	; (14438 <z_impl_k_sem_take+0x1ac>)
   1437e:	f005 fe19 	bl	19fb4 <assert_print>
   14382:	6b39      	ldr	r1, [r7, #48]	; 0x30
   14384:	4833      	ldr	r0, [pc, #204]	; (14454 <z_impl_k_sem_take+0x1c8>)
   14386:	f005 fe15 	bl	19fb4 <assert_print>
   1438a:	21f0      	movs	r1, #240	; 0xf0
   1438c:	482d      	ldr	r0, [pc, #180]	; (14444 <z_impl_k_sem_take+0x1b8>)
   1438e:	f005 fe01 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   14392:	69fb      	ldr	r3, [r7, #28]
   14394:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   14396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14398:	f383 8811 	msr	BASEPRI, r3
   1439c:	f3bf 8f6f 	isb	sy
}
   143a0:	bf00      	nop
}
   143a2:	bf00      	nop
		k_spin_unlock(&lock, key);
		ret = 0;
   143a4:	2300      	movs	r3, #0
   143a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		goto out;
   143a8:	e03c      	b.n	14424 <z_impl_k_sem_take+0x198>
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   143aa:	e9d7 2300 	ldrd	r2, r3, [r7]
   143ae:	f04f 0000 	mov.w	r0, #0
   143b2:	f04f 0100 	mov.w	r1, #0
   143b6:	428b      	cmp	r3, r1
   143b8:	bf08      	it	eq
   143ba:	4282      	cmpeq	r2, r0
   143bc:	d127      	bne.n	1440e <z_impl_k_sem_take+0x182>
   143be:	4b20      	ldr	r3, [pc, #128]	; (14440 <z_impl_k_sem_take+0x1b4>)
   143c0:	62bb      	str	r3, [r7, #40]	; 0x28
   143c2:	6a3b      	ldr	r3, [r7, #32]
   143c4:	617b      	str	r3, [r7, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   143c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   143c8:	f7ff fac4 	bl	13954 <z_spin_unlock_valid>
   143cc:	4603      	mov	r3, r0
   143ce:	f083 0301 	eor.w	r3, r3, #1
   143d2:	b2db      	uxtb	r3, r3
   143d4:	2b00      	cmp	r3, #0
   143d6:	d00d      	beq.n	143f4 <z_impl_k_sem_take+0x168>
   143d8:	23f0      	movs	r3, #240	; 0xf0
   143da:	4a1a      	ldr	r2, [pc, #104]	; (14444 <z_impl_k_sem_take+0x1b8>)
   143dc:	491c      	ldr	r1, [pc, #112]	; (14450 <z_impl_k_sem_take+0x1c4>)
   143de:	4816      	ldr	r0, [pc, #88]	; (14438 <z_impl_k_sem_take+0x1ac>)
   143e0:	f005 fde8 	bl	19fb4 <assert_print>
   143e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   143e6:	481b      	ldr	r0, [pc, #108]	; (14454 <z_impl_k_sem_take+0x1c8>)
   143e8:	f005 fde4 	bl	19fb4 <assert_print>
   143ec:	21f0      	movs	r1, #240	; 0xf0
   143ee:	4815      	ldr	r0, [pc, #84]	; (14444 <z_impl_k_sem_take+0x1b8>)
   143f0:	f005 fdd0 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   143f4:	697b      	ldr	r3, [r7, #20]
   143f6:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   143f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   143fa:	f383 8811 	msr	BASEPRI, r3
   143fe:	f3bf 8f6f 	isb	sy
}
   14402:	bf00      	nop
}
   14404:	bf00      	nop
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
   14406:	f06f 030f 	mvn.w	r3, #15
   1440a:	64fb      	str	r3, [r7, #76]	; 0x4c
   1440c:	e00a      	b.n	14424 <z_impl_k_sem_take+0x198>
		goto out;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_sem, take, sem, timeout);

	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1440e:	68f9      	ldr	r1, [r7, #12]
   14410:	e9d7 2300 	ldrd	r2, r3, [r7]
   14414:	e9cd 2300 	strd	r2, r3, [sp]
   14418:	460a      	mov	r2, r1
   1441a:	6a39      	ldr	r1, [r7, #32]
   1441c:	4808      	ldr	r0, [pc, #32]	; (14440 <z_impl_k_sem_take+0x1b4>)
   1441e:	f001 fa29 	bl	15874 <z_pend_curr>
   14422:	64f8      	str	r0, [r7, #76]	; 0x4c

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
   14424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
   14426:	4618      	mov	r0, r3
   14428:	3750      	adds	r7, #80	; 0x50
   1442a:	46bd      	mov	sp, r7
   1442c:	bd80      	pop	{r7, pc}
   1442e:	bf00      	nop
   14430:	000234a8 	.word	0x000234a8
   14434:	000234c8 	.word	0x000234c8
   14438:	00023440 	.word	0x00023440
   1443c:	00023518 	.word	0x00023518
   14440:	2000ce74 	.word	0x2000ce74
   14444:	000233f8 	.word	0x000233f8
   14448:	00023428 	.word	0x00023428
   1444c:	00023460 	.word	0x00023460
   14450:	00023478 	.word	0x00023478
   14454:	00023490 	.word	0x00023490

00014458 <k_ticks_to_ms_floor64>:
{
   14458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1445c:	b0bd      	sub	sp, #244	; 0xf4
   1445e:	af00      	add	r7, sp, #0
   14460:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
   14464:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
   14468:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
   1446c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14470:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   14474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
   1447c:	2301      	movs	r3, #1
   1447e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
   14482:	2300      	movs	r3, #0
   14484:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
   14488:	2300      	movs	r3, #0
   1448a:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
   1448e:	2300      	movs	r3, #0
   14490:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   14494:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
   14498:	2b00      	cmp	r3, #0
   1449a:	d014      	beq.n	144c6 <k_ticks_to_ms_floor64+0x6e>
	bool mul_ratio = const_hz &&
   1449c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   144a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   144a4:	429a      	cmp	r2, r3
   144a6:	d20e      	bcs.n	144c6 <k_ticks_to_ms_floor64+0x6e>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   144a8:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
   144ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   144b0:	fbb1 f2f3 	udiv	r2, r1, r3
   144b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   144b8:	fb02 f303 	mul.w	r3, r2, r3
   144bc:	1acb      	subs	r3, r1, r3
   144be:	2b00      	cmp	r3, #0
   144c0:	d101      	bne.n	144c6 <k_ticks_to_ms_floor64+0x6e>
   144c2:	2301      	movs	r3, #1
   144c4:	e000      	b.n	144c8 <k_ticks_to_ms_floor64+0x70>
   144c6:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   144c8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
   144cc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   144d0:	f003 0301 	and.w	r3, r3, #1
   144d4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   144d8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
   144dc:	2b00      	cmp	r3, #0
   144de:	d014      	beq.n	1450a <k_ticks_to_ms_floor64+0xb2>
	bool div_ratio = const_hz &&
   144e0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   144e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   144e8:	429a      	cmp	r2, r3
   144ea:	d90e      	bls.n	1450a <k_ticks_to_ms_floor64+0xb2>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   144ec:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
   144f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   144f4:	fbb1 f2f3 	udiv	r2, r1, r3
   144f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   144fc:	fb02 f303 	mul.w	r3, r2, r3
   14500:	1acb      	subs	r3, r1, r3
   14502:	2b00      	cmp	r3, #0
   14504:	d101      	bne.n	1450a <k_ticks_to_ms_floor64+0xb2>
   14506:	2301      	movs	r3, #1
   14508:	e000      	b.n	1450c <k_ticks_to_ms_floor64+0xb4>
   1450a:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   1450c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
   14510:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
   14514:	f003 0301 	and.w	r3, r3, #1
   14518:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	if (from_hz == to_hz) {
   1451c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   14520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   14524:	429a      	cmp	r2, r3
   14526:	d10c      	bne.n	14542 <k_ticks_to_ms_floor64+0xea>
		return result32 ? ((uint32_t)t) : t;
   14528:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
   1452c:	2b00      	cmp	r3, #0
   1452e:	d005      	beq.n	1453c <k_ticks_to_ms_floor64+0xe4>
   14530:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   14534:	2200      	movs	r2, #0
   14536:	461c      	mov	r4, r3
   14538:	4615      	mov	r5, r2
   1453a:	e1de      	b.n	148fa <k_ticks_to_ms_floor64+0x4a2>
   1453c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
   14540:	e1db      	b.n	148fa <k_ticks_to_ms_floor64+0x4a2>
	uint64_t off = 0;
   14542:	f04f 0200 	mov.w	r2, #0
   14546:	f04f 0300 	mov.w	r3, #0
   1454a:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (!mul_ratio) {
   1454e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   14552:	f083 0301 	eor.w	r3, r3, #1
   14556:	b2db      	uxtb	r3, r3
   14558:	2b00      	cmp	r3, #0
   1455a:	d02a      	beq.n	145b2 <k_ticks_to_ms_floor64+0x15a>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   1455c:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
   14560:	2b00      	cmp	r3, #0
   14562:	d006      	beq.n	14572 <k_ticks_to_ms_floor64+0x11a>
   14564:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   14568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   1456c:	fbb2 f3f3 	udiv	r3, r2, r3
   14570:	e001      	b.n	14576 <k_ticks_to_ms_floor64+0x11e>
   14572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   14576:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		if (round_up) {
   1457a:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
   1457e:	2b00      	cmp	r3, #0
   14580:	d009      	beq.n	14596 <k_ticks_to_ms_floor64+0x13e>
			off = rdivisor - 1U;
   14582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   14586:	3b01      	subs	r3, #1
   14588:	2200      	movs	r2, #0
   1458a:	613b      	str	r3, [r7, #16]
   1458c:	617a      	str	r2, [r7, #20]
   1458e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   14592:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		if (round_off) {
   14596:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
   1459a:	2b00      	cmp	r3, #0
   1459c:	d009      	beq.n	145b2 <k_ticks_to_ms_floor64+0x15a>
			off = rdivisor / 2U;
   1459e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   145a2:	085b      	lsrs	r3, r3, #1
   145a4:	2200      	movs	r2, #0
   145a6:	60bb      	str	r3, [r7, #8]
   145a8:	60fa      	str	r2, [r7, #12]
   145aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   145ae:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (div_ratio) {
   145b2:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
   145b6:	2b00      	cmp	r3, #0
   145b8:	d038      	beq.n	1462c <k_ticks_to_ms_floor64+0x1d4>
		t += off;
   145ba:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
   145be:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
   145c2:	1886      	adds	r6, r0, r2
   145c4:	603e      	str	r6, [r7, #0]
   145c6:	eb41 0303 	adc.w	r3, r1, r3
   145ca:	607b      	str	r3, [r7, #4]
   145cc:	e9d7 2300 	ldrd	r2, r3, [r7]
   145d0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		if (result32 && (t < BIT64(32))) {
   145d4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
   145d8:	2b00      	cmp	r3, #0
   145da:	d011      	beq.n	14600 <k_ticks_to_ms_floor64+0x1a8>
   145dc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
   145e0:	2b01      	cmp	r3, #1
   145e2:	d20d      	bcs.n	14600 <k_ticks_to_ms_floor64+0x1a8>
			return ((uint32_t)t) / (from_hz / to_hz);
   145e4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
   145e8:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
   145ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   145f0:	fbb1 f3f3 	udiv	r3, r1, r3
   145f4:	fbb2 f3f3 	udiv	r3, r2, r3
   145f8:	2200      	movs	r2, #0
   145fa:	461c      	mov	r4, r3
   145fc:	4615      	mov	r5, r2
   145fe:	e17c      	b.n	148fa <k_ticks_to_ms_floor64+0x4a2>
			return t / ((uint64_t)from_hz / to_hz);
   14600:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   14604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   14608:	fbb2 f3f3 	udiv	r3, r2, r3
   1460c:	2200      	movs	r2, #0
   1460e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   14612:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
   14616:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
   1461a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
   1461e:	f7f3 fd91 	bl	8144 <__aeabi_uldivmod>
   14622:	4602      	mov	r2, r0
   14624:	460b      	mov	r3, r1
   14626:	4614      	mov	r4, r2
   14628:	461d      	mov	r5, r3
   1462a:	e166      	b.n	148fa <k_ticks_to_ms_floor64+0x4a2>
	} else if (mul_ratio) {
   1462c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   14630:	2b00      	cmp	r3, #0
   14632:	d031      	beq.n	14698 <k_ticks_to_ms_floor64+0x240>
		if (result32) {
   14634:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
   14638:	2b00      	cmp	r3, #0
   1463a:	d00d      	beq.n	14658 <k_ticks_to_ms_floor64+0x200>
			return ((uint32_t)t) * (to_hz / from_hz);
   1463c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   14640:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
   14644:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   14648:	fbb1 f2f2 	udiv	r2, r1, r2
   1464c:	fb02 f303 	mul.w	r3, r2, r3
   14650:	2200      	movs	r2, #0
   14652:	461c      	mov	r4, r3
   14654:	4615      	mov	r5, r2
   14656:	e150      	b.n	148fa <k_ticks_to_ms_floor64+0x4a2>
			return t * ((uint64_t)to_hz / from_hz);
   14658:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
   1465c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   14660:	fbb2 f3f3 	udiv	r3, r2, r3
   14664:	2200      	movs	r2, #0
   14666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   1466a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
   1466e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   14672:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
   14676:	464a      	mov	r2, r9
   14678:	fb02 f203 	mul.w	r2, r2, r3
   1467c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   14680:	4641      	mov	r1, r8
   14682:	fb01 f303 	mul.w	r3, r1, r3
   14686:	4413      	add	r3, r2
   14688:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
   1468c:	4641      	mov	r1, r8
   1468e:	fba2 4501 	umull	r4, r5, r2, r1
   14692:	442b      	add	r3, r5
   14694:	461d      	mov	r5, r3
   14696:	e130      	b.n	148fa <k_ticks_to_ms_floor64+0x4a2>
		if (result32) {
   14698:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
   1469c:	2b00      	cmp	r3, #0
   1469e:	d035      	beq.n	1470c <k_ticks_to_ms_floor64+0x2b4>
			return (uint32_t)((t * to_hz + off) / from_hz);
   146a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   146a4:	2200      	movs	r2, #0
   146a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   146aa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
   146ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   146b2:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
   146b6:	465a      	mov	r2, fp
   146b8:	fb02 f203 	mul.w	r2, r2, r3
   146bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   146c0:	4651      	mov	r1, sl
   146c2:	fb01 f303 	mul.w	r3, r1, r3
   146c6:	4413      	add	r3, r2
   146c8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
   146cc:	4651      	mov	r1, sl
   146ce:	fba2 8901 	umull	r8, r9, r2, r1
   146d2:	444b      	add	r3, r9
   146d4:	4699      	mov	r9, r3
   146d6:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
   146da:	eb18 0102 	adds.w	r1, r8, r2
   146de:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
   146e2:	eb49 0303 	adc.w	r3, r9, r3
   146e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   146ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   146ee:	2200      	movs	r2, #0
   146f0:	67bb      	str	r3, [r7, #120]	; 0x78
   146f2:	67fa      	str	r2, [r7, #124]	; 0x7c
   146f4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
   146f8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
   146fc:	f7f3 fd22 	bl	8144 <__aeabi_uldivmod>
   14700:	4602      	mov	r2, r0
   14702:	460b      	mov	r3, r1
   14704:	2300      	movs	r3, #0
   14706:	4614      	mov	r4, r2
   14708:	461d      	mov	r5, r3
   1470a:	e0f6      	b.n	148fa <k_ticks_to_ms_floor64+0x4a2>
		} else if (const_hz && Z_TMCVT_USE_FAST_ALGO(from_hz, to_hz)) {
   1470c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
   14710:	2b00      	cmp	r3, #0
   14712:	f000 8082 	beq.w	1481a <k_ticks_to_ms_floor64+0x3c2>
   14716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   1471a:	2200      	movs	r2, #0
   1471c:	673b      	str	r3, [r7, #112]	; 0x70
   1471e:	677a      	str	r2, [r7, #116]	; 0x74
   14720:	4b7a      	ldr	r3, [pc, #488]	; (1490c <k_ticks_to_ms_floor64+0x4b4>)
   14722:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
   14726:	464a      	mov	r2, r9
   14728:	fb03 f202 	mul.w	r2, r3, r2
   1472c:	2300      	movs	r3, #0
   1472e:	4641      	mov	r1, r8
   14730:	fb01 f303 	mul.w	r3, r1, r3
   14734:	441a      	add	r2, r3
   14736:	4b75      	ldr	r3, [pc, #468]	; (1490c <k_ticks_to_ms_floor64+0x4b4>)
   14738:	4641      	mov	r1, r8
   1473a:	fba1 ab03 	umull	sl, fp, r1, r3
   1473e:	eb02 030b 	add.w	r3, r2, fp
   14742:	469b      	mov	fp, r3
   14744:	f1ba 0302 	subs.w	r3, sl, #2
   14748:	66bb      	str	r3, [r7, #104]	; 0x68
   1474a:	f14b 0300 	adc.w	r3, fp, #0
   1474e:	66fb      	str	r3, [r7, #108]	; 0x6c
   14750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14754:	f04f 0300 	mov.w	r3, #0
   14758:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   1475c:	f7f3 fcf2 	bl	8144 <__aeabi_uldivmod>
   14760:	4602      	mov	r2, r0
   14762:	460b      	mov	r3, r1
   14764:	4610      	mov	r0, r2
   14766:	4619      	mov	r1, r3
   14768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   1476c:	2200      	movs	r2, #0
   1476e:	663b      	str	r3, [r7, #96]	; 0x60
   14770:	667a      	str	r2, [r7, #100]	; 0x64
   14772:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
   14776:	4643      	mov	r3, r8
   14778:	fb03 f201 	mul.w	r2, r3, r1
   1477c:	464b      	mov	r3, r9
   1477e:	fb00 f303 	mul.w	r3, r0, r3
   14782:	4413      	add	r3, r2
   14784:	4642      	mov	r2, r8
   14786:	fba0 2102 	umull	r2, r1, r0, r2
   1478a:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
   1478e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
   14792:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
   14796:	4413      	add	r3, r2
   14798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   1479c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   147a0:	2b01      	cmp	r3, #1
   147a2:	d23a      	bcs.n	1481a <k_ticks_to_ms_floor64+0x3c2>
			return ((t * to_hz + off) / from_hz);
   147a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   147a8:	2200      	movs	r2, #0
   147aa:	65bb      	str	r3, [r7, #88]	; 0x58
   147ac:	65fa      	str	r2, [r7, #92]	; 0x5c
   147ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   147b2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
   147b6:	462a      	mov	r2, r5
   147b8:	fb02 f203 	mul.w	r2, r2, r3
   147bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   147c0:	4621      	mov	r1, r4
   147c2:	fb01 f303 	mul.w	r3, r1, r3
   147c6:	4413      	add	r3, r2
   147c8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
   147cc:	4621      	mov	r1, r4
   147ce:	fba2 2101 	umull	r2, r1, r2, r1
   147d2:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
   147d6:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
   147da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   147de:	4413      	add	r3, r2
   147e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
   147e4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
   147e8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
   147ec:	4621      	mov	r1, r4
   147ee:	1889      	adds	r1, r1, r2
   147f0:	6539      	str	r1, [r7, #80]	; 0x50
   147f2:	4629      	mov	r1, r5
   147f4:	eb43 0101 	adc.w	r1, r3, r1
   147f8:	6579      	str	r1, [r7, #84]	; 0x54
   147fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   147fe:	2200      	movs	r2, #0
   14800:	64bb      	str	r3, [r7, #72]	; 0x48
   14802:	64fa      	str	r2, [r7, #76]	; 0x4c
   14804:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   14808:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
   1480c:	f7f3 fc9a 	bl	8144 <__aeabi_uldivmod>
   14810:	4602      	mov	r2, r0
   14812:	460b      	mov	r3, r1
   14814:	4614      	mov	r4, r2
   14816:	461d      	mov	r5, r3
   14818:	e06f      	b.n	148fa <k_ticks_to_ms_floor64+0x4a2>
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
   1481a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   1481e:	2200      	movs	r2, #0
   14820:	643b      	str	r3, [r7, #64]	; 0x40
   14822:	647a      	str	r2, [r7, #68]	; 0x44
   14824:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
   14828:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
   1482c:	f7f3 fc8a 	bl	8144 <__aeabi_uldivmod>
   14830:	4602      	mov	r2, r0
   14832:	460b      	mov	r3, r1
   14834:	4610      	mov	r0, r2
   14836:	4619      	mov	r1, r3
   14838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   1483c:	2200      	movs	r2, #0
   1483e:	63bb      	str	r3, [r7, #56]	; 0x38
   14840:	63fa      	str	r2, [r7, #60]	; 0x3c
   14842:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
   14846:	4643      	mov	r3, r8
   14848:	fb03 f201 	mul.w	r2, r3, r1
   1484c:	464b      	mov	r3, r9
   1484e:	fb00 f303 	mul.w	r3, r0, r3
   14852:	4413      	add	r3, r2
   14854:	4642      	mov	r2, r8
   14856:	fba0 2102 	umull	r2, r1, r0, r2
   1485a:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
   1485e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
   14862:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   14866:	4413      	add	r3, r2
   14868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1486c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   14870:	2200      	movs	r2, #0
   14872:	633b      	str	r3, [r7, #48]	; 0x30
   14874:	637a      	str	r2, [r7, #52]	; 0x34
   14876:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
   1487a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   1487e:	f7f3 fc61 	bl	8144 <__aeabi_uldivmod>
   14882:	4610      	mov	r0, r2
   14884:	4619      	mov	r1, r3
   14886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   1488a:	2200      	movs	r2, #0
   1488c:	62bb      	str	r3, [r7, #40]	; 0x28
   1488e:	62fa      	str	r2, [r7, #44]	; 0x2c
   14890:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
   14894:	4643      	mov	r3, r8
   14896:	fb03 f201 	mul.w	r2, r3, r1
   1489a:	464b      	mov	r3, r9
   1489c:	fb00 f303 	mul.w	r3, r0, r3
   148a0:	4413      	add	r3, r2
   148a2:	4642      	mov	r2, r8
   148a4:	fba0 2102 	umull	r2, r1, r0, r2
   148a8:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
   148ac:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
   148b0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   148b4:	4413      	add	r3, r2
   148b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   148ba:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
   148be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
   148c2:	4641      	mov	r1, r8
   148c4:	1889      	adds	r1, r1, r2
   148c6:	6239      	str	r1, [r7, #32]
   148c8:	4649      	mov	r1, r9
   148ca:	eb43 0101 	adc.w	r1, r3, r1
   148ce:	6279      	str	r1, [r7, #36]	; 0x24
   148d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   148d4:	2200      	movs	r2, #0
   148d6:	61bb      	str	r3, [r7, #24]
   148d8:	61fa      	str	r2, [r7, #28]
   148da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   148de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   148e2:	f7f3 fc2f 	bl	8144 <__aeabi_uldivmod>
   148e6:	4602      	mov	r2, r0
   148e8:	460b      	mov	r3, r1
   148ea:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
   148ee:	4641      	mov	r1, r8
   148f0:	188c      	adds	r4, r1, r2
   148f2:	4649      	mov	r1, r9
   148f4:	eb43 0101 	adc.w	r1, r3, r1
   148f8:	460d      	mov	r5, r1
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, false, false, false);
   148fa:	4622      	mov	r2, r4
   148fc:	462b      	mov	r3, r5
}
   148fe:	4610      	mov	r0, r2
   14900:	4619      	mov	r1, r3
   14902:	37f4      	adds	r7, #244	; 0xf4
   14904:	46bd      	mov	sp, r7
   14906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1490a:	bf00      	nop
   1490c:	01e13380 	.word	0x01e13380

00014910 <z_add_thread_timeout>:
{
   14910:	b580      	push	{r7, lr}
   14912:	b084      	sub	sp, #16
   14914:	af00      	add	r7, sp, #0
   14916:	60f8      	str	r0, [r7, #12]
   14918:	e9c7 2300 	strd	r2, r3, [r7]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1491c:	68fb      	ldr	r3, [r7, #12]
   1491e:	f103 0018 	add.w	r0, r3, #24
   14922:	e9d7 2300 	ldrd	r2, r3, [r7]
   14926:	4903      	ldr	r1, [pc, #12]	; (14934 <z_add_thread_timeout+0x24>)
   14928:	f002 f9b8 	bl	16c9c <z_add_timeout>
}
   1492c:	bf00      	nop
   1492e:	3710      	adds	r7, #16
   14930:	46bd      	mov	sp, r7
   14932:	bd80      	pop	{r7, pc}
   14934:	0001ef57 	.word	0x0001ef57

00014938 <z_is_idle_thread_object>:

static inline bool z_is_idle_thread_object(struct k_thread *thread)
{
   14938:	b480      	push	{r7}
   1493a:	b083      	sub	sp, #12
   1493c:	af00      	add	r7, sp, #0
   1493e:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_MULTITHREADING
#ifdef CONFIG_SMP
	return thread->base.is_idle;
#else
	return thread == &z_idle_threads[0];
   14940:	687b      	ldr	r3, [r7, #4]
   14942:	4a05      	ldr	r2, [pc, #20]	; (14958 <z_is_idle_thread_object+0x20>)
   14944:	4293      	cmp	r3, r2
   14946:	bf0c      	ite	eq
   14948:	2301      	moveq	r3, #1
   1494a:	2300      	movne	r3, #0
   1494c:	b2db      	uxtb	r3, r3
#endif
#else
	return false;
#endif /* CONFIG_MULTITHREADING */
}
   1494e:	4618      	mov	r0, r3
   14950:	370c      	adds	r7, #12
   14952:	46bd      	mov	sp, r7
   14954:	bc80      	pop	{r7}
   14956:	4770      	bx	lr
   14958:	2000c828 	.word	0x2000c828

0001495c <z_sched_lock>:
		z_ready_thread(thread);
	}
}

static inline void z_sched_lock(void)
{
   1495c:	b580      	push	{r7, lr}
   1495e:	b082      	sub	sp, #8
   14960:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14962:	f3ef 8305 	mrs	r3, IPSR
   14966:	607b      	str	r3, [r7, #4]
  return(result);
   14968:	687b      	ldr	r3, [r7, #4]
   1496a:	2b00      	cmp	r3, #0
   1496c:	bf14      	ite	ne
   1496e:	2301      	movne	r3, #1
   14970:	2300      	moveq	r3, #0
   14972:	b2db      	uxtb	r3, r3
	__ASSERT(!arch_is_in_isr(), "");
   14974:	2b00      	cmp	r3, #0
   14976:	d00c      	beq.n	14992 <z_sched_lock+0x36>
   14978:	23fd      	movs	r3, #253	; 0xfd
   1497a:	4a14      	ldr	r2, [pc, #80]	; (149cc <z_sched_lock+0x70>)
   1497c:	4914      	ldr	r1, [pc, #80]	; (149d0 <z_sched_lock+0x74>)
   1497e:	4815      	ldr	r0, [pc, #84]	; (149d4 <z_sched_lock+0x78>)
   14980:	f005 fb18 	bl	19fb4 <assert_print>
   14984:	4814      	ldr	r0, [pc, #80]	; (149d8 <z_sched_lock+0x7c>)
   14986:	f005 fb15 	bl	19fb4 <assert_print>
   1498a:	21fd      	movs	r1, #253	; 0xfd
   1498c:	480f      	ldr	r0, [pc, #60]	; (149cc <z_sched_lock+0x70>)
   1498e:	f005 fb01 	bl	19f94 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   14992:	4b12      	ldr	r3, [pc, #72]	; (149dc <z_sched_lock+0x80>)
   14994:	689b      	ldr	r3, [r3, #8]
   14996:	7bdb      	ldrb	r3, [r3, #15]
   14998:	2b01      	cmp	r3, #1
   1499a:	d10c      	bne.n	149b6 <z_sched_lock+0x5a>
   1499c:	23fe      	movs	r3, #254	; 0xfe
   1499e:	4a0b      	ldr	r2, [pc, #44]	; (149cc <z_sched_lock+0x70>)
   149a0:	490f      	ldr	r1, [pc, #60]	; (149e0 <z_sched_lock+0x84>)
   149a2:	480c      	ldr	r0, [pc, #48]	; (149d4 <z_sched_lock+0x78>)
   149a4:	f005 fb06 	bl	19fb4 <assert_print>
   149a8:	480b      	ldr	r0, [pc, #44]	; (149d8 <z_sched_lock+0x7c>)
   149aa:	f005 fb03 	bl	19fb4 <assert_print>
   149ae:	21fe      	movs	r1, #254	; 0xfe
   149b0:	4806      	ldr	r0, [pc, #24]	; (149cc <z_sched_lock+0x70>)
   149b2:	f005 faef 	bl	19f94 <assert_post_action>

	--_current->base.sched_locked;
   149b6:	4b09      	ldr	r3, [pc, #36]	; (149dc <z_sched_lock+0x80>)
   149b8:	689b      	ldr	r3, [r3, #8]
   149ba:	7bda      	ldrb	r2, [r3, #15]
   149bc:	3a01      	subs	r2, #1
   149be:	b2d2      	uxtb	r2, r2
   149c0:	73da      	strb	r2, [r3, #15]

	compiler_barrier();
}
   149c2:	bf00      	nop
   149c4:	3708      	adds	r7, #8
   149c6:	46bd      	mov	sp, r7
   149c8:	bd80      	pop	{r7, pc}
   149ca:	bf00      	nop
   149cc:	0002351c 	.word	0x0002351c
   149d0:	00023548 	.word	0x00023548
   149d4:	0002355c 	.word	0x0002355c
   149d8:	0002357c 	.word	0x0002357c
   149dc:	2000ce4c 	.word	0x2000ce4c
   149e0:	00023580 	.word	0x00023580

000149e4 <z_log_minimal_level_to_char>:
{
   149e4:	b480      	push	{r7}
   149e6:	b083      	sub	sp, #12
   149e8:	af00      	add	r7, sp, #0
   149ea:	6078      	str	r0, [r7, #4]
	switch (level) {
   149ec:	687b      	ldr	r3, [r7, #4]
   149ee:	3b01      	subs	r3, #1
   149f0:	2b03      	cmp	r3, #3
   149f2:	d813      	bhi.n	14a1c <z_log_minimal_level_to_char+0x38>
   149f4:	a201      	add	r2, pc, #4	; (adr r2, 149fc <z_log_minimal_level_to_char+0x18>)
   149f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   149fa:	bf00      	nop
   149fc:	00014a0d 	.word	0x00014a0d
   14a00:	00014a11 	.word	0x00014a11
   14a04:	00014a15 	.word	0x00014a15
   14a08:	00014a19 	.word	0x00014a19
		return 'E';
   14a0c:	2345      	movs	r3, #69	; 0x45
   14a0e:	e006      	b.n	14a1e <z_log_minimal_level_to_char+0x3a>
		return 'W';
   14a10:	2357      	movs	r3, #87	; 0x57
   14a12:	e004      	b.n	14a1e <z_log_minimal_level_to_char+0x3a>
		return 'I';
   14a14:	2349      	movs	r3, #73	; 0x49
   14a16:	e002      	b.n	14a1e <z_log_minimal_level_to_char+0x3a>
		return 'D';
   14a18:	2344      	movs	r3, #68	; 0x44
   14a1a:	e000      	b.n	14a1e <z_log_minimal_level_to_char+0x3a>
		return '?';
   14a1c:	233f      	movs	r3, #63	; 0x3f
}
   14a1e:	4618      	mov	r0, r3
   14a20:	370c      	adds	r7, #12
   14a22:	46bd      	mov	sp, r7
   14a24:	bc80      	pop	{r7}
   14a26:	4770      	bx	lr

00014a28 <move_thread_to_end_of_prio_q>:
	return thread;
#endif
}

static void move_thread_to_end_of_prio_q(struct k_thread *thread)
{
   14a28:	b580      	push	{r7, lr}
   14a2a:	b08c      	sub	sp, #48	; 0x30
   14a2c:	af00      	add	r7, sp, #0
   14a2e:	6078      	str	r0, [r7, #4]
	if (z_is_thread_queued(thread)) {
   14a30:	6878      	ldr	r0, [r7, #4]
   14a32:	f00a f959 	bl	1ece8 <z_is_thread_queued>
   14a36:	4603      	mov	r3, r0
   14a38:	2b00      	cmp	r3, #0
   14a3a:	d019      	beq.n	14a70 <move_thread_to_end_of_prio_q+0x48>
   14a3c:	687b      	ldr	r3, [r7, #4]
   14a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14a42:	7b5b      	ldrb	r3, [r3, #13]
   14a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14a48:	b2da      	uxtb	r2, r3
   14a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14a4c:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   14a4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14a50:	f00a fa15 	bl	1ee7e <should_queue_thread>
   14a54:	4603      	mov	r3, r0
   14a56:	2b00      	cmp	r3, #0
   14a58:	d009      	beq.n	14a6e <move_thread_to_end_of_prio_q+0x46>
   14a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   14a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14a60:	627b      	str	r3, [r7, #36]	; 0x24
	return &_kernel.ready_q.runq;
   14a62:	4b3c      	ldr	r3, [pc, #240]	; (14b54 <move_thread_to_end_of_prio_q+0x12c>)
	_priq_run_remove(thread_runq(thread), thread);
   14a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14a66:	4618      	mov	r0, r3
   14a68:	f001 fca0 	bl	163ac <z_priq_dumb_remove>
}
   14a6c:	bf00      	nop
}
   14a6e:	bf00      	nop
   14a70:	687b      	ldr	r3, [r7, #4]
   14a72:	623b      	str	r3, [r7, #32]
	thread->base.thread_state |= _THREAD_QUEUED;
   14a74:	6a3b      	ldr	r3, [r7, #32]
   14a76:	7b5b      	ldrb	r3, [r3, #13]
   14a78:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14a7c:	b2da      	uxtb	r2, r3
   14a7e:	6a3b      	ldr	r3, [r7, #32]
   14a80:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   14a82:	6a38      	ldr	r0, [r7, #32]
   14a84:	f00a f9fb 	bl	1ee7e <should_queue_thread>
   14a88:	4603      	mov	r3, r0
   14a8a:	2b00      	cmp	r3, #0
   14a8c:	d052      	beq.n	14b34 <move_thread_to_end_of_prio_q+0x10c>
   14a8e:	6a3b      	ldr	r3, [r7, #32]
   14a90:	61fb      	str	r3, [r7, #28]
   14a92:	69fb      	ldr	r3, [r7, #28]
   14a94:	61bb      	str	r3, [r7, #24]
	return &_kernel.ready_q.runq;
   14a96:	4b2f      	ldr	r3, [pc, #188]	; (14b54 <move_thread_to_end_of_prio_q+0x12c>)
   14a98:	617b      	str	r3, [r7, #20]
   14a9a:	69fb      	ldr	r3, [r7, #28]
   14a9c:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   14a9e:	6938      	ldr	r0, [r7, #16]
   14aa0:	f7ff ff4a 	bl	14938 <z_is_idle_thread_object>
   14aa4:	4603      	mov	r3, r0
   14aa6:	2b00      	cmp	r3, #0
   14aa8:	d009      	beq.n	14abe <move_thread_to_end_of_prio_q+0x96>
   14aaa:	23c1      	movs	r3, #193	; 0xc1
   14aac:	4a2a      	ldr	r2, [pc, #168]	; (14b58 <move_thread_to_end_of_prio_q+0x130>)
   14aae:	492b      	ldr	r1, [pc, #172]	; (14b5c <move_thread_to_end_of_prio_q+0x134>)
   14ab0:	482b      	ldr	r0, [pc, #172]	; (14b60 <move_thread_to_end_of_prio_q+0x138>)
   14ab2:	f005 fa7f 	bl	19fb4 <assert_print>
   14ab6:	21c1      	movs	r1, #193	; 0xc1
   14ab8:	4827      	ldr	r0, [pc, #156]	; (14b58 <move_thread_to_end_of_prio_q+0x130>)
   14aba:	f005 fa6b 	bl	19f94 <assert_post_action>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14abe:	6978      	ldr	r0, [r7, #20]
   14ac0:	f009 ffd2 	bl	1ea68 <sys_dlist_peek_head>
   14ac4:	4603      	mov	r3, r0
   14ac6:	2b00      	cmp	r3, #0
   14ac8:	d004      	beq.n	14ad4 <move_thread_to_end_of_prio_q+0xac>
   14aca:	6978      	ldr	r0, [r7, #20]
   14acc:	f009 ffcc 	bl	1ea68 <sys_dlist_peek_head>
   14ad0:	4603      	mov	r3, r0
   14ad2:	e000      	b.n	14ad6 <move_thread_to_end_of_prio_q+0xae>
   14ad4:	2300      	movs	r3, #0
   14ad6:	60fb      	str	r3, [r7, #12]
   14ad8:	e023      	b.n	14b22 <move_thread_to_end_of_prio_q+0xfa>
		if (z_sched_prio_cmp(thread, t) > 0) {
   14ada:	68f9      	ldr	r1, [r7, #12]
   14adc:	6938      	ldr	r0, [r7, #16]
   14ade:	f00a f9b3 	bl	1ee48 <z_sched_prio_cmp>
   14ae2:	4603      	mov	r3, r0
   14ae4:	2b00      	cmp	r3, #0
   14ae6:	dd06      	ble.n	14af6 <move_thread_to_end_of_prio_q+0xce>
			sys_dlist_insert(&t->base.qnode_dlist,
   14ae8:	68fb      	ldr	r3, [r7, #12]
   14aea:	693a      	ldr	r2, [r7, #16]
   14aec:	4611      	mov	r1, r2
   14aee:	4618      	mov	r0, r3
   14af0:	f00a f80b 	bl	1eb0a <sys_dlist_insert>
			return;
   14af4:	e01d      	b.n	14b32 <move_thread_to_end_of_prio_q+0x10a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14af6:	68fb      	ldr	r3, [r7, #12]
   14af8:	2b00      	cmp	r3, #0
   14afa:	d010      	beq.n	14b1e <move_thread_to_end_of_prio_q+0xf6>
   14afc:	68fb      	ldr	r3, [r7, #12]
   14afe:	4619      	mov	r1, r3
   14b00:	6978      	ldr	r0, [r7, #20]
   14b02:	f009 ffd6 	bl	1eab2 <sys_dlist_peek_next>
   14b06:	4603      	mov	r3, r0
   14b08:	2b00      	cmp	r3, #0
   14b0a:	d006      	beq.n	14b1a <move_thread_to_end_of_prio_q+0xf2>
   14b0c:	68fb      	ldr	r3, [r7, #12]
   14b0e:	4619      	mov	r1, r3
   14b10:	6978      	ldr	r0, [r7, #20]
   14b12:	f009 ffce 	bl	1eab2 <sys_dlist_peek_next>
   14b16:	4603      	mov	r3, r0
   14b18:	e002      	b.n	14b20 <move_thread_to_end_of_prio_q+0xf8>
   14b1a:	2300      	movs	r3, #0
   14b1c:	e000      	b.n	14b20 <move_thread_to_end_of_prio_q+0xf8>
   14b1e:	2300      	movs	r3, #0
   14b20:	60fb      	str	r3, [r7, #12]
   14b22:	68fb      	ldr	r3, [r7, #12]
   14b24:	2b00      	cmp	r3, #0
   14b26:	d1d8      	bne.n	14ada <move_thread_to_end_of_prio_q+0xb2>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
   14b28:	693b      	ldr	r3, [r7, #16]
   14b2a:	4619      	mov	r1, r3
   14b2c:	6978      	ldr	r0, [r7, #20]
   14b2e:	f009 ffd3 	bl	1ead8 <sys_dlist_append>
}
   14b32:	bf00      	nop
}
   14b34:	bf00      	nop
		dequeue_thread(thread);
	}
	queue_thread(thread);
	update_cache(thread == _current);
   14b36:	4b0b      	ldr	r3, [pc, #44]	; (14b64 <move_thread_to_end_of_prio_q+0x13c>)
   14b38:	689b      	ldr	r3, [r3, #8]
   14b3a:	687a      	ldr	r2, [r7, #4]
   14b3c:	429a      	cmp	r2, r3
   14b3e:	bf0c      	ite	eq
   14b40:	2301      	moveq	r3, #1
   14b42:	2300      	movne	r3, #0
   14b44:	b2db      	uxtb	r3, r3
   14b46:	4618      	mov	r0, r3
   14b48:	f000 f9a4 	bl	14e94 <update_cache>
}
   14b4c:	bf00      	nop
   14b4e:	3730      	adds	r7, #48	; 0x30
   14b50:	46bd      	mov	sp, r7
   14b52:	bd80      	pop	{r7, pc}
   14b54:	2000ce64 	.word	0x2000ce64
   14b58:	000235b4 	.word	0x000235b4
   14b5c:	000235d8 	.word	0x000235d8
   14b60:	0002355c 	.word	0x0002355c
   14b64:	2000ce4c 	.word	0x2000ce4c

00014b68 <slice_time>:
 */
static struct k_thread *pending_current;
#endif

static inline int slice_time(struct k_thread *thread)
{
   14b68:	b480      	push	{r7}
   14b6a:	b085      	sub	sp, #20
   14b6c:	af00      	add	r7, sp, #0
   14b6e:	6078      	str	r0, [r7, #4]
	int ret = slice_ticks;
   14b70:	4b04      	ldr	r3, [pc, #16]	; (14b84 <slice_time+0x1c>)
   14b72:	681b      	ldr	r3, [r3, #0]
   14b74:	60fb      	str	r3, [r7, #12]
#ifdef CONFIG_TIMESLICE_PER_THREAD
	if (thread->base.slice_ticks != 0) {
		ret = thread->base.slice_ticks;
	}
#endif
	return ret;
   14b76:	68fb      	ldr	r3, [r7, #12]
}
   14b78:	4618      	mov	r0, r3
   14b7a:	3714      	adds	r7, #20
   14b7c:	46bd      	mov	sp, r7
   14b7e:	bc80      	pop	{r7}
   14b80:	4770      	bx	lr
   14b82:	bf00      	nop
   14b84:	2000ce7c 	.word	0x2000ce7c

00014b88 <sliceable>:

static inline bool sliceable(struct k_thread *thread)
{
   14b88:	b580      	push	{r7, lr}
   14b8a:	b084      	sub	sp, #16
   14b8c:	af00      	add	r7, sp, #0
   14b8e:	6078      	str	r0, [r7, #4]
	bool ret = is_preempt(thread)
   14b90:	6878      	ldr	r0, [r7, #4]
   14b92:	f00a f93f 	bl	1ee14 <is_preempt>
   14b96:	4603      	mov	r3, r0
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   14b98:	2b00      	cmp	r3, #0
   14b9a:	d029      	beq.n	14bf0 <sliceable+0x68>
		&& slice_time(thread) != 0
   14b9c:	6878      	ldr	r0, [r7, #4]
   14b9e:	f7ff ffe3 	bl	14b68 <slice_time>
   14ba2:	4603      	mov	r3, r0
   14ba4:	2b00      	cmp	r3, #0
   14ba6:	d023      	beq.n	14bf0 <sliceable+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   14ba8:	687b      	ldr	r3, [r7, #4]
   14baa:	f993 300e 	ldrsb.w	r3, [r3, #14]
   14bae:	461a      	mov	r2, r3
   14bb0:	4b15      	ldr	r3, [pc, #84]	; (14c08 <sliceable+0x80>)
   14bb2:	681b      	ldr	r3, [r3, #0]
   14bb4:	4619      	mov	r1, r3
   14bb6:	4610      	mov	r0, r2
   14bb8:	f00a f904 	bl	1edc4 <z_is_prio_higher>
   14bbc:	4603      	mov	r3, r0
   14bbe:	f083 0301 	eor.w	r3, r3, #1
   14bc2:	b2db      	uxtb	r3, r3
   14bc4:	2b00      	cmp	r3, #0
   14bc6:	d013      	beq.n	14bf0 <sliceable+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   14bc8:	6878      	ldr	r0, [r7, #4]
   14bca:	f00a f81a 	bl	1ec02 <z_is_thread_prevented_from_running>
   14bce:	4603      	mov	r3, r0
   14bd0:	f083 0301 	eor.w	r3, r3, #1
   14bd4:	b2db      	uxtb	r3, r3
   14bd6:	2b00      	cmp	r3, #0
   14bd8:	d00a      	beq.n	14bf0 <sliceable+0x68>
		&& !z_is_idle_thread_object(thread);
   14bda:	6878      	ldr	r0, [r7, #4]
   14bdc:	f7ff feac 	bl	14938 <z_is_idle_thread_object>
   14be0:	4603      	mov	r3, r0
   14be2:	f083 0301 	eor.w	r3, r3, #1
   14be6:	b2db      	uxtb	r3, r3
   14be8:	2b00      	cmp	r3, #0
   14bea:	d001      	beq.n	14bf0 <sliceable+0x68>
   14bec:	2301      	movs	r3, #1
   14bee:	e000      	b.n	14bf2 <sliceable+0x6a>
   14bf0:	2300      	movs	r3, #0
	bool ret = is_preempt(thread)
   14bf2:	73fb      	strb	r3, [r7, #15]
   14bf4:	7bfb      	ldrb	r3, [r7, #15]
   14bf6:	f003 0301 	and.w	r3, r3, #1
   14bfa:	73fb      	strb	r3, [r7, #15]

#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
   14bfc:	7bfb      	ldrb	r3, [r7, #15]
}
   14bfe:	4618      	mov	r0, r3
   14c00:	3710      	adds	r7, #16
   14c02:	46bd      	mov	sp, r7
   14c04:	bd80      	pop	{r7, pc}
   14c06:	bf00      	nop
   14c08:	2000ce80 	.word	0x2000ce80

00014c0c <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
   14c0c:	b580      	push	{r7, lr}
   14c0e:	b084      	sub	sp, #16
   14c10:	af00      	add	r7, sp, #0
   14c12:	6078      	str	r0, [r7, #4]
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   14c14:	687b      	ldr	r3, [r7, #4]
   14c16:	2b00      	cmp	r3, #0
   14c18:	d015      	beq.n	14c46 <slice_timeout+0x3a>
   14c1a:	687b      	ldr	r3, [r7, #4]
   14c1c:	4a18      	ldr	r2, [pc, #96]	; (14c80 <slice_timeout+0x74>)
   14c1e:	4293      	cmp	r3, r2
   14c20:	d311      	bcc.n	14c46 <slice_timeout+0x3a>
   14c22:	687b      	ldr	r3, [r7, #4]
   14c24:	4a17      	ldr	r2, [pc, #92]	; (14c84 <slice_timeout+0x78>)
   14c26:	4293      	cmp	r3, r2
   14c28:	d20d      	bcs.n	14c46 <slice_timeout+0x3a>
   14c2a:	687b      	ldr	r3, [r7, #4]
   14c2c:	4a14      	ldr	r2, [pc, #80]	; (14c80 <slice_timeout+0x74>)
   14c2e:	1a99      	subs	r1, r3, r2
   14c30:	4b15      	ldr	r3, [pc, #84]	; (14c88 <slice_timeout+0x7c>)
   14c32:	fba3 2301 	umull	r2, r3, r3, r1
   14c36:	091a      	lsrs	r2, r3, #4
   14c38:	4613      	mov	r3, r2
   14c3a:	005b      	lsls	r3, r3, #1
   14c3c:	4413      	add	r3, r2
   14c3e:	00db      	lsls	r3, r3, #3
   14c40:	1aca      	subs	r2, r1, r3
   14c42:	2a00      	cmp	r2, #0
   14c44:	d00b      	beq.n	14c5e <slice_timeout+0x52>
   14c46:	f240 13d3 	movw	r3, #467	; 0x1d3
   14c4a:	4a10      	ldr	r2, [pc, #64]	; (14c8c <slice_timeout+0x80>)
   14c4c:	4910      	ldr	r1, [pc, #64]	; (14c90 <slice_timeout+0x84>)
   14c4e:	4811      	ldr	r0, [pc, #68]	; (14c94 <slice_timeout+0x88>)
   14c50:	f005 f9b0 	bl	19fb4 <assert_print>
   14c54:	f240 11d3 	movw	r1, #467	; 0x1d3
   14c58:	480c      	ldr	r0, [pc, #48]	; (14c8c <slice_timeout+0x80>)
   14c5a:	f005 f99b 	bl	19f94 <assert_post_action>
   14c5e:	687b      	ldr	r3, [r7, #4]
   14c60:	4a07      	ldr	r2, [pc, #28]	; (14c80 <slice_timeout+0x74>)
   14c62:	1a9b      	subs	r3, r3, r2
   14c64:	10db      	asrs	r3, r3, #3
   14c66:	4a08      	ldr	r2, [pc, #32]	; (14c88 <slice_timeout+0x7c>)
   14c68:	fb02 f303 	mul.w	r3, r2, r3
   14c6c:	60fb      	str	r3, [r7, #12]

	slice_expired[cpu] = true;
   14c6e:	4a0a      	ldr	r2, [pc, #40]	; (14c98 <slice_timeout+0x8c>)
   14c70:	68fb      	ldr	r3, [r7, #12]
   14c72:	4413      	add	r3, r2
   14c74:	2201      	movs	r2, #1
   14c76:	701a      	strb	r2, [r3, #0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   14c78:	bf00      	nop
   14c7a:	3710      	adds	r7, #16
   14c7c:	46bd      	mov	sp, r7
   14c7e:	bd80      	pop	{r7, pc}
   14c80:	2000c8c8 	.word	0x2000c8c8
   14c84:	2000c8e0 	.word	0x2000c8e0
   14c88:	aaaaaaab 	.word	0xaaaaaaab
   14c8c:	000235b4 	.word	0x000235b4
   14c90:	000235fc 	.word	0x000235fc
   14c94:	0002355c 	.word	0x0002355c
   14c98:	2000ce84 	.word	0x2000ce84

00014c9c <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   14c9c:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   14ca0:	b085      	sub	sp, #20
   14ca2:	af00      	add	r7, sp, #0
   14ca4:	6078      	str	r0, [r7, #4]
	int cpu = _current_cpu->id;
   14ca6:	4b19      	ldr	r3, [pc, #100]	; (14d0c <z_reset_time_slice+0x70>)
   14ca8:	7c1b      	ldrb	r3, [r3, #16]
   14caa:	60fb      	str	r3, [r7, #12]

	z_abort_timeout(&slice_timeouts[cpu]);
   14cac:	68fa      	ldr	r2, [r7, #12]
   14cae:	4613      	mov	r3, r2
   14cb0:	005b      	lsls	r3, r3, #1
   14cb2:	4413      	add	r3, r2
   14cb4:	00db      	lsls	r3, r3, #3
   14cb6:	4a16      	ldr	r2, [pc, #88]	; (14d10 <z_reset_time_slice+0x74>)
   14cb8:	4413      	add	r3, r2
   14cba:	4618      	mov	r0, r3
   14cbc:	f002 f94a 	bl	16f54 <z_abort_timeout>
	slice_expired[cpu] = false;
   14cc0:	4a14      	ldr	r2, [pc, #80]	; (14d14 <z_reset_time_slice+0x78>)
   14cc2:	68fb      	ldr	r3, [r7, #12]
   14cc4:	4413      	add	r3, r2
   14cc6:	2200      	movs	r2, #0
   14cc8:	701a      	strb	r2, [r3, #0]
	if (sliceable(curr)) {
   14cca:	6878      	ldr	r0, [r7, #4]
   14ccc:	f7ff ff5c 	bl	14b88 <sliceable>
   14cd0:	4603      	mov	r3, r0
   14cd2:	2b00      	cmp	r3, #0
   14cd4:	d014      	beq.n	14d00 <z_reset_time_slice+0x64>
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   14cd6:	68fa      	ldr	r2, [r7, #12]
   14cd8:	4613      	mov	r3, r2
   14cda:	005b      	lsls	r3, r3, #1
   14cdc:	4413      	add	r3, r2
   14cde:	00db      	lsls	r3, r3, #3
   14ce0:	4a0b      	ldr	r2, [pc, #44]	; (14d10 <z_reset_time_slice+0x74>)
   14ce2:	189c      	adds	r4, r3, r2
			      K_TICKS(slice_time(curr) - 1));
   14ce4:	6878      	ldr	r0, [r7, #4]
   14ce6:	f7ff ff3f 	bl	14b68 <slice_time>
   14cea:	4603      	mov	r3, r0
   14cec:	3b01      	subs	r3, #1
   14cee:	17da      	asrs	r2, r3, #31
   14cf0:	4698      	mov	r8, r3
   14cf2:	4691      	mov	r9, r2
   14cf4:	4642      	mov	r2, r8
   14cf6:	464b      	mov	r3, r9
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   14cf8:	4907      	ldr	r1, [pc, #28]	; (14d18 <z_reset_time_slice+0x7c>)
   14cfa:	4620      	mov	r0, r4
   14cfc:	f001 ffce 	bl	16c9c <z_add_timeout>
	}
}
   14d00:	bf00      	nop
   14d02:	3714      	adds	r7, #20
   14d04:	46bd      	mov	sp, r7
   14d06:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   14d0a:	bf00      	nop
   14d0c:	2000ce4c 	.word	0x2000ce4c
   14d10:	2000c8c8 	.word	0x2000c8c8
   14d14:	2000ce84 	.word	0x2000ce84
   14d18:	00014c0d 	.word	0x00014c0d

00014d1c <z_time_slice>:
}
#endif

/* Called out of each timer interrupt */
void z_time_slice(void)
{
   14d1c:	b580      	push	{r7, lr}
   14d1e:	b08e      	sub	sp, #56	; 0x38
   14d20:	af00      	add	r7, sp, #0
   14d22:	4b52      	ldr	r3, [pc, #328]	; (14e6c <z_time_slice+0x150>)
   14d24:	633b      	str	r3, [r7, #48]	; 0x30
	__asm__ volatile(
   14d26:	f04f 0320 	mov.w	r3, #32
   14d2a:	f3ef 8211 	mrs	r2, BASEPRI
   14d2e:	f383 8812 	msr	BASEPRI_MAX, r3
   14d32:	f3bf 8f6f 	isb	sy
   14d36:	62fa      	str	r2, [r7, #44]	; 0x2c
   14d38:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
   14d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = arch_irq_lock();
   14d3c:	603b      	str	r3, [r7, #0]
   14d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14d40:	627b      	str	r3, [r7, #36]	; 0x24
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   14d42:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14d44:	f7fe fdea 	bl	1391c <z_spin_lock_valid>
   14d48:	4603      	mov	r3, r0
   14d4a:	f083 0301 	eor.w	r3, r3, #1
   14d4e:	b2db      	uxtb	r3, r3
   14d50:	2b00      	cmp	r3, #0
   14d52:	d00d      	beq.n	14d70 <z_time_slice+0x54>
   14d54:	2372      	movs	r3, #114	; 0x72
   14d56:	4a46      	ldr	r2, [pc, #280]	; (14e70 <z_time_slice+0x154>)
   14d58:	4946      	ldr	r1, [pc, #280]	; (14e74 <z_time_slice+0x158>)
   14d5a:	4847      	ldr	r0, [pc, #284]	; (14e78 <z_time_slice+0x15c>)
   14d5c:	f005 f92a 	bl	19fb4 <assert_print>
   14d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14d62:	4846      	ldr	r0, [pc, #280]	; (14e7c <z_time_slice+0x160>)
   14d64:	f005 f926 	bl	19fb4 <assert_print>
   14d68:	2172      	movs	r1, #114	; 0x72
   14d6a:	4841      	ldr	r0, [pc, #260]	; (14e70 <z_time_slice+0x154>)
   14d6c:	f005 f912 	bl	19f94 <assert_post_action>
}
   14d70:	bf00      	nop
   14d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14d74:	623b      	str	r3, [r7, #32]
	z_spin_lock_set_owner(l);
   14d76:	6a38      	ldr	r0, [r7, #32]
   14d78:	f7fe fe08 	bl	1398c <z_spin_lock_set_owner>
}
   14d7c:	bf00      	nop
	return k;
   14d7e:	683b      	ldr	r3, [r7, #0]
   14d80:	60fb      	str	r3, [r7, #12]
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);
	struct k_thread *curr = _current;
   14d82:	4b3f      	ldr	r3, [pc, #252]	; (14e80 <z_time_slice+0x164>)
   14d84:	689b      	ldr	r3, [r3, #8]
   14d86:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CONFIG_SWAP_NONATOMIC
	if (pending_current == curr) {
   14d88:	4b3e      	ldr	r3, [pc, #248]	; (14e84 <z_time_slice+0x168>)
   14d8a:	681b      	ldr	r3, [r3, #0]
   14d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14d8e:	429a      	cmp	r2, r3
   14d90:	d126      	bne.n	14de0 <z_time_slice+0xc4>
		z_reset_time_slice(curr);
   14d92:	6b78      	ldr	r0, [r7, #52]	; 0x34
   14d94:	f7ff ff82 	bl	14c9c <z_reset_time_slice>
   14d98:	4b34      	ldr	r3, [pc, #208]	; (14e6c <z_time_slice+0x150>)
   14d9a:	61fb      	str	r3, [r7, #28]
   14d9c:	68fb      	ldr	r3, [r7, #12]
   14d9e:	607b      	str	r3, [r7, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14da0:	69f8      	ldr	r0, [r7, #28]
   14da2:	f7fe fdd7 	bl	13954 <z_spin_unlock_valid>
   14da6:	4603      	mov	r3, r0
   14da8:	f083 0301 	eor.w	r3, r3, #1
   14dac:	b2db      	uxtb	r3, r3
   14dae:	2b00      	cmp	r3, #0
   14db0:	d00d      	beq.n	14dce <z_time_slice+0xb2>
   14db2:	23f0      	movs	r3, #240	; 0xf0
   14db4:	4a2e      	ldr	r2, [pc, #184]	; (14e70 <z_time_slice+0x154>)
   14db6:	4934      	ldr	r1, [pc, #208]	; (14e88 <z_time_slice+0x16c>)
   14db8:	482f      	ldr	r0, [pc, #188]	; (14e78 <z_time_slice+0x15c>)
   14dba:	f005 f8fb 	bl	19fb4 <assert_print>
   14dbe:	69f9      	ldr	r1, [r7, #28]
   14dc0:	4832      	ldr	r0, [pc, #200]	; (14e8c <z_time_slice+0x170>)
   14dc2:	f005 f8f7 	bl	19fb4 <assert_print>
   14dc6:	21f0      	movs	r1, #240	; 0xf0
   14dc8:	4829      	ldr	r0, [pc, #164]	; (14e70 <z_time_slice+0x154>)
   14dca:	f005 f8e3 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   14dce:	687b      	ldr	r3, [r7, #4]
   14dd0:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   14dd2:	69bb      	ldr	r3, [r7, #24]
   14dd4:	f383 8811 	msr	BASEPRI, r3
   14dd8:	f3bf 8f6f 	isb	sy
}
   14ddc:	bf00      	nop
}
   14dde:	e042      	b.n	14e66 <z_time_slice+0x14a>
		k_spin_unlock(&sched_spinlock, key);
		return;
	}
	pending_current = NULL;
   14de0:	4b28      	ldr	r3, [pc, #160]	; (14e84 <z_time_slice+0x168>)
   14de2:	2200      	movs	r2, #0
   14de4:	601a      	str	r2, [r3, #0]
#endif

	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   14de6:	4b26      	ldr	r3, [pc, #152]	; (14e80 <z_time_slice+0x164>)
   14de8:	7c1b      	ldrb	r3, [r3, #16]
   14dea:	461a      	mov	r2, r3
   14dec:	4b28      	ldr	r3, [pc, #160]	; (14e90 <z_time_slice+0x174>)
   14dee:	5c9b      	ldrb	r3, [r3, r2]
   14df0:	2b00      	cmp	r3, #0
   14df2:	d014      	beq.n	14e1e <z_time_slice+0x102>
   14df4:	6b78      	ldr	r0, [r7, #52]	; 0x34
   14df6:	f7ff fec7 	bl	14b88 <sliceable>
   14dfa:	4603      	mov	r3, r0
   14dfc:	2b00      	cmp	r3, #0
   14dfe:	d00e      	beq.n	14e1e <z_time_slice+0x102>
			k_spin_unlock(&sched_spinlock, key);
			curr->base.slice_expired(curr, curr->base.slice_data);
			key = k_spin_lock(&sched_spinlock);
		}
#endif
		if (!z_is_thread_prevented_from_running(curr)) {
   14e00:	6b78      	ldr	r0, [r7, #52]	; 0x34
   14e02:	f009 fefe 	bl	1ec02 <z_is_thread_prevented_from_running>
   14e06:	4603      	mov	r3, r0
   14e08:	f083 0301 	eor.w	r3, r3, #1
   14e0c:	b2db      	uxtb	r3, r3
   14e0e:	2b00      	cmp	r3, #0
   14e10:	d002      	beq.n	14e18 <z_time_slice+0xfc>
			move_thread_to_end_of_prio_q(curr);
   14e12:	6b78      	ldr	r0, [r7, #52]	; 0x34
   14e14:	f7ff fe08 	bl	14a28 <move_thread_to_end_of_prio_q>
		}
		z_reset_time_slice(curr);
   14e18:	6b78      	ldr	r0, [r7, #52]	; 0x34
   14e1a:	f7ff ff3f 	bl	14c9c <z_reset_time_slice>
   14e1e:	4b13      	ldr	r3, [pc, #76]	; (14e6c <z_time_slice+0x150>)
   14e20:	617b      	str	r3, [r7, #20]
   14e22:	68fb      	ldr	r3, [r7, #12]
   14e24:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14e26:	6978      	ldr	r0, [r7, #20]
   14e28:	f7fe fd94 	bl	13954 <z_spin_unlock_valid>
   14e2c:	4603      	mov	r3, r0
   14e2e:	f083 0301 	eor.w	r3, r3, #1
   14e32:	b2db      	uxtb	r3, r3
   14e34:	2b00      	cmp	r3, #0
   14e36:	d00d      	beq.n	14e54 <z_time_slice+0x138>
   14e38:	23f0      	movs	r3, #240	; 0xf0
   14e3a:	4a0d      	ldr	r2, [pc, #52]	; (14e70 <z_time_slice+0x154>)
   14e3c:	4912      	ldr	r1, [pc, #72]	; (14e88 <z_time_slice+0x16c>)
   14e3e:	480e      	ldr	r0, [pc, #56]	; (14e78 <z_time_slice+0x15c>)
   14e40:	f005 f8b8 	bl	19fb4 <assert_print>
   14e44:	6979      	ldr	r1, [r7, #20]
   14e46:	4811      	ldr	r0, [pc, #68]	; (14e8c <z_time_slice+0x170>)
   14e48:	f005 f8b4 	bl	19fb4 <assert_print>
   14e4c:	21f0      	movs	r1, #240	; 0xf0
   14e4e:	4808      	ldr	r0, [pc, #32]	; (14e70 <z_time_slice+0x154>)
   14e50:	f005 f8a0 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   14e54:	68bb      	ldr	r3, [r7, #8]
   14e56:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   14e58:	693b      	ldr	r3, [r7, #16]
   14e5a:	f383 8811 	msr	BASEPRI, r3
   14e5e:	f3bf 8f6f 	isb	sy
}
   14e62:	bf00      	nop
}
   14e64:	bf00      	nop
	}
	k_spin_unlock(&sched_spinlock, key);
}
   14e66:	3738      	adds	r7, #56	; 0x38
   14e68:	46bd      	mov	sp, r7
   14e6a:	bd80      	pop	{r7, pc}
   14e6c:	2000ce78 	.word	0x2000ce78
   14e70:	00023798 	.word	0x00023798
   14e74:	000237c8 	.word	0x000237c8
   14e78:	0002355c 	.word	0x0002355c
   14e7c:	000237e0 	.word	0x000237e0
   14e80:	2000ce4c 	.word	0x2000ce4c
   14e84:	2000ce88 	.word	0x2000ce88
   14e88:	000237f8 	.word	0x000237f8
   14e8c:	00023810 	.word	0x00023810
   14e90:	2000ce84 	.word	0x2000ce84

00014e94 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   14e94:	b580      	push	{r7, lr}
   14e96:	b086      	sub	sp, #24
   14e98:	af00      	add	r7, sp, #0
   14e9a:	6078      	str	r0, [r7, #4]
	return &_kernel.ready_q.runq;
   14e9c:	4b31      	ldr	r3, [pc, #196]	; (14f64 <update_cache+0xd0>)
	return _priq_run_best(curr_cpu_runq());
   14e9e:	4618      	mov	r0, r3
   14ea0:	f00a f8ab 	bl	1effa <z_priq_dumb_best>
   14ea4:	4603      	mov	r3, r0
	struct k_thread *thread = runq_best();
   14ea6:	60bb      	str	r3, [r7, #8]
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   14ea8:	68bb      	ldr	r3, [r7, #8]
   14eaa:	2b00      	cmp	r3, #0
   14eac:	d102      	bne.n	14eb4 <update_cache+0x20>
   14eae:	4b2e      	ldr	r3, [pc, #184]	; (14f68 <update_cache+0xd4>)
   14eb0:	68db      	ldr	r3, [r3, #12]
   14eb2:	e000      	b.n	14eb6 <update_cache+0x22>
   14eb4:	68bb      	ldr	r3, [r7, #8]
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();
   14eb6:	617b      	str	r3, [r7, #20]
   14eb8:	697b      	ldr	r3, [r7, #20]
   14eba:	613b      	str	r3, [r7, #16]
   14ebc:	687b      	ldr	r3, [r7, #4]
   14ebe:	60fb      	str	r3, [r7, #12]
	if (preempt_ok != 0) {
   14ec0:	68fb      	ldr	r3, [r7, #12]
   14ec2:	2b00      	cmp	r3, #0
   14ec4:	d001      	beq.n	14eca <update_cache+0x36>
		return true;
   14ec6:	2301      	movs	r3, #1
   14ec8:	e033      	b.n	14f32 <update_cache+0x9e>
	__ASSERT(_current != NULL, "");
   14eca:	4b27      	ldr	r3, [pc, #156]	; (14f68 <update_cache+0xd4>)
   14ecc:	689b      	ldr	r3, [r3, #8]
   14ece:	2b00      	cmp	r3, #0
   14ed0:	d10c      	bne.n	14eec <update_cache+0x58>
   14ed2:	238f      	movs	r3, #143	; 0x8f
   14ed4:	4a25      	ldr	r2, [pc, #148]	; (14f6c <update_cache+0xd8>)
   14ed6:	4926      	ldr	r1, [pc, #152]	; (14f70 <update_cache+0xdc>)
   14ed8:	4826      	ldr	r0, [pc, #152]	; (14f74 <update_cache+0xe0>)
   14eda:	f005 f86b 	bl	19fb4 <assert_print>
   14ede:	4826      	ldr	r0, [pc, #152]	; (14f78 <update_cache+0xe4>)
   14ee0:	f005 f868 	bl	19fb4 <assert_print>
   14ee4:	218f      	movs	r1, #143	; 0x8f
   14ee6:	4821      	ldr	r0, [pc, #132]	; (14f6c <update_cache+0xd8>)
   14ee8:	f005 f854 	bl	19f94 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   14eec:	4b1e      	ldr	r3, [pc, #120]	; (14f68 <update_cache+0xd4>)
   14eee:	689b      	ldr	r3, [r3, #8]
   14ef0:	4618      	mov	r0, r3
   14ef2:	f009 fe86 	bl	1ec02 <z_is_thread_prevented_from_running>
   14ef6:	4603      	mov	r3, r0
   14ef8:	2b00      	cmp	r3, #0
   14efa:	d001      	beq.n	14f00 <update_cache+0x6c>
		return true;
   14efc:	2301      	movs	r3, #1
   14efe:	e018      	b.n	14f32 <update_cache+0x9e>
	    && z_is_thread_timeout_active(thread)) {
   14f00:	6938      	ldr	r0, [r7, #16]
   14f02:	f009 fe92 	bl	1ec2a <z_is_thread_timeout_active>
   14f06:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   14f08:	2b00      	cmp	r3, #0
   14f0a:	d001      	beq.n	14f10 <update_cache+0x7c>
		return true;
   14f0c:	2301      	movs	r3, #1
   14f0e:	e010      	b.n	14f32 <update_cache+0x9e>
	if (is_preempt(_current) || is_metairq(thread)) {
   14f10:	4b15      	ldr	r3, [pc, #84]	; (14f68 <update_cache+0xd4>)
   14f12:	689b      	ldr	r3, [r3, #8]
   14f14:	4618      	mov	r0, r3
   14f16:	f009 ff7d 	bl	1ee14 <is_preempt>
   14f1a:	4603      	mov	r3, r0
   14f1c:	2b00      	cmp	r3, #0
   14f1e:	d105      	bne.n	14f2c <update_cache+0x98>
   14f20:	6938      	ldr	r0, [r7, #16]
   14f22:	f009 ff87 	bl	1ee34 <is_metairq>
   14f26:	4603      	mov	r3, r0
   14f28:	2b00      	cmp	r3, #0
   14f2a:	d001      	beq.n	14f30 <update_cache+0x9c>
		return true;
   14f2c:	2301      	movs	r3, #1
   14f2e:	e000      	b.n	14f32 <update_cache+0x9e>
	return false;
   14f30:	2300      	movs	r3, #0

	if (should_preempt(thread, preempt_ok)) {
   14f32:	2b00      	cmp	r3, #0
   14f34:	d00e      	beq.n	14f54 <update_cache+0xc0>
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   14f36:	4b0c      	ldr	r3, [pc, #48]	; (14f68 <update_cache+0xd4>)
   14f38:	689b      	ldr	r3, [r3, #8]
   14f3a:	697a      	ldr	r2, [r7, #20]
   14f3c:	429a      	cmp	r2, r3
   14f3e:	d002      	beq.n	14f46 <update_cache+0xb2>
			z_reset_time_slice(thread);
   14f40:	6978      	ldr	r0, [r7, #20]
   14f42:	f7ff feab 	bl	14c9c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
   14f46:	6978      	ldr	r0, [r7, #20]
   14f48:	f009 ffaf 	bl	1eeaa <update_metairq_preempt>
		_kernel.ready_q.cache = thread;
   14f4c:	4a06      	ldr	r2, [pc, #24]	; (14f68 <update_cache+0xd4>)
   14f4e:	697b      	ldr	r3, [r7, #20]
   14f50:	6153      	str	r3, [r2, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   14f52:	e003      	b.n	14f5c <update_cache+0xc8>
		_kernel.ready_q.cache = _current;
   14f54:	4b04      	ldr	r3, [pc, #16]	; (14f68 <update_cache+0xd4>)
   14f56:	689b      	ldr	r3, [r3, #8]
   14f58:	4a03      	ldr	r2, [pc, #12]	; (14f68 <update_cache+0xd4>)
   14f5a:	6153      	str	r3, [r2, #20]
}
   14f5c:	bf00      	nop
   14f5e:	3718      	adds	r7, #24
   14f60:	46bd      	mov	sp, r7
   14f62:	bd80      	pop	{r7, pc}
   14f64:	2000ce64 	.word	0x2000ce64
   14f68:	2000ce4c 	.word	0x2000ce4c
   14f6c:	000235b4 	.word	0x000235b4
   14f70:	00023880 	.word	0x00023880
   14f74:	0002355c 	.word	0x0002355c
   14f78:	0002357c 	.word	0x0002357c

00014f7c <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
   14f7c:	b580      	push	{r7, lr}
   14f7e:	b088      	sub	sp, #32
   14f80:	af00      	add	r7, sp, #0
   14f82:	6078      	str	r0, [r7, #4]
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   14f84:	6878      	ldr	r0, [r7, #4]
   14f86:	f009 feaf 	bl	1ece8 <z_is_thread_queued>
   14f8a:	4603      	mov	r3, r0
   14f8c:	f083 0301 	eor.w	r3, r3, #1
   14f90:	b2db      	uxtb	r3, r3
   14f92:	2b00      	cmp	r3, #0
   14f94:	d06d      	beq.n	15072 <ready_thread+0xf6>
   14f96:	6878      	ldr	r0, [r7, #4]
   14f98:	f009 fe60 	bl	1ec5c <z_is_thread_ready>
   14f9c:	4603      	mov	r3, r0
   14f9e:	2b00      	cmp	r3, #0
   14fa0:	d067      	beq.n	15072 <ready_thread+0xf6>
   14fa2:	687b      	ldr	r3, [r7, #4]
   14fa4:	61fb      	str	r3, [r7, #28]
	thread->base.thread_state |= _THREAD_QUEUED;
   14fa6:	69fb      	ldr	r3, [r7, #28]
   14fa8:	7b5b      	ldrb	r3, [r3, #13]
   14faa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14fae:	b2da      	uxtb	r2, r3
   14fb0:	69fb      	ldr	r3, [r7, #28]
   14fb2:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   14fb4:	69f8      	ldr	r0, [r7, #28]
   14fb6:	f009 ff62 	bl	1ee7e <should_queue_thread>
   14fba:	4603      	mov	r3, r0
   14fbc:	2b00      	cmp	r3, #0
   14fbe:	d052      	beq.n	15066 <ready_thread+0xea>
   14fc0:	69fb      	ldr	r3, [r7, #28]
   14fc2:	61bb      	str	r3, [r7, #24]
   14fc4:	69bb      	ldr	r3, [r7, #24]
   14fc6:	617b      	str	r3, [r7, #20]
	return &_kernel.ready_q.runq;
   14fc8:	4b2c      	ldr	r3, [pc, #176]	; (1507c <ready_thread+0x100>)
   14fca:	613b      	str	r3, [r7, #16]
   14fcc:	69bb      	ldr	r3, [r7, #24]
   14fce:	60fb      	str	r3, [r7, #12]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   14fd0:	68f8      	ldr	r0, [r7, #12]
   14fd2:	f7ff fcb1 	bl	14938 <z_is_idle_thread_object>
   14fd6:	4603      	mov	r3, r0
   14fd8:	2b00      	cmp	r3, #0
   14fda:	d009      	beq.n	14ff0 <ready_thread+0x74>
   14fdc:	23c1      	movs	r3, #193	; 0xc1
   14fde:	4a28      	ldr	r2, [pc, #160]	; (15080 <ready_thread+0x104>)
   14fe0:	4928      	ldr	r1, [pc, #160]	; (15084 <ready_thread+0x108>)
   14fe2:	4829      	ldr	r0, [pc, #164]	; (15088 <ready_thread+0x10c>)
   14fe4:	f004 ffe6 	bl	19fb4 <assert_print>
   14fe8:	21c1      	movs	r1, #193	; 0xc1
   14fea:	4825      	ldr	r0, [pc, #148]	; (15080 <ready_thread+0x104>)
   14fec:	f004 ffd2 	bl	19f94 <assert_post_action>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14ff0:	6938      	ldr	r0, [r7, #16]
   14ff2:	f009 fd39 	bl	1ea68 <sys_dlist_peek_head>
   14ff6:	4603      	mov	r3, r0
   14ff8:	2b00      	cmp	r3, #0
   14ffa:	d004      	beq.n	15006 <ready_thread+0x8a>
   14ffc:	6938      	ldr	r0, [r7, #16]
   14ffe:	f009 fd33 	bl	1ea68 <sys_dlist_peek_head>
   15002:	4603      	mov	r3, r0
   15004:	e000      	b.n	15008 <ready_thread+0x8c>
   15006:	2300      	movs	r3, #0
   15008:	60bb      	str	r3, [r7, #8]
   1500a:	e023      	b.n	15054 <ready_thread+0xd8>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1500c:	68b9      	ldr	r1, [r7, #8]
   1500e:	68f8      	ldr	r0, [r7, #12]
   15010:	f009 ff1a 	bl	1ee48 <z_sched_prio_cmp>
   15014:	4603      	mov	r3, r0
   15016:	2b00      	cmp	r3, #0
   15018:	dd06      	ble.n	15028 <ready_thread+0xac>
			sys_dlist_insert(&t->base.qnode_dlist,
   1501a:	68bb      	ldr	r3, [r7, #8]
   1501c:	68fa      	ldr	r2, [r7, #12]
   1501e:	4611      	mov	r1, r2
   15020:	4618      	mov	r0, r3
   15022:	f009 fd72 	bl	1eb0a <sys_dlist_insert>
			return;
   15026:	e01d      	b.n	15064 <ready_thread+0xe8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15028:	68bb      	ldr	r3, [r7, #8]
   1502a:	2b00      	cmp	r3, #0
   1502c:	d010      	beq.n	15050 <ready_thread+0xd4>
   1502e:	68bb      	ldr	r3, [r7, #8]
   15030:	4619      	mov	r1, r3
   15032:	6938      	ldr	r0, [r7, #16]
   15034:	f009 fd3d 	bl	1eab2 <sys_dlist_peek_next>
   15038:	4603      	mov	r3, r0
   1503a:	2b00      	cmp	r3, #0
   1503c:	d006      	beq.n	1504c <ready_thread+0xd0>
   1503e:	68bb      	ldr	r3, [r7, #8]
   15040:	4619      	mov	r1, r3
   15042:	6938      	ldr	r0, [r7, #16]
   15044:	f009 fd35 	bl	1eab2 <sys_dlist_peek_next>
   15048:	4603      	mov	r3, r0
   1504a:	e002      	b.n	15052 <ready_thread+0xd6>
   1504c:	2300      	movs	r3, #0
   1504e:	e000      	b.n	15052 <ready_thread+0xd6>
   15050:	2300      	movs	r3, #0
   15052:	60bb      	str	r3, [r7, #8]
   15054:	68bb      	ldr	r3, [r7, #8]
   15056:	2b00      	cmp	r3, #0
   15058:	d1d8      	bne.n	1500c <ready_thread+0x90>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
   1505a:	68fb      	ldr	r3, [r7, #12]
   1505c:	4619      	mov	r1, r3
   1505e:	6938      	ldr	r0, [r7, #16]
   15060:	f009 fd3a 	bl	1ead8 <sys_dlist_append>
}
   15064:	bf00      	nop
}
   15066:	bf00      	nop
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   15068:	2000      	movs	r0, #0
   1506a:	f7ff ff13 	bl	14e94 <update_cache>
		flag_ipi();
   1506e:	f009 ff16 	bl	1ee9e <flag_ipi>
	}
}
   15072:	bf00      	nop
   15074:	3720      	adds	r7, #32
   15076:	46bd      	mov	sp, r7
   15078:	bd80      	pop	{r7, pc}
   1507a:	bf00      	nop
   1507c:	2000ce64 	.word	0x2000ce64
   15080:	000235b4 	.word	0x000235b4
   15084:	000235d8 	.word	0x000235d8
   15088:	0002355c 	.word	0x0002355c

0001508c <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   1508c:	b580      	push	{r7, lr}
   1508e:	b08e      	sub	sp, #56	; 0x38
   15090:	af00      	add	r7, sp, #0
   15092:	6078      	str	r0, [r7, #4]
	K_SPINLOCK(&sched_spinlock) {
   15094:	2300      	movs	r3, #0
   15096:	617b      	str	r3, [r7, #20]
   15098:	4b40      	ldr	r3, [pc, #256]	; (1519c <z_ready_thread+0x110>)
   1509a:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   1509c:	f04f 0320 	mov.w	r3, #32
   150a0:	f3ef 8211 	mrs	r2, BASEPRI
   150a4:	f383 8812 	msr	BASEPRI_MAX, r3
   150a8:	f3bf 8f6f 	isb	sy
   150ac:	633a      	str	r2, [r7, #48]	; 0x30
   150ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
   150b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = arch_irq_lock();
   150b2:	60bb      	str	r3, [r7, #8]
   150b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   150b6:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   150b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   150ba:	f7fe fc2f 	bl	1391c <z_spin_lock_valid>
   150be:	4603      	mov	r3, r0
   150c0:	f083 0301 	eor.w	r3, r3, #1
   150c4:	b2db      	uxtb	r3, r3
   150c6:	2b00      	cmp	r3, #0
   150c8:	d00d      	beq.n	150e6 <z_ready_thread+0x5a>
   150ca:	2372      	movs	r3, #114	; 0x72
   150cc:	4a34      	ldr	r2, [pc, #208]	; (151a0 <z_ready_thread+0x114>)
   150ce:	4935      	ldr	r1, [pc, #212]	; (151a4 <z_ready_thread+0x118>)
   150d0:	4835      	ldr	r0, [pc, #212]	; (151a8 <z_ready_thread+0x11c>)
   150d2:	f004 ff6f 	bl	19fb4 <assert_print>
   150d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   150d8:	4834      	ldr	r0, [pc, #208]	; (151ac <z_ready_thread+0x120>)
   150da:	f004 ff6b 	bl	19fb4 <assert_print>
   150de:	2172      	movs	r1, #114	; 0x72
   150e0:	482f      	ldr	r0, [pc, #188]	; (151a0 <z_ready_thread+0x114>)
   150e2:	f004 ff57 	bl	19f94 <assert_post_action>
}
   150e6:	bf00      	nop
   150e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   150ea:	627b      	str	r3, [r7, #36]	; 0x24
	z_spin_lock_set_owner(l);
   150ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
   150ee:	f7fe fc4d 	bl	1398c <z_spin_lock_set_owner>
}
   150f2:	bf00      	nop
	return k;
   150f4:	68bb      	ldr	r3, [r7, #8]
   150f6:	613b      	str	r3, [r7, #16]
   150f8:	e031      	b.n	1515e <z_ready_thread+0xd2>
		if (!thread_active_elsewhere(thread)) {
   150fa:	6878      	ldr	r0, [r7, #4]
   150fc:	f009 fede 	bl	1eebc <thread_active_elsewhere>
   15100:	4603      	mov	r3, r0
   15102:	f083 0301 	eor.w	r3, r3, #1
   15106:	b2db      	uxtb	r3, r3
   15108:	2b00      	cmp	r3, #0
   1510a:	d002      	beq.n	15112 <z_ready_thread+0x86>
			ready_thread(thread);
   1510c:	6878      	ldr	r0, [r7, #4]
   1510e:	f7ff ff35 	bl	14f7c <ready_thread>
   15112:	4b22      	ldr	r3, [pc, #136]	; (1519c <z_ready_thread+0x110>)
   15114:	623b      	str	r3, [r7, #32]
   15116:	693b      	ldr	r3, [r7, #16]
   15118:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1511a:	6a38      	ldr	r0, [r7, #32]
   1511c:	f7fe fc1a 	bl	13954 <z_spin_unlock_valid>
   15120:	4603      	mov	r3, r0
   15122:	f083 0301 	eor.w	r3, r3, #1
   15126:	b2db      	uxtb	r3, r3
   15128:	2b00      	cmp	r3, #0
   1512a:	d00d      	beq.n	15148 <z_ready_thread+0xbc>
   1512c:	23f0      	movs	r3, #240	; 0xf0
   1512e:	4a1c      	ldr	r2, [pc, #112]	; (151a0 <z_ready_thread+0x114>)
   15130:	491f      	ldr	r1, [pc, #124]	; (151b0 <z_ready_thread+0x124>)
   15132:	481d      	ldr	r0, [pc, #116]	; (151a8 <z_ready_thread+0x11c>)
   15134:	f004 ff3e 	bl	19fb4 <assert_print>
   15138:	6a39      	ldr	r1, [r7, #32]
   1513a:	481e      	ldr	r0, [pc, #120]	; (151b4 <z_ready_thread+0x128>)
   1513c:	f004 ff3a 	bl	19fb4 <assert_print>
   15140:	21f0      	movs	r1, #240	; 0xf0
   15142:	4817      	ldr	r0, [pc, #92]	; (151a0 <z_ready_thread+0x114>)
   15144:	f004 ff26 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   15148:	68fb      	ldr	r3, [r7, #12]
   1514a:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1514c:	69fb      	ldr	r3, [r7, #28]
   1514e:	f383 8811 	msr	BASEPRI, r3
   15152:	f3bf 8f6f 	isb	sy
}
   15156:	bf00      	nop
}
   15158:	bf00      	nop
	K_SPINLOCK(&sched_spinlock) {
   1515a:	2301      	movs	r3, #1
   1515c:	617b      	str	r3, [r7, #20]
   1515e:	697b      	ldr	r3, [r7, #20]
   15160:	2b00      	cmp	r3, #0
   15162:	d0ca      	beq.n	150fa <z_ready_thread+0x6e>
   15164:	f107 0314 	add.w	r3, r7, #20
   15168:	61bb      	str	r3, [r7, #24]
}

#if defined(CONFIG_SPIN_VALIDATE) && defined(__GNUC__)
static ALWAYS_INLINE void z_spin_onexit(__maybe_unused k_spinlock_key_t *k)
{
	__ASSERT(k->key, "K_SPINLOCK exited with goto, break or return, "
   1516a:	69bb      	ldr	r3, [r7, #24]
   1516c:	681b      	ldr	r3, [r3, #0]
   1516e:	2b00      	cmp	r3, #0
   15170:	d10e      	bne.n	15190 <z_ready_thread+0x104>
   15172:	f240 131b 	movw	r3, #283	; 0x11b
   15176:	4a0a      	ldr	r2, [pc, #40]	; (151a0 <z_ready_thread+0x114>)
   15178:	490f      	ldr	r1, [pc, #60]	; (151b8 <z_ready_thread+0x12c>)
   1517a:	480b      	ldr	r0, [pc, #44]	; (151a8 <z_ready_thread+0x11c>)
   1517c:	f004 ff1a 	bl	19fb4 <assert_print>
   15180:	480e      	ldr	r0, [pc, #56]	; (151bc <z_ready_thread+0x130>)
   15182:	f004 ff17 	bl	19fb4 <assert_print>
   15186:	f240 111b 	movw	r1, #283	; 0x11b
   1518a:	4805      	ldr	r0, [pc, #20]	; (151a0 <z_ready_thread+0x114>)
   1518c:	f004 ff02 	bl	19f94 <assert_post_action>
			 "use K_SPINLOCK_BREAK instead.");
}
   15190:	bf00      	nop
		}
	}
}
   15192:	bf00      	nop
   15194:	3738      	adds	r7, #56	; 0x38
   15196:	46bd      	mov	sp, r7
   15198:	bd80      	pop	{r7, pc}
   1519a:	bf00      	nop
   1519c:	2000ce78 	.word	0x2000ce78
   151a0:	00023798 	.word	0x00023798
   151a4:	000237c8 	.word	0x000237c8
   151a8:	0002355c 	.word	0x0002355c
   151ac:	000237e0 	.word	0x000237e0
   151b0:	000237f8 	.word	0x000237f8
   151b4:	00023810 	.word	0x00023810
   151b8:	00023828 	.word	0x00023828
   151bc:	00023830 	.word	0x00023830

000151c0 <z_sched_start>:
		move_thread_to_end_of_prio_q(thread);
	}
}

void z_sched_start(struct k_thread *thread)
{
   151c0:	b580      	push	{r7, lr}
   151c2:	b08c      	sub	sp, #48	; 0x30
   151c4:	af00      	add	r7, sp, #0
   151c6:	6078      	str	r0, [r7, #4]
   151c8:	4b33      	ldr	r3, [pc, #204]	; (15298 <z_sched_start+0xd8>)
   151ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   151cc:	f04f 0320 	mov.w	r3, #32
   151d0:	f3ef 8211 	mrs	r2, BASEPRI
   151d4:	f383 8812 	msr	BASEPRI_MAX, r3
   151d8:	f3bf 8f6f 	isb	sy
   151dc:	62ba      	str	r2, [r7, #40]	; 0x28
   151de:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   151e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
   151e2:	60bb      	str	r3, [r7, #8]
   151e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   151e6:	623b      	str	r3, [r7, #32]
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   151e8:	6a38      	ldr	r0, [r7, #32]
   151ea:	f7fe fb97 	bl	1391c <z_spin_lock_valid>
   151ee:	4603      	mov	r3, r0
   151f0:	f083 0301 	eor.w	r3, r3, #1
   151f4:	b2db      	uxtb	r3, r3
   151f6:	2b00      	cmp	r3, #0
   151f8:	d00d      	beq.n	15216 <z_sched_start+0x56>
   151fa:	2372      	movs	r3, #114	; 0x72
   151fc:	4a27      	ldr	r2, [pc, #156]	; (1529c <z_sched_start+0xdc>)
   151fe:	4928      	ldr	r1, [pc, #160]	; (152a0 <z_sched_start+0xe0>)
   15200:	4828      	ldr	r0, [pc, #160]	; (152a4 <z_sched_start+0xe4>)
   15202:	f004 fed7 	bl	19fb4 <assert_print>
   15206:	6a39      	ldr	r1, [r7, #32]
   15208:	4827      	ldr	r0, [pc, #156]	; (152a8 <z_sched_start+0xe8>)
   1520a:	f004 fed3 	bl	19fb4 <assert_print>
   1520e:	2172      	movs	r1, #114	; 0x72
   15210:	4822      	ldr	r0, [pc, #136]	; (1529c <z_sched_start+0xdc>)
   15212:	f004 febf 	bl	19f94 <assert_post_action>
}
   15216:	bf00      	nop
   15218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1521a:	61fb      	str	r3, [r7, #28]
	z_spin_lock_set_owner(l);
   1521c:	69f8      	ldr	r0, [r7, #28]
   1521e:	f7fe fbb5 	bl	1398c <z_spin_lock_set_owner>
}
   15222:	bf00      	nop
	return k;
   15224:	68bb      	ldr	r3, [r7, #8]
   15226:	613b      	str	r3, [r7, #16]
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (z_has_thread_started(thread)) {
   15228:	6878      	ldr	r0, [r7, #4]
   1522a:	f009 fd37 	bl	1ec9c <z_has_thread_started>
   1522e:	4603      	mov	r3, r0
   15230:	2b00      	cmp	r3, #0
   15232:	d023      	beq.n	1527c <z_sched_start+0xbc>
   15234:	4b18      	ldr	r3, [pc, #96]	; (15298 <z_sched_start+0xd8>)
   15236:	61bb      	str	r3, [r7, #24]
   15238:	693b      	ldr	r3, [r7, #16]
   1523a:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1523c:	69b8      	ldr	r0, [r7, #24]
   1523e:	f7fe fb89 	bl	13954 <z_spin_unlock_valid>
   15242:	4603      	mov	r3, r0
   15244:	f083 0301 	eor.w	r3, r3, #1
   15248:	b2db      	uxtb	r3, r3
   1524a:	2b00      	cmp	r3, #0
   1524c:	d00d      	beq.n	1526a <z_sched_start+0xaa>
   1524e:	23f0      	movs	r3, #240	; 0xf0
   15250:	4a12      	ldr	r2, [pc, #72]	; (1529c <z_sched_start+0xdc>)
   15252:	4916      	ldr	r1, [pc, #88]	; (152ac <z_sched_start+0xec>)
   15254:	4813      	ldr	r0, [pc, #76]	; (152a4 <z_sched_start+0xe4>)
   15256:	f004 fead 	bl	19fb4 <assert_print>
   1525a:	69b9      	ldr	r1, [r7, #24]
   1525c:	4814      	ldr	r0, [pc, #80]	; (152b0 <z_sched_start+0xf0>)
   1525e:	f004 fea9 	bl	19fb4 <assert_print>
   15262:	21f0      	movs	r1, #240	; 0xf0
   15264:	480d      	ldr	r0, [pc, #52]	; (1529c <z_sched_start+0xdc>)
   15266:	f004 fe95 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   1526a:	68fb      	ldr	r3, [r7, #12]
   1526c:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   1526e:	697b      	ldr	r3, [r7, #20]
   15270:	f383 8811 	msr	BASEPRI, r3
   15274:	f3bf 8f6f 	isb	sy
}
   15278:	bf00      	nop
}
   1527a:	e009      	b.n	15290 <z_sched_start+0xd0>
		k_spin_unlock(&sched_spinlock, key);
		return;
	}

	z_mark_thread_as_started(thread);
   1527c:	6878      	ldr	r0, [r7, #4]
   1527e:	f009 fd60 	bl	1ed42 <z_mark_thread_as_started>
	ready_thread(thread);
   15282:	6878      	ldr	r0, [r7, #4]
   15284:	f7ff fe7a 	bl	14f7c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   15288:	6939      	ldr	r1, [r7, #16]
   1528a:	4803      	ldr	r0, [pc, #12]	; (15298 <z_sched_start+0xd8>)
   1528c:	f000 feb4 	bl	15ff8 <z_reschedule>
}
   15290:	3730      	adds	r7, #48	; 0x30
   15292:	46bd      	mov	sp, r7
   15294:	bd80      	pop	{r7, pc}
   15296:	bf00      	nop
   15298:	2000ce78 	.word	0x2000ce78
   1529c:	00023798 	.word	0x00023798
   152a0:	000237c8 	.word	0x000237c8
   152a4:	0002355c 	.word	0x0002355c
   152a8:	000237e0 	.word	0x000237e0
   152ac:	000237f8 	.word	0x000237f8
   152b0:	00023810 	.word	0x00023810

000152b4 <z_impl_k_thread_suspend>:

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   152b4:	b580      	push	{r7, lr}
   152b6:	b092      	sub	sp, #72	; 0x48
   152b8:	af00      	add	r7, sp, #0
   152ba:	6078      	str	r0, [r7, #4]
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_thread, suspend, thread);

	(void)z_abort_thread_timeout(thread);
   152bc:	6878      	ldr	r0, [r7, #4]
   152be:	f009 fc7d 	bl	1ebbc <z_abort_thread_timeout>

	K_SPINLOCK(&sched_spinlock) {
   152c2:	2300      	movs	r3, #0
   152c4:	61bb      	str	r3, [r7, #24]
   152c6:	4b55      	ldr	r3, [pc, #340]	; (1541c <z_impl_k_thread_suspend+0x168>)
   152c8:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
   152ca:	f04f 0320 	mov.w	r3, #32
   152ce:	f3ef 8211 	mrs	r2, BASEPRI
   152d2:	f383 8812 	msr	BASEPRI_MAX, r3
   152d6:	f3bf 8f6f 	isb	sy
   152da:	643a      	str	r2, [r7, #64]	; 0x40
   152dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	return key;
   152de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	k.key = arch_irq_lock();
   152e0:	60fb      	str	r3, [r7, #12]
   152e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   152e4:	63bb      	str	r3, [r7, #56]	; 0x38
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   152e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   152e8:	f7fe fb18 	bl	1391c <z_spin_lock_valid>
   152ec:	4603      	mov	r3, r0
   152ee:	f083 0301 	eor.w	r3, r3, #1
   152f2:	b2db      	uxtb	r3, r3
   152f4:	2b00      	cmp	r3, #0
   152f6:	d00d      	beq.n	15314 <z_impl_k_thread_suspend+0x60>
   152f8:	2372      	movs	r3, #114	; 0x72
   152fa:	4a49      	ldr	r2, [pc, #292]	; (15420 <z_impl_k_thread_suspend+0x16c>)
   152fc:	4949      	ldr	r1, [pc, #292]	; (15424 <z_impl_k_thread_suspend+0x170>)
   152fe:	484a      	ldr	r0, [pc, #296]	; (15428 <z_impl_k_thread_suspend+0x174>)
   15300:	f004 fe58 	bl	19fb4 <assert_print>
   15304:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   15306:	4849      	ldr	r0, [pc, #292]	; (1542c <z_impl_k_thread_suspend+0x178>)
   15308:	f004 fe54 	bl	19fb4 <assert_print>
   1530c:	2172      	movs	r1, #114	; 0x72
   1530e:	4844      	ldr	r0, [pc, #272]	; (15420 <z_impl_k_thread_suspend+0x16c>)
   15310:	f004 fe40 	bl	19f94 <assert_post_action>
}
   15314:	bf00      	nop
   15316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15318:	637b      	str	r3, [r7, #52]	; 0x34
	z_spin_lock_set_owner(l);
   1531a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1531c:	f7fe fb36 	bl	1398c <z_spin_lock_set_owner>
}
   15320:	bf00      	nop
	return k;
   15322:	68fb      	ldr	r3, [r7, #12]
   15324:	617b      	str	r3, [r7, #20]
   15326:	e053      	b.n	153d0 <z_impl_k_thread_suspend+0x11c>
		if (z_is_thread_queued(thread)) {
   15328:	6878      	ldr	r0, [r7, #4]
   1532a:	f009 fcdd 	bl	1ece8 <z_is_thread_queued>
   1532e:	4603      	mov	r3, r0
   15330:	2b00      	cmp	r3, #0
   15332:	d019      	beq.n	15368 <z_impl_k_thread_suspend+0xb4>
   15334:	687b      	ldr	r3, [r7, #4]
   15336:	633b      	str	r3, [r7, #48]	; 0x30
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1533a:	7b5b      	ldrb	r3, [r3, #13]
   1533c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15340:	b2da      	uxtb	r2, r3
   15342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15344:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   15346:	6b38      	ldr	r0, [r7, #48]	; 0x30
   15348:	f009 fd99 	bl	1ee7e <should_queue_thread>
   1534c:	4603      	mov	r3, r0
   1534e:	2b00      	cmp	r3, #0
   15350:	d009      	beq.n	15366 <z_impl_k_thread_suspend+0xb2>
   15352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15354:	62fb      	str	r3, [r7, #44]	; 0x2c
   15356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15358:	62bb      	str	r3, [r7, #40]	; 0x28
	return &_kernel.ready_q.runq;
   1535a:	4b35      	ldr	r3, [pc, #212]	; (15430 <z_impl_k_thread_suspend+0x17c>)
	_priq_run_remove(thread_runq(thread), thread);
   1535c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1535e:	4618      	mov	r0, r3
   15360:	f001 f824 	bl	163ac <z_priq_dumb_remove>
}
   15364:	bf00      	nop
}
   15366:	bf00      	nop
			dequeue_thread(thread);
		}
		z_mark_thread_as_suspended(thread);
   15368:	6878      	ldr	r0, [r7, #4]
   1536a:	f009 fcca 	bl	1ed02 <z_mark_thread_as_suspended>
		update_cache(thread == _current);
   1536e:	4b31      	ldr	r3, [pc, #196]	; (15434 <z_impl_k_thread_suspend+0x180>)
   15370:	689b      	ldr	r3, [r3, #8]
   15372:	687a      	ldr	r2, [r7, #4]
   15374:	429a      	cmp	r2, r3
   15376:	bf0c      	ite	eq
   15378:	2301      	moveq	r3, #1
   1537a:	2300      	movne	r3, #0
   1537c:	b2db      	uxtb	r3, r3
   1537e:	4618      	mov	r0, r3
   15380:	f7ff fd88 	bl	14e94 <update_cache>
   15384:	4b25      	ldr	r3, [pc, #148]	; (1541c <z_impl_k_thread_suspend+0x168>)
   15386:	627b      	str	r3, [r7, #36]	; 0x24
   15388:	697b      	ldr	r3, [r7, #20]
   1538a:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1538c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1538e:	f7fe fae1 	bl	13954 <z_spin_unlock_valid>
   15392:	4603      	mov	r3, r0
   15394:	f083 0301 	eor.w	r3, r3, #1
   15398:	b2db      	uxtb	r3, r3
   1539a:	2b00      	cmp	r3, #0
   1539c:	d00d      	beq.n	153ba <z_impl_k_thread_suspend+0x106>
   1539e:	23f0      	movs	r3, #240	; 0xf0
   153a0:	4a1f      	ldr	r2, [pc, #124]	; (15420 <z_impl_k_thread_suspend+0x16c>)
   153a2:	4925      	ldr	r1, [pc, #148]	; (15438 <z_impl_k_thread_suspend+0x184>)
   153a4:	4820      	ldr	r0, [pc, #128]	; (15428 <z_impl_k_thread_suspend+0x174>)
   153a6:	f004 fe05 	bl	19fb4 <assert_print>
   153aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
   153ac:	4823      	ldr	r0, [pc, #140]	; (1543c <z_impl_k_thread_suspend+0x188>)
   153ae:	f004 fe01 	bl	19fb4 <assert_print>
   153b2:	21f0      	movs	r1, #240	; 0xf0
   153b4:	481a      	ldr	r0, [pc, #104]	; (15420 <z_impl_k_thread_suspend+0x16c>)
   153b6:	f004 fded 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   153ba:	693b      	ldr	r3, [r7, #16]
   153bc:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   153be:	6a3b      	ldr	r3, [r7, #32]
   153c0:	f383 8811 	msr	BASEPRI, r3
   153c4:	f3bf 8f6f 	isb	sy
}
   153c8:	bf00      	nop
}
   153ca:	bf00      	nop
	K_SPINLOCK(&sched_spinlock) {
   153cc:	2301      	movs	r3, #1
   153ce:	61bb      	str	r3, [r7, #24]
   153d0:	69bb      	ldr	r3, [r7, #24]
   153d2:	2b00      	cmp	r3, #0
   153d4:	d0a8      	beq.n	15328 <z_impl_k_thread_suspend+0x74>
   153d6:	f107 0318 	add.w	r3, r7, #24
   153da:	61fb      	str	r3, [r7, #28]
	__ASSERT(k->key, "K_SPINLOCK exited with goto, break or return, "
   153dc:	69fb      	ldr	r3, [r7, #28]
   153de:	681b      	ldr	r3, [r3, #0]
   153e0:	2b00      	cmp	r3, #0
   153e2:	d10e      	bne.n	15402 <z_impl_k_thread_suspend+0x14e>
   153e4:	f240 131b 	movw	r3, #283	; 0x11b
   153e8:	4a0d      	ldr	r2, [pc, #52]	; (15420 <z_impl_k_thread_suspend+0x16c>)
   153ea:	4915      	ldr	r1, [pc, #84]	; (15440 <z_impl_k_thread_suspend+0x18c>)
   153ec:	480e      	ldr	r0, [pc, #56]	; (15428 <z_impl_k_thread_suspend+0x174>)
   153ee:	f004 fde1 	bl	19fb4 <assert_print>
   153f2:	4814      	ldr	r0, [pc, #80]	; (15444 <z_impl_k_thread_suspend+0x190>)
   153f4:	f004 fdde 	bl	19fb4 <assert_print>
   153f8:	f240 111b 	movw	r1, #283	; 0x11b
   153fc:	4808      	ldr	r0, [pc, #32]	; (15420 <z_impl_k_thread_suspend+0x16c>)
   153fe:	f004 fdc9 	bl	19f94 <assert_post_action>
}
   15402:	bf00      	nop
	}

	if (thread == _current) {
   15404:	4b0b      	ldr	r3, [pc, #44]	; (15434 <z_impl_k_thread_suspend+0x180>)
   15406:	689b      	ldr	r3, [r3, #8]
   15408:	687a      	ldr	r2, [r7, #4]
   1540a:	429a      	cmp	r2, r3
   1540c:	d101      	bne.n	15412 <z_impl_k_thread_suspend+0x15e>
		z_reschedule_unlocked();
   1540e:	f009 fbe3 	bl	1ebd8 <z_reschedule_unlocked>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_thread, suspend, thread);
}
   15412:	bf00      	nop
   15414:	3748      	adds	r7, #72	; 0x48
   15416:	46bd      	mov	sp, r7
   15418:	bd80      	pop	{r7, pc}
   1541a:	bf00      	nop
   1541c:	2000ce78 	.word	0x2000ce78
   15420:	00023798 	.word	0x00023798
   15424:	000237c8 	.word	0x000237c8
   15428:	0002355c 	.word	0x0002355c
   1542c:	000237e0 	.word	0x000237e0
   15430:	2000ce64 	.word	0x2000ce64
   15434:	2000ce4c 	.word	0x2000ce4c
   15438:	000237f8 	.word	0x000237f8
   1543c:	00023810 	.word	0x00023810
   15440:	00023828 	.word	0x00023828
   15444:	00023830 	.word	0x00023830

00015448 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
   15448:	b580      	push	{r7, lr}
   1544a:	b082      	sub	sp, #8
   1544c:	af00      	add	r7, sp, #0
   1544e:	6078      	str	r0, [r7, #4]
	__ASSERT_NO_MSG(thread->base.pended_on);
   15450:	687b      	ldr	r3, [r7, #4]
   15452:	689b      	ldr	r3, [r3, #8]
   15454:	2b00      	cmp	r3, #0
   15456:	d10b      	bne.n	15470 <pended_on_thread+0x28>
   15458:	f240 23d2 	movw	r3, #722	; 0x2d2
   1545c:	4a07      	ldr	r2, [pc, #28]	; (1547c <pended_on_thread+0x34>)
   1545e:	4908      	ldr	r1, [pc, #32]	; (15480 <pended_on_thread+0x38>)
   15460:	4808      	ldr	r0, [pc, #32]	; (15484 <pended_on_thread+0x3c>)
   15462:	f004 fda7 	bl	19fb4 <assert_print>
   15466:	f240 21d2 	movw	r1, #722	; 0x2d2
   1546a:	4804      	ldr	r0, [pc, #16]	; (1547c <pended_on_thread+0x34>)
   1546c:	f004 fd92 	bl	19f94 <assert_post_action>

	return thread->base.pended_on;
   15470:	687b      	ldr	r3, [r7, #4]
   15472:	689b      	ldr	r3, [r3, #8]
}
   15474:	4618      	mov	r0, r3
   15476:	3708      	adds	r7, #8
   15478:	46bd      	mov	sp, r7
   1547a:	bd80      	pop	{r7, pc}
   1547c:	000235b4 	.word	0x000235b4
   15480:	000238a8 	.word	0x000238a8
   15484:	0002355c 	.word	0x0002355c

00015488 <unready_thread>:

static void unready_thread(struct k_thread *thread)
{
   15488:	b580      	push	{r7, lr}
   1548a:	b086      	sub	sp, #24
   1548c:	af00      	add	r7, sp, #0
   1548e:	6078      	str	r0, [r7, #4]
	if (z_is_thread_queued(thread)) {
   15490:	6878      	ldr	r0, [r7, #4]
   15492:	f009 fc29 	bl	1ece8 <z_is_thread_queued>
   15496:	4603      	mov	r3, r0
   15498:	2b00      	cmp	r3, #0
   1549a:	d019      	beq.n	154d0 <unready_thread+0x48>
   1549c:	687b      	ldr	r3, [r7, #4]
   1549e:	617b      	str	r3, [r7, #20]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   154a0:	697b      	ldr	r3, [r7, #20]
   154a2:	7b5b      	ldrb	r3, [r3, #13]
   154a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   154a8:	b2da      	uxtb	r2, r3
   154aa:	697b      	ldr	r3, [r7, #20]
   154ac:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   154ae:	6978      	ldr	r0, [r7, #20]
   154b0:	f009 fce5 	bl	1ee7e <should_queue_thread>
   154b4:	4603      	mov	r3, r0
   154b6:	2b00      	cmp	r3, #0
   154b8:	d009      	beq.n	154ce <unready_thread+0x46>
   154ba:	697b      	ldr	r3, [r7, #20]
   154bc:	613b      	str	r3, [r7, #16]
   154be:	693b      	ldr	r3, [r7, #16]
   154c0:	60fb      	str	r3, [r7, #12]
	return &_kernel.ready_q.runq;
   154c2:	4b0b      	ldr	r3, [pc, #44]	; (154f0 <unready_thread+0x68>)
	_priq_run_remove(thread_runq(thread), thread);
   154c4:	6939      	ldr	r1, [r7, #16]
   154c6:	4618      	mov	r0, r3
   154c8:	f000 ff70 	bl	163ac <z_priq_dumb_remove>
}
   154cc:	bf00      	nop
}
   154ce:	bf00      	nop
		dequeue_thread(thread);
	}
	update_cache(thread == _current);
   154d0:	4b08      	ldr	r3, [pc, #32]	; (154f4 <unready_thread+0x6c>)
   154d2:	689b      	ldr	r3, [r3, #8]
   154d4:	687a      	ldr	r2, [r7, #4]
   154d6:	429a      	cmp	r2, r3
   154d8:	bf0c      	ite	eq
   154da:	2301      	moveq	r3, #1
   154dc:	2300      	movne	r3, #0
   154de:	b2db      	uxtb	r3, r3
   154e0:	4618      	mov	r0, r3
   154e2:	f7ff fcd7 	bl	14e94 <update_cache>
}
   154e6:	bf00      	nop
   154e8:	3718      	adds	r7, #24
   154ea:	46bd      	mov	sp, r7
   154ec:	bd80      	pop	{r7, pc}
   154ee:	bf00      	nop
   154f0:	2000ce64 	.word	0x2000ce64
   154f4:	2000ce4c 	.word	0x2000ce4c

000154f8 <add_to_waitq_locked>:

/* sched_spinlock must be held */
static void add_to_waitq_locked(struct k_thread *thread, _wait_q_t *wait_q)
{
   154f8:	b580      	push	{r7, lr}
   154fa:	b086      	sub	sp, #24
   154fc:	af00      	add	r7, sp, #0
   154fe:	6078      	str	r0, [r7, #4]
   15500:	6039      	str	r1, [r7, #0]
	unready_thread(thread);
   15502:	6878      	ldr	r0, [r7, #4]
   15504:	f7ff ffc0 	bl	15488 <unready_thread>
	z_mark_thread_as_pending(thread);
   15508:	6878      	ldr	r0, [r7, #4]
   1550a:	f009 fc2a 	bl	1ed62 <z_mark_thread_as_pending>

	SYS_PORT_TRACING_FUNC(k_thread, sched_pend, thread);

	if (wait_q != NULL) {
   1550e:	683b      	ldr	r3, [r7, #0]
   15510:	2b00      	cmp	r3, #0
   15512:	d051      	beq.n	155b8 <add_to_waitq_locked+0xc0>
		thread->base.pended_on = wait_q;
   15514:	687b      	ldr	r3, [r7, #4]
   15516:	683a      	ldr	r2, [r7, #0]
   15518:	609a      	str	r2, [r3, #8]
		z_priq_wait_add(&wait_q->waitq, thread);
   1551a:	683b      	ldr	r3, [r7, #0]
   1551c:	617b      	str	r3, [r7, #20]
   1551e:	687b      	ldr	r3, [r7, #4]
   15520:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   15522:	6938      	ldr	r0, [r7, #16]
   15524:	f7ff fa08 	bl	14938 <z_is_idle_thread_object>
   15528:	4603      	mov	r3, r0
   1552a:	2b00      	cmp	r3, #0
   1552c:	d009      	beq.n	15542 <add_to_waitq_locked+0x4a>
   1552e:	23c1      	movs	r3, #193	; 0xc1
   15530:	4a23      	ldr	r2, [pc, #140]	; (155c0 <add_to_waitq_locked+0xc8>)
   15532:	4924      	ldr	r1, [pc, #144]	; (155c4 <add_to_waitq_locked+0xcc>)
   15534:	4824      	ldr	r0, [pc, #144]	; (155c8 <add_to_waitq_locked+0xd0>)
   15536:	f004 fd3d 	bl	19fb4 <assert_print>
   1553a:	21c1      	movs	r1, #193	; 0xc1
   1553c:	4820      	ldr	r0, [pc, #128]	; (155c0 <add_to_waitq_locked+0xc8>)
   1553e:	f004 fd29 	bl	19f94 <assert_post_action>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15542:	6978      	ldr	r0, [r7, #20]
   15544:	f009 fa90 	bl	1ea68 <sys_dlist_peek_head>
   15548:	4603      	mov	r3, r0
   1554a:	2b00      	cmp	r3, #0
   1554c:	d004      	beq.n	15558 <add_to_waitq_locked+0x60>
   1554e:	6978      	ldr	r0, [r7, #20]
   15550:	f009 fa8a 	bl	1ea68 <sys_dlist_peek_head>
   15554:	4603      	mov	r3, r0
   15556:	e000      	b.n	1555a <add_to_waitq_locked+0x62>
   15558:	2300      	movs	r3, #0
   1555a:	60fb      	str	r3, [r7, #12]
   1555c:	e024      	b.n	155a8 <add_to_waitq_locked+0xb0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1555e:	68f9      	ldr	r1, [r7, #12]
   15560:	6938      	ldr	r0, [r7, #16]
   15562:	f009 fc71 	bl	1ee48 <z_sched_prio_cmp>
   15566:	4603      	mov	r3, r0
   15568:	2b00      	cmp	r3, #0
   1556a:	dd07      	ble.n	1557c <add_to_waitq_locked+0x84>
			sys_dlist_insert(&t->base.qnode_dlist,
   1556c:	68fb      	ldr	r3, [r7, #12]
   1556e:	693a      	ldr	r2, [r7, #16]
   15570:	4611      	mov	r1, r2
   15572:	4618      	mov	r0, r3
   15574:	f009 fac9 	bl	1eb0a <sys_dlist_insert>
			return;
   15578:	bf00      	nop
	}
}
   1557a:	e01d      	b.n	155b8 <add_to_waitq_locked+0xc0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1557c:	68fb      	ldr	r3, [r7, #12]
   1557e:	2b00      	cmp	r3, #0
   15580:	d010      	beq.n	155a4 <add_to_waitq_locked+0xac>
   15582:	68fb      	ldr	r3, [r7, #12]
   15584:	4619      	mov	r1, r3
   15586:	6978      	ldr	r0, [r7, #20]
   15588:	f009 fa93 	bl	1eab2 <sys_dlist_peek_next>
   1558c:	4603      	mov	r3, r0
   1558e:	2b00      	cmp	r3, #0
   15590:	d006      	beq.n	155a0 <add_to_waitq_locked+0xa8>
   15592:	68fb      	ldr	r3, [r7, #12]
   15594:	4619      	mov	r1, r3
   15596:	6978      	ldr	r0, [r7, #20]
   15598:	f009 fa8b 	bl	1eab2 <sys_dlist_peek_next>
   1559c:	4603      	mov	r3, r0
   1559e:	e002      	b.n	155a6 <add_to_waitq_locked+0xae>
   155a0:	2300      	movs	r3, #0
   155a2:	e000      	b.n	155a6 <add_to_waitq_locked+0xae>
   155a4:	2300      	movs	r3, #0
   155a6:	60fb      	str	r3, [r7, #12]
   155a8:	68fb      	ldr	r3, [r7, #12]
   155aa:	2b00      	cmp	r3, #0
   155ac:	d1d7      	bne.n	1555e <add_to_waitq_locked+0x66>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
   155ae:	693b      	ldr	r3, [r7, #16]
   155b0:	4619      	mov	r1, r3
   155b2:	6978      	ldr	r0, [r7, #20]
   155b4:	f009 fa90 	bl	1ead8 <sys_dlist_append>
}
   155b8:	bf00      	nop
   155ba:	3718      	adds	r7, #24
   155bc:	46bd      	mov	sp, r7
   155be:	bd80      	pop	{r7, pc}
   155c0:	000235b4 	.word	0x000235b4
   155c4:	000235d8 	.word	0x000235d8
   155c8:	0002355c 	.word	0x0002355c

000155cc <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   155cc:	b580      	push	{r7, lr}
   155ce:	b08e      	sub	sp, #56	; 0x38
   155d0:	af00      	add	r7, sp, #0
   155d2:	6078      	str	r0, [r7, #4]
	K_SPINLOCK(&sched_spinlock) {
   155d4:	2300      	movs	r3, #0
   155d6:	617b      	str	r3, [r7, #20]
   155d8:	4b3d      	ldr	r3, [pc, #244]	; (156d0 <z_unpend_thread_no_timeout+0x104>)
   155da:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   155dc:	f04f 0320 	mov.w	r3, #32
   155e0:	f3ef 8211 	mrs	r2, BASEPRI
   155e4:	f383 8812 	msr	BASEPRI_MAX, r3
   155e8:	f3bf 8f6f 	isb	sy
   155ec:	633a      	str	r2, [r7, #48]	; 0x30
   155ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
   155f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = arch_irq_lock();
   155f2:	60bb      	str	r3, [r7, #8]
   155f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   155f6:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   155f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   155fa:	f7fe f98f 	bl	1391c <z_spin_lock_valid>
   155fe:	4603      	mov	r3, r0
   15600:	f083 0301 	eor.w	r3, r3, #1
   15604:	b2db      	uxtb	r3, r3
   15606:	2b00      	cmp	r3, #0
   15608:	d00d      	beq.n	15626 <z_unpend_thread_no_timeout+0x5a>
   1560a:	2372      	movs	r3, #114	; 0x72
   1560c:	4a31      	ldr	r2, [pc, #196]	; (156d4 <z_unpend_thread_no_timeout+0x108>)
   1560e:	4932      	ldr	r1, [pc, #200]	; (156d8 <z_unpend_thread_no_timeout+0x10c>)
   15610:	4832      	ldr	r0, [pc, #200]	; (156dc <z_unpend_thread_no_timeout+0x110>)
   15612:	f004 fccf 	bl	19fb4 <assert_print>
   15616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   15618:	4831      	ldr	r0, [pc, #196]	; (156e0 <z_unpend_thread_no_timeout+0x114>)
   1561a:	f004 fccb 	bl	19fb4 <assert_print>
   1561e:	2172      	movs	r1, #114	; 0x72
   15620:	482c      	ldr	r0, [pc, #176]	; (156d4 <z_unpend_thread_no_timeout+0x108>)
   15622:	f004 fcb7 	bl	19f94 <assert_post_action>
}
   15626:	bf00      	nop
   15628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1562a:	627b      	str	r3, [r7, #36]	; 0x24
	z_spin_lock_set_owner(l);
   1562c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1562e:	f7fe f9ad 	bl	1398c <z_spin_lock_set_owner>
}
   15632:	bf00      	nop
	return k;
   15634:	68bb      	ldr	r3, [r7, #8]
   15636:	613b      	str	r3, [r7, #16]
   15638:	e02c      	b.n	15694 <z_unpend_thread_no_timeout+0xc8>
		if (thread->base.pended_on != NULL) {
   1563a:	687b      	ldr	r3, [r7, #4]
   1563c:	689b      	ldr	r3, [r3, #8]
   1563e:	2b00      	cmp	r3, #0
   15640:	d002      	beq.n	15648 <z_unpend_thread_no_timeout+0x7c>
			unpend_thread_no_timeout(thread);
   15642:	6878      	ldr	r0, [r7, #4]
   15644:	f009 fc71 	bl	1ef2a <unpend_thread_no_timeout>
   15648:	4b21      	ldr	r3, [pc, #132]	; (156d0 <z_unpend_thread_no_timeout+0x104>)
   1564a:	623b      	str	r3, [r7, #32]
   1564c:	693b      	ldr	r3, [r7, #16]
   1564e:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15650:	6a38      	ldr	r0, [r7, #32]
   15652:	f7fe f97f 	bl	13954 <z_spin_unlock_valid>
   15656:	4603      	mov	r3, r0
   15658:	f083 0301 	eor.w	r3, r3, #1
   1565c:	b2db      	uxtb	r3, r3
   1565e:	2b00      	cmp	r3, #0
   15660:	d00d      	beq.n	1567e <z_unpend_thread_no_timeout+0xb2>
   15662:	23f0      	movs	r3, #240	; 0xf0
   15664:	4a1b      	ldr	r2, [pc, #108]	; (156d4 <z_unpend_thread_no_timeout+0x108>)
   15666:	491f      	ldr	r1, [pc, #124]	; (156e4 <z_unpend_thread_no_timeout+0x118>)
   15668:	481c      	ldr	r0, [pc, #112]	; (156dc <z_unpend_thread_no_timeout+0x110>)
   1566a:	f004 fca3 	bl	19fb4 <assert_print>
   1566e:	6a39      	ldr	r1, [r7, #32]
   15670:	481d      	ldr	r0, [pc, #116]	; (156e8 <z_unpend_thread_no_timeout+0x11c>)
   15672:	f004 fc9f 	bl	19fb4 <assert_print>
   15676:	21f0      	movs	r1, #240	; 0xf0
   15678:	4816      	ldr	r0, [pc, #88]	; (156d4 <z_unpend_thread_no_timeout+0x108>)
   1567a:	f004 fc8b 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   1567e:	68fb      	ldr	r3, [r7, #12]
   15680:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   15682:	69fb      	ldr	r3, [r7, #28]
   15684:	f383 8811 	msr	BASEPRI, r3
   15688:	f3bf 8f6f 	isb	sy
}
   1568c:	bf00      	nop
}
   1568e:	bf00      	nop
	K_SPINLOCK(&sched_spinlock) {
   15690:	2301      	movs	r3, #1
   15692:	617b      	str	r3, [r7, #20]
   15694:	697b      	ldr	r3, [r7, #20]
   15696:	2b00      	cmp	r3, #0
   15698:	d0cf      	beq.n	1563a <z_unpend_thread_no_timeout+0x6e>
   1569a:	f107 0314 	add.w	r3, r7, #20
   1569e:	61bb      	str	r3, [r7, #24]
	__ASSERT(k->key, "K_SPINLOCK exited with goto, break or return, "
   156a0:	69bb      	ldr	r3, [r7, #24]
   156a2:	681b      	ldr	r3, [r3, #0]
   156a4:	2b00      	cmp	r3, #0
   156a6:	d10e      	bne.n	156c6 <z_unpend_thread_no_timeout+0xfa>
   156a8:	f240 131b 	movw	r3, #283	; 0x11b
   156ac:	4a09      	ldr	r2, [pc, #36]	; (156d4 <z_unpend_thread_no_timeout+0x108>)
   156ae:	490f      	ldr	r1, [pc, #60]	; (156ec <z_unpend_thread_no_timeout+0x120>)
   156b0:	480a      	ldr	r0, [pc, #40]	; (156dc <z_unpend_thread_no_timeout+0x110>)
   156b2:	f004 fc7f 	bl	19fb4 <assert_print>
   156b6:	480e      	ldr	r0, [pc, #56]	; (156f0 <z_unpend_thread_no_timeout+0x124>)
   156b8:	f004 fc7c 	bl	19fb4 <assert_print>
   156bc:	f240 111b 	movw	r1, #283	; 0x11b
   156c0:	4804      	ldr	r0, [pc, #16]	; (156d4 <z_unpend_thread_no_timeout+0x108>)
   156c2:	f004 fc67 	bl	19f94 <assert_post_action>
}
   156c6:	bf00      	nop
		}
	}
}
   156c8:	bf00      	nop
   156ca:	3738      	adds	r7, #56	; 0x38
   156cc:	46bd      	mov	sp, r7
   156ce:	bd80      	pop	{r7, pc}
   156d0:	2000ce78 	.word	0x2000ce78
   156d4:	00023798 	.word	0x00023798
   156d8:	000237c8 	.word	0x000237c8
   156dc:	0002355c 	.word	0x0002355c
   156e0:	000237e0 	.word	0x000237e0
   156e4:	000237f8 	.word	0x000237f8
   156e8:	00023810 	.word	0x00023810
   156ec:	00023828 	.word	0x00023828
   156f0:	00023830 	.word	0x00023830

000156f4 <z_sched_wake_thread>:

void z_sched_wake_thread(struct k_thread *thread, bool is_timeout)
{
   156f4:	b580      	push	{r7, lr}
   156f6:	b090      	sub	sp, #64	; 0x40
   156f8:	af00      	add	r7, sp, #0
   156fa:	6078      	str	r0, [r7, #4]
   156fc:	460b      	mov	r3, r1
   156fe:	70fb      	strb	r3, [r7, #3]
	K_SPINLOCK(&sched_spinlock) {
   15700:	2300      	movs	r3, #0
   15702:	61bb      	str	r3, [r7, #24]
   15704:	4b52      	ldr	r3, [pc, #328]	; (15850 <z_sched_wake_thread+0x15c>)
   15706:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   15708:	f04f 0320 	mov.w	r3, #32
   1570c:	f3ef 8211 	mrs	r2, BASEPRI
   15710:	f383 8812 	msr	BASEPRI_MAX, r3
   15714:	f3bf 8f6f 	isb	sy
   15718:	637a      	str	r2, [r7, #52]	; 0x34
   1571a:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
   1571c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = arch_irq_lock();
   1571e:	60fb      	str	r3, [r7, #12]
   15720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15722:	62fb      	str	r3, [r7, #44]	; 0x2c
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   15724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15726:	f7fe f8f9 	bl	1391c <z_spin_lock_valid>
   1572a:	4603      	mov	r3, r0
   1572c:	f083 0301 	eor.w	r3, r3, #1
   15730:	b2db      	uxtb	r3, r3
   15732:	2b00      	cmp	r3, #0
   15734:	d00d      	beq.n	15752 <z_sched_wake_thread+0x5e>
   15736:	2372      	movs	r3, #114	; 0x72
   15738:	4a46      	ldr	r2, [pc, #280]	; (15854 <z_sched_wake_thread+0x160>)
   1573a:	4947      	ldr	r1, [pc, #284]	; (15858 <z_sched_wake_thread+0x164>)
   1573c:	4847      	ldr	r0, [pc, #284]	; (1585c <z_sched_wake_thread+0x168>)
   1573e:	f004 fc39 	bl	19fb4 <assert_print>
   15742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15744:	4846      	ldr	r0, [pc, #280]	; (15860 <z_sched_wake_thread+0x16c>)
   15746:	f004 fc35 	bl	19fb4 <assert_print>
   1574a:	2172      	movs	r1, #114	; 0x72
   1574c:	4841      	ldr	r0, [pc, #260]	; (15854 <z_sched_wake_thread+0x160>)
   1574e:	f004 fc21 	bl	19f94 <assert_post_action>
}
   15752:	bf00      	nop
   15754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15756:	62bb      	str	r3, [r7, #40]	; 0x28
	z_spin_lock_set_owner(l);
   15758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1575a:	f7fe f917 	bl	1398c <z_spin_lock_set_owner>
}
   1575e:	bf00      	nop
	return k;
   15760:	68fb      	ldr	r3, [r7, #12]
   15762:	617b      	str	r3, [r7, #20]
   15764:	e056      	b.n	15814 <z_sched_wake_thread+0x120>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   15766:	687b      	ldr	r3, [r7, #4]
   15768:	7b5b      	ldrb	r3, [r3, #13]
   1576a:	f003 0308 	and.w	r3, r3, #8
   1576e:	2b00      	cmp	r3, #0
   15770:	d105      	bne.n	1577e <z_sched_wake_thread+0x8a>
			       (thread->base.thread_state & _THREAD_ABORTING));
   15772:	687b      	ldr	r3, [r7, #4]
   15774:	7b5b      	ldrb	r3, [r3, #13]
   15776:	f003 0320 	and.w	r3, r3, #32
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   1577a:	2b00      	cmp	r3, #0
   1577c:	d001      	beq.n	15782 <z_sched_wake_thread+0x8e>
   1577e:	2301      	movs	r3, #1
   15780:	e000      	b.n	15784 <z_sched_wake_thread+0x90>
   15782:	2300      	movs	r3, #0
   15784:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
   15788:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   1578c:	f003 0301 	and.w	r3, r3, #1
   15790:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (do_nothing) {
			continue;
		}
#endif

		if (!killed) {
   15794:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   15798:	f083 0301 	eor.w	r3, r3, #1
   1579c:	b2db      	uxtb	r3, r3
   1579e:	2b00      	cmp	r3, #0
   157a0:	d012      	beq.n	157c8 <z_sched_wake_thread+0xd4>
			/* The thread is not being killed */
			if (thread->base.pended_on != NULL) {
   157a2:	687b      	ldr	r3, [r7, #4]
   157a4:	689b      	ldr	r3, [r3, #8]
   157a6:	2b00      	cmp	r3, #0
   157a8:	d002      	beq.n	157b0 <z_sched_wake_thread+0xbc>
				unpend_thread_no_timeout(thread);
   157aa:	6878      	ldr	r0, [r7, #4]
   157ac:	f009 fbbd 	bl	1ef2a <unpend_thread_no_timeout>
			}
			z_mark_thread_as_started(thread);
   157b0:	6878      	ldr	r0, [r7, #4]
   157b2:	f009 fac6 	bl	1ed42 <z_mark_thread_as_started>
			if (is_timeout) {
   157b6:	78fb      	ldrb	r3, [r7, #3]
   157b8:	2b00      	cmp	r3, #0
   157ba:	d002      	beq.n	157c2 <z_sched_wake_thread+0xce>
				z_mark_thread_as_not_suspended(thread);
   157bc:	6878      	ldr	r0, [r7, #4]
   157be:	f009 fab0 	bl	1ed22 <z_mark_thread_as_not_suspended>
			}
			ready_thread(thread);
   157c2:	6878      	ldr	r0, [r7, #4]
   157c4:	f7ff fbda 	bl	14f7c <ready_thread>
   157c8:	4b21      	ldr	r3, [pc, #132]	; (15850 <z_sched_wake_thread+0x15c>)
   157ca:	627b      	str	r3, [r7, #36]	; 0x24
   157cc:	697b      	ldr	r3, [r7, #20]
   157ce:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   157d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   157d2:	f7fe f8bf 	bl	13954 <z_spin_unlock_valid>
   157d6:	4603      	mov	r3, r0
   157d8:	f083 0301 	eor.w	r3, r3, #1
   157dc:	b2db      	uxtb	r3, r3
   157de:	2b00      	cmp	r3, #0
   157e0:	d00d      	beq.n	157fe <z_sched_wake_thread+0x10a>
   157e2:	23f0      	movs	r3, #240	; 0xf0
   157e4:	4a1b      	ldr	r2, [pc, #108]	; (15854 <z_sched_wake_thread+0x160>)
   157e6:	491f      	ldr	r1, [pc, #124]	; (15864 <z_sched_wake_thread+0x170>)
   157e8:	481c      	ldr	r0, [pc, #112]	; (1585c <z_sched_wake_thread+0x168>)
   157ea:	f004 fbe3 	bl	19fb4 <assert_print>
   157ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
   157f0:	481d      	ldr	r0, [pc, #116]	; (15868 <z_sched_wake_thread+0x174>)
   157f2:	f004 fbdf 	bl	19fb4 <assert_print>
   157f6:	21f0      	movs	r1, #240	; 0xf0
   157f8:	4816      	ldr	r0, [pc, #88]	; (15854 <z_sched_wake_thread+0x160>)
   157fa:	f004 fbcb 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   157fe:	693b      	ldr	r3, [r7, #16]
   15800:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   15802:	6a3b      	ldr	r3, [r7, #32]
   15804:	f383 8811 	msr	BASEPRI, r3
   15808:	f3bf 8f6f 	isb	sy
}
   1580c:	bf00      	nop
}
   1580e:	bf00      	nop
	K_SPINLOCK(&sched_spinlock) {
   15810:	2301      	movs	r3, #1
   15812:	61bb      	str	r3, [r7, #24]
   15814:	69bb      	ldr	r3, [r7, #24]
   15816:	2b00      	cmp	r3, #0
   15818:	d0a5      	beq.n	15766 <z_sched_wake_thread+0x72>
   1581a:	f107 0318 	add.w	r3, r7, #24
   1581e:	61fb      	str	r3, [r7, #28]
	__ASSERT(k->key, "K_SPINLOCK exited with goto, break or return, "
   15820:	69fb      	ldr	r3, [r7, #28]
   15822:	681b      	ldr	r3, [r3, #0]
   15824:	2b00      	cmp	r3, #0
   15826:	d10e      	bne.n	15846 <z_sched_wake_thread+0x152>
   15828:	f240 131b 	movw	r3, #283	; 0x11b
   1582c:	4a09      	ldr	r2, [pc, #36]	; (15854 <z_sched_wake_thread+0x160>)
   1582e:	490f      	ldr	r1, [pc, #60]	; (1586c <z_sched_wake_thread+0x178>)
   15830:	480a      	ldr	r0, [pc, #40]	; (1585c <z_sched_wake_thread+0x168>)
   15832:	f004 fbbf 	bl	19fb4 <assert_print>
   15836:	480e      	ldr	r0, [pc, #56]	; (15870 <z_sched_wake_thread+0x17c>)
   15838:	f004 fbbc 	bl	19fb4 <assert_print>
   1583c:	f240 111b 	movw	r1, #283	; 0x11b
   15840:	4804      	ldr	r0, [pc, #16]	; (15854 <z_sched_wake_thread+0x160>)
   15842:	f004 fba7 	bl	19f94 <assert_post_action>
}
   15846:	bf00      	nop
		}
	}

}
   15848:	bf00      	nop
   1584a:	3740      	adds	r7, #64	; 0x40
   1584c:	46bd      	mov	sp, r7
   1584e:	bd80      	pop	{r7, pc}
   15850:	2000ce78 	.word	0x2000ce78
   15854:	00023798 	.word	0x00023798
   15858:	000237c8 	.word	0x000237c8
   1585c:	0002355c 	.word	0x0002355c
   15860:	000237e0 	.word	0x000237e0
   15864:	000237f8 	.word	0x000237f8
   15868:	00023810 	.word	0x00023810
   1586c:	00023828 	.word	0x00023828
   15870:	00023830 	.word	0x00023830

00015874 <z_pend_curr>:
#endif
}

int z_pend_curr(struct k_spinlock *lock, k_spinlock_key_t key,
	       _wait_q_t *wait_q, k_timeout_t timeout)
{
   15874:	b580      	push	{r7, lr}
   15876:	b08e      	sub	sp, #56	; 0x38
   15878:	af00      	add	r7, sp, #0
   1587a:	60f8      	str	r0, [r7, #12]
   1587c:	60b9      	str	r1, [r7, #8]
   1587e:	607a      	str	r2, [r7, #4]
#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   15880:	4b46      	ldr	r3, [pc, #280]	; (1599c <z_pend_curr+0x128>)
   15882:	689b      	ldr	r3, [r3, #8]
   15884:	4a46      	ldr	r2, [pc, #280]	; (159a0 <z_pend_curr+0x12c>)
   15886:	6013      	str	r3, [r2, #0]
#endif
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   15888:	68fb      	ldr	r3, [r7, #12]
   1588a:	4a46      	ldr	r2, [pc, #280]	; (159a4 <z_pend_curr+0x130>)
   1588c:	4293      	cmp	r3, r2
   1588e:	d10b      	bne.n	158a8 <z_pend_curr+0x34>
   15890:	f240 335f 	movw	r3, #863	; 0x35f
   15894:	4a44      	ldr	r2, [pc, #272]	; (159a8 <z_pend_curr+0x134>)
   15896:	4945      	ldr	r1, [pc, #276]	; (159ac <z_pend_curr+0x138>)
   15898:	4845      	ldr	r0, [pc, #276]	; (159b0 <z_pend_curr+0x13c>)
   1589a:	f004 fb8b 	bl	19fb4 <assert_print>
   1589e:	f240 315f 	movw	r1, #863	; 0x35f
   158a2:	4841      	ldr	r0, [pc, #260]	; (159a8 <z_pend_curr+0x134>)
   158a4:	f004 fb76 	bl	19f94 <assert_post_action>
   158a8:	4b3e      	ldr	r3, [pc, #248]	; (159a4 <z_pend_curr+0x130>)
   158aa:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
   158ac:	f04f 0320 	mov.w	r3, #32
   158b0:	f3ef 8211 	mrs	r2, BASEPRI
   158b4:	f383 8812 	msr	BASEPRI_MAX, r3
   158b8:	f3bf 8f6f 	isb	sy
   158bc:	627a      	str	r2, [r7, #36]	; 0x24
   158be:	623b      	str	r3, [r7, #32]
	return key;
   158c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = arch_irq_lock();
   158c2:	617b      	str	r3, [r7, #20]
   158c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   158c6:	61fb      	str	r3, [r7, #28]
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   158c8:	69f8      	ldr	r0, [r7, #28]
   158ca:	f7fe f827 	bl	1391c <z_spin_lock_valid>
   158ce:	4603      	mov	r3, r0
   158d0:	f083 0301 	eor.w	r3, r3, #1
   158d4:	b2db      	uxtb	r3, r3
   158d6:	2b00      	cmp	r3, #0
   158d8:	d00d      	beq.n	158f6 <z_pend_curr+0x82>
   158da:	2372      	movs	r3, #114	; 0x72
   158dc:	4a35      	ldr	r2, [pc, #212]	; (159b4 <z_pend_curr+0x140>)
   158de:	4936      	ldr	r1, [pc, #216]	; (159b8 <z_pend_curr+0x144>)
   158e0:	4833      	ldr	r0, [pc, #204]	; (159b0 <z_pend_curr+0x13c>)
   158e2:	f004 fb67 	bl	19fb4 <assert_print>
   158e6:	69f9      	ldr	r1, [r7, #28]
   158e8:	4834      	ldr	r0, [pc, #208]	; (159bc <z_pend_curr+0x148>)
   158ea:	f004 fb63 	bl	19fb4 <assert_print>
   158ee:	2172      	movs	r1, #114	; 0x72
   158f0:	4830      	ldr	r0, [pc, #192]	; (159b4 <z_pend_curr+0x140>)
   158f2:	f004 fb4f 	bl	19f94 <assert_post_action>
}
   158f6:	bf00      	nop
   158f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   158fa:	61bb      	str	r3, [r7, #24]
	z_spin_lock_set_owner(l);
   158fc:	69b8      	ldr	r0, [r7, #24]
   158fe:	f7fe f845 	bl	1398c <z_spin_lock_set_owner>
}
   15902:	bf00      	nop
	 * has similar code; the duplication is because it's a legacy
	 * API that doesn't expect to be called with scheduler lock
	 * held.
	 */
	(void) k_spin_lock(&sched_spinlock);
	pend_locked(_current, wait_q, timeout);
   15904:	4b25      	ldr	r3, [pc, #148]	; (1599c <z_pend_curr+0x128>)
   15906:	6898      	ldr	r0, [r3, #8]
   15908:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
   1590c:	6879      	ldr	r1, [r7, #4]
   1590e:	f009 faf8 	bl	1ef02 <pend_locked>
   15912:	68fb      	ldr	r3, [r7, #12]
   15914:	62fb      	str	r3, [r7, #44]	; 0x2c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15918:	f7fe f81c 	bl	13954 <z_spin_unlock_valid>
   1591c:	4603      	mov	r3, r0
   1591e:	f083 0301 	eor.w	r3, r3, #1
   15922:	b2db      	uxtb	r3, r3
   15924:	2b00      	cmp	r3, #0
   15926:	d00f      	beq.n	15948 <z_pend_curr+0xd4>
   15928:	f240 1311 	movw	r3, #273	; 0x111
   1592c:	4a21      	ldr	r2, [pc, #132]	; (159b4 <z_pend_curr+0x140>)
   1592e:	4924      	ldr	r1, [pc, #144]	; (159c0 <z_pend_curr+0x14c>)
   15930:	481f      	ldr	r0, [pc, #124]	; (159b0 <z_pend_curr+0x13c>)
   15932:	f004 fb3f 	bl	19fb4 <assert_print>
   15936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15938:	4822      	ldr	r0, [pc, #136]	; (159c4 <z_pend_curr+0x150>)
   1593a:	f004 fb3b 	bl	19fb4 <assert_print>
   1593e:	f240 1111 	movw	r1, #273	; 0x111
   15942:	481c      	ldr	r0, [pc, #112]	; (159b4 <z_pend_curr+0x140>)
   15944:	f004 fb26 	bl	19f94 <assert_post_action>
}
   15948:	bf00      	nop
   1594a:	4b16      	ldr	r3, [pc, #88]	; (159a4 <z_pend_curr+0x130>)
   1594c:	637b      	str	r3, [r7, #52]	; 0x34
   1594e:	68bb      	ldr	r3, [r7, #8]
   15950:	613b      	str	r3, [r7, #16]
   15952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15954:	633b      	str	r3, [r7, #48]	; 0x30
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15956:	6b38      	ldr	r0, [r7, #48]	; 0x30
   15958:	f7fd fffc 	bl	13954 <z_spin_unlock_valid>
   1595c:	4603      	mov	r3, r0
   1595e:	f083 0301 	eor.w	r3, r3, #1
   15962:	b2db      	uxtb	r3, r3
   15964:	2b00      	cmp	r3, #0
   15966:	d00f      	beq.n	15988 <z_pend_curr+0x114>
   15968:	f240 1311 	movw	r3, #273	; 0x111
   1596c:	4a11      	ldr	r2, [pc, #68]	; (159b4 <z_pend_curr+0x140>)
   1596e:	4914      	ldr	r1, [pc, #80]	; (159c0 <z_pend_curr+0x14c>)
   15970:	480f      	ldr	r0, [pc, #60]	; (159b0 <z_pend_curr+0x13c>)
   15972:	f004 fb1f 	bl	19fb4 <assert_print>
   15976:	6b39      	ldr	r1, [r7, #48]	; 0x30
   15978:	4812      	ldr	r0, [pc, #72]	; (159c4 <z_pend_curr+0x150>)
   1597a:	f004 fb1b 	bl	19fb4 <assert_print>
   1597e:	f240 1111 	movw	r1, #273	; 0x111
   15982:	480c      	ldr	r0, [pc, #48]	; (159b4 <z_pend_curr+0x140>)
   15984:	f004 fb06 	bl	19f94 <assert_post_action>
}
   15988:	bf00      	nop
	return z_swap_irqlock(key.key);
   1598a:	693b      	ldr	r3, [r7, #16]
   1598c:	4618      	mov	r0, r3
   1598e:	f009 fa34 	bl	1edfa <z_swap_irqlock>
   15992:	4603      	mov	r3, r0
	k_spin_release(lock);
	return z_swap(&sched_spinlock, key);
}
   15994:	4618      	mov	r0, r3
   15996:	3738      	adds	r7, #56	; 0x38
   15998:	46bd      	mov	sp, r7
   1599a:	bd80      	pop	{r7, pc}
   1599c:	2000ce4c 	.word	0x2000ce4c
   159a0:	2000ce88 	.word	0x2000ce88
   159a4:	2000ce78 	.word	0x2000ce78
   159a8:	000235b4 	.word	0x000235b4
   159ac:	00023900 	.word	0x00023900
   159b0:	0002355c 	.word	0x0002355c
   159b4:	00023798 	.word	0x00023798
   159b8:	000237c8 	.word	0x000237c8
   159bc:	000237e0 	.word	0x000237e0
   159c0:	000237f8 	.word	0x000237f8
   159c4:	00023810 	.word	0x00023810

000159c8 <z_unpend1_no_timeout>:

struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
   159c8:	b580      	push	{r7, lr}
   159ca:	b090      	sub	sp, #64	; 0x40
   159cc:	af00      	add	r7, sp, #0
   159ce:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = NULL;
   159d0:	2300      	movs	r3, #0
   159d2:	63fb      	str	r3, [r7, #60]	; 0x3c

	K_SPINLOCK(&sched_spinlock) {
   159d4:	2300      	movs	r3, #0
   159d6:	61bb      	str	r3, [r7, #24]
   159d8:	4b40      	ldr	r3, [pc, #256]	; (15adc <z_unpend1_no_timeout+0x114>)
   159da:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   159dc:	f04f 0320 	mov.w	r3, #32
   159e0:	f3ef 8211 	mrs	r2, BASEPRI
   159e4:	f383 8812 	msr	BASEPRI_MAX, r3
   159e8:	f3bf 8f6f 	isb	sy
   159ec:	637a      	str	r2, [r7, #52]	; 0x34
   159ee:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
   159f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = arch_irq_lock();
   159f2:	60fb      	str	r3, [r7, #12]
   159f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   159f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   159f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   159fa:	f7fd ff8f 	bl	1391c <z_spin_lock_valid>
   159fe:	4603      	mov	r3, r0
   15a00:	f083 0301 	eor.w	r3, r3, #1
   15a04:	b2db      	uxtb	r3, r3
   15a06:	2b00      	cmp	r3, #0
   15a08:	d00d      	beq.n	15a26 <z_unpend1_no_timeout+0x5e>
   15a0a:	2372      	movs	r3, #114	; 0x72
   15a0c:	4a34      	ldr	r2, [pc, #208]	; (15ae0 <z_unpend1_no_timeout+0x118>)
   15a0e:	4935      	ldr	r1, [pc, #212]	; (15ae4 <z_unpend1_no_timeout+0x11c>)
   15a10:	4835      	ldr	r0, [pc, #212]	; (15ae8 <z_unpend1_no_timeout+0x120>)
   15a12:	f004 facf 	bl	19fb4 <assert_print>
   15a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15a18:	4834      	ldr	r0, [pc, #208]	; (15aec <z_unpend1_no_timeout+0x124>)
   15a1a:	f004 facb 	bl	19fb4 <assert_print>
   15a1e:	2172      	movs	r1, #114	; 0x72
   15a20:	482f      	ldr	r0, [pc, #188]	; (15ae0 <z_unpend1_no_timeout+0x118>)
   15a22:	f004 fab7 	bl	19f94 <assert_post_action>
}
   15a26:	bf00      	nop
   15a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15a2a:	62bb      	str	r3, [r7, #40]	; 0x28
	z_spin_lock_set_owner(l);
   15a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   15a2e:	f7fd ffad 	bl	1398c <z_spin_lock_set_owner>
}
   15a32:	bf00      	nop
	return k;
   15a34:	68fb      	ldr	r3, [r7, #12]
   15a36:	617b      	str	r3, [r7, #20]
   15a38:	e030      	b.n	15a9c <z_unpend1_no_timeout+0xd4>
		thread = _priq_wait_best(&wait_q->waitq);
   15a3a:	687b      	ldr	r3, [r7, #4]
   15a3c:	4618      	mov	r0, r3
   15a3e:	f009 fadc 	bl	1effa <z_priq_dumb_best>
   15a42:	63f8      	str	r0, [r7, #60]	; 0x3c

		if (thread != NULL) {
   15a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15a46:	2b00      	cmp	r3, #0
   15a48:	d002      	beq.n	15a50 <z_unpend1_no_timeout+0x88>
			unpend_thread_no_timeout(thread);
   15a4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   15a4c:	f009 fa6d 	bl	1ef2a <unpend_thread_no_timeout>
   15a50:	4b22      	ldr	r3, [pc, #136]	; (15adc <z_unpend1_no_timeout+0x114>)
   15a52:	627b      	str	r3, [r7, #36]	; 0x24
   15a54:	697b      	ldr	r3, [r7, #20]
   15a56:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15a58:	6a78      	ldr	r0, [r7, #36]	; 0x24
   15a5a:	f7fd ff7b 	bl	13954 <z_spin_unlock_valid>
   15a5e:	4603      	mov	r3, r0
   15a60:	f083 0301 	eor.w	r3, r3, #1
   15a64:	b2db      	uxtb	r3, r3
   15a66:	2b00      	cmp	r3, #0
   15a68:	d00d      	beq.n	15a86 <z_unpend1_no_timeout+0xbe>
   15a6a:	23f0      	movs	r3, #240	; 0xf0
   15a6c:	4a1c      	ldr	r2, [pc, #112]	; (15ae0 <z_unpend1_no_timeout+0x118>)
   15a6e:	4920      	ldr	r1, [pc, #128]	; (15af0 <z_unpend1_no_timeout+0x128>)
   15a70:	481d      	ldr	r0, [pc, #116]	; (15ae8 <z_unpend1_no_timeout+0x120>)
   15a72:	f004 fa9f 	bl	19fb4 <assert_print>
   15a76:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15a78:	481e      	ldr	r0, [pc, #120]	; (15af4 <z_unpend1_no_timeout+0x12c>)
   15a7a:	f004 fa9b 	bl	19fb4 <assert_print>
   15a7e:	21f0      	movs	r1, #240	; 0xf0
   15a80:	4817      	ldr	r0, [pc, #92]	; (15ae0 <z_unpend1_no_timeout+0x118>)
   15a82:	f004 fa87 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   15a86:	693b      	ldr	r3, [r7, #16]
   15a88:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   15a8a:	6a3b      	ldr	r3, [r7, #32]
   15a8c:	f383 8811 	msr	BASEPRI, r3
   15a90:	f3bf 8f6f 	isb	sy
}
   15a94:	bf00      	nop
}
   15a96:	bf00      	nop
	K_SPINLOCK(&sched_spinlock) {
   15a98:	2301      	movs	r3, #1
   15a9a:	61bb      	str	r3, [r7, #24]
   15a9c:	69bb      	ldr	r3, [r7, #24]
   15a9e:	2b00      	cmp	r3, #0
   15aa0:	d0cb      	beq.n	15a3a <z_unpend1_no_timeout+0x72>
   15aa2:	f107 0318 	add.w	r3, r7, #24
   15aa6:	61fb      	str	r3, [r7, #28]
	__ASSERT(k->key, "K_SPINLOCK exited with goto, break or return, "
   15aa8:	69fb      	ldr	r3, [r7, #28]
   15aaa:	681b      	ldr	r3, [r3, #0]
   15aac:	2b00      	cmp	r3, #0
   15aae:	d10e      	bne.n	15ace <z_unpend1_no_timeout+0x106>
   15ab0:	f240 131b 	movw	r3, #283	; 0x11b
   15ab4:	4a0a      	ldr	r2, [pc, #40]	; (15ae0 <z_unpend1_no_timeout+0x118>)
   15ab6:	4910      	ldr	r1, [pc, #64]	; (15af8 <z_unpend1_no_timeout+0x130>)
   15ab8:	480b      	ldr	r0, [pc, #44]	; (15ae8 <z_unpend1_no_timeout+0x120>)
   15aba:	f004 fa7b 	bl	19fb4 <assert_print>
   15abe:	480f      	ldr	r0, [pc, #60]	; (15afc <z_unpend1_no_timeout+0x134>)
   15ac0:	f004 fa78 	bl	19fb4 <assert_print>
   15ac4:	f240 111b 	movw	r1, #283	; 0x11b
   15ac8:	4805      	ldr	r0, [pc, #20]	; (15ae0 <z_unpend1_no_timeout+0x118>)
   15aca:	f004 fa63 	bl	19f94 <assert_post_action>
}
   15ace:	bf00      	nop
		}
	}

	return thread;
   15ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   15ad2:	4618      	mov	r0, r3
   15ad4:	3740      	adds	r7, #64	; 0x40
   15ad6:	46bd      	mov	sp, r7
   15ad8:	bd80      	pop	{r7, pc}
   15ada:	bf00      	nop
   15adc:	2000ce78 	.word	0x2000ce78
   15ae0:	00023798 	.word	0x00023798
   15ae4:	000237c8 	.word	0x000237c8
   15ae8:	0002355c 	.word	0x0002355c
   15aec:	000237e0 	.word	0x000237e0
   15af0:	000237f8 	.word	0x000237f8
   15af4:	00023810 	.word	0x00023810
   15af8:	00023828 	.word	0x00023828
   15afc:	00023830 	.word	0x00023830

00015b00 <z_unpend_first_thread>:

struct k_thread *z_unpend_first_thread(_wait_q_t *wait_q)
{
   15b00:	b580      	push	{r7, lr}
   15b02:	b090      	sub	sp, #64	; 0x40
   15b04:	af00      	add	r7, sp, #0
   15b06:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = NULL;
   15b08:	2300      	movs	r3, #0
   15b0a:	63fb      	str	r3, [r7, #60]	; 0x3c

	K_SPINLOCK(&sched_spinlock) {
   15b0c:	2300      	movs	r3, #0
   15b0e:	61bb      	str	r3, [r7, #24]
   15b10:	4b41      	ldr	r3, [pc, #260]	; (15c18 <z_unpend_first_thread+0x118>)
   15b12:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   15b14:	f04f 0320 	mov.w	r3, #32
   15b18:	f3ef 8211 	mrs	r2, BASEPRI
   15b1c:	f383 8812 	msr	BASEPRI_MAX, r3
   15b20:	f3bf 8f6f 	isb	sy
   15b24:	637a      	str	r2, [r7, #52]	; 0x34
   15b26:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
   15b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = arch_irq_lock();
   15b2a:	60fb      	str	r3, [r7, #12]
   15b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   15b30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15b32:	f7fd fef3 	bl	1391c <z_spin_lock_valid>
   15b36:	4603      	mov	r3, r0
   15b38:	f083 0301 	eor.w	r3, r3, #1
   15b3c:	b2db      	uxtb	r3, r3
   15b3e:	2b00      	cmp	r3, #0
   15b40:	d00d      	beq.n	15b5e <z_unpend_first_thread+0x5e>
   15b42:	2372      	movs	r3, #114	; 0x72
   15b44:	4a35      	ldr	r2, [pc, #212]	; (15c1c <z_unpend_first_thread+0x11c>)
   15b46:	4936      	ldr	r1, [pc, #216]	; (15c20 <z_unpend_first_thread+0x120>)
   15b48:	4836      	ldr	r0, [pc, #216]	; (15c24 <z_unpend_first_thread+0x124>)
   15b4a:	f004 fa33 	bl	19fb4 <assert_print>
   15b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15b50:	4835      	ldr	r0, [pc, #212]	; (15c28 <z_unpend_first_thread+0x128>)
   15b52:	f004 fa2f 	bl	19fb4 <assert_print>
   15b56:	2172      	movs	r1, #114	; 0x72
   15b58:	4830      	ldr	r0, [pc, #192]	; (15c1c <z_unpend_first_thread+0x11c>)
   15b5a:	f004 fa1b 	bl	19f94 <assert_post_action>
}
   15b5e:	bf00      	nop
   15b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15b62:	62bb      	str	r3, [r7, #40]	; 0x28
	z_spin_lock_set_owner(l);
   15b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   15b66:	f7fd ff11 	bl	1398c <z_spin_lock_set_owner>
}
   15b6a:	bf00      	nop
	return k;
   15b6c:	68fb      	ldr	r3, [r7, #12]
   15b6e:	617b      	str	r3, [r7, #20]
   15b70:	e033      	b.n	15bda <z_unpend_first_thread+0xda>
		thread = _priq_wait_best(&wait_q->waitq);
   15b72:	687b      	ldr	r3, [r7, #4]
   15b74:	4618      	mov	r0, r3
   15b76:	f009 fa40 	bl	1effa <z_priq_dumb_best>
   15b7a:	63f8      	str	r0, [r7, #60]	; 0x3c

		if (thread != NULL) {
   15b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15b7e:	2b00      	cmp	r3, #0
   15b80:	d005      	beq.n	15b8e <z_unpend_first_thread+0x8e>
			unpend_thread_no_timeout(thread);
   15b82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   15b84:	f009 f9d1 	bl	1ef2a <unpend_thread_no_timeout>
			(void)z_abort_thread_timeout(thread);
   15b88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   15b8a:	f009 f817 	bl	1ebbc <z_abort_thread_timeout>
   15b8e:	4b22      	ldr	r3, [pc, #136]	; (15c18 <z_unpend_first_thread+0x118>)
   15b90:	627b      	str	r3, [r7, #36]	; 0x24
   15b92:	697b      	ldr	r3, [r7, #20]
   15b94:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15b96:	6a78      	ldr	r0, [r7, #36]	; 0x24
   15b98:	f7fd fedc 	bl	13954 <z_spin_unlock_valid>
   15b9c:	4603      	mov	r3, r0
   15b9e:	f083 0301 	eor.w	r3, r3, #1
   15ba2:	b2db      	uxtb	r3, r3
   15ba4:	2b00      	cmp	r3, #0
   15ba6:	d00d      	beq.n	15bc4 <z_unpend_first_thread+0xc4>
   15ba8:	23f0      	movs	r3, #240	; 0xf0
   15baa:	4a1c      	ldr	r2, [pc, #112]	; (15c1c <z_unpend_first_thread+0x11c>)
   15bac:	491f      	ldr	r1, [pc, #124]	; (15c2c <z_unpend_first_thread+0x12c>)
   15bae:	481d      	ldr	r0, [pc, #116]	; (15c24 <z_unpend_first_thread+0x124>)
   15bb0:	f004 fa00 	bl	19fb4 <assert_print>
   15bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15bb6:	481e      	ldr	r0, [pc, #120]	; (15c30 <z_unpend_first_thread+0x130>)
   15bb8:	f004 f9fc 	bl	19fb4 <assert_print>
   15bbc:	21f0      	movs	r1, #240	; 0xf0
   15bbe:	4817      	ldr	r0, [pc, #92]	; (15c1c <z_unpend_first_thread+0x11c>)
   15bc0:	f004 f9e8 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   15bc4:	693b      	ldr	r3, [r7, #16]
   15bc6:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   15bc8:	6a3b      	ldr	r3, [r7, #32]
   15bca:	f383 8811 	msr	BASEPRI, r3
   15bce:	f3bf 8f6f 	isb	sy
}
   15bd2:	bf00      	nop
}
   15bd4:	bf00      	nop
	K_SPINLOCK(&sched_spinlock) {
   15bd6:	2301      	movs	r3, #1
   15bd8:	61bb      	str	r3, [r7, #24]
   15bda:	69bb      	ldr	r3, [r7, #24]
   15bdc:	2b00      	cmp	r3, #0
   15bde:	d0c8      	beq.n	15b72 <z_unpend_first_thread+0x72>
   15be0:	f107 0318 	add.w	r3, r7, #24
   15be4:	61fb      	str	r3, [r7, #28]
	__ASSERT(k->key, "K_SPINLOCK exited with goto, break or return, "
   15be6:	69fb      	ldr	r3, [r7, #28]
   15be8:	681b      	ldr	r3, [r3, #0]
   15bea:	2b00      	cmp	r3, #0
   15bec:	d10e      	bne.n	15c0c <z_unpend_first_thread+0x10c>
   15bee:	f240 131b 	movw	r3, #283	; 0x11b
   15bf2:	4a0a      	ldr	r2, [pc, #40]	; (15c1c <z_unpend_first_thread+0x11c>)
   15bf4:	490f      	ldr	r1, [pc, #60]	; (15c34 <z_unpend_first_thread+0x134>)
   15bf6:	480b      	ldr	r0, [pc, #44]	; (15c24 <z_unpend_first_thread+0x124>)
   15bf8:	f004 f9dc 	bl	19fb4 <assert_print>
   15bfc:	480e      	ldr	r0, [pc, #56]	; (15c38 <z_unpend_first_thread+0x138>)
   15bfe:	f004 f9d9 	bl	19fb4 <assert_print>
   15c02:	f240 111b 	movw	r1, #283	; 0x11b
   15c06:	4805      	ldr	r0, [pc, #20]	; (15c1c <z_unpend_first_thread+0x11c>)
   15c08:	f004 f9c4 	bl	19f94 <assert_post_action>
}
   15c0c:	bf00      	nop
		}
	}

	return thread;
   15c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   15c10:	4618      	mov	r0, r3
   15c12:	3740      	adds	r7, #64	; 0x40
   15c14:	46bd      	mov	sp, r7
   15c16:	bd80      	pop	{r7, pc}
   15c18:	2000ce78 	.word	0x2000ce78
   15c1c:	00023798 	.word	0x00023798
   15c20:	000237c8 	.word	0x000237c8
   15c24:	0002355c 	.word	0x0002355c
   15c28:	000237e0 	.word	0x000237e0
   15c2c:	000237f8 	.word	0x000237f8
   15c30:	00023810 	.word	0x00023810
   15c34:	00023828 	.word	0x00023828
   15c38:	00023830 	.word	0x00023830

00015c3c <z_unpend_thread>:

void z_unpend_thread(struct k_thread *thread)
{
   15c3c:	b580      	push	{r7, lr}
   15c3e:	b090      	sub	sp, #64	; 0x40
   15c40:	af00      	add	r7, sp, #0
   15c42:	6078      	str	r0, [r7, #4]
   15c44:	687b      	ldr	r3, [r7, #4]
   15c46:	63fb      	str	r3, [r7, #60]	; 0x3c
	K_SPINLOCK(&sched_spinlock) {
   15c48:	2300      	movs	r3, #0
   15c4a:	61bb      	str	r3, [r7, #24]
   15c4c:	4b3f      	ldr	r3, [pc, #252]	; (15d4c <z_unpend_thread+0x110>)
   15c4e:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   15c50:	f04f 0320 	mov.w	r3, #32
   15c54:	f3ef 8211 	mrs	r2, BASEPRI
   15c58:	f383 8812 	msr	BASEPRI_MAX, r3
   15c5c:	f3bf 8f6f 	isb	sy
   15c60:	637a      	str	r2, [r7, #52]	; 0x34
   15c62:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
   15c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = arch_irq_lock();
   15c66:	60fb      	str	r3, [r7, #12]
   15c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   15c6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15c6e:	f7fd fe55 	bl	1391c <z_spin_lock_valid>
   15c72:	4603      	mov	r3, r0
   15c74:	f083 0301 	eor.w	r3, r3, #1
   15c78:	b2db      	uxtb	r3, r3
   15c7a:	2b00      	cmp	r3, #0
   15c7c:	d00d      	beq.n	15c9a <z_unpend_thread+0x5e>
   15c7e:	2372      	movs	r3, #114	; 0x72
   15c80:	4a33      	ldr	r2, [pc, #204]	; (15d50 <z_unpend_thread+0x114>)
   15c82:	4934      	ldr	r1, [pc, #208]	; (15d54 <z_unpend_thread+0x118>)
   15c84:	4834      	ldr	r0, [pc, #208]	; (15d58 <z_unpend_thread+0x11c>)
   15c86:	f004 f995 	bl	19fb4 <assert_print>
   15c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15c8c:	4833      	ldr	r0, [pc, #204]	; (15d5c <z_unpend_thread+0x120>)
   15c8e:	f004 f991 	bl	19fb4 <assert_print>
   15c92:	2172      	movs	r1, #114	; 0x72
   15c94:	482e      	ldr	r0, [pc, #184]	; (15d50 <z_unpend_thread+0x114>)
   15c96:	f004 f97d 	bl	19f94 <assert_post_action>
}
   15c9a:	bf00      	nop
   15c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15c9e:	62bb      	str	r3, [r7, #40]	; 0x28
	z_spin_lock_set_owner(l);
   15ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   15ca2:	f7fd fe73 	bl	1398c <z_spin_lock_set_owner>
}
   15ca6:	bf00      	nop
	return k;
   15ca8:	68fb      	ldr	r3, [r7, #12]
   15caa:	617b      	str	r3, [r7, #20]
   15cac:	e02c      	b.n	15d08 <z_unpend_thread+0xcc>
		if (thread->base.pended_on != NULL) {
   15cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15cb0:	689b      	ldr	r3, [r3, #8]
   15cb2:	2b00      	cmp	r3, #0
   15cb4:	d002      	beq.n	15cbc <z_unpend_thread+0x80>
			unpend_thread_no_timeout(thread);
   15cb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   15cb8:	f009 f937 	bl	1ef2a <unpend_thread_no_timeout>
   15cbc:	4b23      	ldr	r3, [pc, #140]	; (15d4c <z_unpend_thread+0x110>)
   15cbe:	627b      	str	r3, [r7, #36]	; 0x24
   15cc0:	697b      	ldr	r3, [r7, #20]
   15cc2:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   15cc6:	f7fd fe45 	bl	13954 <z_spin_unlock_valid>
   15cca:	4603      	mov	r3, r0
   15ccc:	f083 0301 	eor.w	r3, r3, #1
   15cd0:	b2db      	uxtb	r3, r3
   15cd2:	2b00      	cmp	r3, #0
   15cd4:	d00d      	beq.n	15cf2 <z_unpend_thread+0xb6>
   15cd6:	23f0      	movs	r3, #240	; 0xf0
   15cd8:	4a1d      	ldr	r2, [pc, #116]	; (15d50 <z_unpend_thread+0x114>)
   15cda:	4921      	ldr	r1, [pc, #132]	; (15d60 <z_unpend_thread+0x124>)
   15cdc:	481e      	ldr	r0, [pc, #120]	; (15d58 <z_unpend_thread+0x11c>)
   15cde:	f004 f969 	bl	19fb4 <assert_print>
   15ce2:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15ce4:	481f      	ldr	r0, [pc, #124]	; (15d64 <z_unpend_thread+0x128>)
   15ce6:	f004 f965 	bl	19fb4 <assert_print>
   15cea:	21f0      	movs	r1, #240	; 0xf0
   15cec:	4818      	ldr	r0, [pc, #96]	; (15d50 <z_unpend_thread+0x114>)
   15cee:	f004 f951 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   15cf2:	693b      	ldr	r3, [r7, #16]
   15cf4:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   15cf6:	6a3b      	ldr	r3, [r7, #32]
   15cf8:	f383 8811 	msr	BASEPRI, r3
   15cfc:	f3bf 8f6f 	isb	sy
}
   15d00:	bf00      	nop
}
   15d02:	bf00      	nop
	K_SPINLOCK(&sched_spinlock) {
   15d04:	2301      	movs	r3, #1
   15d06:	61bb      	str	r3, [r7, #24]
   15d08:	69bb      	ldr	r3, [r7, #24]
   15d0a:	2b00      	cmp	r3, #0
   15d0c:	d0cf      	beq.n	15cae <z_unpend_thread+0x72>
   15d0e:	f107 0318 	add.w	r3, r7, #24
   15d12:	61fb      	str	r3, [r7, #28]
	__ASSERT(k->key, "K_SPINLOCK exited with goto, break or return, "
   15d14:	69fb      	ldr	r3, [r7, #28]
   15d16:	681b      	ldr	r3, [r3, #0]
   15d18:	2b00      	cmp	r3, #0
   15d1a:	d10e      	bne.n	15d3a <z_unpend_thread+0xfe>
   15d1c:	f240 131b 	movw	r3, #283	; 0x11b
   15d20:	4a0b      	ldr	r2, [pc, #44]	; (15d50 <z_unpend_thread+0x114>)
   15d22:	4911      	ldr	r1, [pc, #68]	; (15d68 <z_unpend_thread+0x12c>)
   15d24:	480c      	ldr	r0, [pc, #48]	; (15d58 <z_unpend_thread+0x11c>)
   15d26:	f004 f945 	bl	19fb4 <assert_print>
   15d2a:	4810      	ldr	r0, [pc, #64]	; (15d6c <z_unpend_thread+0x130>)
   15d2c:	f004 f942 	bl	19fb4 <assert_print>
   15d30:	f240 111b 	movw	r1, #283	; 0x11b
   15d34:	4806      	ldr	r0, [pc, #24]	; (15d50 <z_unpend_thread+0x114>)
   15d36:	f004 f92d 	bl	19f94 <assert_post_action>
}
   15d3a:	bf00      	nop
}
   15d3c:	bf00      	nop
	z_unpend_thread_no_timeout(thread);
	(void)z_abort_thread_timeout(thread);
   15d3e:	6878      	ldr	r0, [r7, #4]
   15d40:	f008 ff3c 	bl	1ebbc <z_abort_thread_timeout>
}
   15d44:	bf00      	nop
   15d46:	3740      	adds	r7, #64	; 0x40
   15d48:	46bd      	mov	sp, r7
   15d4a:	bd80      	pop	{r7, pc}
   15d4c:	2000ce78 	.word	0x2000ce78
   15d50:	00023798 	.word	0x00023798
   15d54:	000237c8 	.word	0x000237c8
   15d58:	0002355c 	.word	0x0002355c
   15d5c:	000237e0 	.word	0x000237e0
   15d60:	000237f8 	.word	0x000237f8
   15d64:	00023810 	.word	0x00023810
   15d68:	00023828 	.word	0x00023828
   15d6c:	00023830 	.word	0x00023830

00015d70 <z_set_prio>:

/* Priority set utility that does no rescheduling, it just changes the
 * run queue state, returning true if a reschedule is needed later.
 */
bool z_set_prio(struct k_thread *thread, int prio)
{
   15d70:	b580      	push	{r7, lr}
   15d72:	b098      	sub	sp, #96	; 0x60
   15d74:	af00      	add	r7, sp, #0
   15d76:	6078      	str	r0, [r7, #4]
   15d78:	6039      	str	r1, [r7, #0]
	bool need_sched = 0;
   15d7a:	2300      	movs	r3, #0
   15d7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	K_SPINLOCK(&sched_spinlock) {
   15d80:	2300      	movs	r3, #0
   15d82:	617b      	str	r3, [r7, #20]
   15d84:	4b85      	ldr	r3, [pc, #532]	; (15f9c <z_set_prio+0x22c>)
   15d86:	65bb      	str	r3, [r7, #88]	; 0x58
	__asm__ volatile(
   15d88:	f04f 0320 	mov.w	r3, #32
   15d8c:	f3ef 8211 	mrs	r2, BASEPRI
   15d90:	f383 8812 	msr	BASEPRI_MAX, r3
   15d94:	f3bf 8f6f 	isb	sy
   15d98:	657a      	str	r2, [r7, #84]	; 0x54
   15d9a:	653b      	str	r3, [r7, #80]	; 0x50
	return key;
   15d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	k.key = arch_irq_lock();
   15d9e:	60bb      	str	r3, [r7, #8]
   15da0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   15da2:	64fb      	str	r3, [r7, #76]	; 0x4c
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   15da4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   15da6:	f7fd fdb9 	bl	1391c <z_spin_lock_valid>
   15daa:	4603      	mov	r3, r0
   15dac:	f083 0301 	eor.w	r3, r3, #1
   15db0:	b2db      	uxtb	r3, r3
   15db2:	2b00      	cmp	r3, #0
   15db4:	d00d      	beq.n	15dd2 <z_set_prio+0x62>
   15db6:	2372      	movs	r3, #114	; 0x72
   15db8:	4a79      	ldr	r2, [pc, #484]	; (15fa0 <z_set_prio+0x230>)
   15dba:	497a      	ldr	r1, [pc, #488]	; (15fa4 <z_set_prio+0x234>)
   15dbc:	487a      	ldr	r0, [pc, #488]	; (15fa8 <z_set_prio+0x238>)
   15dbe:	f004 f8f9 	bl	19fb4 <assert_print>
   15dc2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   15dc4:	4879      	ldr	r0, [pc, #484]	; (15fac <z_set_prio+0x23c>)
   15dc6:	f004 f8f5 	bl	19fb4 <assert_print>
   15dca:	2172      	movs	r1, #114	; 0x72
   15dcc:	4874      	ldr	r0, [pc, #464]	; (15fa0 <z_set_prio+0x230>)
   15dce:	f004 f8e1 	bl	19f94 <assert_post_action>
}
   15dd2:	bf00      	nop
   15dd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   15dd6:	64bb      	str	r3, [r7, #72]	; 0x48
	z_spin_lock_set_owner(l);
   15dd8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   15dda:	f7fd fdd7 	bl	1398c <z_spin_lock_set_owner>
}
   15dde:	bf00      	nop
	return k;
   15de0:	68bb      	ldr	r3, [r7, #8]
   15de2:	613b      	str	r3, [r7, #16]
   15de4:	e0b9      	b.n	15f5a <z_set_prio+0x1ea>
		need_sched = z_is_thread_ready(thread);
   15de6:	6878      	ldr	r0, [r7, #4]
   15de8:	f008 ff38 	bl	1ec5c <z_is_thread_ready>
   15dec:	4603      	mov	r3, r0
   15dee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (need_sched) {
   15df2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   15df6:	2b00      	cmp	r3, #0
   15df8:	f000 8085 	beq.w	15f06 <z_set_prio+0x196>
   15dfc:	687b      	ldr	r3, [r7, #4]
   15dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15e02:	7b5b      	ldrb	r3, [r3, #13]
   15e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15e08:	b2da      	uxtb	r2, r3
   15e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15e0c:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   15e0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15e10:	f009 f835 	bl	1ee7e <should_queue_thread>
   15e14:	4603      	mov	r3, r0
   15e16:	2b00      	cmp	r3, #0
   15e18:	d009      	beq.n	15e2e <z_set_prio+0xbe>
   15e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   15e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15e20:	627b      	str	r3, [r7, #36]	; 0x24
	return &_kernel.ready_q.runq;
   15e22:	4b63      	ldr	r3, [pc, #396]	; (15fb0 <z_set_prio+0x240>)
	_priq_run_remove(thread_runq(thread), thread);
   15e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   15e26:	4618      	mov	r0, r3
   15e28:	f000 fac0 	bl	163ac <z_priq_dumb_remove>
}
   15e2c:	bf00      	nop
}
   15e2e:	bf00      	nop
			/* Don't requeue on SMP if it's the running thread */
			if (!IS_ENABLED(CONFIG_SMP) || z_is_thread_queued(thread)) {
				dequeue_thread(thread);
				thread->base.prio = prio;
   15e30:	683b      	ldr	r3, [r7, #0]
   15e32:	b25a      	sxtb	r2, r3
   15e34:	687b      	ldr	r3, [r7, #4]
   15e36:	739a      	strb	r2, [r3, #14]
   15e38:	687b      	ldr	r3, [r7, #4]
   15e3a:	647b      	str	r3, [r7, #68]	; 0x44
	thread->base.thread_state |= _THREAD_QUEUED;
   15e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15e3e:	7b5b      	ldrb	r3, [r3, #13]
   15e40:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15e44:	b2da      	uxtb	r2, r3
   15e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15e48:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   15e4a:	6c78      	ldr	r0, [r7, #68]	; 0x44
   15e4c:	f009 f817 	bl	1ee7e <should_queue_thread>
   15e50:	4603      	mov	r3, r0
   15e52:	2b00      	cmp	r3, #0
   15e54:	d052      	beq.n	15efc <z_set_prio+0x18c>
   15e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15e58:	643b      	str	r3, [r7, #64]	; 0x40
   15e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
	return &_kernel.ready_q.runq;
   15e5e:	4b54      	ldr	r3, [pc, #336]	; (15fb0 <z_set_prio+0x240>)
   15e60:	63bb      	str	r3, [r7, #56]	; 0x38
   15e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15e64:	637b      	str	r3, [r7, #52]	; 0x34
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   15e66:	6b78      	ldr	r0, [r7, #52]	; 0x34
   15e68:	f7fe fd66 	bl	14938 <z_is_idle_thread_object>
   15e6c:	4603      	mov	r3, r0
   15e6e:	2b00      	cmp	r3, #0
   15e70:	d009      	beq.n	15e86 <z_set_prio+0x116>
   15e72:	23c1      	movs	r3, #193	; 0xc1
   15e74:	4a4f      	ldr	r2, [pc, #316]	; (15fb4 <z_set_prio+0x244>)
   15e76:	4950      	ldr	r1, [pc, #320]	; (15fb8 <z_set_prio+0x248>)
   15e78:	484b      	ldr	r0, [pc, #300]	; (15fa8 <z_set_prio+0x238>)
   15e7a:	f004 f89b 	bl	19fb4 <assert_print>
   15e7e:	21c1      	movs	r1, #193	; 0xc1
   15e80:	484c      	ldr	r0, [pc, #304]	; (15fb4 <z_set_prio+0x244>)
   15e82:	f004 f887 	bl	19f94 <assert_post_action>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15e86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   15e88:	f008 fdee 	bl	1ea68 <sys_dlist_peek_head>
   15e8c:	4603      	mov	r3, r0
   15e8e:	2b00      	cmp	r3, #0
   15e90:	d004      	beq.n	15e9c <z_set_prio+0x12c>
   15e92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   15e94:	f008 fde8 	bl	1ea68 <sys_dlist_peek_head>
   15e98:	4603      	mov	r3, r0
   15e9a:	e000      	b.n	15e9e <z_set_prio+0x12e>
   15e9c:	2300      	movs	r3, #0
   15e9e:	633b      	str	r3, [r7, #48]	; 0x30
   15ea0:	e023      	b.n	15eea <z_set_prio+0x17a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15ea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
   15ea4:	6b78      	ldr	r0, [r7, #52]	; 0x34
   15ea6:	f008 ffcf 	bl	1ee48 <z_sched_prio_cmp>
   15eaa:	4603      	mov	r3, r0
   15eac:	2b00      	cmp	r3, #0
   15eae:	dd06      	ble.n	15ebe <z_set_prio+0x14e>
			sys_dlist_insert(&t->base.qnode_dlist,
   15eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   15eb4:	4611      	mov	r1, r2
   15eb6:	4618      	mov	r0, r3
   15eb8:	f008 fe27 	bl	1eb0a <sys_dlist_insert>
			return;
   15ebc:	e01d      	b.n	15efa <z_set_prio+0x18a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15ec0:	2b00      	cmp	r3, #0
   15ec2:	d010      	beq.n	15ee6 <z_set_prio+0x176>
   15ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15ec6:	4619      	mov	r1, r3
   15ec8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   15eca:	f008 fdf2 	bl	1eab2 <sys_dlist_peek_next>
   15ece:	4603      	mov	r3, r0
   15ed0:	2b00      	cmp	r3, #0
   15ed2:	d006      	beq.n	15ee2 <z_set_prio+0x172>
   15ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15ed6:	4619      	mov	r1, r3
   15ed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   15eda:	f008 fdea 	bl	1eab2 <sys_dlist_peek_next>
   15ede:	4603      	mov	r3, r0
   15ee0:	e002      	b.n	15ee8 <z_set_prio+0x178>
   15ee2:	2300      	movs	r3, #0
   15ee4:	e000      	b.n	15ee8 <z_set_prio+0x178>
   15ee6:	2300      	movs	r3, #0
   15ee8:	633b      	str	r3, [r7, #48]	; 0x30
   15eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15eec:	2b00      	cmp	r3, #0
   15eee:	d1d8      	bne.n	15ea2 <z_set_prio+0x132>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
   15ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15ef2:	4619      	mov	r1, r3
   15ef4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   15ef6:	f008 fdef 	bl	1ead8 <sys_dlist_append>
}
   15efa:	bf00      	nop
}
   15efc:	bf00      	nop
				queue_thread(thread);
			} else {
				thread->base.prio = prio;
			}
			update_cache(1);
   15efe:	2001      	movs	r0, #1
   15f00:	f7fe ffc8 	bl	14e94 <update_cache>
   15f04:	e003      	b.n	15f0e <z_set_prio+0x19e>
		} else {
			thread->base.prio = prio;
   15f06:	683b      	ldr	r3, [r7, #0]
   15f08:	b25a      	sxtb	r2, r3
   15f0a:	687b      	ldr	r3, [r7, #4]
   15f0c:	739a      	strb	r2, [r3, #14]
   15f0e:	4b23      	ldr	r3, [pc, #140]	; (15f9c <z_set_prio+0x22c>)
   15f10:	623b      	str	r3, [r7, #32]
   15f12:	693b      	ldr	r3, [r7, #16]
   15f14:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15f16:	6a38      	ldr	r0, [r7, #32]
   15f18:	f7fd fd1c 	bl	13954 <z_spin_unlock_valid>
   15f1c:	4603      	mov	r3, r0
   15f1e:	f083 0301 	eor.w	r3, r3, #1
   15f22:	b2db      	uxtb	r3, r3
   15f24:	2b00      	cmp	r3, #0
   15f26:	d00d      	beq.n	15f44 <z_set_prio+0x1d4>
   15f28:	23f0      	movs	r3, #240	; 0xf0
   15f2a:	4a1d      	ldr	r2, [pc, #116]	; (15fa0 <z_set_prio+0x230>)
   15f2c:	4923      	ldr	r1, [pc, #140]	; (15fbc <z_set_prio+0x24c>)
   15f2e:	481e      	ldr	r0, [pc, #120]	; (15fa8 <z_set_prio+0x238>)
   15f30:	f004 f840 	bl	19fb4 <assert_print>
   15f34:	6a39      	ldr	r1, [r7, #32]
   15f36:	4822      	ldr	r0, [pc, #136]	; (15fc0 <z_set_prio+0x250>)
   15f38:	f004 f83c 	bl	19fb4 <assert_print>
   15f3c:	21f0      	movs	r1, #240	; 0xf0
   15f3e:	4818      	ldr	r0, [pc, #96]	; (15fa0 <z_set_prio+0x230>)
   15f40:	f004 f828 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   15f44:	68fb      	ldr	r3, [r7, #12]
   15f46:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   15f48:	69fb      	ldr	r3, [r7, #28]
   15f4a:	f383 8811 	msr	BASEPRI, r3
   15f4e:	f3bf 8f6f 	isb	sy
}
   15f52:	bf00      	nop
}
   15f54:	bf00      	nop
	K_SPINLOCK(&sched_spinlock) {
   15f56:	2301      	movs	r3, #1
   15f58:	617b      	str	r3, [r7, #20]
   15f5a:	697b      	ldr	r3, [r7, #20]
   15f5c:	2b00      	cmp	r3, #0
   15f5e:	f43f af42 	beq.w	15de6 <z_set_prio+0x76>
   15f62:	f107 0314 	add.w	r3, r7, #20
   15f66:	61bb      	str	r3, [r7, #24]
	__ASSERT(k->key, "K_SPINLOCK exited with goto, break or return, "
   15f68:	69bb      	ldr	r3, [r7, #24]
   15f6a:	681b      	ldr	r3, [r3, #0]
   15f6c:	2b00      	cmp	r3, #0
   15f6e:	d10e      	bne.n	15f8e <z_set_prio+0x21e>
   15f70:	f240 131b 	movw	r3, #283	; 0x11b
   15f74:	4a0a      	ldr	r2, [pc, #40]	; (15fa0 <z_set_prio+0x230>)
   15f76:	4913      	ldr	r1, [pc, #76]	; (15fc4 <z_set_prio+0x254>)
   15f78:	480b      	ldr	r0, [pc, #44]	; (15fa8 <z_set_prio+0x238>)
   15f7a:	f004 f81b 	bl	19fb4 <assert_print>
   15f7e:	4812      	ldr	r0, [pc, #72]	; (15fc8 <z_set_prio+0x258>)
   15f80:	f004 f818 	bl	19fb4 <assert_print>
   15f84:	f240 111b 	movw	r1, #283	; 0x11b
   15f88:	4805      	ldr	r0, [pc, #20]	; (15fa0 <z_set_prio+0x230>)
   15f8a:	f004 f803 	bl	19f94 <assert_post_action>
}
   15f8e:	bf00      	nop
		}
	}

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_priority_set, thread, prio);

	return need_sched;
   15f90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
   15f94:	4618      	mov	r0, r3
   15f96:	3760      	adds	r7, #96	; 0x60
   15f98:	46bd      	mov	sp, r7
   15f9a:	bd80      	pop	{r7, pc}
   15f9c:	2000ce78 	.word	0x2000ce78
   15fa0:	00023798 	.word	0x00023798
   15fa4:	000237c8 	.word	0x000237c8
   15fa8:	0002355c 	.word	0x0002355c
   15fac:	000237e0 	.word	0x000237e0
   15fb0:	2000ce64 	.word	0x2000ce64
   15fb4:	000235b4 	.word	0x000235b4
   15fb8:	000235d8 	.word	0x000235d8
   15fbc:	000237f8 	.word	0x000237f8
   15fc0:	00023810 	.word	0x00023810
   15fc4:	00023828 	.word	0x00023828
   15fc8:	00023830 	.word	0x00023830

00015fcc <need_swap>:
/*
 * Check if the next ready thread is the same as the current thread
 * and save the trip if true.
 */
static inline bool need_swap(void)
{
   15fcc:	b480      	push	{r7}
   15fce:	b083      	sub	sp, #12
   15fd0:	af00      	add	r7, sp, #0
	return true;
#else
	struct k_thread *new_thread;

	/* Check if the next ready thread is the same as the current thread */
	new_thread = _kernel.ready_q.cache;
   15fd2:	4b08      	ldr	r3, [pc, #32]	; (15ff4 <need_swap+0x28>)
   15fd4:	695b      	ldr	r3, [r3, #20]
   15fd6:	607b      	str	r3, [r7, #4]
	return new_thread != _current;
   15fd8:	4b06      	ldr	r3, [pc, #24]	; (15ff4 <need_swap+0x28>)
   15fda:	689b      	ldr	r3, [r3, #8]
   15fdc:	687a      	ldr	r2, [r7, #4]
   15fde:	429a      	cmp	r2, r3
   15fe0:	bf14      	ite	ne
   15fe2:	2301      	movne	r3, #1
   15fe4:	2300      	moveq	r3, #0
   15fe6:	b2db      	uxtb	r3, r3
#endif
}
   15fe8:	4618      	mov	r0, r3
   15fea:	370c      	adds	r7, #12
   15fec:	46bd      	mov	sp, r7
   15fee:	bc80      	pop	{r7}
   15ff0:	4770      	bx	lr
   15ff2:	bf00      	nop
   15ff4:	2000ce4c 	.word	0x2000ce4c

00015ff8 <z_reschedule>:

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   15ff8:	b580      	push	{r7, lr}
   15ffa:	b088      	sub	sp, #32
   15ffc:	af00      	add	r7, sp, #0
   15ffe:	6078      	str	r0, [r7, #4]
   16000:	6039      	str	r1, [r7, #0]
	if (resched(key.key) && need_swap()) {
   16002:	683b      	ldr	r3, [r7, #0]
   16004:	4618      	mov	r0, r3
   16006:	f008 ffb5 	bl	1ef74 <resched>
   1600a:	4603      	mov	r3, r0
   1600c:	2b00      	cmp	r3, #0
   1600e:	d029      	beq.n	16064 <z_reschedule+0x6c>
   16010:	f7ff ffdc 	bl	15fcc <need_swap>
   16014:	4603      	mov	r3, r0
   16016:	2b00      	cmp	r3, #0
   16018:	d024      	beq.n	16064 <z_reschedule+0x6c>
   1601a:	687b      	ldr	r3, [r7, #4]
   1601c:	61fb      	str	r3, [r7, #28]
   1601e:	683b      	ldr	r3, [r7, #0]
   16020:	60bb      	str	r3, [r7, #8]
   16022:	69fb      	ldr	r3, [r7, #28]
   16024:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16026:	69b8      	ldr	r0, [r7, #24]
   16028:	f7fd fc94 	bl	13954 <z_spin_unlock_valid>
   1602c:	4603      	mov	r3, r0
   1602e:	f083 0301 	eor.w	r3, r3, #1
   16032:	b2db      	uxtb	r3, r3
   16034:	2b00      	cmp	r3, #0
   16036:	d00f      	beq.n	16058 <z_reschedule+0x60>
   16038:	f240 1311 	movw	r3, #273	; 0x111
   1603c:	4a1f      	ldr	r2, [pc, #124]	; (160bc <z_reschedule+0xc4>)
   1603e:	4920      	ldr	r1, [pc, #128]	; (160c0 <z_reschedule+0xc8>)
   16040:	4820      	ldr	r0, [pc, #128]	; (160c4 <z_reschedule+0xcc>)
   16042:	f003 ffb7 	bl	19fb4 <assert_print>
   16046:	69b9      	ldr	r1, [r7, #24]
   16048:	481f      	ldr	r0, [pc, #124]	; (160c8 <z_reschedule+0xd0>)
   1604a:	f003 ffb3 	bl	19fb4 <assert_print>
   1604e:	f240 1111 	movw	r1, #273	; 0x111
   16052:	481a      	ldr	r0, [pc, #104]	; (160bc <z_reschedule+0xc4>)
   16054:	f003 ff9e 	bl	19f94 <assert_post_action>
}
   16058:	bf00      	nop
   1605a:	68bb      	ldr	r3, [r7, #8]
   1605c:	4618      	mov	r0, r3
   1605e:	f008 fecc 	bl	1edfa <z_swap_irqlock>
		z_swap(lock, key);
   16062:	e026      	b.n	160b2 <z_reschedule+0xba>
   16064:	687b      	ldr	r3, [r7, #4]
   16066:	617b      	str	r3, [r7, #20]
   16068:	683b      	ldr	r3, [r7, #0]
   1606a:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1606c:	6978      	ldr	r0, [r7, #20]
   1606e:	f7fd fc71 	bl	13954 <z_spin_unlock_valid>
   16072:	4603      	mov	r3, r0
   16074:	f083 0301 	eor.w	r3, r3, #1
   16078:	b2db      	uxtb	r3, r3
   1607a:	2b00      	cmp	r3, #0
   1607c:	d00d      	beq.n	1609a <z_reschedule+0xa2>
   1607e:	23f0      	movs	r3, #240	; 0xf0
   16080:	4a0e      	ldr	r2, [pc, #56]	; (160bc <z_reschedule+0xc4>)
   16082:	490f      	ldr	r1, [pc, #60]	; (160c0 <z_reschedule+0xc8>)
   16084:	480f      	ldr	r0, [pc, #60]	; (160c4 <z_reschedule+0xcc>)
   16086:	f003 ff95 	bl	19fb4 <assert_print>
   1608a:	6979      	ldr	r1, [r7, #20]
   1608c:	480e      	ldr	r0, [pc, #56]	; (160c8 <z_reschedule+0xd0>)
   1608e:	f003 ff91 	bl	19fb4 <assert_print>
   16092:	21f0      	movs	r1, #240	; 0xf0
   16094:	4809      	ldr	r0, [pc, #36]	; (160bc <z_reschedule+0xc4>)
   16096:	f003 ff7d 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   1609a:	68fb      	ldr	r3, [r7, #12]
   1609c:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   1609e:	693b      	ldr	r3, [r7, #16]
   160a0:	f383 8811 	msr	BASEPRI, r3
   160a4:	f3bf 8f6f 	isb	sy
}
   160a8:	bf00      	nop
}
   160aa:	bf00      	nop
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
   160ac:	f008 fef1 	bl	1ee92 <signal_pending_ipi>
	}
}
   160b0:	bf00      	nop
   160b2:	bf00      	nop
   160b4:	3720      	adds	r7, #32
   160b6:	46bd      	mov	sp, r7
   160b8:	bd80      	pop	{r7, pc}
   160ba:	bf00      	nop
   160bc:	00023798 	.word	0x00023798
   160c0:	000237f8 	.word	0x000237f8
   160c4:	0002355c 	.word	0x0002355c
   160c8:	00023810 	.word	0x00023810

000160cc <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   160cc:	b580      	push	{r7, lr}
   160ce:	b08c      	sub	sp, #48	; 0x30
   160d0:	af00      	add	r7, sp, #0
	K_SPINLOCK(&sched_spinlock) {
   160d2:	2300      	movs	r3, #0
   160d4:	60fb      	str	r3, [r7, #12]
   160d6:	4b3b      	ldr	r3, [pc, #236]	; (161c4 <k_sched_lock+0xf8>)
   160d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   160da:	f04f 0320 	mov.w	r3, #32
   160de:	f3ef 8211 	mrs	r2, BASEPRI
   160e2:	f383 8812 	msr	BASEPRI_MAX, r3
   160e6:	f3bf 8f6f 	isb	sy
   160ea:	62ba      	str	r2, [r7, #40]	; 0x28
   160ec:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   160ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
   160f0:	603b      	str	r3, [r7, #0]
   160f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   160f4:	623b      	str	r3, [r7, #32]
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   160f6:	6a38      	ldr	r0, [r7, #32]
   160f8:	f7fd fc10 	bl	1391c <z_spin_lock_valid>
   160fc:	4603      	mov	r3, r0
   160fe:	f083 0301 	eor.w	r3, r3, #1
   16102:	b2db      	uxtb	r3, r3
   16104:	2b00      	cmp	r3, #0
   16106:	d00d      	beq.n	16124 <k_sched_lock+0x58>
   16108:	2372      	movs	r3, #114	; 0x72
   1610a:	4a2f      	ldr	r2, [pc, #188]	; (161c8 <k_sched_lock+0xfc>)
   1610c:	492f      	ldr	r1, [pc, #188]	; (161cc <k_sched_lock+0x100>)
   1610e:	4830      	ldr	r0, [pc, #192]	; (161d0 <k_sched_lock+0x104>)
   16110:	f003 ff50 	bl	19fb4 <assert_print>
   16114:	6a39      	ldr	r1, [r7, #32]
   16116:	482f      	ldr	r0, [pc, #188]	; (161d4 <k_sched_lock+0x108>)
   16118:	f003 ff4c 	bl	19fb4 <assert_print>
   1611c:	2172      	movs	r1, #114	; 0x72
   1611e:	482a      	ldr	r0, [pc, #168]	; (161c8 <k_sched_lock+0xfc>)
   16120:	f003 ff38 	bl	19f94 <assert_post_action>
}
   16124:	bf00      	nop
   16126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16128:	61fb      	str	r3, [r7, #28]
	z_spin_lock_set_owner(l);
   1612a:	69f8      	ldr	r0, [r7, #28]
   1612c:	f7fd fc2e 	bl	1398c <z_spin_lock_set_owner>
}
   16130:	bf00      	nop
	return k;
   16132:	683b      	ldr	r3, [r7, #0]
   16134:	60bb      	str	r3, [r7, #8]
   16136:	e027      	b.n	16188 <k_sched_lock+0xbc>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
   16138:	f7fe fc10 	bl	1495c <z_sched_lock>
   1613c:	4b21      	ldr	r3, [pc, #132]	; (161c4 <k_sched_lock+0xf8>)
   1613e:	61bb      	str	r3, [r7, #24]
   16140:	68bb      	ldr	r3, [r7, #8]
   16142:	607b      	str	r3, [r7, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16144:	69b8      	ldr	r0, [r7, #24]
   16146:	f7fd fc05 	bl	13954 <z_spin_unlock_valid>
   1614a:	4603      	mov	r3, r0
   1614c:	f083 0301 	eor.w	r3, r3, #1
   16150:	b2db      	uxtb	r3, r3
   16152:	2b00      	cmp	r3, #0
   16154:	d00d      	beq.n	16172 <k_sched_lock+0xa6>
   16156:	23f0      	movs	r3, #240	; 0xf0
   16158:	4a1b      	ldr	r2, [pc, #108]	; (161c8 <k_sched_lock+0xfc>)
   1615a:	491f      	ldr	r1, [pc, #124]	; (161d8 <k_sched_lock+0x10c>)
   1615c:	481c      	ldr	r0, [pc, #112]	; (161d0 <k_sched_lock+0x104>)
   1615e:	f003 ff29 	bl	19fb4 <assert_print>
   16162:	69b9      	ldr	r1, [r7, #24]
   16164:	481d      	ldr	r0, [pc, #116]	; (161dc <k_sched_lock+0x110>)
   16166:	f003 ff25 	bl	19fb4 <assert_print>
   1616a:	21f0      	movs	r1, #240	; 0xf0
   1616c:	4816      	ldr	r0, [pc, #88]	; (161c8 <k_sched_lock+0xfc>)
   1616e:	f003 ff11 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   16172:	687b      	ldr	r3, [r7, #4]
   16174:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   16176:	697b      	ldr	r3, [r7, #20]
   16178:	f383 8811 	msr	BASEPRI, r3
   1617c:	f3bf 8f6f 	isb	sy
}
   16180:	bf00      	nop
}
   16182:	bf00      	nop
	K_SPINLOCK(&sched_spinlock) {
   16184:	2301      	movs	r3, #1
   16186:	60fb      	str	r3, [r7, #12]
   16188:	68fb      	ldr	r3, [r7, #12]
   1618a:	2b00      	cmp	r3, #0
   1618c:	d0d4      	beq.n	16138 <k_sched_lock+0x6c>
   1618e:	f107 030c 	add.w	r3, r7, #12
   16192:	613b      	str	r3, [r7, #16]
	__ASSERT(k->key, "K_SPINLOCK exited with goto, break or return, "
   16194:	693b      	ldr	r3, [r7, #16]
   16196:	681b      	ldr	r3, [r3, #0]
   16198:	2b00      	cmp	r3, #0
   1619a:	d10e      	bne.n	161ba <k_sched_lock+0xee>
   1619c:	f240 131b 	movw	r3, #283	; 0x11b
   161a0:	4a09      	ldr	r2, [pc, #36]	; (161c8 <k_sched_lock+0xfc>)
   161a2:	490f      	ldr	r1, [pc, #60]	; (161e0 <k_sched_lock+0x114>)
   161a4:	480a      	ldr	r0, [pc, #40]	; (161d0 <k_sched_lock+0x104>)
   161a6:	f003 ff05 	bl	19fb4 <assert_print>
   161aa:	480e      	ldr	r0, [pc, #56]	; (161e4 <k_sched_lock+0x118>)
   161ac:	f003 ff02 	bl	19fb4 <assert_print>
   161b0:	f240 111b 	movw	r1, #283	; 0x11b
   161b4:	4804      	ldr	r0, [pc, #16]	; (161c8 <k_sched_lock+0xfc>)
   161b6:	f003 feed 	bl	19f94 <assert_post_action>
}
   161ba:	bf00      	nop
	}
}
   161bc:	bf00      	nop
   161be:	3730      	adds	r7, #48	; 0x30
   161c0:	46bd      	mov	sp, r7
   161c2:	bd80      	pop	{r7, pc}
   161c4:	2000ce78 	.word	0x2000ce78
   161c8:	00023798 	.word	0x00023798
   161cc:	000237c8 	.word	0x000237c8
   161d0:	0002355c 	.word	0x0002355c
   161d4:	000237e0 	.word	0x000237e0
   161d8:	000237f8 	.word	0x000237f8
   161dc:	00023810 	.word	0x00023810
   161e0:	00023828 	.word	0x00023828
   161e4:	00023830 	.word	0x00023830

000161e8 <k_sched_unlock>:

void k_sched_unlock(void)
{
   161e8:	b580      	push	{r7, lr}
   161ea:	b08e      	sub	sp, #56	; 0x38
   161ec:	af00      	add	r7, sp, #0
	K_SPINLOCK(&sched_spinlock) {
   161ee:	2300      	movs	r3, #0
   161f0:	613b      	str	r3, [r7, #16]
   161f2:	4b5f      	ldr	r3, [pc, #380]	; (16370 <k_sched_unlock+0x188>)
   161f4:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   161f6:	f04f 0320 	mov.w	r3, #32
   161fa:	f3ef 8211 	mrs	r2, BASEPRI
   161fe:	f383 8812 	msr	BASEPRI_MAX, r3
   16202:	f3bf 8f6f 	isb	sy
   16206:	633a      	str	r2, [r7, #48]	; 0x30
   16208:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
   1620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = arch_irq_lock();
   1620c:	607b      	str	r3, [r7, #4]
   1620e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16210:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   16212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   16214:	f7fd fb82 	bl	1391c <z_spin_lock_valid>
   16218:	4603      	mov	r3, r0
   1621a:	f083 0301 	eor.w	r3, r3, #1
   1621e:	b2db      	uxtb	r3, r3
   16220:	2b00      	cmp	r3, #0
   16222:	d00d      	beq.n	16240 <k_sched_unlock+0x58>
   16224:	2372      	movs	r3, #114	; 0x72
   16226:	4a53      	ldr	r2, [pc, #332]	; (16374 <k_sched_unlock+0x18c>)
   16228:	4953      	ldr	r1, [pc, #332]	; (16378 <k_sched_unlock+0x190>)
   1622a:	4854      	ldr	r0, [pc, #336]	; (1637c <k_sched_unlock+0x194>)
   1622c:	f003 fec2 	bl	19fb4 <assert_print>
   16230:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16232:	4853      	ldr	r0, [pc, #332]	; (16380 <k_sched_unlock+0x198>)
   16234:	f003 febe 	bl	19fb4 <assert_print>
   16238:	2172      	movs	r1, #114	; 0x72
   1623a:	484e      	ldr	r0, [pc, #312]	; (16374 <k_sched_unlock+0x18c>)
   1623c:	f003 feaa 	bl	19f94 <assert_post_action>
}
   16240:	bf00      	nop
   16242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16244:	627b      	str	r3, [r7, #36]	; 0x24
	z_spin_lock_set_owner(l);
   16246:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16248:	f7fd fba0 	bl	1398c <z_spin_lock_set_owner>
}
   1624c:	bf00      	nop
	return k;
   1624e:	687b      	ldr	r3, [r7, #4]
   16250:	60fb      	str	r3, [r7, #12]
   16252:	e05c      	b.n	1630e <k_sched_unlock+0x126>
		__ASSERT(_current->base.sched_locked != 0U, "");
   16254:	4b4b      	ldr	r3, [pc, #300]	; (16384 <k_sched_unlock+0x19c>)
   16256:	689b      	ldr	r3, [r3, #8]
   16258:	7bdb      	ldrb	r3, [r3, #15]
   1625a:	2b00      	cmp	r3, #0
   1625c:	d10e      	bne.n	1627c <k_sched_unlock+0x94>
   1625e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   16262:	4a49      	ldr	r2, [pc, #292]	; (16388 <k_sched_unlock+0x1a0>)
   16264:	4949      	ldr	r1, [pc, #292]	; (1638c <k_sched_unlock+0x1a4>)
   16266:	4845      	ldr	r0, [pc, #276]	; (1637c <k_sched_unlock+0x194>)
   16268:	f003 fea4 	bl	19fb4 <assert_print>
   1626c:	4848      	ldr	r0, [pc, #288]	; (16390 <k_sched_unlock+0x1a8>)
   1626e:	f003 fea1 	bl	19fb4 <assert_print>
   16272:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   16276:	4844      	ldr	r0, [pc, #272]	; (16388 <k_sched_unlock+0x1a0>)
   16278:	f003 fe8c 	bl	19f94 <assert_post_action>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1627c:	f3ef 8305 	mrs	r3, IPSR
   16280:	623b      	str	r3, [r7, #32]
  return(result);
   16282:	6a3b      	ldr	r3, [r7, #32]
   16284:	2b00      	cmp	r3, #0
   16286:	bf14      	ite	ne
   16288:	2301      	movne	r3, #1
   1628a:	2300      	moveq	r3, #0
   1628c:	b2db      	uxtb	r3, r3
		__ASSERT(!arch_is_in_isr(), "");
   1628e:	2b00      	cmp	r3, #0
   16290:	d00e      	beq.n	162b0 <k_sched_unlock+0xc8>
   16292:	f240 33f9 	movw	r3, #1017	; 0x3f9
   16296:	4a3c      	ldr	r2, [pc, #240]	; (16388 <k_sched_unlock+0x1a0>)
   16298:	493e      	ldr	r1, [pc, #248]	; (16394 <k_sched_unlock+0x1ac>)
   1629a:	4838      	ldr	r0, [pc, #224]	; (1637c <k_sched_unlock+0x194>)
   1629c:	f003 fe8a 	bl	19fb4 <assert_print>
   162a0:	483b      	ldr	r0, [pc, #236]	; (16390 <k_sched_unlock+0x1a8>)
   162a2:	f003 fe87 	bl	19fb4 <assert_print>
   162a6:	f240 31f9 	movw	r1, #1017	; 0x3f9
   162aa:	4837      	ldr	r0, [pc, #220]	; (16388 <k_sched_unlock+0x1a0>)
   162ac:	f003 fe72 	bl	19f94 <assert_post_action>

		++_current->base.sched_locked;
   162b0:	4b34      	ldr	r3, [pc, #208]	; (16384 <k_sched_unlock+0x19c>)
   162b2:	689b      	ldr	r3, [r3, #8]
   162b4:	7bda      	ldrb	r2, [r3, #15]
   162b6:	3201      	adds	r2, #1
   162b8:	b2d2      	uxtb	r2, r2
   162ba:	73da      	strb	r2, [r3, #15]
		update_cache(0);
   162bc:	2000      	movs	r0, #0
   162be:	f7fe fde9 	bl	14e94 <update_cache>
   162c2:	4b2b      	ldr	r3, [pc, #172]	; (16370 <k_sched_unlock+0x188>)
   162c4:	61fb      	str	r3, [r7, #28]
   162c6:	68fb      	ldr	r3, [r7, #12]
   162c8:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   162ca:	69f8      	ldr	r0, [r7, #28]
   162cc:	f7fd fb42 	bl	13954 <z_spin_unlock_valid>
   162d0:	4603      	mov	r3, r0
   162d2:	f083 0301 	eor.w	r3, r3, #1
   162d6:	b2db      	uxtb	r3, r3
   162d8:	2b00      	cmp	r3, #0
   162da:	d00d      	beq.n	162f8 <k_sched_unlock+0x110>
   162dc:	23f0      	movs	r3, #240	; 0xf0
   162de:	4a25      	ldr	r2, [pc, #148]	; (16374 <k_sched_unlock+0x18c>)
   162e0:	492d      	ldr	r1, [pc, #180]	; (16398 <k_sched_unlock+0x1b0>)
   162e2:	4826      	ldr	r0, [pc, #152]	; (1637c <k_sched_unlock+0x194>)
   162e4:	f003 fe66 	bl	19fb4 <assert_print>
   162e8:	69f9      	ldr	r1, [r7, #28]
   162ea:	482c      	ldr	r0, [pc, #176]	; (1639c <k_sched_unlock+0x1b4>)
   162ec:	f003 fe62 	bl	19fb4 <assert_print>
   162f0:	21f0      	movs	r1, #240	; 0xf0
   162f2:	4820      	ldr	r0, [pc, #128]	; (16374 <k_sched_unlock+0x18c>)
   162f4:	f003 fe4e 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   162f8:	68bb      	ldr	r3, [r7, #8]
   162fa:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   162fc:	69bb      	ldr	r3, [r7, #24]
   162fe:	f383 8811 	msr	BASEPRI, r3
   16302:	f3bf 8f6f 	isb	sy
}
   16306:	bf00      	nop
}
   16308:	bf00      	nop
	K_SPINLOCK(&sched_spinlock) {
   1630a:	2301      	movs	r3, #1
   1630c:	613b      	str	r3, [r7, #16]
   1630e:	693b      	ldr	r3, [r7, #16]
   16310:	2b00      	cmp	r3, #0
   16312:	d09f      	beq.n	16254 <k_sched_unlock+0x6c>
   16314:	f107 0310 	add.w	r3, r7, #16
   16318:	617b      	str	r3, [r7, #20]
	__ASSERT(k->key, "K_SPINLOCK exited with goto, break or return, "
   1631a:	697b      	ldr	r3, [r7, #20]
   1631c:	681b      	ldr	r3, [r3, #0]
   1631e:	2b00      	cmp	r3, #0
   16320:	d10e      	bne.n	16340 <k_sched_unlock+0x158>
   16322:	f240 131b 	movw	r3, #283	; 0x11b
   16326:	4a13      	ldr	r2, [pc, #76]	; (16374 <k_sched_unlock+0x18c>)
   16328:	491d      	ldr	r1, [pc, #116]	; (163a0 <k_sched_unlock+0x1b8>)
   1632a:	4814      	ldr	r0, [pc, #80]	; (1637c <k_sched_unlock+0x194>)
   1632c:	f003 fe42 	bl	19fb4 <assert_print>
   16330:	481c      	ldr	r0, [pc, #112]	; (163a4 <k_sched_unlock+0x1bc>)
   16332:	f003 fe3f 	bl	19fb4 <assert_print>
   16336:	f240 111b 	movw	r1, #283	; 0x11b
   1633a:	480e      	ldr	r0, [pc, #56]	; (16374 <k_sched_unlock+0x18c>)
   1633c:	f003 fe2a 	bl	19f94 <assert_post_action>
}
   16340:	bf00      	nop
	}

	LOG_DBG("scheduler unlocked (%p:%d)",
   16342:	2303      	movs	r3, #3
   16344:	2b03      	cmp	r3, #3
   16346:	d90c      	bls.n	16362 <k_sched_unlock+0x17a>
   16348:	2004      	movs	r0, #4
   1634a:	f7fe fb4b 	bl	149e4 <z_log_minimal_level_to_char>
   1634e:	4603      	mov	r3, r0
   16350:	4619      	mov	r1, r3
   16352:	4b0c      	ldr	r3, [pc, #48]	; (16384 <k_sched_unlock+0x19c>)
   16354:	689a      	ldr	r2, [r3, #8]
   16356:	4b0b      	ldr	r3, [pc, #44]	; (16384 <k_sched_unlock+0x19c>)
   16358:	689b      	ldr	r3, [r3, #8]
   1635a:	7bdb      	ldrb	r3, [r3, #15]
   1635c:	4812      	ldr	r0, [pc, #72]	; (163a8 <k_sched_unlock+0x1c0>)
   1635e:	f003 fe4c 	bl	19ffa <z_log_minimal_printk>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   16362:	f008 fc39 	bl	1ebd8 <z_reschedule_unlocked>
}
   16366:	bf00      	nop
   16368:	3738      	adds	r7, #56	; 0x38
   1636a:	46bd      	mov	sp, r7
   1636c:	bd80      	pop	{r7, pc}
   1636e:	bf00      	nop
   16370:	2000ce78 	.word	0x2000ce78
   16374:	00023798 	.word	0x00023798
   16378:	000237c8 	.word	0x000237c8
   1637c:	0002355c 	.word	0x0002355c
   16380:	000237e0 	.word	0x000237e0
   16384:	2000ce4c 	.word	0x2000ce4c
   16388:	000235b4 	.word	0x000235b4
   1638c:	00023938 	.word	0x00023938
   16390:	0002357c 	.word	0x0002357c
   16394:	00023548 	.word	0x00023548
   16398:	000237f8 	.word	0x000237f8
   1639c:	00023810 	.word	0x00023810
   163a0:	00023828 	.word	0x00023828
   163a4:	00023830 	.word	0x00023830
   163a8:	0002396c 	.word	0x0002396c

000163ac <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   163ac:	b580      	push	{r7, lr}
   163ae:	b082      	sub	sp, #8
   163b0:	af00      	add	r7, sp, #0
   163b2:	6078      	str	r0, [r7, #4]
   163b4:	6039      	str	r1, [r7, #0]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   163b6:	6838      	ldr	r0, [r7, #0]
   163b8:	f7fe fabe 	bl	14938 <z_is_idle_thread_object>
   163bc:	4603      	mov	r3, r0
   163be:	2b00      	cmp	r3, #0
   163c0:	d00b      	beq.n	163da <z_priq_dumb_remove+0x2e>
   163c2:	f240 4384 	movw	r3, #1156	; 0x484
   163c6:	4a09      	ldr	r2, [pc, #36]	; (163ec <z_priq_dumb_remove+0x40>)
   163c8:	4909      	ldr	r1, [pc, #36]	; (163f0 <z_priq_dumb_remove+0x44>)
   163ca:	480a      	ldr	r0, [pc, #40]	; (163f4 <z_priq_dumb_remove+0x48>)
   163cc:	f003 fdf2 	bl	19fb4 <assert_print>
   163d0:	f240 4184 	movw	r1, #1156	; 0x484
   163d4:	4805      	ldr	r0, [pc, #20]	; (163ec <z_priq_dumb_remove+0x40>)
   163d6:	f003 fddd 	bl	19f94 <assert_post_action>

	sys_dlist_remove(&thread->base.qnode_dlist);
   163da:	683b      	ldr	r3, [r7, #0]
   163dc:	4618      	mov	r0, r3
   163de:	f008 fbad 	bl	1eb3c <sys_dlist_remove>
}
   163e2:	bf00      	nop
   163e4:	3708      	adds	r7, #8
   163e6:	46bd      	mov	sp, r7
   163e8:	bd80      	pop	{r7, pc}
   163ea:	bf00      	nop
   163ec:	000235b4 	.word	0x000235b4
   163f0:	000235d8 	.word	0x000235d8
   163f4:	0002355c 	.word	0x0002355c

000163f8 <z_sched_init>:
	sys_dlist_init(&rq->runq);
#endif
}

void z_sched_init(void)
{
   163f8:	b580      	push	{r7, lr}
   163fa:	af00      	add	r7, sp, #0
#ifdef CONFIG_SCHED_CPU_MASK_PIN_ONLY
	for (int i = 0; i < CONFIG_MP_MAX_NUM_CPUS; i++) {
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
   163fc:	4802      	ldr	r0, [pc, #8]	; (16408 <z_sched_init+0x10>)
   163fe:	f008 fe2b 	bl	1f058 <init_ready_q>
#endif
}
   16402:	bf00      	nop
   16404:	bd80      	pop	{r7, pc}
   16406:	bf00      	nop
   16408:	2000ce60 	.word	0x2000ce60

0001640c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   1640c:	b580      	push	{r7, lr}
   1640e:	b094      	sub	sp, #80	; 0x50
   16410:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16412:	f3ef 8305 	mrs	r3, IPSR
   16416:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
   16418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1641a:	2b00      	cmp	r3, #0
   1641c:	bf14      	ite	ne
   1641e:	2301      	movne	r3, #1
   16420:	2300      	moveq	r3, #0
   16422:	b2db      	uxtb	r3, r3
	__ASSERT(!arch_is_in_isr(), "");
   16424:	2b00      	cmp	r3, #0
   16426:	d00e      	beq.n	16446 <z_impl_k_yield+0x3a>
   16428:	f240 537a 	movw	r3, #1402	; 0x57a
   1642c:	4a73      	ldr	r2, [pc, #460]	; (165fc <z_impl_k_yield+0x1f0>)
   1642e:	4974      	ldr	r1, [pc, #464]	; (16600 <z_impl_k_yield+0x1f4>)
   16430:	4874      	ldr	r0, [pc, #464]	; (16604 <z_impl_k_yield+0x1f8>)
   16432:	f003 fdbf 	bl	19fb4 <assert_print>
   16436:	4874      	ldr	r0, [pc, #464]	; (16608 <z_impl_k_yield+0x1fc>)
   16438:	f003 fdbc 	bl	19fb4 <assert_print>
   1643c:	f240 517a 	movw	r1, #1402	; 0x57a
   16440:	486e      	ldr	r0, [pc, #440]	; (165fc <z_impl_k_yield+0x1f0>)
   16442:	f003 fda7 	bl	19f94 <assert_post_action>
   16446:	4b71      	ldr	r3, [pc, #452]	; (1660c <z_impl_k_yield+0x200>)
   16448:	64bb      	str	r3, [r7, #72]	; 0x48
	__asm__ volatile(
   1644a:	f04f 0320 	mov.w	r3, #32
   1644e:	f3ef 8211 	mrs	r2, BASEPRI
   16452:	f383 8812 	msr	BASEPRI_MAX, r3
   16456:	f3bf 8f6f 	isb	sy
   1645a:	647a      	str	r2, [r7, #68]	; 0x44
   1645c:	643b      	str	r3, [r7, #64]	; 0x40
	return key;
   1645e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	k.key = arch_irq_lock();
   16460:	603b      	str	r3, [r7, #0]
   16462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16464:	63fb      	str	r3, [r7, #60]	; 0x3c
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   16466:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   16468:	f7fd fa58 	bl	1391c <z_spin_lock_valid>
   1646c:	4603      	mov	r3, r0
   1646e:	f083 0301 	eor.w	r3, r3, #1
   16472:	b2db      	uxtb	r3, r3
   16474:	2b00      	cmp	r3, #0
   16476:	d00d      	beq.n	16494 <z_impl_k_yield+0x88>
   16478:	2372      	movs	r3, #114	; 0x72
   1647a:	4a65      	ldr	r2, [pc, #404]	; (16610 <z_impl_k_yield+0x204>)
   1647c:	4965      	ldr	r1, [pc, #404]	; (16614 <z_impl_k_yield+0x208>)
   1647e:	4861      	ldr	r0, [pc, #388]	; (16604 <z_impl_k_yield+0x1f8>)
   16480:	f003 fd98 	bl	19fb4 <assert_print>
   16484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   16486:	4864      	ldr	r0, [pc, #400]	; (16618 <z_impl_k_yield+0x20c>)
   16488:	f003 fd94 	bl	19fb4 <assert_print>
   1648c:	2172      	movs	r1, #114	; 0x72
   1648e:	4860      	ldr	r0, [pc, #384]	; (16610 <z_impl_k_yield+0x204>)
   16490:	f003 fd80 	bl	19f94 <assert_post_action>
}
   16494:	bf00      	nop
   16496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16498:	63bb      	str	r3, [r7, #56]	; 0x38
	z_spin_lock_set_owner(l);
   1649a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1649c:	f7fd fa76 	bl	1398c <z_spin_lock_set_owner>
}
   164a0:	bf00      	nop
	return k;
   164a2:	683b      	ldr	r3, [r7, #0]
   164a4:	60bb      	str	r3, [r7, #8]

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   164a6:	4b5d      	ldr	r3, [pc, #372]	; (1661c <z_impl_k_yield+0x210>)
   164a8:	689b      	ldr	r3, [r3, #8]
   164aa:	617b      	str	r3, [r7, #20]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   164ac:	697b      	ldr	r3, [r7, #20]
   164ae:	7b5b      	ldrb	r3, [r3, #13]
   164b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   164b4:	b2da      	uxtb	r2, r3
   164b6:	697b      	ldr	r3, [r7, #20]
   164b8:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   164ba:	6978      	ldr	r0, [r7, #20]
   164bc:	f008 fcdf 	bl	1ee7e <should_queue_thread>
   164c0:	4603      	mov	r3, r0
   164c2:	2b00      	cmp	r3, #0
   164c4:	d009      	beq.n	164da <z_impl_k_yield+0xce>
   164c6:	697b      	ldr	r3, [r7, #20]
   164c8:	613b      	str	r3, [r7, #16]
   164ca:	693b      	ldr	r3, [r7, #16]
   164cc:	60fb      	str	r3, [r7, #12]
	return &_kernel.ready_q.runq;
   164ce:	4b54      	ldr	r3, [pc, #336]	; (16620 <z_impl_k_yield+0x214>)
	_priq_run_remove(thread_runq(thread), thread);
   164d0:	6939      	ldr	r1, [r7, #16]
   164d2:	4618      	mov	r0, r3
   164d4:	f7ff ff6a 	bl	163ac <z_priq_dumb_remove>
}
   164d8:	bf00      	nop
}
   164da:	bf00      	nop
	}
	queue_thread(_current);
   164dc:	4b4f      	ldr	r3, [pc, #316]	; (1661c <z_impl_k_yield+0x210>)
   164de:	689b      	ldr	r3, [r3, #8]
   164e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	thread->base.thread_state |= _THREAD_QUEUED;
   164e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   164e4:	7b5b      	ldrb	r3, [r3, #13]
   164e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   164ea:	b2da      	uxtb	r2, r3
   164ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   164ee:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   164f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   164f2:	f008 fcc4 	bl	1ee7e <should_queue_thread>
   164f6:	4603      	mov	r3, r0
   164f8:	2b00      	cmp	r3, #0
   164fa:	d052      	beq.n	165a2 <z_impl_k_yield+0x196>
   164fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   164fe:	62bb      	str	r3, [r7, #40]	; 0x28
   16500:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16502:	627b      	str	r3, [r7, #36]	; 0x24
	return &_kernel.ready_q.runq;
   16504:	4b46      	ldr	r3, [pc, #280]	; (16620 <z_impl_k_yield+0x214>)
   16506:	623b      	str	r3, [r7, #32]
   16508:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1650a:	61fb      	str	r3, [r7, #28]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1650c:	69f8      	ldr	r0, [r7, #28]
   1650e:	f7fe fa13 	bl	14938 <z_is_idle_thread_object>
   16512:	4603      	mov	r3, r0
   16514:	2b00      	cmp	r3, #0
   16516:	d009      	beq.n	1652c <z_impl_k_yield+0x120>
   16518:	23c1      	movs	r3, #193	; 0xc1
   1651a:	4a38      	ldr	r2, [pc, #224]	; (165fc <z_impl_k_yield+0x1f0>)
   1651c:	4941      	ldr	r1, [pc, #260]	; (16624 <z_impl_k_yield+0x218>)
   1651e:	4839      	ldr	r0, [pc, #228]	; (16604 <z_impl_k_yield+0x1f8>)
   16520:	f003 fd48 	bl	19fb4 <assert_print>
   16524:	21c1      	movs	r1, #193	; 0xc1
   16526:	4835      	ldr	r0, [pc, #212]	; (165fc <z_impl_k_yield+0x1f0>)
   16528:	f003 fd34 	bl	19f94 <assert_post_action>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1652c:	6a38      	ldr	r0, [r7, #32]
   1652e:	f008 fa9b 	bl	1ea68 <sys_dlist_peek_head>
   16532:	4603      	mov	r3, r0
   16534:	2b00      	cmp	r3, #0
   16536:	d004      	beq.n	16542 <z_impl_k_yield+0x136>
   16538:	6a38      	ldr	r0, [r7, #32]
   1653a:	f008 fa95 	bl	1ea68 <sys_dlist_peek_head>
   1653e:	4603      	mov	r3, r0
   16540:	e000      	b.n	16544 <z_impl_k_yield+0x138>
   16542:	2300      	movs	r3, #0
   16544:	61bb      	str	r3, [r7, #24]
   16546:	e023      	b.n	16590 <z_impl_k_yield+0x184>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16548:	69b9      	ldr	r1, [r7, #24]
   1654a:	69f8      	ldr	r0, [r7, #28]
   1654c:	f008 fc7c 	bl	1ee48 <z_sched_prio_cmp>
   16550:	4603      	mov	r3, r0
   16552:	2b00      	cmp	r3, #0
   16554:	dd06      	ble.n	16564 <z_impl_k_yield+0x158>
			sys_dlist_insert(&t->base.qnode_dlist,
   16556:	69bb      	ldr	r3, [r7, #24]
   16558:	69fa      	ldr	r2, [r7, #28]
   1655a:	4611      	mov	r1, r2
   1655c:	4618      	mov	r0, r3
   1655e:	f008 fad4 	bl	1eb0a <sys_dlist_insert>
			return;
   16562:	e01d      	b.n	165a0 <z_impl_k_yield+0x194>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16564:	69bb      	ldr	r3, [r7, #24]
   16566:	2b00      	cmp	r3, #0
   16568:	d010      	beq.n	1658c <z_impl_k_yield+0x180>
   1656a:	69bb      	ldr	r3, [r7, #24]
   1656c:	4619      	mov	r1, r3
   1656e:	6a38      	ldr	r0, [r7, #32]
   16570:	f008 fa9f 	bl	1eab2 <sys_dlist_peek_next>
   16574:	4603      	mov	r3, r0
   16576:	2b00      	cmp	r3, #0
   16578:	d006      	beq.n	16588 <z_impl_k_yield+0x17c>
   1657a:	69bb      	ldr	r3, [r7, #24]
   1657c:	4619      	mov	r1, r3
   1657e:	6a38      	ldr	r0, [r7, #32]
   16580:	f008 fa97 	bl	1eab2 <sys_dlist_peek_next>
   16584:	4603      	mov	r3, r0
   16586:	e002      	b.n	1658e <z_impl_k_yield+0x182>
   16588:	2300      	movs	r3, #0
   1658a:	e000      	b.n	1658e <z_impl_k_yield+0x182>
   1658c:	2300      	movs	r3, #0
   1658e:	61bb      	str	r3, [r7, #24]
   16590:	69bb      	ldr	r3, [r7, #24]
   16592:	2b00      	cmp	r3, #0
   16594:	d1d8      	bne.n	16548 <z_impl_k_yield+0x13c>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
   16596:	69fb      	ldr	r3, [r7, #28]
   16598:	4619      	mov	r1, r3
   1659a:	6a38      	ldr	r0, [r7, #32]
   1659c:	f008 fa9c 	bl	1ead8 <sys_dlist_append>
}
   165a0:	bf00      	nop
}
   165a2:	bf00      	nop
	update_cache(1);
   165a4:	2001      	movs	r0, #1
   165a6:	f7fe fc75 	bl	14e94 <update_cache>
   165aa:	4b18      	ldr	r3, [pc, #96]	; (1660c <z_impl_k_yield+0x200>)
   165ac:	637b      	str	r3, [r7, #52]	; 0x34
   165ae:	68bb      	ldr	r3, [r7, #8]
   165b0:	607b      	str	r3, [r7, #4]
   165b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   165b4:	633b      	str	r3, [r7, #48]	; 0x30
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   165b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   165b8:	f7fd f9cc 	bl	13954 <z_spin_unlock_valid>
   165bc:	4603      	mov	r3, r0
   165be:	f083 0301 	eor.w	r3, r3, #1
   165c2:	b2db      	uxtb	r3, r3
   165c4:	2b00      	cmp	r3, #0
   165c6:	d00f      	beq.n	165e8 <z_impl_k_yield+0x1dc>
   165c8:	f240 1311 	movw	r3, #273	; 0x111
   165cc:	4a10      	ldr	r2, [pc, #64]	; (16610 <z_impl_k_yield+0x204>)
   165ce:	4916      	ldr	r1, [pc, #88]	; (16628 <z_impl_k_yield+0x21c>)
   165d0:	480c      	ldr	r0, [pc, #48]	; (16604 <z_impl_k_yield+0x1f8>)
   165d2:	f003 fcef 	bl	19fb4 <assert_print>
   165d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
   165d8:	4814      	ldr	r0, [pc, #80]	; (1662c <z_impl_k_yield+0x220>)
   165da:	f003 fceb 	bl	19fb4 <assert_print>
   165de:	f240 1111 	movw	r1, #273	; 0x111
   165e2:	480b      	ldr	r0, [pc, #44]	; (16610 <z_impl_k_yield+0x204>)
   165e4:	f003 fcd6 	bl	19f94 <assert_post_action>
}
   165e8:	bf00      	nop
   165ea:	687b      	ldr	r3, [r7, #4]
   165ec:	4618      	mov	r0, r3
   165ee:	f008 fc04 	bl	1edfa <z_swap_irqlock>
	z_swap(&sched_spinlock, key);
}
   165f2:	bf00      	nop
   165f4:	3750      	adds	r7, #80	; 0x50
   165f6:	46bd      	mov	sp, r7
   165f8:	bd80      	pop	{r7, pc}
   165fa:	bf00      	nop
   165fc:	000235b4 	.word	0x000235b4
   16600:	00023548 	.word	0x00023548
   16604:	0002355c 	.word	0x0002355c
   16608:	0002357c 	.word	0x0002357c
   1660c:	2000ce78 	.word	0x2000ce78
   16610:	00023798 	.word	0x00023798
   16614:	000237c8 	.word	0x000237c8
   16618:	000237e0 	.word	0x000237e0
   1661c:	2000ce4c 	.word	0x2000ce4c
   16620:	2000ce64 	.word	0x2000ce64
   16624:	000235d8 	.word	0x000235d8
   16628:	000237f8 	.word	0x000237f8
   1662c:	00023810 	.word	0x00023810

00016630 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   16630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   16634:	b094      	sub	sp, #80	; 0x50
   16636:	af00      	add	r7, sp, #0
   16638:	e9c7 0102 	strd	r0, r1, [r7, #8]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1663c:	f3ef 8305 	mrs	r3, IPSR
   16640:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
   16642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16644:	2b00      	cmp	r3, #0
   16646:	bf14      	ite	ne
   16648:	2301      	movne	r3, #1
   1664a:	2300      	moveq	r3, #0
   1664c:	b2db      	uxtb	r3, r3
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1664e:	2b00      	cmp	r3, #0
   16650:	d00e      	beq.n	16670 <z_tick_sleep+0x40>
   16652:	f240 5396 	movw	r3, #1430	; 0x596
   16656:	4a71      	ldr	r2, [pc, #452]	; (1681c <z_tick_sleep+0x1ec>)
   16658:	4971      	ldr	r1, [pc, #452]	; (16820 <z_tick_sleep+0x1f0>)
   1665a:	4872      	ldr	r0, [pc, #456]	; (16824 <z_tick_sleep+0x1f4>)
   1665c:	f003 fcaa 	bl	19fb4 <assert_print>
   16660:	4871      	ldr	r0, [pc, #452]	; (16828 <z_tick_sleep+0x1f8>)
   16662:	f003 fca7 	bl	19fb4 <assert_print>
   16666:	f240 5196 	movw	r1, #1430	; 0x596
   1666a:	486c      	ldr	r0, [pc, #432]	; (1681c <z_tick_sleep+0x1ec>)
   1666c:	f003 fc92 	bl	19f94 <assert_post_action>

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);
   16670:	2303      	movs	r3, #3
   16672:	2b03      	cmp	r3, #3
   16674:	d90a      	bls.n	1668c <z_tick_sleep+0x5c>
   16676:	2004      	movs	r0, #4
   16678:	f7fe f9b4 	bl	149e4 <z_log_minimal_level_to_char>
   1667c:	4603      	mov	r3, r0
   1667e:	4619      	mov	r1, r3
   16680:	4b6a      	ldr	r3, [pc, #424]	; (1682c <z_tick_sleep+0x1fc>)
   16682:	689a      	ldr	r2, [r3, #8]
   16684:	68bb      	ldr	r3, [r7, #8]
   16686:	486a      	ldr	r0, [pc, #424]	; (16830 <z_tick_sleep+0x200>)
   16688:	f003 fcb7 	bl	19ffa <z_log_minimal_printk>

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1668c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   16690:	4313      	orrs	r3, r2
   16692:	d103      	bne.n	1669c <z_tick_sleep+0x6c>
		k_yield();
   16694:	f008 fa69 	bl	1eb6a <k_yield>
		return 0;
   16698:	2300      	movs	r3, #0
   1669a:	e0ba      	b.n	16812 <z_tick_sleep+0x1e2>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
   1669c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   166a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (Z_TICK_ABS(ticks) <= 0) {
   166a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   166a8:	f06f 0001 	mvn.w	r0, #1
   166ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   166b0:	1a84      	subs	r4, r0, r2
   166b2:	eb61 0503 	sbc.w	r5, r1, r3
   166b6:	2c01      	cmp	r4, #1
   166b8:	f175 0300 	sbcs.w	r3, r5, #0
   166bc:	da06      	bge.n	166cc <z_tick_sleep+0x9c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   166be:	f008 fe0a 	bl	1f2d6 <sys_clock_tick_get_32>
   166c2:	4602      	mov	r2, r0
   166c4:	68bb      	ldr	r3, [r7, #8]
   166c6:	4413      	add	r3, r2
   166c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   166ca:	e004      	b.n	166d6 <z_tick_sleep+0xa6>
	} else {
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   166cc:	68ba      	ldr	r2, [r7, #8]
   166ce:	f06f 0301 	mvn.w	r3, #1
   166d2:	1a9b      	subs	r3, r3, r2
   166d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   166d6:	4b57      	ldr	r3, [pc, #348]	; (16834 <z_tick_sleep+0x204>)
   166d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	__asm__ volatile(
   166da:	f04f 0320 	mov.w	r3, #32
   166de:	f3ef 8211 	mrs	r2, BASEPRI
   166e2:	f383 8812 	msr	BASEPRI_MAX, r3
   166e6:	f3bf 8f6f 	isb	sy
   166ea:	63ba      	str	r2, [r7, #56]	; 0x38
   166ec:	637b      	str	r3, [r7, #52]	; 0x34
	return key;
   166ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	k.key = arch_irq_lock();
   166f0:	61bb      	str	r3, [r7, #24]
   166f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   166f4:	633b      	str	r3, [r7, #48]	; 0x30
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   166f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   166f8:	f7fd f910 	bl	1391c <z_spin_lock_valid>
   166fc:	4603      	mov	r3, r0
   166fe:	f083 0301 	eor.w	r3, r3, #1
   16702:	b2db      	uxtb	r3, r3
   16704:	2b00      	cmp	r3, #0
   16706:	d00d      	beq.n	16724 <z_tick_sleep+0xf4>
   16708:	2372      	movs	r3, #114	; 0x72
   1670a:	4a4b      	ldr	r2, [pc, #300]	; (16838 <z_tick_sleep+0x208>)
   1670c:	494b      	ldr	r1, [pc, #300]	; (1683c <z_tick_sleep+0x20c>)
   1670e:	4845      	ldr	r0, [pc, #276]	; (16824 <z_tick_sleep+0x1f4>)
   16710:	f003 fc50 	bl	19fb4 <assert_print>
   16714:	6b39      	ldr	r1, [r7, #48]	; 0x30
   16716:	484a      	ldr	r0, [pc, #296]	; (16840 <z_tick_sleep+0x210>)
   16718:	f003 fc4c 	bl	19fb4 <assert_print>
   1671c:	2172      	movs	r1, #114	; 0x72
   1671e:	4846      	ldr	r0, [pc, #280]	; (16838 <z_tick_sleep+0x208>)
   16720:	f003 fc38 	bl	19f94 <assert_post_action>
}
   16724:	bf00      	nop
   16726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16728:	62fb      	str	r3, [r7, #44]	; 0x2c
	z_spin_lock_set_owner(l);
   1672a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1672c:	f7fd f92e 	bl	1398c <z_spin_lock_set_owner>
}
   16730:	bf00      	nop
	return k;
   16732:	69bb      	ldr	r3, [r7, #24]
   16734:	61fb      	str	r3, [r7, #28]
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   16736:	4b3d      	ldr	r3, [pc, #244]	; (1682c <z_tick_sleep+0x1fc>)
   16738:	689b      	ldr	r3, [r3, #8]
   1673a:	4a42      	ldr	r2, [pc, #264]	; (16844 <z_tick_sleep+0x214>)
   1673c:	6013      	str	r3, [r2, #0]
#endif
	unready_thread(_current);
   1673e:	4b3b      	ldr	r3, [pc, #236]	; (1682c <z_tick_sleep+0x1fc>)
   16740:	689b      	ldr	r3, [r3, #8]
   16742:	4618      	mov	r0, r3
   16744:	f7fe fea0 	bl	15488 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   16748:	4b38      	ldr	r3, [pc, #224]	; (1682c <z_tick_sleep+0x1fc>)
   1674a:	6899      	ldr	r1, [r3, #8]
   1674c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   16750:	4608      	mov	r0, r1
   16752:	f7fe f8dd 	bl	14910 <z_add_thread_timeout>
	z_mark_thread_as_suspended(_current);
   16756:	4b35      	ldr	r3, [pc, #212]	; (1682c <z_tick_sleep+0x1fc>)
   16758:	689b      	ldr	r3, [r3, #8]
   1675a:	4618      	mov	r0, r3
   1675c:	f008 fad1 	bl	1ed02 <z_mark_thread_as_suspended>
   16760:	4b34      	ldr	r3, [pc, #208]	; (16834 <z_tick_sleep+0x204>)
   16762:	647b      	str	r3, [r7, #68]	; 0x44
   16764:	69fb      	ldr	r3, [r7, #28]
   16766:	617b      	str	r3, [r7, #20]
   16768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1676a:	643b      	str	r3, [r7, #64]	; 0x40
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1676c:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1676e:	f7fd f8f1 	bl	13954 <z_spin_unlock_valid>
   16772:	4603      	mov	r3, r0
   16774:	f083 0301 	eor.w	r3, r3, #1
   16778:	b2db      	uxtb	r3, r3
   1677a:	2b00      	cmp	r3, #0
   1677c:	d00f      	beq.n	1679e <z_tick_sleep+0x16e>
   1677e:	f240 1311 	movw	r3, #273	; 0x111
   16782:	4a2d      	ldr	r2, [pc, #180]	; (16838 <z_tick_sleep+0x208>)
   16784:	4930      	ldr	r1, [pc, #192]	; (16848 <z_tick_sleep+0x218>)
   16786:	4827      	ldr	r0, [pc, #156]	; (16824 <z_tick_sleep+0x1f4>)
   16788:	f003 fc14 	bl	19fb4 <assert_print>
   1678c:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1678e:	482f      	ldr	r0, [pc, #188]	; (1684c <z_tick_sleep+0x21c>)
   16790:	f003 fc10 	bl	19fb4 <assert_print>
   16794:	f240 1111 	movw	r1, #273	; 0x111
   16798:	4827      	ldr	r0, [pc, #156]	; (16838 <z_tick_sleep+0x208>)
   1679a:	f003 fbfb 	bl	19f94 <assert_post_action>
}
   1679e:	bf00      	nop
   167a0:	697b      	ldr	r3, [r7, #20]
   167a2:	4618      	mov	r0, r3
   167a4:	f008 fb29 	bl	1edfa <z_swap_irqlock>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   167a8:	4b20      	ldr	r3, [pc, #128]	; (1682c <z_tick_sleep+0x1fc>)
   167aa:	689b      	ldr	r3, [r3, #8]
   167ac:	2110      	movs	r1, #16
   167ae:	4618      	mov	r0, r3
   167b0:	f008 fa86 	bl	1ecc0 <z_is_thread_state_set>
   167b4:	4603      	mov	r3, r0
   167b6:	2b00      	cmp	r3, #0
   167b8:	d00e      	beq.n	167d8 <z_tick_sleep+0x1a8>
   167ba:	f240 53b2 	movw	r3, #1458	; 0x5b2
   167be:	4a17      	ldr	r2, [pc, #92]	; (1681c <z_tick_sleep+0x1ec>)
   167c0:	4923      	ldr	r1, [pc, #140]	; (16850 <z_tick_sleep+0x220>)
   167c2:	4818      	ldr	r0, [pc, #96]	; (16824 <z_tick_sleep+0x1f4>)
   167c4:	f003 fbf6 	bl	19fb4 <assert_print>
   167c8:	4817      	ldr	r0, [pc, #92]	; (16828 <z_tick_sleep+0x1f8>)
   167ca:	f003 fbf3 	bl	19fb4 <assert_print>
   167ce:	f240 51b2 	movw	r1, #1458	; 0x5b2
   167d2:	4812      	ldr	r0, [pc, #72]	; (1681c <z_tick_sleep+0x1ec>)
   167d4:	f003 fbde 	bl	19f94 <assert_post_action>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   167d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   167da:	2200      	movs	r2, #0
   167dc:	469a      	mov	sl, r3
   167de:	4693      	mov	fp, r2
   167e0:	f008 fd79 	bl	1f2d6 <sys_clock_tick_get_32>
   167e4:	4603      	mov	r3, r0
   167e6:	2200      	movs	r2, #0
   167e8:	4698      	mov	r8, r3
   167ea:	4691      	mov	r9, r2
   167ec:	ebba 0308 	subs.w	r3, sl, r8
   167f0:	603b      	str	r3, [r7, #0]
   167f2:	eb6b 0309 	sbc.w	r3, fp, r9
   167f6:	607b      	str	r3, [r7, #4]
   167f8:	e9d7 3400 	ldrd	r3, r4, [r7]
   167fc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if (ticks > 0) {
   16800:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   16804:	2a01      	cmp	r2, #1
   16806:	f173 0300 	sbcs.w	r3, r3, #0
   1680a:	db01      	blt.n	16810 <z_tick_sleep+0x1e0>
		return ticks;
   1680c:	68bb      	ldr	r3, [r7, #8]
   1680e:	e000      	b.n	16812 <z_tick_sleep+0x1e2>
	}
#endif

	return 0;
   16810:	2300      	movs	r3, #0
}
   16812:	4618      	mov	r0, r3
   16814:	3750      	adds	r7, #80	; 0x50
   16816:	46bd      	mov	sp, r7
   16818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
   1681c:	000235b4 	.word	0x000235b4
   16820:	00023548 	.word	0x00023548
   16824:	0002355c 	.word	0x0002355c
   16828:	0002357c 	.word	0x0002357c
   1682c:	2000ce4c 	.word	0x2000ce4c
   16830:	00023a48 	.word	0x00023a48
   16834:	2000ce78 	.word	0x2000ce78
   16838:	00023798 	.word	0x00023798
   1683c:	000237c8 	.word	0x000237c8
   16840:	000237e0 	.word	0x000237e0
   16844:	2000ce88 	.word	0x2000ce88
   16848:	000237f8 	.word	0x000237f8
   1684c:	00023810 	.word	0x00023810
   16850:	00023a68 	.word	0x00023a68

00016854 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   16854:	b5b0      	push	{r4, r5, r7, lr}
   16856:	b086      	sub	sp, #24
   16858:	af00      	add	r7, sp, #0
   1685a:	e9c7 0100 	strd	r0, r1, [r7]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1685e:	f3ef 8305 	mrs	r3, IPSR
   16862:	60bb      	str	r3, [r7, #8]
  return(result);
   16864:	68bb      	ldr	r3, [r7, #8]
   16866:	2b00      	cmp	r3, #0
   16868:	bf14      	ite	ne
   1686a:	2301      	movne	r3, #1
   1686c:	2300      	moveq	r3, #0
   1686e:	b2db      	uxtb	r3, r3
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   16870:	2b00      	cmp	r3, #0
   16872:	d00e      	beq.n	16892 <z_impl_k_sleep+0x3e>
   16874:	f240 53c1 	movw	r3, #1473	; 0x5c1
   16878:	4a1d      	ldr	r2, [pc, #116]	; (168f0 <z_impl_k_sleep+0x9c>)
   1687a:	491e      	ldr	r1, [pc, #120]	; (168f4 <z_impl_k_sleep+0xa0>)
   1687c:	481e      	ldr	r0, [pc, #120]	; (168f8 <z_impl_k_sleep+0xa4>)
   1687e:	f003 fb99 	bl	19fb4 <assert_print>
   16882:	481e      	ldr	r0, [pc, #120]	; (168fc <z_impl_k_sleep+0xa8>)
   16884:	f003 fb96 	bl	19fb4 <assert_print>
   16888:	f240 51c1 	movw	r1, #1473	; 0x5c1
   1688c:	4818      	ldr	r0, [pc, #96]	; (168f0 <z_impl_k_sleep+0x9c>)
   1688e:	f003 fb81 	bl	19f94 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16892:	e9d7 2300 	ldrd	r2, r3, [r7]
   16896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1689a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1689e:	428b      	cmp	r3, r1
   168a0:	bf08      	it	eq
   168a2:	4282      	cmpeq	r2, r0
   168a4:	d107      	bne.n	168b6 <z_impl_k_sleep+0x62>
		k_thread_suspend(_current);
   168a6:	4b16      	ldr	r3, [pc, #88]	; (16900 <z_impl_k_sleep+0xac>)
   168a8:	689b      	ldr	r3, [r3, #8]
   168aa:	4618      	mov	r0, r3
   168ac:	f008 f963 	bl	1eb76 <k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   168b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   168b4:	e018      	b.n	168e8 <z_impl_k_sleep+0x94>
	}

	ticks = timeout.ticks;
   168b6:	e9d7 2300 	ldrd	r2, r3, [r7]
   168ba:	e9c7 2304 	strd	r2, r3, [r7, #16]

	ticks = z_tick_sleep(ticks);
   168be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   168c2:	f7ff feb5 	bl	16630 <z_tick_sleep>
   168c6:	4603      	mov	r3, r0
   168c8:	17da      	asrs	r2, r3, #31
   168ca:	461c      	mov	r4, r3
   168cc:	4615      	mov	r5, r2
   168ce:	e9c7 4504 	strd	r4, r5, [r7, #16]

	int32_t ret = k_ticks_to_ms_floor64(ticks);
   168d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   168d6:	4610      	mov	r0, r2
   168d8:	4619      	mov	r1, r3
   168da:	f7fd fdbd 	bl	14458 <k_ticks_to_ms_floor64>
   168de:	4602      	mov	r2, r0
   168e0:	460b      	mov	r3, r1
   168e2:	4613      	mov	r3, r2
   168e4:	60fb      	str	r3, [r7, #12]

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
   168e6:	68fb      	ldr	r3, [r7, #12]
}
   168e8:	4618      	mov	r0, r3
   168ea:	3718      	adds	r7, #24
   168ec:	46bd      	mov	sp, r7
   168ee:	bdb0      	pop	{r4, r5, r7, pc}
   168f0:	000235b4 	.word	0x000235b4
   168f4:	00023548 	.word	0x00023548
   168f8:	0002355c 	.word	0x0002355c
   168fc:	0002357c 	.word	0x0002357c
   16900:	2000ce4c 	.word	0x2000ce4c

00016904 <z_impl_z_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_z_current_get(void)
{
   16904:	b480      	push	{r7}
   16906:	b083      	sub	sp, #12
   16908:	af00      	add	r7, sp, #0
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
   1690a:	4b04      	ldr	r3, [pc, #16]	; (1691c <z_impl_z_current_get+0x18>)
   1690c:	689b      	ldr	r3, [r3, #8]
   1690e:	607b      	str	r3, [r7, #4]

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
   16910:	687b      	ldr	r3, [r7, #4]
}
   16912:	4618      	mov	r0, r3
   16914:	370c      	adds	r7, #12
   16916:	46bd      	mov	sp, r7
   16918:	bc80      	pop	{r7}
   1691a:	4770      	bx	lr
   1691c:	2000ce4c 	.word	0x2000ce4c

00016920 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   16920:	b580      	push	{r7, lr}
   16922:	b086      	sub	sp, #24
   16924:	af00      	add	r7, sp, #0
   16926:	6078      	str	r0, [r7, #4]
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   16928:	687b      	ldr	r3, [r7, #4]
   1692a:	7b5b      	ldrb	r3, [r3, #13]
   1692c:	f003 0308 	and.w	r3, r3, #8
   16930:	2b00      	cmp	r3, #0
   16932:	d13f      	bne.n	169b4 <end_thread+0x94>
		thread->base.thread_state |= _THREAD_DEAD;
   16934:	687b      	ldr	r3, [r7, #4]
   16936:	7b5b      	ldrb	r3, [r3, #13]
   16938:	f043 0308 	orr.w	r3, r3, #8
   1693c:	b2da      	uxtb	r2, r3
   1693e:	687b      	ldr	r3, [r7, #4]
   16940:	735a      	strb	r2, [r3, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   16942:	687b      	ldr	r3, [r7, #4]
   16944:	7b5b      	ldrb	r3, [r3, #13]
   16946:	f023 0320 	bic.w	r3, r3, #32
   1694a:	b2da      	uxtb	r2, r3
   1694c:	687b      	ldr	r3, [r7, #4]
   1694e:	735a      	strb	r2, [r3, #13]
		if (z_is_thread_queued(thread)) {
   16950:	6878      	ldr	r0, [r7, #4]
   16952:	f008 f9c9 	bl	1ece8 <z_is_thread_queued>
   16956:	4603      	mov	r3, r0
   16958:	2b00      	cmp	r3, #0
   1695a:	d019      	beq.n	16990 <end_thread+0x70>
   1695c:	687b      	ldr	r3, [r7, #4]
   1695e:	617b      	str	r3, [r7, #20]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16960:	697b      	ldr	r3, [r7, #20]
   16962:	7b5b      	ldrb	r3, [r3, #13]
   16964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16968:	b2da      	uxtb	r2, r3
   1696a:	697b      	ldr	r3, [r7, #20]
   1696c:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   1696e:	6978      	ldr	r0, [r7, #20]
   16970:	f008 fa85 	bl	1ee7e <should_queue_thread>
   16974:	4603      	mov	r3, r0
   16976:	2b00      	cmp	r3, #0
   16978:	d009      	beq.n	1698e <end_thread+0x6e>
   1697a:	697b      	ldr	r3, [r7, #20]
   1697c:	613b      	str	r3, [r7, #16]
   1697e:	693b      	ldr	r3, [r7, #16]
   16980:	60fb      	str	r3, [r7, #12]
	return &_kernel.ready_q.runq;
   16982:	4b0e      	ldr	r3, [pc, #56]	; (169bc <end_thread+0x9c>)
	_priq_run_remove(thread_runq(thread), thread);
   16984:	6939      	ldr	r1, [r7, #16]
   16986:	4618      	mov	r0, r3
   16988:	f7ff fd10 	bl	163ac <z_priq_dumb_remove>
}
   1698c:	bf00      	nop
}
   1698e:	bf00      	nop
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   16990:	687b      	ldr	r3, [r7, #4]
   16992:	689b      	ldr	r3, [r3, #8]
   16994:	2b00      	cmp	r3, #0
   16996:	d002      	beq.n	1699e <end_thread+0x7e>
			unpend_thread_no_timeout(thread);
   16998:	6878      	ldr	r0, [r7, #4]
   1699a:	f008 fac6 	bl	1ef2a <unpend_thread_no_timeout>
		}
		(void)z_abort_thread_timeout(thread);
   1699e:	6878      	ldr	r0, [r7, #4]
   169a0:	f008 f90c 	bl	1ebbc <z_abort_thread_timeout>
		unpend_all(&thread->join_queue);
   169a4:	687b      	ldr	r3, [r7, #4]
   169a6:	3358      	adds	r3, #88	; 0x58
   169a8:	4618      	mov	r0, r3
   169aa:	f008 fb62 	bl	1f072 <unpend_all>
		update_cache(1);
   169ae:	2001      	movs	r0, #1
   169b0:	f7fe fa70 	bl	14e94 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   169b4:	bf00      	nop
   169b6:	3718      	adds	r7, #24
   169b8:	46bd      	mov	sp, r7
   169ba:	bd80      	pop	{r7, pc}
   169bc:	2000ce64 	.word	0x2000ce64

000169c0 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   169c0:	b580      	push	{r7, lr}
   169c2:	b096      	sub	sp, #88	; 0x58
   169c4:	af00      	add	r7, sp, #0
   169c6:	6078      	str	r0, [r7, #4]
   169c8:	4b81      	ldr	r3, [pc, #516]	; (16bd0 <z_thread_abort+0x210>)
   169ca:	657b      	str	r3, [r7, #84]	; 0x54
	__asm__ volatile(
   169cc:	f04f 0320 	mov.w	r3, #32
   169d0:	f3ef 8211 	mrs	r2, BASEPRI
   169d4:	f383 8812 	msr	BASEPRI_MAX, r3
   169d8:	f3bf 8f6f 	isb	sy
   169dc:	653a      	str	r2, [r7, #80]	; 0x50
   169de:	64fb      	str	r3, [r7, #76]	; 0x4c
	return key;
   169e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	k.key = arch_irq_lock();
   169e2:	60bb      	str	r3, [r7, #8]
   169e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   169e6:	64bb      	str	r3, [r7, #72]	; 0x48
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   169e8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   169ea:	f7fc ff97 	bl	1391c <z_spin_lock_valid>
   169ee:	4603      	mov	r3, r0
   169f0:	f083 0301 	eor.w	r3, r3, #1
   169f4:	b2db      	uxtb	r3, r3
   169f6:	2b00      	cmp	r3, #0
   169f8:	d00d      	beq.n	16a16 <z_thread_abort+0x56>
   169fa:	2372      	movs	r3, #114	; 0x72
   169fc:	4a75      	ldr	r2, [pc, #468]	; (16bd4 <z_thread_abort+0x214>)
   169fe:	4976      	ldr	r1, [pc, #472]	; (16bd8 <z_thread_abort+0x218>)
   16a00:	4876      	ldr	r0, [pc, #472]	; (16bdc <z_thread_abort+0x21c>)
   16a02:	f003 fad7 	bl	19fb4 <assert_print>
   16a06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16a08:	4875      	ldr	r0, [pc, #468]	; (16be0 <z_thread_abort+0x220>)
   16a0a:	f003 fad3 	bl	19fb4 <assert_print>
   16a0e:	2172      	movs	r1, #114	; 0x72
   16a10:	4870      	ldr	r0, [pc, #448]	; (16bd4 <z_thread_abort+0x214>)
   16a12:	f003 fabf 	bl	19f94 <assert_post_action>
}
   16a16:	bf00      	nop
   16a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16a1a:	647b      	str	r3, [r7, #68]	; 0x44
	z_spin_lock_set_owner(l);
   16a1c:	6c78      	ldr	r0, [r7, #68]	; 0x44
   16a1e:	f7fc ffb5 	bl	1398c <z_spin_lock_set_owner>
}
   16a22:	bf00      	nop
	return k;
   16a24:	68bb      	ldr	r3, [r7, #8]
   16a26:	61fb      	str	r3, [r7, #28]
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   16a28:	687b      	ldr	r3, [r7, #4]
   16a2a:	7b1b      	ldrb	r3, [r3, #12]
   16a2c:	f003 0301 	and.w	r3, r3, #1
   16a30:	2b00      	cmp	r3, #0
   16a32:	d033      	beq.n	16a9c <z_thread_abort+0xdc>
   16a34:	4b66      	ldr	r3, [pc, #408]	; (16bd0 <z_thread_abort+0x210>)
   16a36:	643b      	str	r3, [r7, #64]	; 0x40
   16a38:	69fb      	ldr	r3, [r7, #28]
   16a3a:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16a3c:	6c38      	ldr	r0, [r7, #64]	; 0x40
   16a3e:	f7fc ff89 	bl	13954 <z_spin_unlock_valid>
   16a42:	4603      	mov	r3, r0
   16a44:	f083 0301 	eor.w	r3, r3, #1
   16a48:	b2db      	uxtb	r3, r3
   16a4a:	2b00      	cmp	r3, #0
   16a4c:	d00d      	beq.n	16a6a <z_thread_abort+0xaa>
   16a4e:	23f0      	movs	r3, #240	; 0xf0
   16a50:	4a60      	ldr	r2, [pc, #384]	; (16bd4 <z_thread_abort+0x214>)
   16a52:	4964      	ldr	r1, [pc, #400]	; (16be4 <z_thread_abort+0x224>)
   16a54:	4861      	ldr	r0, [pc, #388]	; (16bdc <z_thread_abort+0x21c>)
   16a56:	f003 faad 	bl	19fb4 <assert_print>
   16a5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   16a5c:	4862      	ldr	r0, [pc, #392]	; (16be8 <z_thread_abort+0x228>)
   16a5e:	f003 faa9 	bl	19fb4 <assert_print>
   16a62:	21f0      	movs	r1, #240	; 0xf0
   16a64:	485b      	ldr	r0, [pc, #364]	; (16bd4 <z_thread_abort+0x214>)
   16a66:	f003 fa95 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   16a6a:	68fb      	ldr	r3, [r7, #12]
   16a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	__asm__ volatile(
   16a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16a70:	f383 8811 	msr	BASEPRI, r3
   16a74:	f3bf 8f6f 	isb	sy
}
   16a78:	bf00      	nop
}
   16a7a:	bf00      	nop
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   16a7c:	f240 63d7 	movw	r3, #1751	; 0x6d7
   16a80:	4a5a      	ldr	r2, [pc, #360]	; (16bec <z_thread_abort+0x22c>)
   16a82:	495b      	ldr	r1, [pc, #364]	; (16bf0 <z_thread_abort+0x230>)
   16a84:	4855      	ldr	r0, [pc, #340]	; (16bdc <z_thread_abort+0x21c>)
   16a86:	f003 fa95 	bl	19fb4 <assert_print>
   16a8a:	6879      	ldr	r1, [r7, #4]
   16a8c:	4859      	ldr	r0, [pc, #356]	; (16bf4 <z_thread_abort+0x234>)
   16a8e:	f003 fa91 	bl	19fb4 <assert_print>
   16a92:	f240 61d7 	movw	r1, #1751	; 0x6d7
   16a96:	4855      	ldr	r0, [pc, #340]	; (16bec <z_thread_abort+0x22c>)
   16a98:	f003 fa7c 	bl	19f94 <assert_post_action>
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   16a9c:	687b      	ldr	r3, [r7, #4]
   16a9e:	7b5b      	ldrb	r3, [r3, #13]
   16aa0:	f003 0308 	and.w	r3, r3, #8
   16aa4:	2b00      	cmp	r3, #0
   16aa6:	d023      	beq.n	16af0 <z_thread_abort+0x130>
   16aa8:	4b49      	ldr	r3, [pc, #292]	; (16bd0 <z_thread_abort+0x210>)
   16aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   16aac:	69fb      	ldr	r3, [r7, #28]
   16aae:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16ab0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   16ab2:	f7fc ff4f 	bl	13954 <z_spin_unlock_valid>
   16ab6:	4603      	mov	r3, r0
   16ab8:	f083 0301 	eor.w	r3, r3, #1
   16abc:	b2db      	uxtb	r3, r3
   16abe:	2b00      	cmp	r3, #0
   16ac0:	d00d      	beq.n	16ade <z_thread_abort+0x11e>
   16ac2:	23f0      	movs	r3, #240	; 0xf0
   16ac4:	4a43      	ldr	r2, [pc, #268]	; (16bd4 <z_thread_abort+0x214>)
   16ac6:	4947      	ldr	r1, [pc, #284]	; (16be4 <z_thread_abort+0x224>)
   16ac8:	4844      	ldr	r0, [pc, #272]	; (16bdc <z_thread_abort+0x21c>)
   16aca:	f003 fa73 	bl	19fb4 <assert_print>
   16ace:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   16ad0:	4845      	ldr	r0, [pc, #276]	; (16be8 <z_thread_abort+0x228>)
   16ad2:	f003 fa6f 	bl	19fb4 <assert_print>
   16ad6:	21f0      	movs	r1, #240	; 0xf0
   16ad8:	483e      	ldr	r0, [pc, #248]	; (16bd4 <z_thread_abort+0x214>)
   16ada:	f003 fa5b 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   16ade:	693b      	ldr	r3, [r7, #16]
   16ae0:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   16ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ae4:	f383 8811 	msr	BASEPRI, r3
   16ae8:	f3bf 8f6f 	isb	sy
}
   16aec:	bf00      	nop
}
   16aee:	e06c      	b.n	16bca <z_thread_abort+0x20a>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
   16af0:	6878      	ldr	r0, [r7, #4]
   16af2:	f7ff ff15 	bl	16920 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   16af6:	4b40      	ldr	r3, [pc, #256]	; (16bf8 <z_thread_abort+0x238>)
   16af8:	689b      	ldr	r3, [r3, #8]
   16afa:	687a      	ldr	r2, [r7, #4]
   16afc:	429a      	cmp	r2, r3
   16afe:	d140      	bne.n	16b82 <z_thread_abort+0x1c2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16b00:	f3ef 8305 	mrs	r3, IPSR
   16b04:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
   16b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16b08:	2b00      	cmp	r3, #0
   16b0a:	bf14      	ite	ne
   16b0c:	2301      	movne	r3, #1
   16b0e:	2300      	moveq	r3, #0
   16b10:	b2db      	uxtb	r3, r3
   16b12:	f083 0301 	eor.w	r3, r3, #1
   16b16:	b2db      	uxtb	r3, r3
   16b18:	2b00      	cmp	r3, #0
   16b1a:	d032      	beq.n	16b82 <z_thread_abort+0x1c2>
   16b1c:	4b2c      	ldr	r3, [pc, #176]	; (16bd0 <z_thread_abort+0x210>)
   16b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   16b20:	69fb      	ldr	r3, [r7, #28]
   16b22:	617b      	str	r3, [r7, #20]
   16b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16b26:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   16b2a:	f7fc ff13 	bl	13954 <z_spin_unlock_valid>
   16b2e:	4603      	mov	r3, r0
   16b30:	f083 0301 	eor.w	r3, r3, #1
   16b34:	b2db      	uxtb	r3, r3
   16b36:	2b00      	cmp	r3, #0
   16b38:	d00f      	beq.n	16b5a <z_thread_abort+0x19a>
   16b3a:	f240 1311 	movw	r3, #273	; 0x111
   16b3e:	4a25      	ldr	r2, [pc, #148]	; (16bd4 <z_thread_abort+0x214>)
   16b40:	4928      	ldr	r1, [pc, #160]	; (16be4 <z_thread_abort+0x224>)
   16b42:	4826      	ldr	r0, [pc, #152]	; (16bdc <z_thread_abort+0x21c>)
   16b44:	f003 fa36 	bl	19fb4 <assert_print>
   16b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16b4a:	4827      	ldr	r0, [pc, #156]	; (16be8 <z_thread_abort+0x228>)
   16b4c:	f003 fa32 	bl	19fb4 <assert_print>
   16b50:	f240 1111 	movw	r1, #273	; 0x111
   16b54:	481f      	ldr	r0, [pc, #124]	; (16bd4 <z_thread_abort+0x214>)
   16b56:	f003 fa1d 	bl	19f94 <assert_post_action>
}
   16b5a:	bf00      	nop
   16b5c:	697b      	ldr	r3, [r7, #20]
   16b5e:	4618      	mov	r0, r3
   16b60:	f008 f94b 	bl	1edfa <z_swap_irqlock>
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   16b64:	f240 730d 	movw	r3, #1805	; 0x70d
   16b68:	4a20      	ldr	r2, [pc, #128]	; (16bec <z_thread_abort+0x22c>)
   16b6a:	4921      	ldr	r1, [pc, #132]	; (16bf0 <z_thread_abort+0x230>)
   16b6c:	481b      	ldr	r0, [pc, #108]	; (16bdc <z_thread_abort+0x21c>)
   16b6e:	f003 fa21 	bl	19fb4 <assert_print>
   16b72:	4822      	ldr	r0, [pc, #136]	; (16bfc <z_thread_abort+0x23c>)
   16b74:	f003 fa1e 	bl	19fb4 <assert_print>
   16b78:	f240 710d 	movw	r1, #1805	; 0x70d
   16b7c:	481b      	ldr	r0, [pc, #108]	; (16bec <z_thread_abort+0x22c>)
   16b7e:	f003 fa09 	bl	19f94 <assert_post_action>
   16b82:	4b13      	ldr	r3, [pc, #76]	; (16bd0 <z_thread_abort+0x210>)
   16b84:	627b      	str	r3, [r7, #36]	; 0x24
   16b86:	69fb      	ldr	r3, [r7, #28]
   16b88:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16b8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16b8c:	f7fc fee2 	bl	13954 <z_spin_unlock_valid>
   16b90:	4603      	mov	r3, r0
   16b92:	f083 0301 	eor.w	r3, r3, #1
   16b96:	b2db      	uxtb	r3, r3
   16b98:	2b00      	cmp	r3, #0
   16b9a:	d00d      	beq.n	16bb8 <z_thread_abort+0x1f8>
   16b9c:	23f0      	movs	r3, #240	; 0xf0
   16b9e:	4a0d      	ldr	r2, [pc, #52]	; (16bd4 <z_thread_abort+0x214>)
   16ba0:	4910      	ldr	r1, [pc, #64]	; (16be4 <z_thread_abort+0x224>)
   16ba2:	480e      	ldr	r0, [pc, #56]	; (16bdc <z_thread_abort+0x21c>)
   16ba4:	f003 fa06 	bl	19fb4 <assert_print>
   16ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   16baa:	480f      	ldr	r0, [pc, #60]	; (16be8 <z_thread_abort+0x228>)
   16bac:	f003 fa02 	bl	19fb4 <assert_print>
   16bb0:	21f0      	movs	r1, #240	; 0xf0
   16bb2:	4808      	ldr	r0, [pc, #32]	; (16bd4 <z_thread_abort+0x214>)
   16bb4:	f003 f9ee 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   16bb8:	69bb      	ldr	r3, [r7, #24]
   16bba:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   16bbc:	6a3b      	ldr	r3, [r7, #32]
   16bbe:	f383 8811 	msr	BASEPRI, r3
   16bc2:	f3bf 8f6f 	isb	sy
}
   16bc6:	bf00      	nop
}
   16bc8:	bf00      	nop
	}
	k_spin_unlock(&sched_spinlock, key);
}
   16bca:	3758      	adds	r7, #88	; 0x58
   16bcc:	46bd      	mov	sp, r7
   16bce:	bd80      	pop	{r7, pc}
   16bd0:	2000ce78 	.word	0x2000ce78
   16bd4:	00023798 	.word	0x00023798
   16bd8:	000237c8 	.word	0x000237c8
   16bdc:	0002355c 	.word	0x0002355c
   16be0:	000237e0 	.word	0x000237e0
   16be4:	000237f8 	.word	0x000237f8
   16be8:	00023810 	.word	0x00023810
   16bec:	000235b4 	.word	0x000235b4
   16bf0:	00023aa8 	.word	0x00023aa8
   16bf4:	00023aac 	.word	0x00023aac
   16bf8:	2000ce4c 	.word	0x2000ce4c
   16bfc:	00023acc 	.word	0x00023acc

00016c00 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   16c00:	b580      	push	{r7, lr}
   16c02:	af00      	add	r7, sp, #0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   16c04:	4a07      	ldr	r2, [pc, #28]	; (16c24 <z_data_copy+0x24>)
   16c06:	4b08      	ldr	r3, [pc, #32]	; (16c28 <z_data_copy+0x28>)
   16c08:	1ad3      	subs	r3, r2, r3
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   16c0a:	461a      	mov	r2, r3
   16c0c:	4907      	ldr	r1, [pc, #28]	; (16c2c <z_data_copy+0x2c>)
   16c0e:	4806      	ldr	r0, [pc, #24]	; (16c28 <z_data_copy+0x28>)
   16c10:	f007 fc85 	bl	1e51e <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   16c14:	4b06      	ldr	r3, [pc, #24]	; (16c30 <z_data_copy+0x30>)
   16c16:	461a      	mov	r2, r3
   16c18:	4906      	ldr	r1, [pc, #24]	; (16c34 <z_data_copy+0x34>)
   16c1a:	4807      	ldr	r0, [pc, #28]	; (16c38 <z_data_copy+0x38>)
   16c1c:	f007 fc7f 	bl	1e51e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   16c20:	bf00      	nop
   16c22:	bd80      	pop	{r7, pc}
   16c24:	2000c768 	.word	0x2000c768
   16c28:	2000c580 	.word	0x2000c580
   16c2c:	00024428 	.word	0x00024428
   16c30:	00000000 	.word	0x00000000
   16c34:	00024410 	.word	0x00024410
   16c38:	2000c580 	.word	0x2000c580

00016c3c <first>:
#include <syscalls/sys_clock_hw_cycles_per_sec_runtime_get_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_TIMER_READS_ITS_FREQUENCY_AT_RUNTIME */

static struct _timeout *first(void)
{
   16c3c:	b580      	push	{r7, lr}
   16c3e:	b082      	sub	sp, #8
   16c40:	af00      	add	r7, sp, #0
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);
   16c42:	4804      	ldr	r0, [pc, #16]	; (16c54 <first+0x18>)
   16c44:	f008 fa68 	bl	1f118 <sys_dlist_peek_head>
   16c48:	6078      	str	r0, [r7, #4]

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   16c4a:	687b      	ldr	r3, [r7, #4]
}
   16c4c:	4618      	mov	r0, r3
   16c4e:	3708      	adds	r7, #8
   16c50:	46bd      	mov	sp, r7
   16c52:	bd80      	pop	{r7, pc}
   16c54:	2000c728 	.word	0x2000c728

00016c58 <next>:

static struct _timeout *next(struct _timeout *t)
{
   16c58:	b580      	push	{r7, lr}
   16c5a:	b084      	sub	sp, #16
   16c5c:	af00      	add	r7, sp, #0
   16c5e:	6078      	str	r0, [r7, #4]
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);
   16c60:	687b      	ldr	r3, [r7, #4]
   16c62:	4619      	mov	r1, r3
   16c64:	4804      	ldr	r0, [pc, #16]	; (16c78 <next+0x20>)
   16c66:	f008 fa7c 	bl	1f162 <sys_dlist_peek_next>
   16c6a:	60f8      	str	r0, [r7, #12]

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
   16c6c:	68fb      	ldr	r3, [r7, #12]
}
   16c6e:	4618      	mov	r0, r3
   16c70:	3710      	adds	r7, #16
   16c72:	46bd      	mov	sp, r7
   16c74:	bd80      	pop	{r7, pc}
   16c76:	bf00      	nop
   16c78:	2000c728 	.word	0x2000c728

00016c7c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   16c7c:	b580      	push	{r7, lr}
   16c7e:	af00      	add	r7, sp, #0
	 *
	 * The distinction is implemented by looking at announce_remaining which
	 * will be non-zero while sys_clock_announce() is executing and zero
	 * otherwise.
	 */
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   16c80:	4b05      	ldr	r3, [pc, #20]	; (16c98 <elapsed+0x1c>)
   16c82:	681b      	ldr	r3, [r3, #0]
   16c84:	2b00      	cmp	r3, #0
   16c86:	d103      	bne.n	16c90 <elapsed+0x14>
   16c88:	f7f8 f874 	bl	ed74 <sys_clock_elapsed>
   16c8c:	4603      	mov	r3, r0
   16c8e:	e000      	b.n	16c92 <elapsed+0x16>
   16c90:	2300      	movs	r3, #0
}
   16c92:	4618      	mov	r0, r3
   16c94:	bd80      	pop	{r7, pc}
   16c96:	bf00      	nop
   16c98:	2000ce90 	.word	0x2000ce90

00016c9c <z_add_timeout>:
	return ret;
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   16c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   16ca0:	b09e      	sub	sp, #120	; 0x78
   16ca2:	af00      	add	r7, sp, #0
   16ca4:	6378      	str	r0, [r7, #52]	; 0x34
   16ca6:	6339      	str	r1, [r7, #48]	; 0x30
   16ca8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16cac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   16cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16cb8:	4299      	cmp	r1, r3
   16cba:	bf08      	it	eq
   16cbc:	4290      	cmpeq	r0, r2
   16cbe:	d100      	bne.n	16cc2 <z_add_timeout+0x26>
   16cc0:	e128      	b.n	16f14 <z_add_timeout+0x278>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   16cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16cc4:	4618      	mov	r0, r3
   16cc6:	f008 fa06 	bl	1f0d6 <sys_dnode_is_linked>
   16cca:	4603      	mov	r3, r0
   16ccc:	2b00      	cmp	r3, #0
   16cce:	d00c      	beq.n	16cea <z_add_timeout+0x4e>
   16cd0:	236e      	movs	r3, #110	; 0x6e
   16cd2:	4a92      	ldr	r2, [pc, #584]	; (16f1c <z_add_timeout+0x280>)
   16cd4:	4992      	ldr	r1, [pc, #584]	; (16f20 <z_add_timeout+0x284>)
   16cd6:	4893      	ldr	r0, [pc, #588]	; (16f24 <z_add_timeout+0x288>)
   16cd8:	f003 f96c 	bl	19fb4 <assert_print>
   16cdc:	4892      	ldr	r0, [pc, #584]	; (16f28 <z_add_timeout+0x28c>)
   16cde:	f003 f969 	bl	19fb4 <assert_print>
   16ce2:	216e      	movs	r1, #110	; 0x6e
   16ce4:	488d      	ldr	r0, [pc, #564]	; (16f1c <z_add_timeout+0x280>)
   16ce6:	f003 f955 	bl	19f94 <assert_post_action>
	to->fn = fn;
   16cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16cee:	6093      	str	r3, [r2, #8]

	K_SPINLOCK(&timeout_lock) {
   16cf0:	2300      	movs	r3, #0
   16cf2:	647b      	str	r3, [r7, #68]	; 0x44
   16cf4:	4b8d      	ldr	r3, [pc, #564]	; (16f2c <z_add_timeout+0x290>)
   16cf6:	667b      	str	r3, [r7, #100]	; 0x64
	__asm__ volatile(
   16cf8:	f04f 0220 	mov.w	r2, #32
   16cfc:	f3ef 8311 	mrs	r3, BASEPRI
   16d00:	f382 8812 	msr	BASEPRI_MAX, r2
   16d04:	f3bf 8f6f 	isb	sy
   16d08:	663b      	str	r3, [r7, #96]	; 0x60
   16d0a:	65fa      	str	r2, [r7, #92]	; 0x5c
	return key;
   16d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	k.key = arch_irq_lock();
   16d0e:	63bb      	str	r3, [r7, #56]	; 0x38
   16d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   16d12:	65bb      	str	r3, [r7, #88]	; 0x58
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   16d14:	6db8      	ldr	r0, [r7, #88]	; 0x58
   16d16:	f7fc fe01 	bl	1391c <z_spin_lock_valid>
   16d1a:	4603      	mov	r3, r0
   16d1c:	f083 0301 	eor.w	r3, r3, #1
   16d20:	b2db      	uxtb	r3, r3
   16d22:	2b00      	cmp	r3, #0
   16d24:	d00d      	beq.n	16d42 <z_add_timeout+0xa6>
   16d26:	2372      	movs	r3, #114	; 0x72
   16d28:	4a81      	ldr	r2, [pc, #516]	; (16f30 <z_add_timeout+0x294>)
   16d2a:	4982      	ldr	r1, [pc, #520]	; (16f34 <z_add_timeout+0x298>)
   16d2c:	487d      	ldr	r0, [pc, #500]	; (16f24 <z_add_timeout+0x288>)
   16d2e:	f003 f941 	bl	19fb4 <assert_print>
   16d32:	6db9      	ldr	r1, [r7, #88]	; 0x58
   16d34:	4880      	ldr	r0, [pc, #512]	; (16f38 <z_add_timeout+0x29c>)
   16d36:	f003 f93d 	bl	19fb4 <assert_print>
   16d3a:	2172      	movs	r1, #114	; 0x72
   16d3c:	487c      	ldr	r0, [pc, #496]	; (16f30 <z_add_timeout+0x294>)
   16d3e:	f003 f929 	bl	19f94 <assert_post_action>
}
   16d42:	bf00      	nop
   16d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   16d46:	657b      	str	r3, [r7, #84]	; 0x54
	z_spin_lock_set_owner(l);
   16d48:	6d78      	ldr	r0, [r7, #84]	; 0x54
   16d4a:	f7fc fe1f 	bl	1398c <z_spin_lock_set_owner>
}
   16d4e:	bf00      	nop
	return k;
   16d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16d52:	643b      	str	r3, [r7, #64]	; 0x40
   16d54:	e0c3      	b.n	16ede <z_add_timeout+0x242>
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   16d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   16d5a:	f06f 0001 	mvn.w	r0, #1
   16d5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16d62:	1a80      	subs	r0, r0, r2
   16d64:	6238      	str	r0, [r7, #32]
   16d66:	eb61 0303 	sbc.w	r3, r1, r3
   16d6a:	627b      	str	r3, [r7, #36]	; 0x24
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   16d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d6e:	2b00      	cmp	r3, #0
   16d70:	db24      	blt.n	16dbc <z_add_timeout+0x120>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   16d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   16d76:	4610      	mov	r0, r2
   16d78:	4619      	mov	r1, r3
   16d7a:	4b70      	ldr	r3, [pc, #448]	; (16f3c <z_add_timeout+0x2a0>)
   16d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16d80:	1884      	adds	r4, r0, r2
   16d82:	eb41 0503 	adc.w	r5, r1, r3
   16d86:	f06f 0201 	mvn.w	r2, #1
   16d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16d8e:	1b12      	subs	r2, r2, r4
   16d90:	61ba      	str	r2, [r7, #24]
   16d92:	eb63 0305 	sbc.w	r3, r3, r5
   16d96:	61fb      	str	r3, [r7, #28]
   16d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   16d9c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			to->dticks = MAX(1, ticks);
   16da0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   16da4:	2a01      	cmp	r2, #1
   16da6:	f173 0100 	sbcs.w	r1, r3, #0
   16daa:	da03      	bge.n	16db4 <z_add_timeout+0x118>
   16dac:	f04f 0201 	mov.w	r2, #1
   16db0:	f04f 0300 	mov.w	r3, #0
   16db4:	6b79      	ldr	r1, [r7, #52]	; 0x34
   16db6:	e9c1 2304 	strd	r2, r3, [r1, #16]
   16dba:	e016      	b.n	16dea <z_add_timeout+0x14e>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   16dbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   16dc0:	f112 0801 	adds.w	r8, r2, #1
   16dc4:	f143 0900 	adc.w	r9, r3, #0
   16dc8:	f7ff ff58 	bl	16c7c <elapsed>
   16dcc:	4603      	mov	r3, r0
   16dce:	17da      	asrs	r2, r3, #31
   16dd0:	469a      	mov	sl, r3
   16dd2:	4693      	mov	fp, r2
   16dd4:	eb18 030a 	adds.w	r3, r8, sl
   16dd8:	613b      	str	r3, [r7, #16]
   16dda:	eb49 030b 	adc.w	r3, r9, fp
   16dde:	617b      	str	r3, [r7, #20]
   16de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16de2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
   16de6:	e9c3 1204 	strd	r1, r2, [r3, #16]
		}

		for (t = first(); t != NULL; t = next(t)) {
   16dea:	f7ff ff27 	bl	16c3c <first>
   16dee:	6778      	str	r0, [r7, #116]	; 0x74
   16df0:	e037      	b.n	16e62 <z_add_timeout+0x1c6>
			if (t->dticks > to->dticks) {
   16df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   16df4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   16df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16dfa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   16dfe:	4282      	cmp	r2, r0
   16e00:	418b      	sbcs	r3, r1
   16e02:	da18      	bge.n	16e36 <z_add_timeout+0x19a>
				t->dticks -= to->dticks;
   16e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   16e06:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   16e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   16e10:	ebb0 0c02 	subs.w	ip, r0, r2
   16e14:	f8c7 c008 	str.w	ip, [r7, #8]
   16e18:	eb61 0303 	sbc.w	r3, r1, r3
   16e1c:	60fb      	str	r3, [r7, #12]
   16e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   16e20:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
   16e24:	e9c3 1204 	strd	r1, r2, [r3, #16]
				sys_dlist_insert(&t->node, &to->node);
   16e28:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   16e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e2c:	4619      	mov	r1, r3
   16e2e:	4610      	mov	r0, r2
   16e30:	f008 f9c3 	bl	1f1ba <sys_dlist_insert>
				break;
   16e34:	e018      	b.n	16e68 <z_add_timeout+0x1cc>
			}
			to->dticks -= t->dticks;
   16e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e38:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   16e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   16e3e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   16e42:	ebb0 0c02 	subs.w	ip, r0, r2
   16e46:	f8c7 c000 	str.w	ip, [r7]
   16e4a:	eb61 0303 	sbc.w	r3, r1, r3
   16e4e:	607b      	str	r3, [r7, #4]
   16e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e52:	e9d7 1200 	ldrd	r1, r2, [r7]
   16e56:	e9c3 1204 	strd	r1, r2, [r3, #16]
		for (t = first(); t != NULL; t = next(t)) {
   16e5a:	6f78      	ldr	r0, [r7, #116]	; 0x74
   16e5c:	f7ff fefc 	bl	16c58 <next>
   16e60:	6778      	str	r0, [r7, #116]	; 0x74
   16e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   16e64:	2b00      	cmp	r3, #0
   16e66:	d1c4      	bne.n	16df2 <z_add_timeout+0x156>
		}

		if (t == NULL) {
   16e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   16e6a:	2b00      	cmp	r3, #0
   16e6c:	d104      	bne.n	16e78 <z_add_timeout+0x1dc>
			sys_dlist_append(&timeout_list, &to->node);
   16e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e70:	4619      	mov	r1, r3
   16e72:	4833      	ldr	r0, [pc, #204]	; (16f40 <z_add_timeout+0x2a4>)
   16e74:	f008 f988 	bl	1f188 <sys_dlist_append>
		}

		if (to == first()) {
   16e78:	f7ff fee0 	bl	16c3c <first>
   16e7c:	4602      	mov	r2, r0
   16e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e80:	4293      	cmp	r3, r2
   16e82:	d106      	bne.n	16e92 <z_add_timeout+0x1f6>
			sys_clock_set_timeout(next_timeout(), false);
   16e84:	f008 f9e9 	bl	1f25a <next_timeout>
   16e88:	4603      	mov	r3, r0
   16e8a:	2100      	movs	r1, #0
   16e8c:	4618      	mov	r0, r3
   16e8e:	f7f7 fe55 	bl	eb3c <sys_clock_set_timeout>
   16e92:	4b26      	ldr	r3, [pc, #152]	; (16f2c <z_add_timeout+0x290>)
   16e94:	653b      	str	r3, [r7, #80]	; 0x50
   16e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16e98:	63fb      	str	r3, [r7, #60]	; 0x3c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16e9a:	6d38      	ldr	r0, [r7, #80]	; 0x50
   16e9c:	f7fc fd5a 	bl	13954 <z_spin_unlock_valid>
   16ea0:	4603      	mov	r3, r0
   16ea2:	f083 0301 	eor.w	r3, r3, #1
   16ea6:	b2db      	uxtb	r3, r3
   16ea8:	2b00      	cmp	r3, #0
   16eaa:	d00d      	beq.n	16ec8 <z_add_timeout+0x22c>
   16eac:	23f0      	movs	r3, #240	; 0xf0
   16eae:	4a20      	ldr	r2, [pc, #128]	; (16f30 <z_add_timeout+0x294>)
   16eb0:	4924      	ldr	r1, [pc, #144]	; (16f44 <z_add_timeout+0x2a8>)
   16eb2:	481c      	ldr	r0, [pc, #112]	; (16f24 <z_add_timeout+0x288>)
   16eb4:	f003 f87e 	bl	19fb4 <assert_print>
   16eb8:	6d39      	ldr	r1, [r7, #80]	; 0x50
   16eba:	4823      	ldr	r0, [pc, #140]	; (16f48 <z_add_timeout+0x2ac>)
   16ebc:	f003 f87a 	bl	19fb4 <assert_print>
   16ec0:	21f0      	movs	r1, #240	; 0xf0
   16ec2:	481b      	ldr	r0, [pc, #108]	; (16f30 <z_add_timeout+0x294>)
   16ec4:	f003 f866 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   16ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16eca:	64fb      	str	r3, [r7, #76]	; 0x4c
	__asm__ volatile(
   16ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16ece:	f383 8811 	msr	BASEPRI, r3
   16ed2:	f3bf 8f6f 	isb	sy
}
   16ed6:	bf00      	nop
}
   16ed8:	bf00      	nop
	K_SPINLOCK(&timeout_lock) {
   16eda:	2301      	movs	r3, #1
   16edc:	647b      	str	r3, [r7, #68]	; 0x44
   16ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16ee0:	2b00      	cmp	r3, #0
   16ee2:	f43f af38 	beq.w	16d56 <z_add_timeout+0xba>
   16ee6:	f107 0344 	add.w	r3, r7, #68	; 0x44
   16eea:	64bb      	str	r3, [r7, #72]	; 0x48
	__ASSERT(k->key, "K_SPINLOCK exited with goto, break or return, "
   16eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16eee:	681b      	ldr	r3, [r3, #0]
   16ef0:	2b00      	cmp	r3, #0
   16ef2:	d10e      	bne.n	16f12 <z_add_timeout+0x276>
   16ef4:	f240 131b 	movw	r3, #283	; 0x11b
   16ef8:	4a0d      	ldr	r2, [pc, #52]	; (16f30 <z_add_timeout+0x294>)
   16efa:	4914      	ldr	r1, [pc, #80]	; (16f4c <z_add_timeout+0x2b0>)
   16efc:	4809      	ldr	r0, [pc, #36]	; (16f24 <z_add_timeout+0x288>)
   16efe:	f003 f859 	bl	19fb4 <assert_print>
   16f02:	4813      	ldr	r0, [pc, #76]	; (16f50 <z_add_timeout+0x2b4>)
   16f04:	f003 f856 	bl	19fb4 <assert_print>
   16f08:	f240 111b 	movw	r1, #283	; 0x11b
   16f0c:	4808      	ldr	r0, [pc, #32]	; (16f30 <z_add_timeout+0x294>)
   16f0e:	f003 f841 	bl	19f94 <assert_post_action>
}
   16f12:	bf00      	nop
		}
	}
}
   16f14:	3778      	adds	r7, #120	; 0x78
   16f16:	46bd      	mov	sp, r7
   16f18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
   16f1c:	00023b08 	.word	0x00023b08
   16f20:	00023b2c 	.word	0x00023b2c
   16f24:	00023b4c 	.word	0x00023b4c
   16f28:	00023b6c 	.word	0x00023b6c
   16f2c:	2000ce8c 	.word	0x2000ce8c
   16f30:	00023b70 	.word	0x00023b70
   16f34:	00023ba0 	.word	0x00023ba0
   16f38:	00023bb8 	.word	0x00023bb8
   16f3c:	2000c8e0 	.word	0x2000c8e0
   16f40:	2000c728 	.word	0x2000c728
   16f44:	00023bd0 	.word	0x00023bd0
   16f48:	00023be8 	.word	0x00023be8
   16f4c:	00023c00 	.word	0x00023c00
   16f50:	00023c08 	.word	0x00023c08

00016f54 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   16f54:	b580      	push	{r7, lr}
   16f56:	b090      	sub	sp, #64	; 0x40
   16f58:	af00      	add	r7, sp, #0
   16f5a:	6078      	str	r0, [r7, #4]
	int ret = -EINVAL;
   16f5c:	f06f 0315 	mvn.w	r3, #21
   16f60:	63fb      	str	r3, [r7, #60]	; 0x3c

	K_SPINLOCK(&timeout_lock) {
   16f62:	2300      	movs	r3, #0
   16f64:	61bb      	str	r3, [r7, #24]
   16f66:	4b41      	ldr	r3, [pc, #260]	; (1706c <z_abort_timeout+0x118>)
   16f68:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   16f6a:	f04f 0320 	mov.w	r3, #32
   16f6e:	f3ef 8211 	mrs	r2, BASEPRI
   16f72:	f383 8812 	msr	BASEPRI_MAX, r3
   16f76:	f3bf 8f6f 	isb	sy
   16f7a:	637a      	str	r2, [r7, #52]	; 0x34
   16f7c:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
   16f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = arch_irq_lock();
   16f80:	60fb      	str	r3, [r7, #12]
   16f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16f84:	62fb      	str	r3, [r7, #44]	; 0x2c
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   16f86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16f88:	f7fc fcc8 	bl	1391c <z_spin_lock_valid>
   16f8c:	4603      	mov	r3, r0
   16f8e:	f083 0301 	eor.w	r3, r3, #1
   16f92:	b2db      	uxtb	r3, r3
   16f94:	2b00      	cmp	r3, #0
   16f96:	d00d      	beq.n	16fb4 <z_abort_timeout+0x60>
   16f98:	2372      	movs	r3, #114	; 0x72
   16f9a:	4a35      	ldr	r2, [pc, #212]	; (17070 <z_abort_timeout+0x11c>)
   16f9c:	4935      	ldr	r1, [pc, #212]	; (17074 <z_abort_timeout+0x120>)
   16f9e:	4836      	ldr	r0, [pc, #216]	; (17078 <z_abort_timeout+0x124>)
   16fa0:	f003 f808 	bl	19fb4 <assert_print>
   16fa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   16fa6:	4835      	ldr	r0, [pc, #212]	; (1707c <z_abort_timeout+0x128>)
   16fa8:	f003 f804 	bl	19fb4 <assert_print>
   16fac:	2172      	movs	r1, #114	; 0x72
   16fae:	4830      	ldr	r0, [pc, #192]	; (17070 <z_abort_timeout+0x11c>)
   16fb0:	f002 fff0 	bl	19f94 <assert_post_action>
}
   16fb4:	bf00      	nop
   16fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16fb8:	62bb      	str	r3, [r7, #40]	; 0x28
	z_spin_lock_set_owner(l);
   16fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   16fbc:	f7fc fce6 	bl	1398c <z_spin_lock_set_owner>
}
   16fc0:	bf00      	nop
	return k;
   16fc2:	68fb      	ldr	r3, [r7, #12]
   16fc4:	617b      	str	r3, [r7, #20]
   16fc6:	e031      	b.n	1702c <z_abort_timeout+0xd8>
		if (sys_dnode_is_linked(&to->node)) {
   16fc8:	687b      	ldr	r3, [r7, #4]
   16fca:	4618      	mov	r0, r3
   16fcc:	f008 f883 	bl	1f0d6 <sys_dnode_is_linked>
   16fd0:	4603      	mov	r3, r0
   16fd2:	2b00      	cmp	r3, #0
   16fd4:	d004      	beq.n	16fe0 <z_abort_timeout+0x8c>
			remove_timeout(to);
   16fd6:	6878      	ldr	r0, [r7, #4]
   16fd8:	f008 f91f 	bl	1f21a <remove_timeout>
			ret = 0;
   16fdc:	2300      	movs	r3, #0
   16fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   16fe0:	4b22      	ldr	r3, [pc, #136]	; (1706c <z_abort_timeout+0x118>)
   16fe2:	627b      	str	r3, [r7, #36]	; 0x24
   16fe4:	697b      	ldr	r3, [r7, #20]
   16fe6:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16fe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16fea:	f7fc fcb3 	bl	13954 <z_spin_unlock_valid>
   16fee:	4603      	mov	r3, r0
   16ff0:	f083 0301 	eor.w	r3, r3, #1
   16ff4:	b2db      	uxtb	r3, r3
   16ff6:	2b00      	cmp	r3, #0
   16ff8:	d00d      	beq.n	17016 <z_abort_timeout+0xc2>
   16ffa:	23f0      	movs	r3, #240	; 0xf0
   16ffc:	4a1c      	ldr	r2, [pc, #112]	; (17070 <z_abort_timeout+0x11c>)
   16ffe:	4920      	ldr	r1, [pc, #128]	; (17080 <z_abort_timeout+0x12c>)
   17000:	481d      	ldr	r0, [pc, #116]	; (17078 <z_abort_timeout+0x124>)
   17002:	f002 ffd7 	bl	19fb4 <assert_print>
   17006:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17008:	481e      	ldr	r0, [pc, #120]	; (17084 <z_abort_timeout+0x130>)
   1700a:	f002 ffd3 	bl	19fb4 <assert_print>
   1700e:	21f0      	movs	r1, #240	; 0xf0
   17010:	4817      	ldr	r0, [pc, #92]	; (17070 <z_abort_timeout+0x11c>)
   17012:	f002 ffbf 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   17016:	693b      	ldr	r3, [r7, #16]
   17018:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   1701a:	6a3b      	ldr	r3, [r7, #32]
   1701c:	f383 8811 	msr	BASEPRI, r3
   17020:	f3bf 8f6f 	isb	sy
}
   17024:	bf00      	nop
}
   17026:	bf00      	nop
	K_SPINLOCK(&timeout_lock) {
   17028:	2301      	movs	r3, #1
   1702a:	61bb      	str	r3, [r7, #24]
   1702c:	69bb      	ldr	r3, [r7, #24]
   1702e:	2b00      	cmp	r3, #0
   17030:	d0ca      	beq.n	16fc8 <z_abort_timeout+0x74>
   17032:	f107 0318 	add.w	r3, r7, #24
   17036:	61fb      	str	r3, [r7, #28]
	__ASSERT(k->key, "K_SPINLOCK exited with goto, break or return, "
   17038:	69fb      	ldr	r3, [r7, #28]
   1703a:	681b      	ldr	r3, [r3, #0]
   1703c:	2b00      	cmp	r3, #0
   1703e:	d10e      	bne.n	1705e <z_abort_timeout+0x10a>
   17040:	f240 131b 	movw	r3, #283	; 0x11b
   17044:	4a0a      	ldr	r2, [pc, #40]	; (17070 <z_abort_timeout+0x11c>)
   17046:	4910      	ldr	r1, [pc, #64]	; (17088 <z_abort_timeout+0x134>)
   17048:	480b      	ldr	r0, [pc, #44]	; (17078 <z_abort_timeout+0x124>)
   1704a:	f002 ffb3 	bl	19fb4 <assert_print>
   1704e:	480f      	ldr	r0, [pc, #60]	; (1708c <z_abort_timeout+0x138>)
   17050:	f002 ffb0 	bl	19fb4 <assert_print>
   17054:	f240 111b 	movw	r1, #283	; 0x11b
   17058:	4805      	ldr	r0, [pc, #20]	; (17070 <z_abort_timeout+0x11c>)
   1705a:	f002 ff9b 	bl	19f94 <assert_post_action>
}
   1705e:	bf00      	nop
		}
	}

	return ret;
   17060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   17062:	4618      	mov	r0, r3
   17064:	3740      	adds	r7, #64	; 0x40
   17066:	46bd      	mov	sp, r7
   17068:	bd80      	pop	{r7, pc}
   1706a:	bf00      	nop
   1706c:	2000ce8c 	.word	0x2000ce8c
   17070:	00023b70 	.word	0x00023b70
   17074:	00023ba0 	.word	0x00023ba0
   17078:	00023b4c 	.word	0x00023b4c
   1707c:	00023bb8 	.word	0x00023bb8
   17080:	00023bd0 	.word	0x00023bd0
   17084:	00023be8 	.word	0x00023be8
   17088:	00023c00 	.word	0x00023c00
   1708c:	00023c08 	.word	0x00023c08

00017090 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   17090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   17094:	b0a0      	sub	sp, #128	; 0x80
   17096:	af00      	add	r7, sp, #0
   17098:	6278      	str	r0, [r7, #36]	; 0x24
   1709a:	4b93      	ldr	r3, [pc, #588]	; (172e8 <sys_clock_announce+0x258>)
   1709c:	677b      	str	r3, [r7, #116]	; 0x74
	__asm__ volatile(
   1709e:	f04f 0220 	mov.w	r2, #32
   170a2:	f3ef 8311 	mrs	r3, BASEPRI
   170a6:	f382 8812 	msr	BASEPRI_MAX, r2
   170aa:	f3bf 8f6f 	isb	sy
   170ae:	673b      	str	r3, [r7, #112]	; 0x70
   170b0:	66fa      	str	r2, [r7, #108]	; 0x6c
	return key;
   170b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	k.key = arch_irq_lock();
   170b4:	637b      	str	r3, [r7, #52]	; 0x34
   170b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   170b8:	66bb      	str	r3, [r7, #104]	; 0x68
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   170ba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   170bc:	f7fc fc2e 	bl	1391c <z_spin_lock_valid>
   170c0:	4603      	mov	r3, r0
   170c2:	f083 0301 	eor.w	r3, r3, #1
   170c6:	b2db      	uxtb	r3, r3
   170c8:	2b00      	cmp	r3, #0
   170ca:	d00d      	beq.n	170e8 <sys_clock_announce+0x58>
   170cc:	2372      	movs	r3, #114	; 0x72
   170ce:	4a87      	ldr	r2, [pc, #540]	; (172ec <sys_clock_announce+0x25c>)
   170d0:	4987      	ldr	r1, [pc, #540]	; (172f0 <sys_clock_announce+0x260>)
   170d2:	4888      	ldr	r0, [pc, #544]	; (172f4 <sys_clock_announce+0x264>)
   170d4:	f002 ff6e 	bl	19fb4 <assert_print>
   170d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   170da:	4887      	ldr	r0, [pc, #540]	; (172f8 <sys_clock_announce+0x268>)
   170dc:	f002 ff6a 	bl	19fb4 <assert_print>
   170e0:	2172      	movs	r1, #114	; 0x72
   170e2:	4882      	ldr	r0, [pc, #520]	; (172ec <sys_clock_announce+0x25c>)
   170e4:	f002 ff56 	bl	19f94 <assert_post_action>
}
   170e8:	bf00      	nop
   170ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   170ec:	667b      	str	r3, [r7, #100]	; 0x64
	z_spin_lock_set_owner(l);
   170ee:	6e78      	ldr	r0, [r7, #100]	; 0x64
   170f0:	f7fc fc4c 	bl	1398c <z_spin_lock_set_owner>
}
   170f4:	bf00      	nop
	return k;
   170f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   170f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   170fa:	4a80      	ldr	r2, [pc, #512]	; (172fc <sys_clock_announce+0x26c>)
   170fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   170fe:	6013      	str	r3, [r2, #0]

	struct _timeout *t;

	for (t = first();
   17100:	f7ff fd9c 	bl	16c3c <first>
   17104:	67f8      	str	r0, [r7, #124]	; 0x7c
   17106:	e081      	b.n	1720c <sys_clock_announce+0x17c>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;
   17108:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1710a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   1710e:	4613      	mov	r3, r2
   17110:	67bb      	str	r3, [r7, #120]	; 0x78

		curr_tick += dt;
   17112:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   17114:	17da      	asrs	r2, r3, #31
   17116:	469a      	mov	sl, r3
   17118:	4693      	mov	fp, r2
   1711a:	4b79      	ldr	r3, [pc, #484]	; (17300 <sys_clock_announce+0x270>)
   1711c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17120:	eb1a 0102 	adds.w	r1, sl, r2
   17124:	61b9      	str	r1, [r7, #24]
   17126:	eb4b 0303 	adc.w	r3, fp, r3
   1712a:	61fb      	str	r3, [r7, #28]
   1712c:	4b74      	ldr	r3, [pc, #464]	; (17300 <sys_clock_announce+0x270>)
   1712e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
   17132:	e9c3 1200 	strd	r1, r2, [r3]
		t->dticks = 0;
   17136:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
   17138:	f04f 0200 	mov.w	r2, #0
   1713c:	f04f 0300 	mov.w	r3, #0
   17140:	e9c1 2304 	strd	r2, r3, [r1, #16]
		remove_timeout(t);
   17144:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
   17146:	f008 f868 	bl	1f21a <remove_timeout>
   1714a:	4b67      	ldr	r3, [pc, #412]	; (172e8 <sys_clock_announce+0x258>)
   1714c:	64fb      	str	r3, [r7, #76]	; 0x4c
   1714e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17150:	633b      	str	r3, [r7, #48]	; 0x30
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17152:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   17154:	f7fc fbfe 	bl	13954 <z_spin_unlock_valid>
   17158:	4603      	mov	r3, r0
   1715a:	f083 0301 	eor.w	r3, r3, #1
   1715e:	b2db      	uxtb	r3, r3
   17160:	2b00      	cmp	r3, #0
   17162:	d00d      	beq.n	17180 <sys_clock_announce+0xf0>
   17164:	23f0      	movs	r3, #240	; 0xf0
   17166:	4a61      	ldr	r2, [pc, #388]	; (172ec <sys_clock_announce+0x25c>)
   17168:	4966      	ldr	r1, [pc, #408]	; (17304 <sys_clock_announce+0x274>)
   1716a:	4862      	ldr	r0, [pc, #392]	; (172f4 <sys_clock_announce+0x264>)
   1716c:	f002 ff22 	bl	19fb4 <assert_print>
   17170:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   17172:	4865      	ldr	r0, [pc, #404]	; (17308 <sys_clock_announce+0x278>)
   17174:	f002 ff1e 	bl	19fb4 <assert_print>
   17178:	21f0      	movs	r1, #240	; 0xf0
   1717a:	485c      	ldr	r0, [pc, #368]	; (172ec <sys_clock_announce+0x25c>)
   1717c:	f002 ff0a 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   17180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17182:	64bb      	str	r3, [r7, #72]	; 0x48
	__asm__ volatile(
   17184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17186:	f383 8811 	msr	BASEPRI, r3
   1718a:	f3bf 8f6f 	isb	sy
}
   1718e:	bf00      	nop
}
   17190:	bf00      	nop

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   17192:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   17194:	689b      	ldr	r3, [r3, #8]
   17196:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
   17198:	4798      	blx	r3
   1719a:	4b53      	ldr	r3, [pc, #332]	; (172e8 <sys_clock_announce+0x258>)
   1719c:	663b      	str	r3, [r7, #96]	; 0x60
	__asm__ volatile(
   1719e:	f04f 0220 	mov.w	r2, #32
   171a2:	f3ef 8311 	mrs	r3, BASEPRI
   171a6:	f382 8812 	msr	BASEPRI_MAX, r2
   171aa:	f3bf 8f6f 	isb	sy
   171ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   171b0:	65ba      	str	r2, [r7, #88]	; 0x58
	return key;
   171b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	k.key = arch_irq_lock();
   171b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   171b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   171b8:	657b      	str	r3, [r7, #84]	; 0x54
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   171ba:	6d78      	ldr	r0, [r7, #84]	; 0x54
   171bc:	f7fc fbae 	bl	1391c <z_spin_lock_valid>
   171c0:	4603      	mov	r3, r0
   171c2:	f083 0301 	eor.w	r3, r3, #1
   171c6:	b2db      	uxtb	r3, r3
   171c8:	2b00      	cmp	r3, #0
   171ca:	d00d      	beq.n	171e8 <sys_clock_announce+0x158>
   171cc:	2372      	movs	r3, #114	; 0x72
   171ce:	4a47      	ldr	r2, [pc, #284]	; (172ec <sys_clock_announce+0x25c>)
   171d0:	4947      	ldr	r1, [pc, #284]	; (172f0 <sys_clock_announce+0x260>)
   171d2:	4848      	ldr	r0, [pc, #288]	; (172f4 <sys_clock_announce+0x264>)
   171d4:	f002 feee 	bl	19fb4 <assert_print>
   171d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
   171da:	4847      	ldr	r0, [pc, #284]	; (172f8 <sys_clock_announce+0x268>)
   171dc:	f002 feea 	bl	19fb4 <assert_print>
   171e0:	2172      	movs	r1, #114	; 0x72
   171e2:	4842      	ldr	r0, [pc, #264]	; (172ec <sys_clock_announce+0x25c>)
   171e4:	f002 fed6 	bl	19f94 <assert_post_action>
}
   171e8:	bf00      	nop
   171ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   171ec:	653b      	str	r3, [r7, #80]	; 0x50
	z_spin_lock_set_owner(l);
   171ee:	6d38      	ldr	r0, [r7, #80]	; 0x50
   171f0:	f7fc fbcc 	bl	1398c <z_spin_lock_set_owner>
}
   171f4:	bf00      	nop
	return k;
   171f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   171fa:	4b40      	ldr	r3, [pc, #256]	; (172fc <sys_clock_announce+0x26c>)
   171fc:	681a      	ldr	r2, [r3, #0]
   171fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   17200:	1ad2      	subs	r2, r2, r3
   17202:	4b3e      	ldr	r3, [pc, #248]	; (172fc <sys_clock_announce+0x26c>)
   17204:	601a      	str	r2, [r3, #0]
	     t = first()) {
   17206:	f7ff fd19 	bl	16c3c <first>
   1720a:	67f8      	str	r0, [r7, #124]	; 0x7c
	     (t != NULL) && (t->dticks <= announce_remaining);
   1720c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1720e:	2b00      	cmp	r3, #0
   17210:	d00e      	beq.n	17230 <sys_clock_announce+0x1a0>
   17212:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   17214:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   17218:	4b38      	ldr	r3, [pc, #224]	; (172fc <sys_clock_announce+0x26c>)
   1721a:	681b      	ldr	r3, [r3, #0]
   1721c:	17da      	asrs	r2, r3, #31
   1721e:	613b      	str	r3, [r7, #16]
   17220:	617a      	str	r2, [r7, #20]
   17222:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   17226:	4694      	mov	ip, r2
   17228:	4584      	cmp	ip, r0
   1722a:	418b      	sbcs	r3, r1
   1722c:	f6bf af6c 	bge.w	17108 <sys_clock_announce+0x78>
	}

	if (t != NULL) {
   17230:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   17232:	2b00      	cmp	r3, #0
   17234:	d012      	beq.n	1725c <sys_clock_announce+0x1cc>
		t->dticks -= announce_remaining;
   17236:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   17238:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   1723c:	492f      	ldr	r1, [pc, #188]	; (172fc <sys_clock_announce+0x26c>)
   1723e:	6809      	ldr	r1, [r1, #0]
   17240:	17c8      	asrs	r0, r1, #31
   17242:	4688      	mov	r8, r1
   17244:	4681      	mov	r9, r0
   17246:	ebb2 0108 	subs.w	r1, r2, r8
   1724a:	60b9      	str	r1, [r7, #8]
   1724c:	eb63 0309 	sbc.w	r3, r3, r9
   17250:	60fb      	str	r3, [r7, #12]
   17252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   17254:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
   17258:	e9c3 1204 	strd	r1, r2, [r3, #16]
	}

	curr_tick += announce_remaining;
   1725c:	4b27      	ldr	r3, [pc, #156]	; (172fc <sys_clock_announce+0x26c>)
   1725e:	681b      	ldr	r3, [r3, #0]
   17260:	17da      	asrs	r2, r3, #31
   17262:	461c      	mov	r4, r3
   17264:	4615      	mov	r5, r2
   17266:	4b26      	ldr	r3, [pc, #152]	; (17300 <sys_clock_announce+0x270>)
   17268:	e9d3 2300 	ldrd	r2, r3, [r3]
   1726c:	18a1      	adds	r1, r4, r2
   1726e:	6039      	str	r1, [r7, #0]
   17270:	eb45 0303 	adc.w	r3, r5, r3
   17274:	607b      	str	r3, [r7, #4]
   17276:	4b22      	ldr	r3, [pc, #136]	; (17300 <sys_clock_announce+0x270>)
   17278:	e9d7 1200 	ldrd	r1, r2, [r7]
   1727c:	e9c3 1200 	strd	r1, r2, [r3]
	announce_remaining = 0;
   17280:	4b1e      	ldr	r3, [pc, #120]	; (172fc <sys_clock_announce+0x26c>)
   17282:	2200      	movs	r2, #0
   17284:	601a      	str	r2, [r3, #0]

	sys_clock_set_timeout(next_timeout(), false);
   17286:	f007 ffe8 	bl	1f25a <next_timeout>
   1728a:	4603      	mov	r3, r0
   1728c:	2100      	movs	r1, #0
   1728e:	4618      	mov	r0, r3
   17290:	f7f7 fc54 	bl	eb3c <sys_clock_set_timeout>
   17294:	4b14      	ldr	r3, [pc, #80]	; (172e8 <sys_clock_announce+0x258>)
   17296:	647b      	str	r3, [r7, #68]	; 0x44
   17298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1729a:	63bb      	str	r3, [r7, #56]	; 0x38
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1729c:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1729e:	f7fc fb59 	bl	13954 <z_spin_unlock_valid>
   172a2:	4603      	mov	r3, r0
   172a4:	f083 0301 	eor.w	r3, r3, #1
   172a8:	b2db      	uxtb	r3, r3
   172aa:	2b00      	cmp	r3, #0
   172ac:	d00d      	beq.n	172ca <sys_clock_announce+0x23a>
   172ae:	23f0      	movs	r3, #240	; 0xf0
   172b0:	4a0e      	ldr	r2, [pc, #56]	; (172ec <sys_clock_announce+0x25c>)
   172b2:	4914      	ldr	r1, [pc, #80]	; (17304 <sys_clock_announce+0x274>)
   172b4:	480f      	ldr	r0, [pc, #60]	; (172f4 <sys_clock_announce+0x264>)
   172b6:	f002 fe7d 	bl	19fb4 <assert_print>
   172ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
   172bc:	4812      	ldr	r0, [pc, #72]	; (17308 <sys_clock_announce+0x278>)
   172be:	f002 fe79 	bl	19fb4 <assert_print>
   172c2:	21f0      	movs	r1, #240	; 0xf0
   172c4:	4809      	ldr	r0, [pc, #36]	; (172ec <sys_clock_announce+0x25c>)
   172c6:	f002 fe65 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   172ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   172cc:	643b      	str	r3, [r7, #64]	; 0x40
	__asm__ volatile(
   172ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   172d0:	f383 8811 	msr	BASEPRI, r3
   172d4:	f3bf 8f6f 	isb	sy
}
   172d8:	bf00      	nop
}
   172da:	bf00      	nop

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
   172dc:	f7fd fd1e 	bl	14d1c <z_time_slice>
#endif
}
   172e0:	3780      	adds	r7, #128	; 0x80
   172e2:	46bd      	mov	sp, r7
   172e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
   172e8:	2000ce8c 	.word	0x2000ce8c
   172ec:	00023b70 	.word	0x00023b70
   172f0:	00023ba0 	.word	0x00023ba0
   172f4:	00023b4c 	.word	0x00023b4c
   172f8:	00023bb8 	.word	0x00023bb8
   172fc:	2000ce90 	.word	0x2000ce90
   17300:	2000c8e0 	.word	0x2000c8e0
   17304:	00023bd0 	.word	0x00023bd0
   17308:	00023be8 	.word	0x00023be8

0001730c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1730c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   17310:	b08e      	sub	sp, #56	; 0x38
   17312:	af00      	add	r7, sp, #0
	uint64_t t = 0U;
   17314:	f04f 0200 	mov.w	r2, #0
   17318:	f04f 0300 	mov.w	r3, #0
   1731c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	K_SPINLOCK(&timeout_lock) {
   17320:	2300      	movs	r3, #0
   17322:	60fb      	str	r3, [r7, #12]
   17324:	4b43      	ldr	r3, [pc, #268]	; (17434 <sys_clock_tick_get+0x128>)
   17326:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   17328:	f04f 0320 	mov.w	r3, #32
   1732c:	f3ef 8211 	mrs	r2, BASEPRI
   17330:	f383 8812 	msr	BASEPRI_MAX, r3
   17334:	f3bf 8f6f 	isb	sy
   17338:	62ba      	str	r2, [r7, #40]	; 0x28
   1733a:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   1733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
   1733e:	603b      	str	r3, [r7, #0]
   17340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17342:	623b      	str	r3, [r7, #32]
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   17344:	6a38      	ldr	r0, [r7, #32]
   17346:	f7fc fae9 	bl	1391c <z_spin_lock_valid>
   1734a:	4603      	mov	r3, r0
   1734c:	f083 0301 	eor.w	r3, r3, #1
   17350:	b2db      	uxtb	r3, r3
   17352:	2b00      	cmp	r3, #0
   17354:	d00d      	beq.n	17372 <sys_clock_tick_get+0x66>
   17356:	2372      	movs	r3, #114	; 0x72
   17358:	4a37      	ldr	r2, [pc, #220]	; (17438 <sys_clock_tick_get+0x12c>)
   1735a:	4938      	ldr	r1, [pc, #224]	; (1743c <sys_clock_tick_get+0x130>)
   1735c:	4838      	ldr	r0, [pc, #224]	; (17440 <sys_clock_tick_get+0x134>)
   1735e:	f002 fe29 	bl	19fb4 <assert_print>
   17362:	6a39      	ldr	r1, [r7, #32]
   17364:	4837      	ldr	r0, [pc, #220]	; (17444 <sys_clock_tick_get+0x138>)
   17366:	f002 fe25 	bl	19fb4 <assert_print>
   1736a:	2172      	movs	r1, #114	; 0x72
   1736c:	4832      	ldr	r0, [pc, #200]	; (17438 <sys_clock_tick_get+0x12c>)
   1736e:	f002 fe11 	bl	19f94 <assert_post_action>
}
   17372:	bf00      	nop
   17374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17376:	61fb      	str	r3, [r7, #28]
	z_spin_lock_set_owner(l);
   17378:	69f8      	ldr	r0, [r7, #28]
   1737a:	f7fc fb07 	bl	1398c <z_spin_lock_set_owner>
}
   1737e:	bf00      	nop
	return k;
   17380:	683b      	ldr	r3, [r7, #0]
   17382:	60bb      	str	r3, [r7, #8]
   17384:	e034      	b.n	173f0 <sys_clock_tick_get+0xe4>
		t = curr_tick + elapsed();
   17386:	f7ff fc79 	bl	16c7c <elapsed>
   1738a:	4603      	mov	r3, r0
   1738c:	17da      	asrs	r2, r3, #31
   1738e:	461c      	mov	r4, r3
   17390:	4615      	mov	r5, r2
   17392:	4b2d      	ldr	r3, [pc, #180]	; (17448 <sys_clock_tick_get+0x13c>)
   17394:	e9d3 2300 	ldrd	r2, r3, [r3]
   17398:	eb14 0802 	adds.w	r8, r4, r2
   1739c:	eb45 0903 	adc.w	r9, r5, r3
   173a0:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
   173a4:	4b23      	ldr	r3, [pc, #140]	; (17434 <sys_clock_tick_get+0x128>)
   173a6:	61bb      	str	r3, [r7, #24]
   173a8:	68bb      	ldr	r3, [r7, #8]
   173aa:	607b      	str	r3, [r7, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   173ac:	69b8      	ldr	r0, [r7, #24]
   173ae:	f7fc fad1 	bl	13954 <z_spin_unlock_valid>
   173b2:	4603      	mov	r3, r0
   173b4:	f083 0301 	eor.w	r3, r3, #1
   173b8:	b2db      	uxtb	r3, r3
   173ba:	2b00      	cmp	r3, #0
   173bc:	d00d      	beq.n	173da <sys_clock_tick_get+0xce>
   173be:	23f0      	movs	r3, #240	; 0xf0
   173c0:	4a1d      	ldr	r2, [pc, #116]	; (17438 <sys_clock_tick_get+0x12c>)
   173c2:	4922      	ldr	r1, [pc, #136]	; (1744c <sys_clock_tick_get+0x140>)
   173c4:	481e      	ldr	r0, [pc, #120]	; (17440 <sys_clock_tick_get+0x134>)
   173c6:	f002 fdf5 	bl	19fb4 <assert_print>
   173ca:	69b9      	ldr	r1, [r7, #24]
   173cc:	4820      	ldr	r0, [pc, #128]	; (17450 <sys_clock_tick_get+0x144>)
   173ce:	f002 fdf1 	bl	19fb4 <assert_print>
   173d2:	21f0      	movs	r1, #240	; 0xf0
   173d4:	4818      	ldr	r0, [pc, #96]	; (17438 <sys_clock_tick_get+0x12c>)
   173d6:	f002 fddd 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   173da:	687b      	ldr	r3, [r7, #4]
   173dc:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   173de:	697b      	ldr	r3, [r7, #20]
   173e0:	f383 8811 	msr	BASEPRI, r3
   173e4:	f3bf 8f6f 	isb	sy
}
   173e8:	bf00      	nop
}
   173ea:	bf00      	nop
	K_SPINLOCK(&timeout_lock) {
   173ec:	2301      	movs	r3, #1
   173ee:	60fb      	str	r3, [r7, #12]
   173f0:	68fb      	ldr	r3, [r7, #12]
   173f2:	2b00      	cmp	r3, #0
   173f4:	d0c7      	beq.n	17386 <sys_clock_tick_get+0x7a>
   173f6:	f107 030c 	add.w	r3, r7, #12
   173fa:	613b      	str	r3, [r7, #16]
	__ASSERT(k->key, "K_SPINLOCK exited with goto, break or return, "
   173fc:	693b      	ldr	r3, [r7, #16]
   173fe:	681b      	ldr	r3, [r3, #0]
   17400:	2b00      	cmp	r3, #0
   17402:	d10e      	bne.n	17422 <sys_clock_tick_get+0x116>
   17404:	f240 131b 	movw	r3, #283	; 0x11b
   17408:	4a0b      	ldr	r2, [pc, #44]	; (17438 <sys_clock_tick_get+0x12c>)
   1740a:	4912      	ldr	r1, [pc, #72]	; (17454 <sys_clock_tick_get+0x148>)
   1740c:	480c      	ldr	r0, [pc, #48]	; (17440 <sys_clock_tick_get+0x134>)
   1740e:	f002 fdd1 	bl	19fb4 <assert_print>
   17412:	4811      	ldr	r0, [pc, #68]	; (17458 <sys_clock_tick_get+0x14c>)
   17414:	f002 fdce 	bl	19fb4 <assert_print>
   17418:	f240 111b 	movw	r1, #283	; 0x11b
   1741c:	4806      	ldr	r0, [pc, #24]	; (17438 <sys_clock_tick_get+0x12c>)
   1741e:	f002 fdb9 	bl	19f94 <assert_post_action>
}
   17422:	bf00      	nop
	}
	return t;
   17424:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
}
   17428:	4610      	mov	r0, r2
   1742a:	4619      	mov	r1, r3
   1742c:	3738      	adds	r7, #56	; 0x38
   1742e:	46bd      	mov	sp, r7
   17430:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   17434:	2000ce8c 	.word	0x2000ce8c
   17438:	00023b70 	.word	0x00023b70
   1743c:	00023ba0 	.word	0x00023ba0
   17440:	00023b4c 	.word	0x00023b4c
   17444:	00023bb8 	.word	0x00023bb8
   17448:	2000c8e0 	.word	0x2000c8e0
   1744c:	00023bd0 	.word	0x00023bd0
   17450:	00023be8 	.word	0x00023be8
   17454:	00023c00 	.word	0x00023c00
   17458:	00023c08 	.word	0x00023c08

0001745c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1745c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   17460:	b0a8      	sub	sp, #160	; 0xa0
   17462:	af00      	add	r7, sp, #0
   17464:	61f8      	str	r0, [r7, #28]
	struct k_timer *timer = CONTAINER_OF(t, struct k_timer, timeout);
   17466:	69fb      	ldr	r3, [r7, #28]
   17468:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   1746c:	4bb3      	ldr	r3, [pc, #716]	; (1773c <z_timer_expiration_handler+0x2e0>)
   1746e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	__asm__ volatile(
   17472:	f04f 0320 	mov.w	r3, #32
   17476:	f3ef 8211 	mrs	r2, BASEPRI
   1747a:	f383 8812 	msr	BASEPRI_MAX, r3
   1747e:	f3bf 8f6f 	isb	sy
   17482:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   17486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	return key;
   1748a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
	k.key = arch_irq_lock();
   1748e:	62fb      	str	r3, [r7, #44]	; 0x2c
   17490:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   17494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   17498:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   1749c:	f7fc fa3e 	bl	1391c <z_spin_lock_valid>
   174a0:	4603      	mov	r3, r0
   174a2:	f083 0301 	eor.w	r3, r3, #1
   174a6:	b2db      	uxtb	r3, r3
   174a8:	2b00      	cmp	r3, #0
   174aa:	d00e      	beq.n	174ca <z_timer_expiration_handler+0x6e>
   174ac:	2372      	movs	r3, #114	; 0x72
   174ae:	4aa4      	ldr	r2, [pc, #656]	; (17740 <z_timer_expiration_handler+0x2e4>)
   174b0:	49a4      	ldr	r1, [pc, #656]	; (17744 <z_timer_expiration_handler+0x2e8>)
   174b2:	48a5      	ldr	r0, [pc, #660]	; (17748 <z_timer_expiration_handler+0x2ec>)
   174b4:	f002 fd7e 	bl	19fb4 <assert_print>
   174b8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   174bc:	48a3      	ldr	r0, [pc, #652]	; (1774c <z_timer_expiration_handler+0x2f0>)
   174be:	f002 fd79 	bl	19fb4 <assert_print>
   174c2:	2172      	movs	r1, #114	; 0x72
   174c4:	489e      	ldr	r0, [pc, #632]	; (17740 <z_timer_expiration_handler+0x2e4>)
   174c6:	f002 fd65 	bl	19f94 <assert_post_action>
}
   174ca:	bf00      	nop
   174cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   174d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	z_spin_lock_set_owner(l);
   174d4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   174d8:	f7fc fa58 	bl	1398c <z_spin_lock_set_owner>
}
   174dc:	bf00      	nop
	return k;
   174de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   174e0:	647b      	str	r3, [r7, #68]	; 0x44
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   174e2:	69fb      	ldr	r3, [r7, #28]
   174e4:	4618      	mov	r0, r3
   174e6:	f007 ffd2 	bl	1f48e <sys_dnode_is_linked>
   174ea:	4603      	mov	r3, r0
   174ec:	2b00      	cmp	r3, #0
   174ee:	d027      	beq.n	17540 <z_timer_expiration_handler+0xe4>
   174f0:	4b92      	ldr	r3, [pc, #584]	; (1773c <z_timer_expiration_handler+0x2e0>)
   174f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   174f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   174f8:	633b      	str	r3, [r7, #48]	; 0x30
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   174fa:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
   174fe:	f7fc fa29 	bl	13954 <z_spin_unlock_valid>
   17502:	4603      	mov	r3, r0
   17504:	f083 0301 	eor.w	r3, r3, #1
   17508:	b2db      	uxtb	r3, r3
   1750a:	2b00      	cmp	r3, #0
   1750c:	d00e      	beq.n	1752c <z_timer_expiration_handler+0xd0>
   1750e:	23f0      	movs	r3, #240	; 0xf0
   17510:	4a8b      	ldr	r2, [pc, #556]	; (17740 <z_timer_expiration_handler+0x2e4>)
   17512:	498f      	ldr	r1, [pc, #572]	; (17750 <z_timer_expiration_handler+0x2f4>)
   17514:	488c      	ldr	r0, [pc, #560]	; (17748 <z_timer_expiration_handler+0x2ec>)
   17516:	f002 fd4d 	bl	19fb4 <assert_print>
   1751a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
   1751e:	488d      	ldr	r0, [pc, #564]	; (17754 <z_timer_expiration_handler+0x2f8>)
   17520:	f002 fd48 	bl	19fb4 <assert_print>
   17524:	21f0      	movs	r1, #240	; 0xf0
   17526:	4886      	ldr	r0, [pc, #536]	; (17740 <z_timer_expiration_handler+0x2e4>)
   17528:	f002 fd34 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   1752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1752e:	67fb      	str	r3, [r7, #124]	; 0x7c
	__asm__ volatile(
   17530:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   17532:	f383 8811 	msr	BASEPRI, r3
   17536:	f3bf 8f6f 	isb	sy
}
   1753a:	bf00      	nop
}
   1753c:	bf00      	nop
		k_spin_unlock(&lock, key);
		return;
   1753e:	e14d      	b.n	177dc <z_timer_expiration_handler+0x380>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   17540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17544:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
   17548:	f04f 0200 	mov.w	r2, #0
   1754c:	f04f 0300 	mov.w	r3, #0
   17550:	4299      	cmp	r1, r3
   17552:	bf08      	it	eq
   17554:	4290      	cmpeq	r0, r2
   17556:	d064      	beq.n	17622 <z_timer_expiration_handler+0x1c6>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
   17558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1755c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
   17560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   17568:	4299      	cmp	r1, r3
   1756a:	bf08      	it	eq
   1756c:	4290      	cmpeq	r0, r2
   1756e:	d058      	beq.n	17622 <z_timer_expiration_handler+0x1c6>
		k_timeout_t next = timer->period;
   17570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17574:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
   17578:	e9c7 2308 	strd	r2, r3, [r7, #32]

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
   1757c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   17580:	2a01      	cmp	r2, #1
   17582:	f173 0100 	sbcs.w	r1, r3, #0
   17586:	da03      	bge.n	17590 <z_timer_expiration_handler+0x134>
   17588:	f04f 0201 	mov.w	r2, #1
   1758c:	f04f 0300 	mov.w	r3, #0
   17590:	1e51      	subs	r1, r2, #1
   17592:	60b9      	str	r1, [r7, #8]
   17594:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   17598:	60fb      	str	r3, [r7, #12]
   1759a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1759e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   175a2:	f007 ffb0 	bl	1f506 <k_uptime_ticks>
   175a6:	4602      	mov	r2, r0
   175a8:	460b      	mov	r3, r1
   175aa:	1c51      	adds	r1, r2, #1
   175ac:	6039      	str	r1, [r7, #0]
   175ae:	f143 0300 	adc.w	r3, r3, #0
   175b2:	607b      	str	r3, [r7, #4]
   175b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   175b8:	e9d7 0100 	ldrd	r0, r1, [r7]
   175bc:	4684      	mov	ip, r0
   175be:	eb1c 0a02 	adds.w	sl, ip, r2
   175c2:	eb41 0b03 	adc.w	fp, r1, r3
   175c6:	f1ba 0f01 	cmp.w	sl, #1
   175ca:	f17b 0300 	sbcs.w	r3, fp, #0
   175ce:	db17      	blt.n	17600 <z_timer_expiration_handler+0x1a4>
   175d0:	f007 ff99 	bl	1f506 <k_uptime_ticks>
   175d4:	4602      	mov	r2, r0
   175d6:	460b      	mov	r3, r1
   175d8:	f112 0801 	adds.w	r8, r2, #1
   175dc:	f143 0900 	adc.w	r9, r3, #0
   175e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   175e4:	eb18 0402 	adds.w	r4, r8, r2
   175e8:	eb49 0503 	adc.w	r5, r9, r3
   175ec:	f06f 0201 	mvn.w	r2, #1
   175f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   175f4:	1b12      	subs	r2, r2, r4
   175f6:	613a      	str	r2, [r7, #16]
   175f8:	eb63 0305 	sbc.w	r3, r3, r5
   175fc:	617b      	str	r3, [r7, #20]
   175fe:	e005      	b.n	1760c <z_timer_expiration_handler+0x1b0>
   17600:	f06f 0301 	mvn.w	r3, #1
   17604:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17608:	e9c7 3404 	strd	r3, r4, [r7, #16]
   1760c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   17610:	e9c7 3408 	strd	r3, r4, [r7, #32]
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   17614:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   17618:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   1761c:	494e      	ldr	r1, [pc, #312]	; (17758 <z_timer_expiration_handler+0x2fc>)
   1761e:	f7ff fb3d 	bl	16c9c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   17622:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17628:	1c5a      	adds	r2, r3, #1
   1762a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1762e:	631a      	str	r2, [r3, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   17630:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17634:	6a1b      	ldr	r3, [r3, #32]
   17636:	2b00      	cmp	r3, #0
   17638:	d059      	beq.n	176ee <z_timer_expiration_handler+0x292>
   1763a:	4b40      	ldr	r3, [pc, #256]	; (1773c <z_timer_expiration_handler+0x2e0>)
   1763c:	667b      	str	r3, [r7, #100]	; 0x64
   1763e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17640:	63bb      	str	r3, [r7, #56]	; 0x38
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17642:	6e78      	ldr	r0, [r7, #100]	; 0x64
   17644:	f7fc f986 	bl	13954 <z_spin_unlock_valid>
   17648:	4603      	mov	r3, r0
   1764a:	f083 0301 	eor.w	r3, r3, #1
   1764e:	b2db      	uxtb	r3, r3
   17650:	2b00      	cmp	r3, #0
   17652:	d00d      	beq.n	17670 <z_timer_expiration_handler+0x214>
   17654:	23f0      	movs	r3, #240	; 0xf0
   17656:	4a3a      	ldr	r2, [pc, #232]	; (17740 <z_timer_expiration_handler+0x2e4>)
   17658:	493d      	ldr	r1, [pc, #244]	; (17750 <z_timer_expiration_handler+0x2f4>)
   1765a:	483b      	ldr	r0, [pc, #236]	; (17748 <z_timer_expiration_handler+0x2ec>)
   1765c:	f002 fcaa 	bl	19fb4 <assert_print>
   17660:	6e79      	ldr	r1, [r7, #100]	; 0x64
   17662:	483c      	ldr	r0, [pc, #240]	; (17754 <z_timer_expiration_handler+0x2f8>)
   17664:	f002 fca6 	bl	19fb4 <assert_print>
   17668:	21f0      	movs	r1, #240	; 0xf0
   1766a:	4835      	ldr	r0, [pc, #212]	; (17740 <z_timer_expiration_handler+0x2e4>)
   1766c:	f002 fc92 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   17670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17672:	663b      	str	r3, [r7, #96]	; 0x60
	__asm__ volatile(
   17674:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   17676:	f383 8811 	msr	BASEPRI, r3
   1767a:	f3bf 8f6f 	isb	sy
}
   1767e:	bf00      	nop
}
   17680:	bf00      	nop
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   17682:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17686:	6a1b      	ldr	r3, [r3, #32]
   17688:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   1768c:	4798      	blx	r3
   1768e:	4b2b      	ldr	r3, [pc, #172]	; (1773c <z_timer_expiration_handler+0x2e0>)
   17690:	67bb      	str	r3, [r7, #120]	; 0x78
	__asm__ volatile(
   17692:	f04f 0320 	mov.w	r3, #32
   17696:	f3ef 8211 	mrs	r2, BASEPRI
   1769a:	f383 8812 	msr	BASEPRI_MAX, r3
   1769e:	f3bf 8f6f 	isb	sy
   176a2:	677a      	str	r2, [r7, #116]	; 0x74
   176a4:	673b      	str	r3, [r7, #112]	; 0x70
	return key;
   176a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
	k.key = arch_irq_lock();
   176a8:	637b      	str	r3, [r7, #52]	; 0x34
   176aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   176ac:	66fb      	str	r3, [r7, #108]	; 0x6c
	__ASSERT(z_spin_lock_valid(l), "Invalid spinlock %p", l);
   176ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   176b0:	f7fc f934 	bl	1391c <z_spin_lock_valid>
   176b4:	4603      	mov	r3, r0
   176b6:	f083 0301 	eor.w	r3, r3, #1
   176ba:	b2db      	uxtb	r3, r3
   176bc:	2b00      	cmp	r3, #0
   176be:	d00d      	beq.n	176dc <z_timer_expiration_handler+0x280>
   176c0:	2372      	movs	r3, #114	; 0x72
   176c2:	4a1f      	ldr	r2, [pc, #124]	; (17740 <z_timer_expiration_handler+0x2e4>)
   176c4:	491f      	ldr	r1, [pc, #124]	; (17744 <z_timer_expiration_handler+0x2e8>)
   176c6:	4820      	ldr	r0, [pc, #128]	; (17748 <z_timer_expiration_handler+0x2ec>)
   176c8:	f002 fc74 	bl	19fb4 <assert_print>
   176cc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   176ce:	481f      	ldr	r0, [pc, #124]	; (1774c <z_timer_expiration_handler+0x2f0>)
   176d0:	f002 fc70 	bl	19fb4 <assert_print>
   176d4:	2172      	movs	r1, #114	; 0x72
   176d6:	481a      	ldr	r0, [pc, #104]	; (17740 <z_timer_expiration_handler+0x2e4>)
   176d8:	f002 fc5c 	bl	19f94 <assert_post_action>
}
   176dc:	bf00      	nop
   176de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   176e0:	66bb      	str	r3, [r7, #104]	; 0x68
	z_spin_lock_set_owner(l);
   176e2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   176e4:	f7fc f952 	bl	1398c <z_spin_lock_set_owner>
}
   176e8:	bf00      	nop
	return k;
   176ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   176ec:	647b      	str	r3, [r7, #68]	; 0x44
	if (!IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_spin_unlock(&lock, key);
		return;
	}

	thread = z_waitq_head(&timer->wait_q);
   176ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   176f2:	3318      	adds	r3, #24
   176f4:	4618      	mov	r0, r3
   176f6:	f007 ff3c 	bl	1f572 <z_waitq_head>
   176fa:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	if (thread == NULL) {
   176fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   17702:	2b00      	cmp	r3, #0
   17704:	d134      	bne.n	17770 <z_timer_expiration_handler+0x314>
   17706:	4b0d      	ldr	r3, [pc, #52]	; (1773c <z_timer_expiration_handler+0x2e0>)
   17708:	65fb      	str	r3, [r7, #92]	; 0x5c
   1770a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1770c:	63fb      	str	r3, [r7, #60]	; 0x3c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1770e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   17710:	f7fc f920 	bl	13954 <z_spin_unlock_valid>
   17714:	4603      	mov	r3, r0
   17716:	f083 0301 	eor.w	r3, r3, #1
   1771a:	b2db      	uxtb	r3, r3
   1771c:	2b00      	cmp	r3, #0
   1771e:	d01d      	beq.n	1775c <z_timer_expiration_handler+0x300>
   17720:	23f0      	movs	r3, #240	; 0xf0
   17722:	4a07      	ldr	r2, [pc, #28]	; (17740 <z_timer_expiration_handler+0x2e4>)
   17724:	490a      	ldr	r1, [pc, #40]	; (17750 <z_timer_expiration_handler+0x2f4>)
   17726:	4808      	ldr	r0, [pc, #32]	; (17748 <z_timer_expiration_handler+0x2ec>)
   17728:	f002 fc44 	bl	19fb4 <assert_print>
   1772c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1772e:	4809      	ldr	r0, [pc, #36]	; (17754 <z_timer_expiration_handler+0x2f8>)
   17730:	f002 fc40 	bl	19fb4 <assert_print>
   17734:	21f0      	movs	r1, #240	; 0xf0
   17736:	4802      	ldr	r0, [pc, #8]	; (17740 <z_timer_expiration_handler+0x2e4>)
   17738:	f002 fc2c 	bl	19f94 <assert_post_action>
   1773c:	2000ce94 	.word	0x2000ce94
   17740:	00023c58 	.word	0x00023c58
   17744:	00023c88 	.word	0x00023c88
   17748:	00023ca0 	.word	0x00023ca0
   1774c:	00023cc0 	.word	0x00023cc0
   17750:	00023cd8 	.word	0x00023cd8
   17754:	00023cf0 	.word	0x00023cf0
   17758:	0001745d 	.word	0x0001745d
	arch_irq_unlock(key.key);
   1775c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1775e:	65bb      	str	r3, [r7, #88]	; 0x58
	__asm__ volatile(
   17760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   17762:	f383 8811 	msr	BASEPRI, r3
   17766:	f3bf 8f6f 	isb	sy
}
   1776a:	bf00      	nop
}
   1776c:	bf00      	nop
		k_spin_unlock(&lock, key);
		return;
   1776e:	e035      	b.n	177dc <z_timer_expiration_handler+0x380>
	}

	z_unpend_thread_no_timeout(thread);
   17770:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   17774:	f7fd ff2a 	bl	155cc <z_unpend_thread_no_timeout>
   17778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1777c:	64fb      	str	r3, [r7, #76]	; 0x4c
   1777e:	2300      	movs	r3, #0
   17780:	64bb      	str	r3, [r7, #72]	; 0x48
	thread->arch.swap_return_value = value;
   17782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17784:	6cba      	ldr	r2, [r7, #72]	; 0x48
   17786:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
   1778a:	bf00      	nop
   1778c:	4b15      	ldr	r3, [pc, #84]	; (177e4 <z_timer_expiration_handler+0x388>)
   1778e:	657b      	str	r3, [r7, #84]	; 0x54
   17790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17792:	643b      	str	r3, [r7, #64]	; 0x40
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17794:	6d78      	ldr	r0, [r7, #84]	; 0x54
   17796:	f7fc f8dd 	bl	13954 <z_spin_unlock_valid>
   1779a:	4603      	mov	r3, r0
   1779c:	f083 0301 	eor.w	r3, r3, #1
   177a0:	b2db      	uxtb	r3, r3
   177a2:	2b00      	cmp	r3, #0
   177a4:	d00d      	beq.n	177c2 <z_timer_expiration_handler+0x366>
   177a6:	23f0      	movs	r3, #240	; 0xf0
   177a8:	4a0f      	ldr	r2, [pc, #60]	; (177e8 <z_timer_expiration_handler+0x38c>)
   177aa:	4910      	ldr	r1, [pc, #64]	; (177ec <z_timer_expiration_handler+0x390>)
   177ac:	4810      	ldr	r0, [pc, #64]	; (177f0 <z_timer_expiration_handler+0x394>)
   177ae:	f002 fc01 	bl	19fb4 <assert_print>
   177b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
   177b4:	480f      	ldr	r0, [pc, #60]	; (177f4 <z_timer_expiration_handler+0x398>)
   177b6:	f002 fbfd 	bl	19fb4 <assert_print>
   177ba:	21f0      	movs	r1, #240	; 0xf0
   177bc:	480a      	ldr	r0, [pc, #40]	; (177e8 <z_timer_expiration_handler+0x38c>)
   177be:	f002 fbe9 	bl	19f94 <assert_post_action>
	arch_irq_unlock(key.key);
   177c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   177c4:	653b      	str	r3, [r7, #80]	; 0x50
	__asm__ volatile(
   177c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   177c8:	f383 8811 	msr	BASEPRI, r3
   177cc:	f3bf 8f6f 	isb	sy
}
   177d0:	bf00      	nop
}
   177d2:	bf00      	nop

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   177d4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   177d8:	f7fd fc58 	bl	1508c <z_ready_thread>
}
   177dc:	37a0      	adds	r7, #160	; 0xa0
   177de:	46bd      	mov	sp, r7
   177e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
   177e4:	2000ce94 	.word	0x2000ce94
   177e8:	00023c58 	.word	0x00023c58
   177ec:	00023cd8 	.word	0x00023cd8
   177f0:	00023ca0 	.word	0x00023ca0
   177f4:	00023cf0 	.word	0x00023cf0

000177f8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   177f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   177fc:	b084      	sub	sp, #16
   177fe:	af00      	add	r7, sp, #0
   17800:	60f8      	str	r0, [r7, #12]
   17802:	e9c7 2300 	strd	r2, r3, [r7]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   17806:	e9d7 2300 	ldrd	r2, r3, [r7]
   1780a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1780e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17812:	428b      	cmp	r3, r1
   17814:	bf08      	it	eq
   17816:	4282      	cmpeq	r2, r0
   17818:	d100      	bne.n	1781c <z_impl_k_timer_start+0x24>
   1781a:	e02d      	b.n	17878 <z_impl_k_timer_start+0x80>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1781c:	e9d7 2300 	ldrd	r2, r3, [r7]
   17820:	f06f 0001 	mvn.w	r0, #1
   17824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17828:	ebb0 0802 	subs.w	r8, r0, r2
   1782c:	eb61 0903 	sbc.w	r9, r1, r3
   17830:	f1b9 0f00 	cmp.w	r9, #0
   17834:	da0e      	bge.n	17854 <z_impl_k_timer_start+0x5c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   17836:	e9d7 2300 	ldrd	r2, r3, [r7]
   1783a:	2a01      	cmp	r2, #1
   1783c:	f173 0100 	sbcs.w	r1, r3, #0
   17840:	da03      	bge.n	1784a <z_impl_k_timer_start+0x52>
   17842:	f04f 0201 	mov.w	r2, #1
   17846:	f04f 0300 	mov.w	r3, #0
   1784a:	1e54      	subs	r4, r2, #1
   1784c:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
   17850:	e9c7 4500 	strd	r4, r5, [r7]
	}

	(void)z_abort_timeout(&timer->timeout);
   17854:	68fb      	ldr	r3, [r7, #12]
   17856:	4618      	mov	r0, r3
   17858:	f7ff fb7c 	bl	16f54 <z_abort_timeout>
	timer->period = period;
   1785c:	68f9      	ldr	r1, [r7, #12]
   1785e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   17862:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	timer->status = 0U;
   17866:	68fb      	ldr	r3, [r7, #12]
   17868:	2200      	movs	r2, #0
   1786a:	631a      	str	r2, [r3, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1786c:	68f8      	ldr	r0, [r7, #12]
   1786e:	e9d7 2300 	ldrd	r2, r3, [r7]
   17872:	4903      	ldr	r1, [pc, #12]	; (17880 <z_impl_k_timer_start+0x88>)
   17874:	f7ff fa12 	bl	16c9c <z_add_timeout>
		     duration);
}
   17878:	3710      	adds	r7, #16
   1787a:	46bd      	mov	sp, r7
   1787c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   17880:	0001745d 	.word	0x0001745d

00017884 <k_thread_system_pool_assign>:

	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
   17884:	b480      	push	{r7}
   17886:	b083      	sub	sp, #12
   17888:	af00      	add	r7, sp, #0
   1788a:	6078      	str	r0, [r7, #4]
	thread->resource_pool = _SYSTEM_HEAP;
   1788c:	687b      	ldr	r3, [r7, #4]
   1788e:	4a04      	ldr	r2, [pc, #16]	; (178a0 <k_thread_system_pool_assign+0x1c>)
   17890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
   17894:	bf00      	nop
   17896:	370c      	adds	r7, #12
   17898:	46bd      	mov	sp, r7
   1789a:	bc80      	pop	{r7}
   1789c:	4770      	bx	lr
   1789e:	bf00      	nop
   178a0:	2000c73c 	.word	0x2000c73c

000178a4 <strtol>:
   178a4:	2a24      	cmp	r2, #36	; 0x24
   178a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178aa:	4604      	mov	r4, r0
   178ac:	d801      	bhi.n	178b2 <strtol+0xe>
   178ae:	2a01      	cmp	r2, #1
   178b0:	d148      	bne.n	17944 <strtol+0xa0>
   178b2:	4b33      	ldr	r3, [pc, #204]	; (17980 <strtol+0xdc>)
   178b4:	2216      	movs	r2, #22
   178b6:	f008 f827 	bl	1f908 <__aeabi_read_tp>
   178ba:	501a      	str	r2, [r3, r0]
   178bc:	b101      	cbz	r1, 178c0 <strtol+0x1c>
   178be:	600c      	str	r4, [r1, #0]
   178c0:	2500      	movs	r5, #0
   178c2:	4628      	mov	r0, r5
   178c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178c8:	4605      	mov	r5, r0
   178ca:	4628      	mov	r0, r5
   178cc:	f810 3b01 	ldrb.w	r3, [r0], #1
   178d0:	f1a3 0609 	sub.w	r6, r3, #9
   178d4:	2e04      	cmp	r6, #4
   178d6:	d9f7      	bls.n	178c8 <strtol+0x24>
   178d8:	2b20      	cmp	r3, #32
   178da:	d0f5      	beq.n	178c8 <strtol+0x24>
   178dc:	2b2b      	cmp	r3, #43	; 0x2b
   178de:	d033      	beq.n	17948 <strtol+0xa4>
   178e0:	2b2d      	cmp	r3, #45	; 0x2d
   178e2:	d035      	beq.n	17950 <strtol+0xac>
   178e4:	2600      	movs	r6, #0
   178e6:	2b30      	cmp	r3, #48	; 0x30
   178e8:	d138      	bne.n	1795c <strtol+0xb8>
   178ea:	7805      	ldrb	r5, [r0, #0]
   178ec:	f045 0520 	orr.w	r5, r5, #32
   178f0:	2d78      	cmp	r5, #120	; 0x78
   178f2:	d12f      	bne.n	17954 <strtol+0xb0>
   178f4:	f032 0510 	bics.w	r5, r2, #16
   178f8:	d12c      	bne.n	17954 <strtol+0xb0>
   178fa:	7843      	ldrb	r3, [r0, #1]
   178fc:	4604      	mov	r4, r0
   178fe:	2210      	movs	r2, #16
   17900:	3002      	adds	r0, #2
   17902:	f106 4700 	add.w	r7, r6, #2147483648	; 0x80000000
   17906:	2500      	movs	r5, #0
   17908:	3f01      	subs	r7, #1
   1790a:	fbb7 fef2 	udiv	lr, r7, r2
   1790e:	fb02 781e 	mls	r8, r2, lr, r7
   17912:	2b39      	cmp	r3, #57	; 0x39
   17914:	bf82      	ittt	hi
   17916:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   1791a:	f043 0320 	orrhi.w	r3, r3, #32
   1791e:	3b26      	subhi	r3, #38	; 0x26
   17920:	3b30      	subs	r3, #48	; 0x30
   17922:	429a      	cmp	r2, r3
   17924:	d91e      	bls.n	17964 <strtol+0xc0>
   17926:	4575      	cmp	r5, lr
   17928:	dc02      	bgt.n	17930 <strtol+0x8c>
   1792a:	d103      	bne.n	17934 <strtol+0x90>
   1792c:	4598      	cmp	r8, r3
   1792e:	d201      	bcs.n	17934 <strtol+0x90>
   17930:	f046 0602 	orr.w	r6, r6, #2
   17934:	4684      	mov	ip, r0
   17936:	fb05 3502 	mla	r5, r5, r2, r3
   1793a:	4604      	mov	r4, r0
   1793c:	f81c 3b01 	ldrb.w	r3, [ip], #1
   17940:	4660      	mov	r0, ip
   17942:	e7e6      	b.n	17912 <strtol+0x6e>
   17944:	4605      	mov	r5, r0
   17946:	e7c0      	b.n	178ca <strtol+0x26>
   17948:	2600      	movs	r6, #0
   1794a:	1ca8      	adds	r0, r5, #2
   1794c:	786b      	ldrb	r3, [r5, #1]
   1794e:	e7ca      	b.n	178e6 <strtol+0x42>
   17950:	2601      	movs	r6, #1
   17952:	e7fa      	b.n	1794a <strtol+0xa6>
   17954:	2a00      	cmp	r2, #0
   17956:	bf08      	it	eq
   17958:	2208      	moveq	r2, #8
   1795a:	e7d2      	b.n	17902 <strtol+0x5e>
   1795c:	2a00      	cmp	r2, #0
   1795e:	bf08      	it	eq
   17960:	220a      	moveq	r2, #10
   17962:	e7ce      	b.n	17902 <strtol+0x5e>
   17964:	b101      	cbz	r1, 17968 <strtol+0xc4>
   17966:	600c      	str	r4, [r1, #0]
   17968:	07f2      	lsls	r2, r6, #31
   1796a:	bf48      	it	mi
   1796c:	426d      	negmi	r5, r5
   1796e:	07b3      	lsls	r3, r6, #30
   17970:	d5a7      	bpl.n	178c2 <strtol+0x1e>
   17972:	4b03      	ldr	r3, [pc, #12]	; (17980 <strtol+0xdc>)
   17974:	2222      	movs	r2, #34	; 0x22
   17976:	f007 ffc7 	bl	1f908 <__aeabi_read_tp>
   1797a:	463d      	mov	r5, r7
   1797c:	501a      	str	r2, [r3, r0]
   1797e:	e7a0      	b.n	178c2 <strtol+0x1e>
   17980:	0000000c 	.word	0x0000000c

00017984 <skip_to_arg>:
   17984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17988:	2601      	movs	r6, #1
   1798a:	4607      	mov	r7, r0
   1798c:	42b2      	cmp	r2, r6
   1798e:	dc01      	bgt.n	17994 <skip_to_arg+0x10>
   17990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17994:	463b      	mov	r3, r7
   17996:	461f      	mov	r7, r3
   17998:	f813 4b01 	ldrb.w	r4, [r3], #1
   1799c:	2c00      	cmp	r4, #0
   1799e:	d0f7      	beq.n	17990 <skip_to_arg+0xc>
   179a0:	2c25      	cmp	r4, #37	; 0x25
   179a2:	d1f8      	bne.n	17996 <skip_to_arg+0x12>
   179a4:	781c      	ldrb	r4, [r3, #0]
   179a6:	3702      	adds	r7, #2
   179a8:	2c25      	cmp	r4, #37	; 0x25
   179aa:	d0f3      	beq.n	17994 <skip_to_arg+0x10>
   179ac:	2300      	movs	r3, #0
   179ae:	f8df 8104 	ldr.w	r8, [pc, #260]	; 17ab4 <skip_to_arg+0x130>
   179b2:	469c      	mov	ip, r3
   179b4:	461d      	mov	r5, r3
   179b6:	2d1f      	cmp	r5, #31
   179b8:	d818      	bhi.n	179ec <skip_to_arg+0x68>
   179ba:	f1a4 0e20 	sub.w	lr, r4, #32
   179be:	f1be 0f10 	cmp.w	lr, #16
   179c2:	d909      	bls.n	179d8 <skip_to_arg+0x54>
   179c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   179c8:	f1be 0f09 	cmp.w	lr, #9
   179cc:	d81e      	bhi.n	17a0c <skip_to_arg+0x88>
   179ce:	240a      	movs	r4, #10
   179d0:	2520      	movs	r5, #32
   179d2:	fb04 e303 	mla	r3, r4, r3, lr
   179d6:	e004      	b.n	179e2 <skip_to_arg+0x5e>
   179d8:	fa28 fe0e 	lsr.w	lr, r8, lr
   179dc:	f01e 0f01 	tst.w	lr, #1
   179e0:	d006      	beq.n	179f0 <skip_to_arg+0x6c>
   179e2:	f817 4b01 	ldrb.w	r4, [r7], #1
   179e6:	2c00      	cmp	r4, #0
   179e8:	d1e5      	bne.n	179b6 <skip_to_arg+0x32>
   179ea:	e028      	b.n	17a3e <skip_to_arg+0xba>
   179ec:	2d7f      	cmp	r5, #127	; 0x7f
   179ee:	d81c      	bhi.n	17a2a <skip_to_arg+0xa6>
   179f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   179f4:	f1be 0f09 	cmp.w	lr, #9
   179f8:	d9e9      	bls.n	179ce <skip_to_arg+0x4a>
   179fa:	2c24      	cmp	r4, #36	; 0x24
   179fc:	d110      	bne.n	17a20 <skip_to_arg+0x9c>
   179fe:	f1bc 0f00 	cmp.w	ip, #0
   17a02:	d046      	beq.n	17a92 <skip_to_arg+0x10e>
   17a04:	42b3      	cmp	r3, r6
   17a06:	d046      	beq.n	17a96 <skip_to_arg+0x112>
   17a08:	2300      	movs	r3, #0
   17a0a:	e7ea      	b.n	179e2 <skip_to_arg+0x5e>
   17a0c:	f024 0e04 	bic.w	lr, r4, #4
   17a10:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
   17a14:	d0f8      	beq.n	17a08 <skip_to_arg+0x84>
   17a16:	2c6c      	cmp	r4, #108	; 0x6c
   17a18:	d109      	bne.n	17a2e <skip_to_arg+0xaa>
   17a1a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   17a1e:	e7e0      	b.n	179e2 <skip_to_arg+0x5e>
   17a20:	f024 0e04 	bic.w	lr, r4, #4
   17a24:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
   17a28:	d0ee      	beq.n	17a08 <skip_to_arg+0x84>
   17a2a:	2c6c      	cmp	r4, #108	; 0x6c
   17a2c:	d022      	beq.n	17a74 <skip_to_arg+0xf0>
   17a2e:	2c6c      	cmp	r4, #108	; 0x6c
   17a30:	d81b      	bhi.n	17a6a <skip_to_arg+0xe6>
   17a32:	2c68      	cmp	r4, #104	; 0x68
   17a34:	d023      	beq.n	17a7e <skip_to_arg+0xfa>
   17a36:	2c6a      	cmp	r4, #106	; 0x6a
   17a38:	d028      	beq.n	17a8c <skip_to_arg+0x108>
   17a3a:	2c4c      	cmp	r4, #76	; 0x4c
   17a3c:	d026      	beq.n	17a8c <skip_to_arg+0x108>
   17a3e:	f1bc 0f00 	cmp.w	ip, #0
   17a42:	d0a5      	beq.n	17990 <skip_to_arg+0xc>
   17a44:	45b4      	cmp	ip, r6
   17a46:	d1a1      	bne.n	1798c <skip_to_arg+0x8>
   17a48:	f044 0720 	orr.w	r7, r4, #32
   17a4c:	680b      	ldr	r3, [r1, #0]
   17a4e:	f1a7 0c65 	sub.w	ip, r7, #101	; 0x65
   17a52:	f1bc 0f02 	cmp.w	ip, #2
   17a56:	d901      	bls.n	17a5c <skip_to_arg+0xd8>
   17a58:	2f61      	cmp	r7, #97	; 0x61
   17a5a:	d11e      	bne.n	17a9a <skip_to_arg+0x116>
   17a5c:	3307      	adds	r3, #7
   17a5e:	f023 0307 	bic.w	r3, r3, #7
   17a62:	3308      	adds	r3, #8
   17a64:	3601      	adds	r6, #1
   17a66:	600b      	str	r3, [r1, #0]
   17a68:	e78f      	b.n	1798a <skip_to_arg+0x6>
   17a6a:	2c74      	cmp	r4, #116	; 0x74
   17a6c:	d0b9      	beq.n	179e2 <skip_to_arg+0x5e>
   17a6e:	2c7a      	cmp	r4, #122	; 0x7a
   17a70:	d0b7      	beq.n	179e2 <skip_to_arg+0x5e>
   17a72:	e7e4      	b.n	17a3e <skip_to_arg+0xba>
   17a74:	062c      	lsls	r4, r5, #24
   17a76:	bf48      	it	mi
   17a78:	f445 7500 	orrmi.w	r5, r5, #512	; 0x200
   17a7c:	e7cd      	b.n	17a1a <skip_to_arg+0x96>
   17a7e:	05ec      	lsls	r4, r5, #23
   17a80:	bf48      	it	mi
   17a82:	f445 7500 	orrmi.w	r5, r5, #512	; 0x200
   17a86:	f445 7580 	orr.w	r5, r5, #256	; 0x100
   17a8a:	e7aa      	b.n	179e2 <skip_to_arg+0x5e>
   17a8c:	f445 7520 	orr.w	r5, r5, #640	; 0x280
   17a90:	e7a7      	b.n	179e2 <skip_to_arg+0x5e>
   17a92:	469c      	mov	ip, r3
   17a94:	e7b8      	b.n	17a08 <skip_to_arg+0x84>
   17a96:	2463      	movs	r4, #99	; 0x63
   17a98:	e7d6      	b.n	17a48 <skip_to_arg+0xc4>
   17a9a:	2c69      	cmp	r4, #105	; 0x69
   17a9c:	d002      	beq.n	17aa4 <skip_to_arg+0x120>
   17a9e:	d807      	bhi.n	17ab0 <skip_to_arg+0x12c>
   17aa0:	2c63      	cmp	r4, #99	; 0x63
   17aa2:	d003      	beq.n	17aac <skip_to_arg+0x128>
   17aa4:	062f      	lsls	r7, r5, #24
   17aa6:	d501      	bpl.n	17aac <skip_to_arg+0x128>
   17aa8:	05ac      	lsls	r4, r5, #22
   17aaa:	d4d7      	bmi.n	17a5c <skip_to_arg+0xd8>
   17aac:	3304      	adds	r3, #4
   17aae:	e7d9      	b.n	17a64 <skip_to_arg+0xe0>
   17ab0:	2c73      	cmp	r4, #115	; 0x73
   17ab2:	e7f6      	b.n	17aa2 <skip_to_arg+0x11e>
   17ab4:	00012889 	.word	0x00012889

00017ab8 <__d_vfprintf>:
   17ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17abc:	6843      	ldr	r3, [r0, #4]
   17abe:	b095      	sub	sp, #84	; 0x54
   17ac0:	4680      	mov	r8, r0
   17ac2:	9303      	str	r3, [sp, #12]
   17ac4:	7883      	ldrb	r3, [r0, #2]
   17ac6:	079b      	lsls	r3, r3, #30
   17ac8:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
   17acc:	d510      	bpl.n	17af0 <__d_vfprintf+0x38>
   17ace:	460b      	mov	r3, r1
   17ad0:	2600      	movs	r6, #0
   17ad2:	920d      	str	r2, [sp, #52]	; 0x34
   17ad4:	781f      	ldrb	r7, [r3, #0]
   17ad6:	b16f      	cbz	r7, 17af4 <__d_vfprintf+0x3c>
   17ad8:	2f25      	cmp	r7, #37	; 0x25
   17ada:	d00f      	beq.n	17afc <__d_vfprintf+0x44>
   17adc:	3301      	adds	r3, #1
   17ade:	9309      	str	r3, [sp, #36]	; 0x24
   17ae0:	4641      	mov	r1, r8
   17ae2:	4638      	mov	r0, r7
   17ae4:	9b03      	ldr	r3, [sp, #12]
   17ae6:	3601      	adds	r6, #1
   17ae8:	4798      	blx	r3
   17aea:	2800      	cmp	r0, #0
   17aec:	f280 8526 	bge.w	1853c <__d_vfprintf+0xa84>
   17af0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   17af4:	4630      	mov	r0, r6
   17af6:	b015      	add	sp, #84	; 0x54
   17af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17afc:	785f      	ldrb	r7, [r3, #1]
   17afe:	1c9a      	adds	r2, r3, #2
   17b00:	2f25      	cmp	r7, #37	; 0x25
   17b02:	9209      	str	r2, [sp, #36]	; 0x24
   17b04:	d0ec      	beq.n	17ae0 <__d_vfprintf+0x28>
   17b06:	2400      	movs	r4, #0
   17b08:	4625      	mov	r5, r4
   17b0a:	46a2      	mov	sl, r4
   17b0c:	46a3      	mov	fp, r4
   17b0e:	f1bb 0f1f 	cmp.w	fp, #31
   17b12:	d832      	bhi.n	17b7a <__d_vfprintf+0xc2>
   17b14:	f1a7 0320 	sub.w	r3, r7, #32
   17b18:	2b10      	cmp	r3, #16
   17b1a:	d80a      	bhi.n	17b32 <__d_vfprintf+0x7a>
   17b1c:	e8df f003 	tbb	[pc, r3]
   17b20:	2a090924 	.word	0x2a090924
   17b24:	1b090909 	.word	0x1b090909
   17b28:	22090909 	.word	0x22090909
   17b2c:	09092709 	.word	0x09092709
   17b30:	19          	.byte	0x19
   17b31:	00          	.byte	0x00
   17b32:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
   17b36:	2b09      	cmp	r3, #9
   17b38:	d92d      	bls.n	17b96 <__d_vfprintf+0xde>
   17b3a:	2f2a      	cmp	r7, #42	; 0x2a
   17b3c:	d139      	bne.n	17bb2 <__d_vfprintf+0xfa>
   17b3e:	b954      	cbnz	r4, 17b56 <__d_vfprintf+0x9e>
   17b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17b42:	f01b 0f40 	tst.w	fp, #64	; 0x40
   17b46:	f853 2b04 	ldr.w	r2, [r3], #4
   17b4a:	930d      	str	r3, [sp, #52]	; 0x34
   17b4c:	d029      	beq.n	17ba2 <__d_vfprintf+0xea>
   17b4e:	4615      	mov	r5, r2
   17b50:	e001      	b.n	17b56 <__d_vfprintf+0x9e>
   17b52:	f04b 0b01 	orr.w	fp, fp, #1
   17b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17b58:	f813 7b01 	ldrb.w	r7, [r3], #1
   17b5c:	9309      	str	r3, [sp, #36]	; 0x24
   17b5e:	2f00      	cmp	r7, #0
   17b60:	d1d5      	bne.n	17b0e <__d_vfprintf+0x56>
   17b62:	e056      	b.n	17c12 <__d_vfprintf+0x15a>
   17b64:	f04b 0b02 	orr.w	fp, fp, #2
   17b68:	f04b 0b04 	orr.w	fp, fp, #4
   17b6c:	e7f3      	b.n	17b56 <__d_vfprintf+0x9e>
   17b6e:	f04b 0b08 	orr.w	fp, fp, #8
   17b72:	e7f0      	b.n	17b56 <__d_vfprintf+0x9e>
   17b74:	f04b 0b10 	orr.w	fp, fp, #16
   17b78:	e7ed      	b.n	17b56 <__d_vfprintf+0x9e>
   17b7a:	f1bb 0f7f 	cmp.w	fp, #127	; 0x7f
   17b7e:	d83f      	bhi.n	17c00 <__d_vfprintf+0x148>
   17b80:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
   17b84:	2b09      	cmp	r3, #9
   17b86:	d8d8      	bhi.n	17b3a <__d_vfprintf+0x82>
   17b88:	f01b 0f40 	tst.w	fp, #64	; 0x40
   17b8c:	d003      	beq.n	17b96 <__d_vfprintf+0xde>
   17b8e:	220a      	movs	r2, #10
   17b90:	fb02 3505 	mla	r5, r2, r5, r3
   17b94:	e7df      	b.n	17b56 <__d_vfprintf+0x9e>
   17b96:	220a      	movs	r2, #10
   17b98:	fb02 3a0a 	mla	sl, r2, sl, r3
   17b9c:	f04b 0b20 	orr.w	fp, fp, #32
   17ba0:	e7d9      	b.n	17b56 <__d_vfprintf+0x9e>
   17ba2:	f1b2 0a00 	subs.w	sl, r2, #0
   17ba6:	daf9      	bge.n	17b9c <__d_vfprintf+0xe4>
   17ba8:	f1ca 0a00 	rsb	sl, sl, #0
   17bac:	f04b 0b28 	orr.w	fp, fp, #40	; 0x28
   17bb0:	e7d1      	b.n	17b56 <__d_vfprintf+0x9e>
   17bb2:	2f2e      	cmp	r7, #46	; 0x2e
   17bb4:	d105      	bne.n	17bc2 <__d_vfprintf+0x10a>
   17bb6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   17bba:	d19b      	bne.n	17af4 <__d_vfprintf+0x3c>
   17bbc:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   17bc0:	e7c9      	b.n	17b56 <__d_vfprintf+0x9e>
   17bc2:	2f24      	cmp	r7, #36	; 0x24
   17bc4:	d11c      	bne.n	17c00 <__d_vfprintf+0x148>
   17bc6:	2c00      	cmp	r4, #0
   17bc8:	f000 8089 	beq.w	17cde <__d_vfprintf+0x226>
   17bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17bce:	f01b 0f40 	tst.w	fp, #64	; 0x40
   17bd2:	930d      	str	r3, [sp, #52]	; 0x34
   17bd4:	d10a      	bne.n	17bec <__d_vfprintf+0x134>
   17bd6:	4652      	mov	r2, sl
   17bd8:	a90d      	add	r1, sp, #52	; 0x34
   17bda:	980a      	ldr	r0, [sp, #40]	; 0x28
   17bdc:	f7ff fed2 	bl	17984 <skip_to_arg>
   17be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17be2:	1d1a      	adds	r2, r3, #4
   17be4:	f8d3 a000 	ldr.w	sl, [r3]
   17be8:	920d      	str	r2, [sp, #52]	; 0x34
   17bea:	e7b4      	b.n	17b56 <__d_vfprintf+0x9e>
   17bec:	462a      	mov	r2, r5
   17bee:	a90d      	add	r1, sp, #52	; 0x34
   17bf0:	980a      	ldr	r0, [sp, #40]	; 0x28
   17bf2:	f7ff fec7 	bl	17984 <skip_to_arg>
   17bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17bf8:	1d1a      	adds	r2, r3, #4
   17bfa:	681d      	ldr	r5, [r3, #0]
   17bfc:	920d      	str	r2, [sp, #52]	; 0x34
   17bfe:	e7aa      	b.n	17b56 <__d_vfprintf+0x9e>
   17c00:	2f6c      	cmp	r7, #108	; 0x6c
   17c02:	d059      	beq.n	17cb8 <__d_vfprintf+0x200>
   17c04:	d851      	bhi.n	17caa <__d_vfprintf+0x1f2>
   17c06:	2f68      	cmp	r7, #104	; 0x68
   17c08:	d05e      	beq.n	17cc8 <__d_vfprintf+0x210>
   17c0a:	2f6a      	cmp	r7, #106	; 0x6a
   17c0c:	d064      	beq.n	17cd8 <__d_vfprintf+0x220>
   17c0e:	2f4c      	cmp	r7, #76	; 0x4c
   17c10:	d062      	beq.n	17cd8 <__d_vfprintf+0x220>
   17c12:	b134      	cbz	r4, 17c22 <__d_vfprintf+0x16a>
   17c14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17c16:	4622      	mov	r2, r4
   17c18:	a90d      	add	r1, sp, #52	; 0x34
   17c1a:	980a      	ldr	r0, [sp, #40]	; 0x28
   17c1c:	930d      	str	r3, [sp, #52]	; 0x34
   17c1e:	f7ff feb1 	bl	17984 <skip_to_arg>
   17c22:	2d00      	cmp	r5, #0
   17c24:	f047 0320 	orr.w	r3, r7, #32
   17c28:	bfb8      	it	lt
   17c2a:	f02b 0b40 	biclt.w	fp, fp, #64	; 0x40
   17c2e:	9307      	str	r3, [sp, #28]
   17c30:	f1a3 0365 	sub.w	r3, r3, #101	; 0x65
   17c34:	bfbc      	itt	lt
   17c36:	2500      	movlt	r5, #0
   17c38:	fa1f fb8b 	uxthlt.w	fp, fp
   17c3c:	2b02      	cmp	r3, #2
   17c3e:	d953      	bls.n	17ce8 <__d_vfprintf+0x230>
   17c40:	f047 0320 	orr.w	r3, r7, #32
   17c44:	2b61      	cmp	r3, #97	; 0x61
   17c46:	f040 835b 	bne.w	18300 <__d_vfprintf+0x848>
   17c4a:	43ff      	mvns	r7, r7
   17c4c:	f007 0320 	and.w	r3, r7, #32
   17c50:	9308      	str	r3, [sp, #32]
   17c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17c54:	3307      	adds	r3, #7
   17c56:	f023 0307 	bic.w	r3, r3, #7
   17c5a:	f103 0208 	add.w	r2, r3, #8
   17c5e:	920d      	str	r2, [sp, #52]	; 0x34
   17c60:	f44b 52c0 	orr.w	r2, fp, #6144	; 0x1800
   17c64:	9204      	str	r2, [sp, #16]
   17c66:	681a      	ldr	r2, [r3, #0]
   17c68:	9205      	str	r2, [sp, #20]
   17c6a:	685a      	ldr	r2, [r3, #4]
   17c6c:	f8dd c014 	ldr.w	ip, [sp, #20]
   17c70:	f3c2 570a 	ubfx	r7, r2, #20, #11
   17c74:	f3c2 0013 	ubfx	r0, r2, #0, #20
   17c78:	0fd2      	lsrs	r2, r2, #31
   17c7a:	ea47 030c 	orr.w	r3, r7, ip
   17c7e:	4601      	mov	r1, r0
   17c80:	ea53 0400 	orrs.w	r4, r3, r0
   17c84:	f00b 0440 	and.w	r4, fp, #64	; 0x40
   17c88:	d159      	bne.n	17d3e <__d_vfprintf+0x286>
   17c8a:	2730      	movs	r7, #48	; 0x30
   17c8c:	b2d2      	uxtb	r2, r2
   17c8e:	f88d 703d 	strb.w	r7, [sp, #61]	; 0x3d
   17c92:	b2a7      	uxth	r7, r4
   17c94:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   17c98:	2c00      	cmp	r4, #0
   17c9a:	f000 81be 	beq.w	1801a <__d_vfprintf+0x562>
   17c9e:	2d0c      	cmp	r5, #12
   17ca0:	f04f 0700 	mov.w	r7, #0
   17ca4:	dd5d      	ble.n	17d62 <__d_vfprintf+0x2aa>
   17ca6:	250d      	movs	r5, #13
   17ca8:	e0b3      	b.n	17e12 <__d_vfprintf+0x35a>
   17caa:	2f74      	cmp	r7, #116	; 0x74
   17cac:	f43f af53 	beq.w	17b56 <__d_vfprintf+0x9e>
   17cb0:	2f7a      	cmp	r7, #122	; 0x7a
   17cb2:	f43f af50 	beq.w	17b56 <__d_vfprintf+0x9e>
   17cb6:	e7ac      	b.n	17c12 <__d_vfprintf+0x15a>
   17cb8:	f01b 0f80 	tst.w	fp, #128	; 0x80
   17cbc:	bf18      	it	ne
   17cbe:	f44b 7b00 	orrne.w	fp, fp, #512	; 0x200
   17cc2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   17cc6:	e746      	b.n	17b56 <__d_vfprintf+0x9e>
   17cc8:	f41b 7f80 	tst.w	fp, #256	; 0x100
   17ccc:	bf18      	it	ne
   17cce:	f44b 7b00 	orrne.w	fp, fp, #512	; 0x200
   17cd2:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
   17cd6:	e73e      	b.n	17b56 <__d_vfprintf+0x9e>
   17cd8:	f44b 7b20 	orr.w	fp, fp, #640	; 0x280
   17cdc:	e73b      	b.n	17b56 <__d_vfprintf+0x9e>
   17cde:	4625      	mov	r5, r4
   17ce0:	4654      	mov	r4, sl
   17ce2:	46ab      	mov	fp, r5
   17ce4:	46aa      	mov	sl, r5
   17ce6:	e736      	b.n	17b56 <__d_vfprintf+0x9e>
   17ce8:	43ff      	mvns	r7, r7
   17cea:	f01b 0f40 	tst.w	fp, #64	; 0x40
   17cee:	f007 0320 	and.w	r3, r7, #32
   17cf2:	bf08      	it	eq
   17cf4:	2506      	moveq	r5, #6
   17cf6:	9308      	str	r3, [sp, #32]
   17cf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17cfa:	3307      	adds	r3, #7
   17cfc:	f023 0307 	bic.w	r3, r3, #7
   17d00:	f103 0208 	add.w	r2, r3, #8
   17d04:	e9d3 0100 	ldrd	r0, r1, [r3]
   17d08:	9b07      	ldr	r3, [sp, #28]
   17d0a:	920d      	str	r2, [sp, #52]	; 0x34
   17d0c:	2b65      	cmp	r3, #101	; 0x65
   17d0e:	f040 8198 	bne.w	18042 <__d_vfprintf+0x58a>
   17d12:	1c6b      	adds	r3, r5, #1
   17d14:	2200      	movs	r2, #0
   17d16:	f44b 5b80 	orr.w	fp, fp, #4096	; 0x1000
   17d1a:	b2db      	uxtb	r3, r3
   17d1c:	4614      	mov	r4, r2
   17d1e:	2b11      	cmp	r3, #17
   17d20:	e9cd 2400 	strd	r2, r4, [sp]
   17d24:	bf28      	it	cs
   17d26:	2311      	movcs	r3, #17
   17d28:	aa0e      	add	r2, sp, #56	; 0x38
   17d2a:	f000 fccf 	bl	186cc <__dtoa_engine>
   17d2e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   17d30:	b2c3      	uxtb	r3, r0
   17d32:	f8cd b010 	str.w	fp, [sp, #16]
   17d36:	9305      	str	r3, [sp, #20]
   17d38:	2302      	movs	r3, #2
   17d3a:	9306      	str	r3, [sp, #24]
   17d3c:	e081      	b.n	17e42 <__d_vfprintf+0x38a>
   17d3e:	2f00      	cmp	r7, #0
   17d40:	f000 813a 	beq.w	17fb8 <__d_vfprintf+0x500>
   17d44:	2331      	movs	r3, #49	; 0x31
   17d46:	b2d2      	uxtb	r2, r2
   17d48:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   17d4c:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   17d50:	b2a3      	uxth	r3, r4
   17d52:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   17d56:	2c00      	cmp	r4, #0
   17d58:	f000 8156 	beq.w	18008 <__d_vfprintf+0x550>
   17d5c:	2d0c      	cmp	r5, #12
   17d5e:	f300 8155 	bgt.w	1800c <__d_vfprintf+0x554>
   17d62:	f1c5 010d 	rsb	r1, r5, #13
   17d66:	2301      	movs	r3, #1
   17d68:	0089      	lsls	r1, r1, #2
   17d6a:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
   17d6e:	f1a1 0421 	sub.w	r4, r1, #33	; 0x21
   17d72:	f1c1 0e21 	rsb	lr, r1, #33	; 0x21
   17d76:	fa03 f404 	lsl.w	r4, r3, r4
   17d7a:	fa23 fe0e 	lsr.w	lr, r3, lr
   17d7e:	fa03 f309 	lsl.w	r3, r3, r9
   17d82:	ea44 040e 	orr.w	r4, r4, lr
   17d86:	eb13 0e03 	adds.w	lr, r3, r3
   17d8a:	eb44 0904 	adc.w	r9, r4, r4
   17d8e:	f1de 0b00 	rsbs	fp, lr, #0
   17d92:	f8cd b018 	str.w	fp, [sp, #24]
   17d96:	eb69 0b49 	sbc.w	fp, r9, r9, lsl #1
   17d9a:	f11e 3eff 	adds.w	lr, lr, #4294967295	; 0xffffffff
   17d9e:	f8cd b01c 	str.w	fp, [sp, #28]
   17da2:	f8dd b014 	ldr.w	fp, [sp, #20]
   17da6:	f149 39ff 	adc.w	r9, r9, #4294967295	; 0xffffffff
   17daa:	ea0e 0e0b 	and.w	lr, lr, fp
   17dae:	ea09 0900 	and.w	r9, r9, r0
   17db2:	4573      	cmp	r3, lr
   17db4:	eb74 0909 	sbcs.w	r9, r4, r9
   17db8:	db13      	blt.n	17de2 <__d_vfprintf+0x32a>
   17dba:	f1c1 0920 	rsb	r9, r1, #32
   17dbe:	f1b1 0e20 	subs.w	lr, r1, #32
   17dc2:	fa2b f101 	lsr.w	r1, fp, r1
   17dc6:	fa00 f909 	lsl.w	r9, r0, r9
   17dca:	bf58      	it	pl
   17dcc:	fa40 fe0e 	asrpl.w	lr, r0, lr
   17dd0:	ea41 0109 	orr.w	r1, r1, r9
   17dd4:	bf58      	it	pl
   17dd6:	ea41 010e 	orrpl.w	r1, r1, lr
   17dda:	f011 0f01 	tst.w	r1, #1
   17dde:	f000 80ee 	beq.w	17fbe <__d_vfprintf+0x506>
   17de2:	9905      	ldr	r1, [sp, #20]
   17de4:	18cb      	adds	r3, r1, r3
   17de6:	eb40 0004 	adc.w	r0, r0, r4
   17dea:	469c      	mov	ip, r3
   17dec:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   17df0:	f2c0 80e5 	blt.w	17fbe <__d_vfprintf+0x506>
   17df4:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
   17df8:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   17dfc:	f101 0101 	add.w	r1, r1, #1
   17e00:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
   17e04:	f000 80e7 	beq.w	17fd6 <__d_vfprintf+0x51e>
   17e08:	9a06      	ldr	r2, [sp, #24]
   17e0a:	9907      	ldr	r1, [sp, #28]
   17e0c:	401a      	ands	r2, r3
   17e0e:	4001      	ands	r1, r0
   17e10:	4613      	mov	r3, r2
   17e12:	9a08      	ldr	r2, [sp, #32]
   17e14:	200d      	movs	r0, #13
   17e16:	f1c2 0457 	rsb	r4, r2, #87	; 0x57
   17e1a:	f003 020f 	and.w	r2, r3, #15
   17e1e:	091b      	lsrs	r3, r3, #4
   17e20:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
   17e24:	1109      	asrs	r1, r1, #4
   17e26:	2a00      	cmp	r2, #0
   17e28:	f040 80fc 	bne.w	18024 <__d_vfprintf+0x56c>
   17e2c:	4285      	cmp	r5, r0
   17e2e:	f280 80fb 	bge.w	18028 <__d_vfprintf+0x570>
   17e32:	3801      	subs	r0, #1
   17e34:	d1f1      	bne.n	17e1a <__d_vfprintf+0x362>
   17e36:	230e      	movs	r3, #14
   17e38:	2001      	movs	r0, #1
   17e3a:	e9cd 3005 	strd	r3, r0, [sp, #20]
   17e3e:	2370      	movs	r3, #112	; 0x70
   17e40:	9307      	str	r3, [sp, #28]
   17e42:	f107 0209 	add.w	r2, r7, #9
   17e46:	463b      	mov	r3, r7
   17e48:	2a12      	cmp	r2, #18
   17e4a:	f200 80cf 	bhi.w	17fec <__d_vfprintf+0x534>
   17e4e:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
   17e52:	f00b 090c 	and.w	r9, fp, #12
   17e56:	f01b 0b01 	ands.w	fp, fp, #1
   17e5a:	f040 8128 	bne.w	180ae <__d_vfprintf+0x5f6>
   17e5e:	9b04      	ldr	r3, [sp, #16]
   17e60:	079a      	lsls	r2, r3, #30
   17e62:	f100 811e 	bmi.w	180a2 <__d_vfprintf+0x5ea>
   17e66:	f013 0404 	ands.w	r4, r3, #4
   17e6a:	f000 80fe 	beq.w	1806a <__d_vfprintf+0x5b2>
   17e6e:	f1b9 0f00 	cmp.w	r9, #0
   17e72:	f040 8122 	bne.w	180ba <__d_vfprintf+0x602>
   17e76:	f04f 0920 	mov.w	r9, #32
   17e7a:	9b04      	ldr	r3, [sp, #16]
   17e7c:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   17e80:	d124      	bne.n	17ecc <__d_vfprintf+0x414>
   17e82:	9b05      	ldr	r3, [sp, #20]
   17e84:	2d00      	cmp	r5, #0
   17e86:	f103 0350 	add.w	r3, r3, #80	; 0x50
   17e8a:	bf08      	it	eq
   17e8c:	2501      	moveq	r5, #1
   17e8e:	446b      	add	r3, sp
   17e90:	3b13      	subs	r3, #19
   17e92:	9a05      	ldr	r2, [sp, #20]
   17e94:	b122      	cbz	r2, 17ea0 <__d_vfprintf+0x3e8>
   17e96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   17e9a:	2a30      	cmp	r2, #48	; 0x30
   17e9c:	f000 8140 	beq.w	18120 <__d_vfprintf+0x668>
   17ea0:	9b04      	ldr	r3, [sp, #16]
   17ea2:	f013 0f10 	tst.w	r3, #16
   17ea6:	9b05      	ldr	r3, [sp, #20]
   17ea8:	bf18      	it	ne
   17eaa:	462b      	movne	r3, r5
   17eac:	1d38      	adds	r0, r7, #4
   17eae:	f2c0 813c 	blt.w	1812a <__d_vfprintf+0x672>
   17eb2:	42bd      	cmp	r5, r7
   17eb4:	f340 8139 	ble.w	1812a <__d_vfprintf+0x672>
   17eb8:	9a04      	ldr	r2, [sp, #16]
   17eba:	42bb      	cmp	r3, r7
   17ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   17ec0:	b292      	uxth	r2, r2
   17ec2:	9204      	str	r2, [sp, #16]
   17ec4:	f340 8133 	ble.w	1812e <__d_vfprintf+0x676>
   17ec8:	1c7d      	adds	r5, r7, #1
   17eca:	1b5d      	subs	r5, r3, r5
   17ecc:	9b04      	ldr	r3, [sp, #16]
   17ece:	f413 5b00 	ands.w	fp, r3, #8192	; 0x2000
   17ed2:	f000 812e 	beq.w	18132 <__d_vfprintf+0x67a>
   17ed6:	ea27 74e7 	bic.w	r4, r7, r7, asr #31
   17eda:	3401      	adds	r4, #1
   17edc:	f1b9 0f00 	cmp.w	r9, #0
   17ee0:	d000      	beq.n	17ee4 <__d_vfprintf+0x42c>
   17ee2:	3401      	adds	r4, #1
   17ee4:	2d00      	cmp	r5, #0
   17ee6:	f000 812d 	beq.w	18144 <__d_vfprintf+0x68c>
   17eea:	1c6b      	adds	r3, r5, #1
   17eec:	441c      	add	r4, r3
   17eee:	45a2      	cmp	sl, r4
   17ef0:	9b04      	ldr	r3, [sp, #16]
   17ef2:	bfcc      	ite	gt
   17ef4:	ebaa 0404 	subgt.w	r4, sl, r4
   17ef8:	2400      	movle	r4, #0
   17efa:	f013 0f09 	tst.w	r3, #9
   17efe:	d104      	bne.n	17f0a <__d_vfprintf+0x452>
   17f00:	4434      	add	r4, r6
   17f02:	42a6      	cmp	r6, r4
   17f04:	f040 8123 	bne.w	1814e <__d_vfprintf+0x696>
   17f08:	2400      	movs	r4, #0
   17f0a:	f1b9 0f00 	cmp.w	r9, #0
   17f0e:	d007      	beq.n	17f20 <__d_vfprintf+0x468>
   17f10:	4641      	mov	r1, r8
   17f12:	4648      	mov	r0, r9
   17f14:	9b03      	ldr	r3, [sp, #12]
   17f16:	3601      	adds	r6, #1
   17f18:	4798      	blx	r3
   17f1a:	2800      	cmp	r0, #0
   17f1c:	f6ff ade8 	blt.w	17af0 <__d_vfprintf+0x38>
   17f20:	9b04      	ldr	r3, [sp, #16]
   17f22:	051a      	lsls	r2, r3, #20
   17f24:	d512      	bpl.n	17f4c <__d_vfprintf+0x494>
   17f26:	4641      	mov	r1, r8
   17f28:	2030      	movs	r0, #48	; 0x30
   17f2a:	9b03      	ldr	r3, [sp, #12]
   17f2c:	4798      	blx	r3
   17f2e:	2800      	cmp	r0, #0
   17f30:	f6ff adde 	blt.w	17af0 <__d_vfprintf+0x38>
   17f34:	9b08      	ldr	r3, [sp, #32]
   17f36:	4641      	mov	r1, r8
   17f38:	3602      	adds	r6, #2
   17f3a:	f1c3 0078 	rsb	r0, r3, #120	; 0x78
   17f3e:	9b03      	ldr	r3, [sp, #12]
   17f40:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
   17f44:	4798      	blx	r3
   17f46:	2800      	cmp	r0, #0
   17f48:	f6ff add2 	blt.w	17af0 <__d_vfprintf+0x38>
   17f4c:	9b04      	ldr	r3, [sp, #16]
   17f4e:	071b      	lsls	r3, r3, #28
   17f50:	d405      	bmi.n	17f5e <__d_vfprintf+0x4a6>
   17f52:	4434      	add	r4, r6
   17f54:	42b4      	cmp	r4, r6
   17f56:	f040 8103 	bne.w	18160 <__d_vfprintf+0x6a8>
   17f5a:	4626      	mov	r6, r4
   17f5c:	2400      	movs	r4, #0
   17f5e:	f1bb 0f00 	cmp.w	fp, #0
   17f62:	f000 812d 	beq.w	181c0 <__d_vfprintf+0x708>
   17f66:	ea27 7ae7 	bic.w	sl, r7, r7, asr #31
   17f6a:	426d      	negs	r5, r5
   17f6c:	eba7 0b0a 	sub.w	fp, r7, sl
   17f70:	9b05      	ldr	r3, [sp, #20]
   17f72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   17f76:	f106 0901 	add.w	r9, r6, #1
   17f7a:	455b      	cmp	r3, fp
   17f7c:	bf89      	itett	hi
   17f7e:	ab0e      	addhi	r3, sp, #56	; 0x38
   17f80:	2030      	movls	r0, #48	; 0x30
   17f82:	445b      	addhi	r3, fp
   17f84:	7958      	ldrbhi	r0, [r3, #5]
   17f86:	4555      	cmp	r5, sl
   17f88:	f300 80f3 	bgt.w	18172 <__d_vfprintf+0x6ba>
   17f8c:	4641      	mov	r1, r8
   17f8e:	9b03      	ldr	r3, [sp, #12]
   17f90:	4798      	blx	r3
   17f92:	2800      	cmp	r0, #0
   17f94:	f10b 0b01 	add.w	fp, fp, #1
   17f98:	f6ff adaa 	blt.w	17af0 <__d_vfprintf+0x38>
   17f9c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   17fa0:	d108      	bne.n	17fb4 <__d_vfprintf+0x4fc>
   17fa2:	4641      	mov	r1, r8
   17fa4:	202e      	movs	r0, #46	; 0x2e
   17fa6:	9b03      	ldr	r3, [sp, #12]
   17fa8:	4798      	blx	r3
   17faa:	2800      	cmp	r0, #0
   17fac:	f6ff ada0 	blt.w	17af0 <__d_vfprintf+0x38>
   17fb0:	f106 0902 	add.w	r9, r6, #2
   17fb4:	464e      	mov	r6, r9
   17fb6:	e7db      	b.n	17f70 <__d_vfprintf+0x4b8>
   17fb8:	2330      	movs	r3, #48	; 0x30
   17fba:	2701      	movs	r7, #1
   17fbc:	e6c3      	b.n	17d46 <__d_vfprintf+0x28e>
   17fbe:	9b06      	ldr	r3, [sp, #24]
   17fc0:	ea03 0c0c 	and.w	ip, r3, ip
   17fc4:	9b07      	ldr	r3, [sp, #28]
   17fc6:	4003      	ands	r3, r0
   17fc8:	4618      	mov	r0, r3
   17fca:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   17fce:	d126      	bne.n	1801e <__d_vfprintf+0x566>
   17fd0:	ea5c 0000 	orrs.w	r0, ip, r0
   17fd4:	d01c      	beq.n	18010 <__d_vfprintf+0x558>
   17fd6:	f042 0208 	orr.w	r2, r2, #8
   17fda:	f44f 6780 	mov.w	r7, #1024	; 0x400
   17fde:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   17fe2:	230e      	movs	r3, #14
   17fe4:	9305      	str	r3, [sp, #20]
   17fe6:	2370      	movs	r3, #112	; 0x70
   17fe8:	9307      	str	r3, [sp, #28]
   17fea:	463b      	mov	r3, r7
   17fec:	f103 0263 	add.w	r2, r3, #99	; 0x63
   17ff0:	2ac6      	cmp	r2, #198	; 0xc6
   17ff2:	d938      	bls.n	18066 <__d_vfprintf+0x5ae>
   17ff4:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
   17ff8:	f240 72ce 	movw	r2, #1998	; 0x7ce
   17ffc:	4293      	cmp	r3, r2
   17ffe:	bf8c      	ite	hi
   18000:	2304      	movhi	r3, #4
   18002:	2303      	movls	r3, #3
   18004:	9306      	str	r3, [sp, #24]
   18006:	e722      	b.n	17e4e <__d_vfprintf+0x396>
   18008:	461d      	mov	r5, r3
   1800a:	e7de      	b.n	17fca <__d_vfprintf+0x512>
   1800c:	250d      	movs	r5, #13
   1800e:	e7dc      	b.n	17fca <__d_vfprintf+0x512>
   18010:	f042 0204 	orr.w	r2, r2, #4
   18014:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   18018:	e7e3      	b.n	17fe2 <__d_vfprintf+0x52a>
   1801a:	463d      	mov	r5, r7
   1801c:	e6f9      	b.n	17e12 <__d_vfprintf+0x35a>
   1801e:	4663      	mov	r3, ip
   18020:	4601      	mov	r1, r0
   18022:	e6f6      	b.n	17e12 <__d_vfprintf+0x35a>
   18024:	2a09      	cmp	r2, #9
   18026:	d809      	bhi.n	1803c <__d_vfprintf+0x584>
   18028:	3230      	adds	r2, #48	; 0x30
   1802a:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   1802e:	4285      	cmp	r5, r0
   18030:	4484      	add	ip, r0
   18032:	bfb8      	it	lt
   18034:	4605      	movlt	r5, r0
   18036:	f88c 2005 	strb.w	r2, [ip, #5]
   1803a:	e6fa      	b.n	17e32 <__d_vfprintf+0x37a>
   1803c:	4422      	add	r2, r4
   1803e:	b2d2      	uxtb	r2, r2
   18040:	e7f3      	b.n	1802a <__d_vfprintf+0x572>
   18042:	9b07      	ldr	r3, [sp, #28]
   18044:	2b66      	cmp	r3, #102	; 0x66
   18046:	d105      	bne.n	18054 <__d_vfprintf+0x59c>
   18048:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
   1804c:	462c      	mov	r4, r5
   1804e:	2201      	movs	r2, #1
   18050:	2311      	movs	r3, #17
   18052:	e664      	b.n	17d1e <__d_vfprintf+0x266>
   18054:	b2eb      	uxtb	r3, r5
   18056:	2200      	movs	r2, #0
   18058:	2765      	movs	r7, #101	; 0x65
   1805a:	2b01      	cmp	r3, #1
   1805c:	4614      	mov	r4, r2
   1805e:	9707      	str	r7, [sp, #28]
   18060:	bf38      	it	cc
   18062:	2301      	movcc	r3, #1
   18064:	e65b      	b.n	17d1e <__d_vfprintf+0x266>
   18066:	2302      	movs	r3, #2
   18068:	e7cc      	b.n	18004 <__d_vfprintf+0x54c>
   1806a:	f1b9 0f00 	cmp.w	r9, #0
   1806e:	f43f af04 	beq.w	17e7a <__d_vfprintf+0x3c2>
   18072:	f1ba 0f03 	cmp.w	sl, #3
   18076:	dd32      	ble.n	180de <__d_vfprintf+0x626>
   18078:	9b04      	ldr	r3, [sp, #16]
   1807a:	f1aa 0403 	sub.w	r4, sl, #3
   1807e:	071f      	lsls	r7, r3, #28
   18080:	d42d      	bmi.n	180de <__d_vfprintf+0x626>
   18082:	4434      	add	r4, r6
   18084:	4641      	mov	r1, r8
   18086:	2020      	movs	r0, #32
   18088:	9b03      	ldr	r3, [sp, #12]
   1808a:	3601      	adds	r6, #1
   1808c:	4798      	blx	r3
   1808e:	2800      	cmp	r0, #0
   18090:	f6ff ad2e 	blt.w	17af0 <__d_vfprintf+0x38>
   18094:	42a6      	cmp	r6, r4
   18096:	d1f5      	bne.n	18084 <__d_vfprintf+0x5cc>
   18098:	f1bb 0f00 	cmp.w	fp, #0
   1809c:	d035      	beq.n	1810a <__d_vfprintf+0x652>
   1809e:	2400      	movs	r4, #0
   180a0:	e015      	b.n	180ce <__d_vfprintf+0x616>
   180a2:	f1b9 0f00 	cmp.w	r9, #0
   180a6:	d12a      	bne.n	180fe <__d_vfprintf+0x646>
   180a8:	f04f 092b 	mov.w	r9, #43	; 0x2b
   180ac:	e6e5      	b.n	17e7a <__d_vfprintf+0x3c2>
   180ae:	f1b9 0f00 	cmp.w	r9, #0
   180b2:	d127      	bne.n	18104 <__d_vfprintf+0x64c>
   180b4:	f04f 092d 	mov.w	r9, #45	; 0x2d
   180b8:	e6df      	b.n	17e7a <__d_vfprintf+0x3c2>
   180ba:	f04f 0b20 	mov.w	fp, #32
   180be:	f1ba 0f04 	cmp.w	sl, #4
   180c2:	ddec      	ble.n	1809e <__d_vfprintf+0x5e6>
   180c4:	9b04      	ldr	r3, [sp, #16]
   180c6:	f1aa 0404 	sub.w	r4, sl, #4
   180ca:	071d      	lsls	r5, r3, #28
   180cc:	d5d9      	bpl.n	18082 <__d_vfprintf+0x5ca>
   180ce:	4641      	mov	r1, r8
   180d0:	4658      	mov	r0, fp
   180d2:	9b03      	ldr	r3, [sp, #12]
   180d4:	3601      	adds	r6, #1
   180d6:	4798      	blx	r3
   180d8:	2800      	cmp	r0, #0
   180da:	f6ff ad09 	blt.w	17af0 <__d_vfprintf+0x38>
   180de:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   180e2:	4d9f      	ldr	r5, [pc, #636]	; (18360 <__d_vfprintf+0x8a8>)
   180e4:	f013 0f08 	tst.w	r3, #8
   180e8:	4b9e      	ldr	r3, [pc, #632]	; (18364 <__d_vfprintf+0x8ac>)
   180ea:	bf08      	it	eq
   180ec:	461d      	moveq	r5, r3
   180ee:	462f      	mov	r7, r5
   180f0:	46b9      	mov	r9, r7
   180f2:	f817 0b01 	ldrb.w	r0, [r7], #1
   180f6:	b950      	cbnz	r0, 1810e <__d_vfprintf+0x656>
   180f8:	1b75      	subs	r5, r6, r5
   180fa:	44a9      	add	r9, r5
   180fc:	e05b      	b.n	181b6 <__d_vfprintf+0x6fe>
   180fe:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
   18102:	e7dc      	b.n	180be <__d_vfprintf+0x606>
   18104:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   18108:	e7d9      	b.n	180be <__d_vfprintf+0x606>
   1810a:	465c      	mov	r4, fp
   1810c:	e7e7      	b.n	180de <__d_vfprintf+0x626>
   1810e:	9b08      	ldr	r3, [sp, #32]
   18110:	4641      	mov	r1, r8
   18112:	1ac0      	subs	r0, r0, r3
   18114:	9b03      	ldr	r3, [sp, #12]
   18116:	b2c0      	uxtb	r0, r0
   18118:	4798      	blx	r3
   1811a:	2800      	cmp	r0, #0
   1811c:	dae8      	bge.n	180f0 <__d_vfprintf+0x638>
   1811e:	e4e7      	b.n	17af0 <__d_vfprintf+0x38>
   18120:	9a05      	ldr	r2, [sp, #20]
   18122:	3a01      	subs	r2, #1
   18124:	b2d2      	uxtb	r2, r2
   18126:	9205      	str	r2, [sp, #20]
   18128:	e6b3      	b.n	17e92 <__d_vfprintf+0x3da>
   1812a:	1e5d      	subs	r5, r3, #1
   1812c:	e6ce      	b.n	17ecc <__d_vfprintf+0x414>
   1812e:	2500      	movs	r5, #0
   18130:	e6cc      	b.n	17ecc <__d_vfprintf+0x414>
   18132:	9b04      	ldr	r3, [sp, #16]
   18134:	f413 6f00 	tst.w	r3, #2048	; 0x800
   18138:	9b06      	ldr	r3, [sp, #24]
   1813a:	bf0c      	ite	eq
   1813c:	2403      	moveq	r4, #3
   1813e:	2405      	movne	r4, #5
   18140:	441c      	add	r4, r3
   18142:	e6cb      	b.n	17edc <__d_vfprintf+0x424>
   18144:	9b04      	ldr	r3, [sp, #16]
   18146:	06d9      	lsls	r1, r3, #27
   18148:	bf48      	it	mi
   1814a:	3401      	addmi	r4, #1
   1814c:	e6cf      	b.n	17eee <__d_vfprintf+0x436>
   1814e:	4641      	mov	r1, r8
   18150:	2020      	movs	r0, #32
   18152:	9b03      	ldr	r3, [sp, #12]
   18154:	3601      	adds	r6, #1
   18156:	4798      	blx	r3
   18158:	2800      	cmp	r0, #0
   1815a:	f6bf aed2 	bge.w	17f02 <__d_vfprintf+0x44a>
   1815e:	e4c7      	b.n	17af0 <__d_vfprintf+0x38>
   18160:	4641      	mov	r1, r8
   18162:	2030      	movs	r0, #48	; 0x30
   18164:	9b03      	ldr	r3, [sp, #12]
   18166:	3601      	adds	r6, #1
   18168:	4798      	blx	r3
   1816a:	2800      	cmp	r0, #0
   1816c:	f6bf aef2 	bge.w	17f54 <__d_vfprintf+0x49c>
   18170:	e4be      	b.n	17af0 <__d_vfprintf+0x38>
   18172:	45ba      	cmp	sl, r7
   18174:	d10a      	bne.n	1818c <__d_vfprintf+0x6d4>
   18176:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
   1817a:	2b35      	cmp	r3, #53	; 0x35
   1817c:	d81e      	bhi.n	181bc <__d_vfprintf+0x704>
   1817e:	d105      	bne.n	1818c <__d_vfprintf+0x6d4>
   18180:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   18184:	f013 0f10 	tst.w	r3, #16
   18188:	bf08      	it	eq
   1818a:	2031      	moveq	r0, #49	; 0x31
   1818c:	4641      	mov	r1, r8
   1818e:	9b03      	ldr	r3, [sp, #12]
   18190:	4798      	blx	r3
   18192:	2800      	cmp	r0, #0
   18194:	f6ff acac 	blt.w	17af0 <__d_vfprintf+0x38>
   18198:	9b04      	ldr	r3, [sp, #16]
   1819a:	06d8      	lsls	r0, r3, #27
   1819c:	d50b      	bpl.n	181b6 <__d_vfprintf+0x6fe>
   1819e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   181a2:	d108      	bne.n	181b6 <__d_vfprintf+0x6fe>
   181a4:	f106 0902 	add.w	r9, r6, #2
   181a8:	4641      	mov	r1, r8
   181aa:	202e      	movs	r0, #46	; 0x2e
   181ac:	9b03      	ldr	r3, [sp, #12]
   181ae:	4798      	blx	r3
   181b0:	2800      	cmp	r0, #0
   181b2:	f6ff ac9d 	blt.w	17af0 <__d_vfprintf+0x38>
   181b6:	464e      	mov	r6, r9
   181b8:	444c      	add	r4, r9
   181ba:	e246      	b.n	1864a <__d_vfprintf+0xb92>
   181bc:	2031      	movs	r0, #49	; 0x31
   181be:	e7e5      	b.n	1818c <__d_vfprintf+0x6d4>
   181c0:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
   181c4:	4641      	mov	r1, r8
   181c6:	2831      	cmp	r0, #49	; 0x31
   181c8:	bf1e      	ittt	ne
   181ca:	f89d 303c 	ldrbne.w	r3, [sp, #60]	; 0x3c
   181ce:	f023 0310 	bicne.w	r3, r3, #16
   181d2:	f88d 303c 	strbne.w	r3, [sp, #60]	; 0x3c
   181d6:	9b03      	ldr	r3, [sp, #12]
   181d8:	4798      	blx	r3
   181da:	2800      	cmp	r0, #0
   181dc:	f6ff ac88 	blt.w	17af0 <__d_vfprintf+0x38>
   181e0:	2d00      	cmp	r5, #0
   181e2:	dd6d      	ble.n	182c0 <__d_vfprintf+0x808>
   181e4:	4641      	mov	r1, r8
   181e6:	202e      	movs	r0, #46	; 0x2e
   181e8:	9b03      	ldr	r3, [sp, #12]
   181ea:	f106 0902 	add.w	r9, r6, #2
   181ee:	4798      	blx	r3
   181f0:	2800      	cmp	r0, #0
   181f2:	f6ff ac7d 	blt.w	17af0 <__d_vfprintf+0x38>
   181f6:	2601      	movs	r6, #1
   181f8:	4633      	mov	r3, r6
   181fa:	9a05      	ldr	r2, [sp, #20]
   181fc:	4641      	mov	r1, r8
   181fe:	f109 0901 	add.w	r9, r9, #1
   18202:	4296      	cmp	r6, r2
   18204:	bf37      	itett	cc
   18206:	3350      	addcc	r3, #80	; 0x50
   18208:	2030      	movcs	r0, #48	; 0x30
   1820a:	446b      	addcc	r3, sp
   1820c:	f813 0c13 	ldrbcc.w	r0, [r3, #-19]
   18210:	9b03      	ldr	r3, [sp, #12]
   18212:	4798      	blx	r3
   18214:	2800      	cmp	r0, #0
   18216:	f6ff ac6b 	blt.w	17af0 <__d_vfprintf+0x38>
   1821a:	3601      	adds	r6, #1
   1821c:	b2f6      	uxtb	r6, r6
   1821e:	42ae      	cmp	r6, r5
   18220:	4633      	mov	r3, r6
   18222:	ddea      	ble.n	181fa <__d_vfprintf+0x742>
   18224:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   18228:	4641      	mov	r1, r8
   1822a:	1a98      	subs	r0, r3, r2
   1822c:	9b03      	ldr	r3, [sp, #12]
   1822e:	b2c0      	uxtb	r0, r0
   18230:	4798      	blx	r3
   18232:	2800      	cmp	r0, #0
   18234:	f6ff ac5c 	blt.w	17af0 <__d_vfprintf+0x38>
   18238:	2f00      	cmp	r7, #0
   1823a:	db04      	blt.n	18246 <__d_vfprintf+0x78e>
   1823c:	d14f      	bne.n	182de <__d_vfprintf+0x826>
   1823e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   18242:	06db      	lsls	r3, r3, #27
   18244:	d54b      	bpl.n	182de <__d_vfprintf+0x826>
   18246:	427f      	negs	r7, r7
   18248:	202d      	movs	r0, #45	; 0x2d
   1824a:	4641      	mov	r1, r8
   1824c:	9b03      	ldr	r3, [sp, #12]
   1824e:	4798      	blx	r3
   18250:	2800      	cmp	r0, #0
   18252:	f6ff ac4d 	blt.w	17af0 <__d_vfprintf+0x38>
   18256:	9b06      	ldr	r3, [sp, #24]
   18258:	2b04      	cmp	r3, #4
   1825a:	d142      	bne.n	182e2 <__d_vfprintf+0x82a>
   1825c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   18260:	4641      	mov	r1, r8
   18262:	9b03      	ldr	r3, [sp, #12]
   18264:	f109 0903 	add.w	r9, r9, #3
   18268:	fb97 f5f6 	sdiv	r5, r7, r6
   1826c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   18270:	b2c0      	uxtb	r0, r0
   18272:	4798      	blx	r3
   18274:	2800      	cmp	r0, #0
   18276:	f6ff ac3b 	blt.w	17af0 <__d_vfprintf+0x38>
   1827a:	fb06 7715 	mls	r7, r6, r5, r7
   1827e:	2664      	movs	r6, #100	; 0x64
   18280:	4641      	mov	r1, r8
   18282:	9b03      	ldr	r3, [sp, #12]
   18284:	f109 0901 	add.w	r9, r9, #1
   18288:	fb97 f5f6 	sdiv	r5, r7, r6
   1828c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   18290:	b2c0      	uxtb	r0, r0
   18292:	4798      	blx	r3
   18294:	2800      	cmp	r0, #0
   18296:	f6ff ac2b 	blt.w	17af0 <__d_vfprintf+0x38>
   1829a:	fb06 7715 	mls	r7, r6, r5, r7
   1829e:	260a      	movs	r6, #10
   182a0:	4641      	mov	r1, r8
   182a2:	9b03      	ldr	r3, [sp, #12]
   182a4:	f109 0901 	add.w	r9, r9, #1
   182a8:	fb97 f5f6 	sdiv	r5, r7, r6
   182ac:	f105 0030 	add.w	r0, r5, #48	; 0x30
   182b0:	b2c0      	uxtb	r0, r0
   182b2:	4798      	blx	r3
   182b4:	2800      	cmp	r0, #0
   182b6:	f6ff ac1b 	blt.w	17af0 <__d_vfprintf+0x38>
   182ba:	fb06 7715 	mls	r7, r6, r5, r7
   182be:	e018      	b.n	182f2 <__d_vfprintf+0x83a>
   182c0:	9b04      	ldr	r3, [sp, #16]
   182c2:	06da      	lsls	r2, r3, #27
   182c4:	d402      	bmi.n	182cc <__d_vfprintf+0x814>
   182c6:	f106 0901 	add.w	r9, r6, #1
   182ca:	e7ab      	b.n	18224 <__d_vfprintf+0x76c>
   182cc:	4641      	mov	r1, r8
   182ce:	202e      	movs	r0, #46	; 0x2e
   182d0:	9b03      	ldr	r3, [sp, #12]
   182d2:	f106 0902 	add.w	r9, r6, #2
   182d6:	4798      	blx	r3
   182d8:	2800      	cmp	r0, #0
   182da:	daa3      	bge.n	18224 <__d_vfprintf+0x76c>
   182dc:	e408      	b.n	17af0 <__d_vfprintf+0x38>
   182de:	202b      	movs	r0, #43	; 0x2b
   182e0:	e7b3      	b.n	1824a <__d_vfprintf+0x792>
   182e2:	9b06      	ldr	r3, [sp, #24]
   182e4:	f109 0902 	add.w	r9, r9, #2
   182e8:	2b03      	cmp	r3, #3
   182ea:	d0c8      	beq.n	1827e <__d_vfprintf+0x7c6>
   182ec:	9b06      	ldr	r3, [sp, #24]
   182ee:	2b01      	cmp	r3, #1
   182f0:	d1d5      	bne.n	1829e <__d_vfprintf+0x7e6>
   182f2:	f107 0030 	add.w	r0, r7, #48	; 0x30
   182f6:	f109 0901 	add.w	r9, r9, #1
   182fa:	4641      	mov	r1, r8
   182fc:	b2c0      	uxtb	r0, r0
   182fe:	e755      	b.n	181ac <__d_vfprintf+0x6f4>
   18300:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   18304:	2b12      	cmp	r3, #18
   18306:	f200 8101 	bhi.w	1850c <__d_vfprintf+0xa54>
   1830a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1830e:	0013      	.short	0x0013
   18310:	00ff0059 	.word	0x00ff0059
   18314:	00ff00ff 	.word	0x00ff00ff
   18318:	005900ff 	.word	0x005900ff
   1831c:	00ff00ff 	.word	0x00ff00ff
   18320:	00ff00ff 	.word	0x00ff00ff
   18324:	011a00ff 	.word	0x011a00ff
   18328:	00ff00fa 	.word	0x00ff00fa
   1832c:	002d00ff 	.word	0x002d00ff
   18330:	00bb00ff 	.word	0x00bb00ff
   18334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18336:	2401      	movs	r4, #1
   18338:	af0e      	add	r7, sp, #56	; 0x38
   1833a:	1d1a      	adds	r2, r3, #4
   1833c:	681b      	ldr	r3, [r3, #0]
   1833e:	920d      	str	r2, [sp, #52]	; 0x34
   18340:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   18344:	f01b 0f08 	tst.w	fp, #8
   18348:	d02f      	beq.n	183aa <__d_vfprintf+0x8f2>
   1834a:	eb07 0904 	add.w	r9, r7, r4
   1834e:	463d      	mov	r5, r7
   18350:	45a9      	cmp	r9, r5
   18352:	d12c      	bne.n	183ae <__d_vfprintf+0x8f6>
   18354:	1bf7      	subs	r7, r6, r7
   18356:	44b9      	add	r9, r7
   18358:	ebaa 0404 	sub.w	r4, sl, r4
   1835c:	e72b      	b.n	181b6 <__d_vfprintf+0x6fe>
   1835e:	bf00      	nop
   18360:	000243fd 	.word	0x000243fd
   18364:	000243f9 	.word	0x000243f9
   18368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1836a:	1d1a      	adds	r2, r3, #4
   1836c:	920d      	str	r2, [sp, #52]	; 0x34
   1836e:	681f      	ldr	r7, [r3, #0]
   18370:	4bac      	ldr	r3, [pc, #688]	; (18624 <__d_vfprintf+0xb6c>)
   18372:	2f00      	cmp	r7, #0
   18374:	bf08      	it	eq
   18376:	461f      	moveq	r7, r3
   18378:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1837c:	4638      	mov	r0, r7
   1837e:	bf14      	ite	ne
   18380:	4629      	movne	r1, r5
   18382:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   18386:	f007 f965 	bl	1f654 <strnlen>
   1838a:	4604      	mov	r4, r0
   1838c:	e7da      	b.n	18344 <__d_vfprintf+0x88c>
   1838e:	4641      	mov	r1, r8
   18390:	2020      	movs	r0, #32
   18392:	9b03      	ldr	r3, [sp, #12]
   18394:	4798      	blx	r3
   18396:	2800      	cmp	r0, #0
   18398:	f6ff abaa 	blt.w	17af0 <__d_vfprintf+0x38>
   1839c:	3d01      	subs	r5, #1
   1839e:	42a5      	cmp	r5, r4
   183a0:	d8f5      	bhi.n	1838e <__d_vfprintf+0x8d6>
   183a2:	4456      	add	r6, sl
   183a4:	46aa      	mov	sl, r5
   183a6:	1b76      	subs	r6, r6, r5
   183a8:	e7cf      	b.n	1834a <__d_vfprintf+0x892>
   183aa:	4655      	mov	r5, sl
   183ac:	e7f7      	b.n	1839e <__d_vfprintf+0x8e6>
   183ae:	4641      	mov	r1, r8
   183b0:	f815 0b01 	ldrb.w	r0, [r5], #1
   183b4:	9b03      	ldr	r3, [sp, #12]
   183b6:	4798      	blx	r3
   183b8:	2800      	cmp	r0, #0
   183ba:	dac9      	bge.n	18350 <__d_vfprintf+0x898>
   183bc:	f7ff bb98 	b.w	17af0 <__d_vfprintf+0x38>
   183c0:	f01b 0f80 	tst.w	fp, #128	; 0x80
   183c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   183c6:	d035      	beq.n	18434 <__d_vfprintf+0x97c>
   183c8:	f41b 7f00 	tst.w	fp, #512	; 0x200
   183cc:	d02d      	beq.n	1842a <__d_vfprintf+0x972>
   183ce:	3307      	adds	r3, #7
   183d0:	f023 0307 	bic.w	r3, r3, #7
   183d4:	f103 0208 	add.w	r2, r3, #8
   183d8:	e9d3 0100 	ldrd	r0, r1, [r3]
   183dc:	920d      	str	r2, [sp, #52]	; 0x34
   183de:	f02b 0910 	bic.w	r9, fp, #16
   183e2:	2900      	cmp	r1, #0
   183e4:	fa1f f989 	uxth.w	r9, r9
   183e8:	da36      	bge.n	18458 <__d_vfprintf+0x9a0>
   183ea:	4240      	negs	r0, r0
   183ec:	f449 6980 	orr.w	r9, r9, #1024	; 0x400
   183f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   183f4:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
   183f8:	230a      	movs	r3, #10
   183fa:	465a      	mov	r2, fp
   183fc:	f007 f94c 	bl	1f698 <__ultoa_invert>
   18400:	f019 0f40 	tst.w	r9, #64	; 0x40
   18404:	eba0 0b0b 	sub.w	fp, r0, fp
   18408:	d065      	beq.n	184d6 <__d_vfprintf+0xa1e>
   1840a:	f029 0201 	bic.w	r2, r9, #1
   1840e:	455d      	cmp	r5, fp
   18410:	b292      	uxth	r2, r2
   18412:	f340 80b3 	ble.w	1857c <__d_vfprintf+0xac4>
   18416:	2f00      	cmp	r7, #0
   18418:	f000 80aa 	beq.w	18570 <__d_vfprintf+0xab8>
   1841c:	f019 0310 	ands.w	r3, r9, #16
   18420:	462c      	mov	r4, r5
   18422:	4691      	mov	r9, r2
   18424:	d026      	beq.n	18474 <__d_vfprintf+0x9bc>
   18426:	3402      	adds	r4, #2
   18428:	e05c      	b.n	184e4 <__d_vfprintf+0xa2c>
   1842a:	1d1a      	adds	r2, r3, #4
   1842c:	6818      	ldr	r0, [r3, #0]
   1842e:	920d      	str	r2, [sp, #52]	; 0x34
   18430:	17c1      	asrs	r1, r0, #31
   18432:	e7d4      	b.n	183de <__d_vfprintf+0x926>
   18434:	1d1a      	adds	r2, r3, #4
   18436:	f41b 7f80 	tst.w	fp, #256	; 0x100
   1843a:	6819      	ldr	r1, [r3, #0]
   1843c:	920d      	str	r2, [sp, #52]	; 0x34
   1843e:	d101      	bne.n	18444 <__d_vfprintf+0x98c>
   18440:	4608      	mov	r0, r1
   18442:	e7f5      	b.n	18430 <__d_vfprintf+0x978>
   18444:	f41b 7f00 	tst.w	fp, #512	; 0x200
   18448:	bf19      	ittee	ne
   1844a:	b248      	sxtbne	r0, r1
   1844c:	f341 11c0 	sbfxne	r1, r1, #7, #1
   18450:	b208      	sxtheq	r0, r1
   18452:	f341 31c0 	sbfxeq	r1, r1, #15, #1
   18456:	e7c2      	b.n	183de <__d_vfprintf+0x926>
   18458:	ea50 0301 	orrs.w	r3, r0, r1
   1845c:	d1ca      	bne.n	183f4 <__d_vfprintf+0x93c>
   1845e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   18462:	d0c7      	beq.n	183f4 <__d_vfprintf+0x93c>
   18464:	2d00      	cmp	r5, #0
   18466:	d1c5      	bne.n	183f4 <__d_vfprintf+0x93c>
   18468:	f02b 0b11 	bic.w	fp, fp, #17
   1846c:	462c      	mov	r4, r5
   1846e:	fa1f f98b 	uxth.w	r9, fp
   18472:	46ab      	mov	fp, r5
   18474:	f240 4306 	movw	r3, #1030	; 0x406
   18478:	ea19 0303 	ands.w	r3, r9, r3
   1847c:	bf1c      	itt	ne
   1847e:	3401      	addne	r4, #1
   18480:	2300      	movne	r3, #0
   18482:	e02f      	b.n	184e4 <__d_vfprintf+0xa2c>
   18484:	f02b 0b10 	bic.w	fp, fp, #16
   18488:	230a      	movs	r3, #10
   1848a:	fa1f fb8b 	uxth.w	fp, fp
   1848e:	f01b 0480 	ands.w	r4, fp, #128	; 0x80
   18492:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   18494:	d058      	beq.n	18548 <__d_vfprintf+0xa90>
   18496:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
   1849a:	bf15      	itete	ne
   1849c:	3207      	addne	r2, #7
   1849e:	1d10      	addeq	r0, r2, #4
   184a0:	f022 0207 	bicne.w	r2, r2, #7
   184a4:	900d      	streq	r0, [sp, #52]	; 0x34
   184a6:	bf0f      	iteee	eq
   184a8:	6810      	ldreq	r0, [r2, #0]
   184aa:	f102 0108 	addne.w	r1, r2, #8
   184ae:	910d      	strne	r1, [sp, #52]	; 0x34
   184b0:	e9d2 0100 	ldrdne	r0, r1, [r2]
   184b4:	ea50 0201 	orrs.w	r2, r0, r1
   184b8:	d153      	bne.n	18562 <__d_vfprintf+0xaaa>
   184ba:	f02b 0916 	bic.w	r9, fp, #22
   184be:	f01b 0f40 	tst.w	fp, #64	; 0x40
   184c2:	fa1f f989 	uxth.w	r9, r9
   184c6:	d050      	beq.n	1856a <__d_vfprintf+0xab2>
   184c8:	2d00      	cmp	r5, #0
   184ca:	d14e      	bne.n	1856a <__d_vfprintf+0xab2>
   184cc:	f02b 0b17 	bic.w	fp, fp, #23
   184d0:	fa1f f98b 	uxth.w	r9, fp
   184d4:	46ab      	mov	fp, r5
   184d6:	f019 0310 	ands.w	r3, r9, #16
   184da:	d053      	beq.n	18584 <__d_vfprintf+0xacc>
   184dc:	2f00      	cmp	r7, #0
   184de:	d14f      	bne.n	18580 <__d_vfprintf+0xac8>
   184e0:	f10b 0401 	add.w	r4, fp, #1
   184e4:	f019 0f08 	tst.w	r9, #8
   184e8:	d15f      	bne.n	185aa <__d_vfprintf+0xaf2>
   184ea:	f019 0f01 	tst.w	r9, #1
   184ee:	d006      	beq.n	184fe <__d_vfprintf+0xa46>
   184f0:	45a2      	cmp	sl, r4
   184f2:	dd6e      	ble.n	185d2 <__d_vfprintf+0xb1a>
   184f4:	ebaa 0404 	sub.w	r4, sl, r4
   184f8:	eb04 050b 	add.w	r5, r4, fp
   184fc:	4654      	mov	r4, sl
   184fe:	4622      	mov	r2, r4
   18500:	e04e      	b.n	185a0 <__d_vfprintf+0xae8>
   18502:	f04b 0b10 	orr.w	fp, fp, #16
   18506:	2310      	movs	r3, #16
   18508:	2778      	movs	r7, #120	; 0x78
   1850a:	e7c0      	b.n	1848e <__d_vfprintf+0x9d6>
   1850c:	f047 0320 	orr.w	r3, r7, #32
   18510:	2b78      	cmp	r3, #120	; 0x78
   18512:	d104      	bne.n	1851e <__d_vfprintf+0xa66>
   18514:	f1c7 0378 	rsb	r3, r7, #120	; 0x78
   18518:	f043 0310 	orr.w	r3, r3, #16
   1851c:	e7b7      	b.n	1848e <__d_vfprintf+0x9d6>
   1851e:	4641      	mov	r1, r8
   18520:	2025      	movs	r0, #37	; 0x25
   18522:	9b03      	ldr	r3, [sp, #12]
   18524:	4798      	blx	r3
   18526:	2800      	cmp	r0, #0
   18528:	f6ff aae2 	blt.w	17af0 <__d_vfprintf+0x38>
   1852c:	4641      	mov	r1, r8
   1852e:	4638      	mov	r0, r7
   18530:	9b03      	ldr	r3, [sp, #12]
   18532:	4798      	blx	r3
   18534:	2800      	cmp	r0, #0
   18536:	f6ff aadb 	blt.w	17af0 <__d_vfprintf+0x38>
   1853a:	3602      	adds	r6, #2
   1853c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1853e:	f7ff bac9 	b.w	17ad4 <__d_vfprintf+0x1c>
   18542:	2308      	movs	r3, #8
   18544:	2700      	movs	r7, #0
   18546:	e7a2      	b.n	1848e <__d_vfprintf+0x9d6>
   18548:	1d11      	adds	r1, r2, #4
   1854a:	6810      	ldr	r0, [r2, #0]
   1854c:	910d      	str	r1, [sp, #52]	; 0x34
   1854e:	f41b 7180 	ands.w	r1, fp, #256	; 0x100
   18552:	d0af      	beq.n	184b4 <__d_vfprintf+0x9fc>
   18554:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
   18558:	bf1a      	itte	ne
   1855a:	b2c0      	uxtbne	r0, r0
   1855c:	4621      	movne	r1, r4
   1855e:	b280      	uxtheq	r0, r0
   18560:	e7a8      	b.n	184b4 <__d_vfprintf+0x9fc>
   18562:	f02b 0b06 	bic.w	fp, fp, #6
   18566:	fa1f f98b 	uxth.w	r9, fp
   1856a:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
   1856e:	e744      	b.n	183fa <__d_vfprintf+0x942>
   18570:	f029 0911 	bic.w	r9, r9, #17
   18574:	462c      	mov	r4, r5
   18576:	fa1f f989 	uxth.w	r9, r9
   1857a:	e77b      	b.n	18474 <__d_vfprintf+0x9bc>
   1857c:	4691      	mov	r9, r2
   1857e:	e7aa      	b.n	184d6 <__d_vfprintf+0xa1e>
   18580:	465c      	mov	r4, fp
   18582:	e750      	b.n	18426 <__d_vfprintf+0x96e>
   18584:	465c      	mov	r4, fp
   18586:	e775      	b.n	18474 <__d_vfprintf+0x9bc>
   18588:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1858c:	4641      	mov	r1, r8
   1858e:	2020      	movs	r0, #32
   18590:	9b03      	ldr	r3, [sp, #12]
   18592:	4798      	blx	r3
   18594:	2800      	cmp	r0, #0
   18596:	f6ff aaab 	blt.w	17af0 <__d_vfprintf+0x38>
   1859a:	9a04      	ldr	r2, [sp, #16]
   1859c:	9b05      	ldr	r3, [sp, #20]
   1859e:	3201      	adds	r2, #1
   185a0:	4592      	cmp	sl, r2
   185a2:	dcf1      	bgt.n	18588 <__d_vfprintf+0xad0>
   185a4:	1b34      	subs	r4, r6, r4
   185a6:	18a6      	adds	r6, r4, r2
   185a8:	4614      	mov	r4, r2
   185aa:	b1a3      	cbz	r3, 185d6 <__d_vfprintf+0xb1e>
   185ac:	4641      	mov	r1, r8
   185ae:	2030      	movs	r0, #48	; 0x30
   185b0:	9b03      	ldr	r3, [sp, #12]
   185b2:	4798      	blx	r3
   185b4:	2800      	cmp	r0, #0
   185b6:	f6ff aa9b 	blt.w	17af0 <__d_vfprintf+0x38>
   185ba:	b387      	cbz	r7, 1861e <__d_vfprintf+0xb66>
   185bc:	3602      	adds	r6, #2
   185be:	4641      	mov	r1, r8
   185c0:	4638      	mov	r0, r7
   185c2:	9b03      	ldr	r3, [sp, #12]
   185c4:	4798      	blx	r3
   185c6:	2800      	cmp	r0, #0
   185c8:	f6ff aa92 	blt.w	17af0 <__d_vfprintf+0x38>
   185cc:	46b1      	mov	r9, r6
   185ce:	4435      	add	r5, r6
   185d0:	e01c      	b.n	1860c <__d_vfprintf+0xb54>
   185d2:	465d      	mov	r5, fp
   185d4:	e793      	b.n	184fe <__d_vfprintf+0xa46>
   185d6:	f240 4306 	movw	r3, #1030	; 0x406
   185da:	ea19 0f03 	tst.w	r9, r3
   185de:	d0f5      	beq.n	185cc <__d_vfprintf+0xb14>
   185e0:	f019 0f02 	tst.w	r9, #2
   185e4:	f106 0601 	add.w	r6, r6, #1
   185e8:	4641      	mov	r1, r8
   185ea:	bf14      	ite	ne
   185ec:	202b      	movne	r0, #43	; 0x2b
   185ee:	2020      	moveq	r0, #32
   185f0:	f419 6f80 	tst.w	r9, #1024	; 0x400
   185f4:	bf18      	it	ne
   185f6:	202d      	movne	r0, #45	; 0x2d
   185f8:	e7e3      	b.n	185c2 <__d_vfprintf+0xb0a>
   185fa:	4641      	mov	r1, r8
   185fc:	2030      	movs	r0, #48	; 0x30
   185fe:	9b03      	ldr	r3, [sp, #12]
   18600:	f109 0901 	add.w	r9, r9, #1
   18604:	4798      	blx	r3
   18606:	2800      	cmp	r0, #0
   18608:	f6ff aa72 	blt.w	17af0 <__d_vfprintf+0x38>
   1860c:	eba5 0309 	sub.w	r3, r5, r9
   18610:	455b      	cmp	r3, fp
   18612:	dcf2      	bgt.n	185fa <__d_vfprintf+0xb42>
   18614:	465d      	mov	r5, fp
   18616:	ae0e      	add	r6, sp, #56	; 0x38
   18618:	b935      	cbnz	r5, 18628 <__d_vfprintf+0xb70>
   1861a:	44d9      	add	r9, fp
   1861c:	e69c      	b.n	18358 <__d_vfprintf+0x8a0>
   1861e:	3601      	adds	r6, #1
   18620:	e7d4      	b.n	185cc <__d_vfprintf+0xb14>
   18622:	bf00      	nop
   18624:	00024401 	.word	0x00024401
   18628:	3d01      	subs	r5, #1
   1862a:	4641      	mov	r1, r8
   1862c:	9b03      	ldr	r3, [sp, #12]
   1862e:	5d70      	ldrb	r0, [r6, r5]
   18630:	4798      	blx	r3
   18632:	2800      	cmp	r0, #0
   18634:	daf0      	bge.n	18618 <__d_vfprintf+0xb60>
   18636:	f7ff ba5b 	b.w	17af0 <__d_vfprintf+0x38>
   1863a:	4641      	mov	r1, r8
   1863c:	2020      	movs	r0, #32
   1863e:	9b03      	ldr	r3, [sp, #12]
   18640:	3601      	adds	r6, #1
   18642:	4798      	blx	r3
   18644:	2800      	cmp	r0, #0
   18646:	f6ff aa53 	blt.w	17af0 <__d_vfprintf+0x38>
   1864a:	1ba3      	subs	r3, r4, r6
   1864c:	2b00      	cmp	r3, #0
   1864e:	dcf4      	bgt.n	1863a <__d_vfprintf+0xb82>
   18650:	e774      	b.n	1853c <__d_vfprintf+0xa84>
   18652:	bf00      	nop

00018654 <vsnprintf>:
   18654:	b5f0      	push	{r4, r5, r6, r7, lr}
   18656:	b089      	sub	sp, #36	; 0x24
   18658:	4605      	mov	r5, r0
   1865a:	460c      	mov	r4, r1
   1865c:	4616      	mov	r6, r2
   1865e:	2100      	movs	r1, #0
   18660:	221c      	movs	r2, #28
   18662:	a801      	add	r0, sp, #4
   18664:	461f      	mov	r7, r3
   18666:	f007 f93f 	bl	1f8e8 <memset>
   1866a:	2302      	movs	r3, #2
   1866c:	4620      	mov	r0, r4
   1866e:	9505      	str	r5, [sp, #20]
   18670:	f88d 3006 	strb.w	r3, [sp, #6]
   18674:	4b0a      	ldr	r3, [pc, #40]	; (186a0 <vsnprintf+0x4c>)
   18676:	9302      	str	r3, [sp, #8]
   18678:	b12c      	cbz	r4, 18686 <vsnprintf+0x32>
   1867a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   1867e:	bf28      	it	cs
   18680:	f04f 4000 	movcs.w	r0, #2147483648	; 0x80000000
   18684:	3801      	subs	r0, #1
   18686:	4405      	add	r5, r0
   18688:	463a      	mov	r2, r7
   1868a:	4631      	mov	r1, r6
   1868c:	a801      	add	r0, sp, #4
   1868e:	9506      	str	r5, [sp, #24]
   18690:	f7ff fa12 	bl	17ab8 <__d_vfprintf>
   18694:	b114      	cbz	r4, 1869c <vsnprintf+0x48>
   18696:	9b05      	ldr	r3, [sp, #20]
   18698:	2200      	movs	r2, #0
   1869a:	701a      	strb	r2, [r3, #0]
   1869c:	b009      	add	sp, #36	; 0x24
   1869e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   186a0:	0001f8f9 	.word	0x0001f8f9

000186a4 <div10>:
   186a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   186a6:	ab02      	add	r3, sp, #8
   186a8:	4a07      	ldr	r2, [pc, #28]	; (186c8 <div10+0x24>)
   186aa:	9300      	str	r3, [sp, #0]
   186ac:	f04f 33cc 	mov.w	r3, #3435973836	; 0xcccccccc
   186b0:	f007 f8d3 	bl	1f85a <__umul128>
   186b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   186b8:	08c0      	lsrs	r0, r0, #3
   186ba:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
   186be:	08c9      	lsrs	r1, r1, #3
   186c0:	b005      	add	sp, #20
   186c2:	f85d fb04 	ldr.w	pc, [sp], #4
   186c6:	bf00      	nop
   186c8:	cccccccd 	.word	0xcccccccd

000186cc <__dtoa_engine>:
   186cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186d0:	b09b      	sub	sp, #108	; 0x6c
   186d2:	4604      	mov	r4, r0
   186d4:	9205      	str	r2, [sp, #20]
   186d6:	460a      	mov	r2, r1
   186d8:	930a      	str	r3, [sp, #40]	; 0x28
   186da:	f3c2 550a 	ubfx	r5, r2, #20, #11
   186de:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
   186e2:	0fd2      	lsrs	r2, r2, #31
   186e4:	930b      	str	r3, [sp, #44]	; 0x2c
   186e6:	f3c1 0313 	ubfx	r3, r1, #0, #20
   186ea:	9209      	str	r2, [sp, #36]	; 0x24
   186ec:	0d09      	lsrs	r1, r1, #20
   186ee:	b985      	cbnz	r5, 18712 <__dtoa_engine+0x46>
   186f0:	ea50 0203 	orrs.w	r2, r0, r3
   186f4:	d11d      	bne.n	18732 <__dtoa_engine+0x66>
   186f6:	9a05      	ldr	r2, [sp, #20]
   186f8:	2330      	movs	r3, #48	; 0x30
   186fa:	2601      	movs	r6, #1
   186fc:	7153      	strb	r3, [r2, #5]
   186fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18700:	7195      	strb	r5, [r2, #6]
   18702:	f043 0302 	orr.w	r3, r3, #2
   18706:	6015      	str	r5, [r2, #0]
   18708:	7113      	strb	r3, [r2, #4]
   1870a:	4630      	mov	r0, r6
   1870c:	b01b      	add	sp, #108	; 0x6c
   1870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18712:	f240 72ff 	movw	r2, #2047	; 0x7ff
   18716:	4295      	cmp	r5, r2
   18718:	d14b      	bne.n	187b2 <__dtoa_engine+0xe6>
   1871a:	4303      	orrs	r3, r0
   1871c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1871e:	9a05      	ldr	r2, [sp, #20]
   18720:	f04f 0600 	mov.w	r6, #0
   18724:	bf14      	ite	ne
   18726:	f043 0308 	orrne.w	r3, r3, #8
   1872a:	f043 0304 	orreq.w	r3, r3, #4
   1872e:	7113      	strb	r3, [r2, #4]
   18730:	e7eb      	b.n	1870a <__dtoa_engine+0x3e>
   18732:	f000 0201 	and.w	r2, r0, #1
   18736:	ea4f 0883 	mov.w	r8, r3, lsl #2
   1873a:	0087      	lsls	r7, r0, #2
   1873c:	469a      	mov	sl, r3
   1873e:	9208      	str	r2, [sp, #32]
   18740:	2201      	movs	r2, #1
   18742:	ea48 7890 	orr.w	r8, r8, r0, lsr #30
   18746:	4daa      	ldr	r5, [pc, #680]	; (189f0 <__dtoa_engine+0x324>)
   18748:	4616      	mov	r6, r2
   1874a:	f1c5 0b00 	rsb	fp, r5, #0
   1874e:	9206      	str	r2, [sp, #24]
   18750:	4658      	mov	r0, fp
   18752:	f000 fb1d 	bl	18d90 <__log10Pow5>
   18756:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1875a:	bfac      	ite	ge
   1875c:	4681      	movge	r9, r0
   1875e:	f1a0 0901 	sublt.w	r9, r0, #1
   18762:	ebab 0b09 	sub.w	fp, fp, r9
   18766:	eb09 0305 	add.w	r3, r9, r5
   1876a:	4658      	mov	r0, fp
   1876c:	9304      	str	r3, [sp, #16]
   1876e:	f000 fb15 	bl	18d9c <__pow5bits>
   18772:	a916      	add	r1, sp, #88	; 0x58
   18774:	f1a0 057d 	sub.w	r5, r0, #125	; 0x7d
   18778:	4658      	mov	r0, fp
   1877a:	f000 fa15 	bl	18ba8 <__double_computePow5>
   1877e:	ab12      	add	r3, sp, #72	; 0x48
   18780:	9a06      	ldr	r2, [sp, #24]
   18782:	eba9 0505 	sub.w	r5, r9, r5
   18786:	9301      	str	r3, [sp, #4]
   18788:	ab10      	add	r3, sp, #64	; 0x40
   1878a:	4620      	mov	r0, r4
   1878c:	9202      	str	r2, [sp, #8]
   1878e:	9300      	str	r3, [sp, #0]
   18790:	aa16      	add	r2, sp, #88	; 0x58
   18792:	462b      	mov	r3, r5
   18794:	4651      	mov	r1, sl
   18796:	f006 ffa6 	bl	1f6e6 <mulShiftAll64>
   1879a:	f1b9 0f01 	cmp.w	r9, #1
   1879e:	4604      	mov	r4, r0
   187a0:	460d      	mov	r5, r1
   187a2:	f200 80d2 	bhi.w	1894a <__dtoa_engine+0x27e>
   187a6:	9b08      	ldr	r3, [sp, #32]
   187a8:	2b00      	cmp	r3, #0
   187aa:	f040 80c5 	bne.w	18938 <__dtoa_engine+0x26c>
   187ae:	2701      	movs	r7, #1
   187b0:	e06b      	b.n	1888a <__dtoa_engine+0x1be>
   187b2:	f443 1a80 	orr.w	sl, r3, #1048576	; 0x100000
   187b6:	f000 0201 	and.w	r2, r0, #1
   187ba:	4303      	orrs	r3, r0
   187bc:	f2a5 4535 	subw	r5, r5, #1077	; 0x435
   187c0:	ea4f 088a 	mov.w	r8, sl, lsl #2
   187c4:	9208      	str	r2, [sp, #32]
   187c6:	ea4f 0780 	mov.w	r7, r0, lsl #2
   187ca:	ea48 7890 	orr.w	r8, r8, r0, lsr #30
   187ce:	d149      	bne.n	18864 <__dtoa_engine+0x198>
   187d0:	f240 73fe 	movw	r3, #2046	; 0x7fe
   187d4:	4219      	tst	r1, r3
   187d6:	bf0c      	ite	eq
   187d8:	2601      	moveq	r6, #1
   187da:	2600      	movne	r6, #0
   187dc:	2d00      	cmp	r5, #0
   187de:	4632      	mov	r2, r6
   187e0:	dbb3      	blt.n	1874a <__dtoa_engine+0x7e>
   187e2:	4628      	mov	r0, r5
   187e4:	f000 face 	bl	18d84 <__log10Pow2>
   187e8:	2d03      	cmp	r5, #3
   187ea:	bfc8      	it	gt
   187ec:	3801      	subgt	r0, #1
   187ee:	9004      	str	r0, [sp, #16]
   187f0:	f000 fad4 	bl	18d9c <__pow5bits>
   187f4:	9b04      	ldr	r3, [sp, #16]
   187f6:	307c      	adds	r0, #124	; 0x7c
   187f8:	a916      	add	r1, sp, #88	; 0x58
   187fa:	1b5d      	subs	r5, r3, r5
   187fc:	4405      	add	r5, r0
   187fe:	4618      	mov	r0, r3
   18800:	f000 fa44 	bl	18c8c <__double_computeInvPow5>
   18804:	ab12      	add	r3, sp, #72	; 0x48
   18806:	4620      	mov	r0, r4
   18808:	aa16      	add	r2, sp, #88	; 0x58
   1880a:	9301      	str	r3, [sp, #4]
   1880c:	ab10      	add	r3, sp, #64	; 0x40
   1880e:	4651      	mov	r1, sl
   18810:	9602      	str	r6, [sp, #8]
   18812:	9300      	str	r3, [sp, #0]
   18814:	462b      	mov	r3, r5
   18816:	f006 ff66 	bl	1f6e6 <mulShiftAll64>
   1881a:	9b04      	ldr	r3, [sp, #16]
   1881c:	4604      	mov	r4, r0
   1881e:	460d      	mov	r5, r1
   18820:	2b15      	cmp	r3, #21
   18822:	f200 8086 	bhi.w	18932 <__dtoa_engine+0x266>
   18826:	ab14      	add	r3, sp, #80	; 0x50
   18828:	4a72      	ldr	r2, [pc, #456]	; (189f4 <__dtoa_engine+0x328>)
   1882a:	4638      	mov	r0, r7
   1882c:	4641      	mov	r1, r8
   1882e:	9300      	str	r3, [sp, #0]
   18830:	f04f 33cc 	mov.w	r3, #3435973836	; 0xcccccccc
   18834:	f007 f811 	bl	1f85a <__umul128>
   18838:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1883a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1883c:	089b      	lsrs	r3, r3, #2
   1883e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
   18842:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18846:	42bb      	cmp	r3, r7
   18848:	e9dd 9a10 	ldrd	r9, sl, [sp, #64]	; 0x40
   1884c:	d10c      	bne.n	18868 <__dtoa_engine+0x19c>
   1884e:	4638      	mov	r0, r7
   18850:	4641      	mov	r1, r8
   18852:	f000 f991 	bl	18b78 <__pow5Factor>
   18856:	9b04      	ldr	r3, [sp, #16]
   18858:	4283      	cmp	r3, r0
   1885a:	bf8c      	ite	hi
   1885c:	2700      	movhi	r7, #0
   1885e:	2701      	movls	r7, #1
   18860:	2600      	movs	r6, #0
   18862:	e012      	b.n	1888a <__dtoa_engine+0x1be>
   18864:	2601      	movs	r6, #1
   18866:	e7b9      	b.n	187dc <__dtoa_engine+0x110>
   18868:	9b08      	ldr	r3, [sp, #32]
   1886a:	2b00      	cmp	r3, #0
   1886c:	d151      	bne.n	18912 <__dtoa_engine+0x246>
   1886e:	3f01      	subs	r7, #1
   18870:	f148 31ff 	adc.w	r1, r8, #4294967295	; 0xffffffff
   18874:	1bb8      	subs	r0, r7, r6
   18876:	f161 0100 	sbc.w	r1, r1, #0
   1887a:	f000 f97d 	bl	18b78 <__pow5Factor>
   1887e:	9b04      	ldr	r3, [sp, #16]
   18880:	9f08      	ldr	r7, [sp, #32]
   18882:	4283      	cmp	r3, r0
   18884:	bf8c      	ite	hi
   18886:	2600      	movhi	r6, #0
   18888:	2601      	movls	r6, #1
   1888a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1888c:	2b00      	cmp	r3, #0
   1888e:	f040 8090 	bne.w	189b2 <__dtoa_engine+0x2e6>
   18892:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   18896:	f04f 0800 	mov.w	r8, #0
   1889a:	f04f 0a0a 	mov.w	sl, #10
   1889e:	e9cd 8806 	strd	r8, r8, [sp, #24]
   188a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   188a6:	f7ff fefd 	bl	186a4 <div10>
   188aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   188ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   188b0:	4618      	mov	r0, r3
   188b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   188b4:	930e      	str	r3, [sp, #56]	; 0x38
   188b6:	f7ff fef5 	bl	186a4 <div10>
   188ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   188bc:	4681      	mov	r9, r0
   188be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   188c0:	4298      	cmp	r0, r3
   188c2:	460b      	mov	r3, r1
   188c4:	910f      	str	r1, [sp, #60]	; 0x3c
   188c6:	4193      	sbcs	r3, r2
   188c8:	f080 808d 	bcs.w	189e6 <__dtoa_engine+0x31a>
   188cc:	4620      	mov	r0, r4
   188ce:	4629      	mov	r1, r5
   188d0:	f7ff fee8 	bl	186a4 <div10>
   188d4:	fb0a f309 	mul.w	r3, sl, r9
   188d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   188da:	f1b8 0f00 	cmp.w	r8, #0
   188de:	bf14      	ite	ne
   188e0:	2700      	movne	r7, #0
   188e2:	f007 0701 	andeq.w	r7, r7, #1
   188e6:	fb0a 4810 	mls	r8, sl, r0, r4
   188ea:	460d      	mov	r5, r1
   188ec:	4293      	cmp	r3, r2
   188ee:	bf14      	ite	ne
   188f0:	2600      	movne	r6, #0
   188f2:	f006 0601 	andeq.w	r6, r6, #1
   188f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   188f8:	fa5f f888 	uxtb.w	r8, r8
   188fc:	4604      	mov	r4, r0
   188fe:	9310      	str	r3, [sp, #64]	; 0x40
   18900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18902:	e9cd 3911 	strd	r3, r9, [sp, #68]	; 0x44
   18906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18908:	9313      	str	r3, [sp, #76]	; 0x4c
   1890a:	9b07      	ldr	r3, [sp, #28]
   1890c:	3301      	adds	r3, #1
   1890e:	9307      	str	r3, [sp, #28]
   18910:	e7c7      	b.n	188a2 <__dtoa_engine+0x1d6>
   18912:	1cb8      	adds	r0, r7, #2
   18914:	f148 0100 	adc.w	r1, r8, #0
   18918:	f000 f92e 	bl	18b78 <__pow5Factor>
   1891c:	9b04      	ldr	r3, [sp, #16]
   1891e:	4283      	cmp	r3, r0
   18920:	bf8c      	ite	hi
   18922:	2000      	movhi	r0, #0
   18924:	2001      	movls	r0, #1
   18926:	ebb9 0000 	subs.w	r0, r9, r0
   1892a:	f16a 0200 	sbc.w	r2, sl, #0
   1892e:	e9cd 0210 	strd	r0, r2, [sp, #64]	; 0x40
   18932:	2700      	movs	r7, #0
   18934:	463e      	mov	r6, r7
   18936:	e7a8      	b.n	1888a <__dtoa_engine+0x1be>
   18938:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1893a:	2701      	movs	r7, #1
   1893c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1893e:	3b01      	subs	r3, #1
   18940:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   18944:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
   18948:	e78a      	b.n	18860 <__dtoa_engine+0x194>
   1894a:	f1b9 0f3e 	cmp.w	r9, #62	; 0x3e
   1894e:	d8f0      	bhi.n	18932 <__dtoa_engine+0x266>
   18950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18954:	f1a9 0020 	sub.w	r0, r9, #32
   18958:	f1c9 0120 	rsb	r1, r9, #32
   1895c:	fa03 f209 	lsl.w	r2, r3, r9
   18960:	fa03 f000 	lsl.w	r0, r3, r0
   18964:	fa23 f101 	lsr.w	r1, r3, r1
   18968:	fa03 f309 	lsl.w	r3, r3, r9
   1896c:	4302      	orrs	r2, r0
   1896e:	ea27 0703 	bic.w	r7, r7, r3
   18972:	430a      	orrs	r2, r1
   18974:	ea28 0802 	bic.w	r8, r8, r2
   18978:	ea57 0708 	orrs.w	r7, r7, r8
   1897c:	bf0c      	ite	eq
   1897e:	2701      	moveq	r7, #1
   18980:	2700      	movne	r7, #0
   18982:	e76d      	b.n	18860 <__dtoa_engine+0x194>
   18984:	fb00 fc02 	mul.w	ip, r0, r2
   18988:	3301      	adds	r3, #1
   1898a:	fba1 1200 	umull	r1, r2, r1, r0
   1898e:	4462      	add	r2, ip
   18990:	428c      	cmp	r4, r1
   18992:	eb75 0c02 	sbcs.w	ip, r5, r2
   18996:	d2f5      	bcs.n	18984 <__dtoa_engine+0x2b8>
   18998:	9a04      	ldr	r2, [sp, #16]
   1899a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   1899e:	4413      	add	r3, r2
   189a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   189a2:	4413      	add	r3, r2
   189a4:	2b01      	cmp	r3, #1
   189a6:	bfb8      	it	lt
   189a8:	2301      	movlt	r3, #1
   189aa:	459b      	cmp	fp, r3
   189ac:	bfa8      	it	ge
   189ae:	469b      	movge	fp, r3
   189b0:	e771      	b.n	18896 <__dtoa_engine+0x1ca>
   189b2:	210a      	movs	r1, #10
   189b4:	2200      	movs	r2, #0
   189b6:	2301      	movs	r3, #1
   189b8:	4608      	mov	r0, r1
   189ba:	e7e9      	b.n	18990 <__dtoa_engine+0x2c4>
   189bc:	fb0a f003 	mul.w	r0, sl, r3
   189c0:	3101      	adds	r1, #1
   189c2:	fba2 230a 	umull	r2, r3, r2, sl
   189c6:	4403      	add	r3, r0
   189c8:	4294      	cmp	r4, r2
   189ca:	eb75 0003 	sbcs.w	r0, r5, r3
   189ce:	d2f5      	bcs.n	189bc <__dtoa_engine+0x2f0>
   189d0:	4559      	cmp	r1, fp
   189d2:	dd11      	ble.n	189f8 <__dtoa_engine+0x32c>
   189d4:	f1bb 0f00 	cmp.w	fp, #0
   189d8:	d102      	bne.n	189e0 <__dtoa_engine+0x314>
   189da:	ea54 0305 	orrs.w	r3, r4, r5
   189de:	d00b      	beq.n	189f8 <__dtoa_engine+0x32c>
   189e0:	2301      	movs	r3, #1
   189e2:	9306      	str	r3, [sp, #24]
   189e4:	e772      	b.n	188cc <__dtoa_engine+0x200>
   189e6:	220a      	movs	r2, #10
   189e8:	2300      	movs	r3, #0
   189ea:	2101      	movs	r1, #1
   189ec:	e7ec      	b.n	189c8 <__dtoa_engine+0x2fc>
   189ee:	bf00      	nop
   189f0:	fffffbcc 	.word	0xfffffbcc
   189f4:	cccccccd 	.word	0xcccccccd
   189f8:	2e00      	cmp	r6, #0
   189fa:	d02f      	beq.n	18a5c <__dtoa_engine+0x390>
   189fc:	f04f 0a0a 	mov.w	sl, #10
   18a00:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18a02:	9913      	ldr	r1, [sp, #76]	; 0x4c
   18a04:	4618      	mov	r0, r3
   18a06:	930d      	str	r3, [sp, #52]	; 0x34
   18a08:	f7ff fe4c 	bl	186a4 <div10>
   18a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18a0e:	fb0a f200 	mul.w	r2, sl, r0
   18a12:	4681      	mov	r9, r0
   18a14:	910c      	str	r1, [sp, #48]	; 0x30
   18a16:	429a      	cmp	r2, r3
   18a18:	d120      	bne.n	18a5c <__dtoa_engine+0x390>
   18a1a:	f1b8 0f00 	cmp.w	r8, #0
   18a1e:	bf14      	ite	ne
   18a20:	2700      	movne	r7, #0
   18a22:	f007 0701 	andeq.w	r7, r7, #1
   18a26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   18a2a:	f7ff fe3b 	bl	186a4 <div10>
   18a2e:	900e      	str	r0, [sp, #56]	; 0x38
   18a30:	910d      	str	r1, [sp, #52]	; 0x34
   18a32:	4620      	mov	r0, r4
   18a34:	4629      	mov	r1, r5
   18a36:	f7ff fe35 	bl	186a4 <div10>
   18a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18a3c:	fb0a 4810 	mls	r8, sl, r0, r4
   18a40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18a42:	4604      	mov	r4, r0
   18a44:	460d      	mov	r5, r1
   18a46:	fa5f f888 	uxtb.w	r8, r8
   18a4a:	9210      	str	r2, [sp, #64]	; 0x40
   18a4c:	e9cd 3911 	strd	r3, r9, [sp, #68]	; 0x44
   18a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18a52:	9313      	str	r3, [sp, #76]	; 0x4c
   18a54:	9b07      	ldr	r3, [sp, #28]
   18a56:	3301      	adds	r3, #1
   18a58:	9307      	str	r3, [sp, #28]
   18a5a:	e7d1      	b.n	18a00 <__dtoa_engine+0x334>
   18a5c:	f8dd 9010 	ldr.w	r9, [sp, #16]
   18a60:	9b07      	ldr	r3, [sp, #28]
   18a62:	4499      	add	r9, r3
   18a64:	2f00      	cmp	r7, #0
   18a66:	d060      	beq.n	18b2a <__dtoa_engine+0x45e>
   18a68:	f1b8 0f05 	cmp.w	r8, #5
   18a6c:	d15d      	bne.n	18b2a <__dtoa_engine+0x45e>
   18a6e:	f014 0301 	ands.w	r3, r4, #1
   18a72:	d150      	bne.n	18b16 <__dtoa_engine+0x44a>
   18a74:	9a06      	ldr	r2, [sp, #24]
   18a76:	b932      	cbnz	r2, 18a86 <__dtoa_engine+0x3ba>
   18a78:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   18a7c:	429d      	cmp	r5, r3
   18a7e:	bf08      	it	eq
   18a80:	4294      	cmpeq	r4, r2
   18a82:	d065      	beq.n	18b50 <__dtoa_engine+0x484>
   18a84:	9b06      	ldr	r3, [sp, #24]
   18a86:	1918      	adds	r0, r3, r4
   18a88:	f04f 040a 	mov.w	r4, #10
   18a8c:	f04f 0200 	mov.w	r2, #0
   18a90:	f04f 0601 	mov.w	r6, #1
   18a94:	f145 0100 	adc.w	r1, r5, #0
   18a98:	4625      	mov	r5, r4
   18a9a:	42a0      	cmp	r0, r4
   18a9c:	eb71 0702 	sbcs.w	r7, r1, r2
   18aa0:	d259      	bcs.n	18b56 <__dtoa_engine+0x48a>
   18aa2:	b1eb      	cbz	r3, 18ae0 <__dtoa_engine+0x414>
   18aa4:	45b3      	cmp	fp, r6
   18aa6:	da1b      	bge.n	18ae0 <__dtoa_engine+0x414>
   18aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18aaa:	b163      	cbz	r3, 18ac6 <__dtoa_engine+0x3fa>
   18aac:	eb06 0309 	add.w	r3, r6, r9
   18ab0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   18ab2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   18ab6:	4413      	add	r3, r2
   18ab8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18abc:	459b      	cmp	fp, r3
   18abe:	bfa8      	it	ge
   18ac0:	469b      	movge	fp, r3
   18ac2:	455e      	cmp	r6, fp
   18ac4:	dd0c      	ble.n	18ae0 <__dtoa_engine+0x414>
   18ac6:	3005      	adds	r0, #5
   18ac8:	f109 0901 	add.w	r9, r9, #1
   18acc:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   18ad0:	f04f 020a 	mov.w	r2, #10
   18ad4:	f04f 0300 	mov.w	r3, #0
   18ad8:	f141 0100 	adc.w	r1, r1, #0
   18adc:	f7ef fb32 	bl	8144 <__aeabi_uldivmod>
   18ae0:	455e      	cmp	r6, fp
   18ae2:	fa0f f989 	sxth.w	r9, r9
   18ae6:	9b05      	ldr	r3, [sp, #20]
   18ae8:	bfa8      	it	ge
   18aea:	465e      	movge	r6, fp
   18aec:	b236      	sxth	r6, r6
   18aee:	44b1      	add	r9, r6
   18af0:	f106 0805 	add.w	r8, r6, #5
   18af4:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
   18af8:	4498      	add	r8, r3
   18afa:	f04f 0900 	mov.w	r9, #0
   18afe:	45b1      	cmp	r9, r6
   18b00:	db30      	blt.n	18b64 <__dtoa_engine+0x498>
   18b02:	9b05      	ldr	r3, [sp, #20]
   18b04:	2200      	movs	r2, #0
   18b06:	4433      	add	r3, r6
   18b08:	715a      	strb	r2, [r3, #5]
   18b0a:	9b05      	ldr	r3, [sp, #20]
   18b0c:	461a      	mov	r2, r3
   18b0e:	601f      	str	r7, [r3, #0]
   18b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18b12:	7113      	strb	r3, [r2, #4]
   18b14:	e5f9      	b.n	1870a <__dtoa_engine+0x3e>
   18b16:	9b06      	ldr	r3, [sp, #24]
   18b18:	b92b      	cbnz	r3, 18b26 <__dtoa_engine+0x45a>
   18b1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   18b1e:	429d      	cmp	r5, r3
   18b20:	bf08      	it	eq
   18b22:	4294      	cmpeq	r4, r2
   18b24:	d009      	beq.n	18b3a <__dtoa_engine+0x46e>
   18b26:	2301      	movs	r3, #1
   18b28:	e7ad      	b.n	18a86 <__dtoa_engine+0x3ba>
   18b2a:	9b06      	ldr	r3, [sp, #24]
   18b2c:	b953      	cbnz	r3, 18b44 <__dtoa_engine+0x478>
   18b2e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   18b32:	429d      	cmp	r5, r3
   18b34:	bf08      	it	eq
   18b36:	4294      	cmpeq	r4, r2
   18b38:	d104      	bne.n	18b44 <__dtoa_engine+0x478>
   18b3a:	9b08      	ldr	r3, [sp, #32]
   18b3c:	2b00      	cmp	r3, #0
   18b3e:	d1f2      	bne.n	18b26 <__dtoa_engine+0x45a>
   18b40:	2e00      	cmp	r6, #0
   18b42:	d0f0      	beq.n	18b26 <__dtoa_engine+0x45a>
   18b44:	f1b8 0f04 	cmp.w	r8, #4
   18b48:	bf94      	ite	ls
   18b4a:	2300      	movls	r3, #0
   18b4c:	2301      	movhi	r3, #1
   18b4e:	e79a      	b.n	18a86 <__dtoa_engine+0x3ba>
   18b50:	f04f 0804 	mov.w	r8, #4
   18b54:	e7f1      	b.n	18b3a <__dtoa_engine+0x46e>
   18b56:	fb05 f702 	mul.w	r7, r5, r2
   18b5a:	3601      	adds	r6, #1
   18b5c:	fba4 4205 	umull	r4, r2, r4, r5
   18b60:	443a      	add	r2, r7
   18b62:	e79a      	b.n	18a9a <__dtoa_engine+0x3ce>
   18b64:	220a      	movs	r2, #10
   18b66:	2300      	movs	r3, #0
   18b68:	f7ef faec 	bl	8144 <__aeabi_uldivmod>
   18b6c:	3230      	adds	r2, #48	; 0x30
   18b6e:	f109 0901 	add.w	r9, r9, #1
   18b72:	f808 2d01 	strb.w	r2, [r8, #-1]!
   18b76:	e7c2      	b.n	18afe <__dtoa_engine+0x432>

00018b78 <__pow5Factor>:
   18b78:	b570      	push	{r4, r5, r6, lr}
   18b7a:	4603      	mov	r3, r0
   18b7c:	4a09      	ldr	r2, [pc, #36]	; (18ba4 <__pow5Factor+0x2c>)
   18b7e:	2000      	movs	r0, #0
   18b80:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   18b84:	f04f 3533 	mov.w	r5, #858993459	; 0x33333333
   18b88:	fb06 f403 	mul.w	r4, r6, r3
   18b8c:	fb02 4401 	mla	r4, r2, r1, r4
   18b90:	fba3 3102 	umull	r3, r1, r3, r2
   18b94:	4421      	add	r1, r4
   18b96:	429d      	cmp	r5, r3
   18b98:	eb75 0401 	sbcs.w	r4, r5, r1
   18b9c:	d301      	bcc.n	18ba2 <__pow5Factor+0x2a>
   18b9e:	3001      	adds	r0, #1
   18ba0:	e7f2      	b.n	18b88 <__pow5Factor+0x10>
   18ba2:	bd70      	pop	{r4, r5, r6, pc}
   18ba4:	cccccccd 	.word	0xcccccccd

00018ba8 <__double_computePow5>:
   18ba8:	231a      	movs	r3, #26
   18baa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bae:	fbb0 faf3 	udiv	sl, r0, r3
   18bb2:	4e33      	ldr	r6, [pc, #204]	; (18c80 <__double_computePow5+0xd8>)
   18bb4:	fb03 031a 	mls	r3, r3, sl, r0
   18bb8:	b089      	sub	sp, #36	; 0x24
   18bba:	4604      	mov	r4, r0
   18bbc:	460d      	mov	r5, r1
   18bbe:	eb06 160a 	add.w	r6, r6, sl, lsl #4
   18bc2:	b953      	cbnz	r3, 18bda <__double_computePow5+0x32>
   18bc4:	e9d6 2300 	ldrd	r2, r3, [r6]
   18bc8:	e9c1 2300 	strd	r2, r3, [r1]
   18bcc:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   18bd0:	e9c5 0102 	strd	r0, r1, [r5, #8]
   18bd4:	b009      	add	sp, #36	; 0x24
   18bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bda:	4a2a      	ldr	r2, [pc, #168]	; (18c84 <__double_computePow5+0xdc>)
   18bdc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   18be0:	e9d3 8900 	ldrd	r8, r9, [r3]
   18be4:	ab04      	add	r3, sp, #16
   18be6:	4640      	mov	r0, r8
   18be8:	4649      	mov	r1, r9
   18bea:	9300      	str	r3, [sp, #0]
   18bec:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
   18bf0:	f006 fe33 	bl	1f85a <__umul128>
   18bf4:	ab06      	add	r3, sp, #24
   18bf6:	4683      	mov	fp, r0
   18bf8:	460f      	mov	r7, r1
   18bfa:	4640      	mov	r0, r8
   18bfc:	4649      	mov	r1, r9
   18bfe:	9300      	str	r3, [sp, #0]
   18c00:	e9d6 2300 	ldrd	r2, r3, [r6]
   18c04:	f006 fe29 	bl	1f85a <__umul128>
   18c08:	2300      	movs	r3, #0
   18c0a:	4681      	mov	r9, r0
   18c0c:	e9dd 6206 	ldrd	r6, r2, [sp, #24]
   18c10:	eb16 060b 	adds.w	r6, r6, fp
   18c14:	eb52 0807 	adcs.w	r8, r2, r7
   18c18:	bf28      	it	cs
   18c1a:	2301      	movcs	r3, #1
   18c1c:	b133      	cbz	r3, 18c2c <__double_computePow5+0x84>
   18c1e:	9b04      	ldr	r3, [sp, #16]
   18c20:	9a05      	ldr	r2, [sp, #20]
   18c22:	3301      	adds	r3, #1
   18c24:	f142 0200 	adc.w	r2, r2, #0
   18c28:	e9cd 3204 	strd	r3, r2, [sp, #16]
   18c2c:	4620      	mov	r0, r4
   18c2e:	9103      	str	r1, [sp, #12]
   18c30:	f000 f8b4 	bl	18d9c <__pow5bits>
   18c34:	4607      	mov	r7, r0
   18c36:	201a      	movs	r0, #26
   18c38:	fb00 f00a 	mul.w	r0, r0, sl
   18c3c:	f000 f8ae 	bl	18d9c <__pow5bits>
   18c40:	1a3f      	subs	r7, r7, r0
   18c42:	4632      	mov	r2, r6
   18c44:	4643      	mov	r3, r8
   18c46:	4648      	mov	r0, r9
   18c48:	9903      	ldr	r1, [sp, #12]
   18c4a:	9700      	str	r7, [sp, #0]
   18c4c:	f006 fe20 	bl	1f890 <__shiftright128>
   18c50:	4a0d      	ldr	r2, [pc, #52]	; (18c88 <__double_computePow5+0xe0>)
   18c52:	ea4f 1c14 	mov.w	ip, r4, lsr #4
   18c56:	0064      	lsls	r4, r4, #1
   18c58:	f004 031e 	and.w	r3, r4, #30
   18c5c:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
   18c60:	40dc      	lsrs	r4, r3
   18c62:	f004 0403 	and.w	r4, r4, #3
   18c66:	1824      	adds	r4, r4, r0
   18c68:	4630      	mov	r0, r6
   18c6a:	f141 0100 	adc.w	r1, r1, #0
   18c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   18c72:	e9c5 4100 	strd	r4, r1, [r5]
   18c76:	4641      	mov	r1, r8
   18c78:	9700      	str	r7, [sp, #0]
   18c7a:	f006 fe09 	bl	1f890 <__shiftright128>
   18c7e:	e7a7      	b.n	18bd0 <__double_computePow5+0x28>
   18c80:	00023e28 	.word	0x00023e28
   18c84:	00023d58 	.word	0x00023d58
   18c88:	00024328 	.word	0x00024328

00018c8c <__double_computeInvPow5>:
   18c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c90:	271a      	movs	r7, #26
   18c92:	f100 0519 	add.w	r5, r0, #25
   18c96:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 18d78 <__double_computeInvPow5+0xec>
   18c9a:	b089      	sub	sp, #36	; 0x24
   18c9c:	4604      	mov	r4, r0
   18c9e:	460e      	mov	r6, r1
   18ca0:	fbb5 f5f7 	udiv	r5, r5, r7
   18ca4:	436f      	muls	r7, r5
   18ca6:	ea4f 1b05 	mov.w	fp, r5, lsl #4
   18caa:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
   18cae:	1a3a      	subs	r2, r7, r0
   18cb0:	d10a      	bne.n	18cc8 <__double_computeInvPow5+0x3c>
   18cb2:	e9d5 2300 	ldrd	r2, r3, [r5]
   18cb6:	e9c1 2300 	strd	r2, r3, [r1]
   18cba:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   18cbe:	e9c6 0102 	strd	r0, r1, [r6, #8]
   18cc2:	b009      	add	sp, #36	; 0x24
   18cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cc8:	4b2c      	ldr	r3, [pc, #176]	; (18d7c <__double_computeInvPow5+0xf0>)
   18cca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   18cce:	e9d3 8900 	ldrd	r8, r9, [r3]
   18cd2:	ab04      	add	r3, sp, #16
   18cd4:	4640      	mov	r0, r8
   18cd6:	4649      	mov	r1, r9
   18cd8:	9300      	str	r3, [sp, #0]
   18cda:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   18cde:	f006 fdbc 	bl	1f85a <__umul128>
   18ce2:	f85a 200b 	ldr.w	r2, [sl, fp]
   18ce6:	686b      	ldr	r3, [r5, #4]
   18ce8:	3a01      	subs	r2, #1
   18cea:	e9cd 0102 	strd	r0, r1, [sp, #8]
   18cee:	a906      	add	r1, sp, #24
   18cf0:	f163 0300 	sbc.w	r3, r3, #0
   18cf4:	4640      	mov	r0, r8
   18cf6:	9100      	str	r1, [sp, #0]
   18cf8:	4649      	mov	r1, r9
   18cfa:	f006 fdae 	bl	1f85a <__umul128>
   18cfe:	468a      	mov	sl, r1
   18d00:	9902      	ldr	r1, [sp, #8]
   18d02:	2300      	movs	r3, #0
   18d04:	4681      	mov	r9, r0
   18d06:	e9dd 5206 	ldrd	r5, r2, [sp, #24]
   18d0a:	186d      	adds	r5, r5, r1
   18d0c:	9903      	ldr	r1, [sp, #12]
   18d0e:	eb52 0801 	adcs.w	r8, r2, r1
   18d12:	bf28      	it	cs
   18d14:	2301      	movcs	r3, #1
   18d16:	b133      	cbz	r3, 18d26 <__double_computeInvPow5+0x9a>
   18d18:	9b04      	ldr	r3, [sp, #16]
   18d1a:	9a05      	ldr	r2, [sp, #20]
   18d1c:	3301      	adds	r3, #1
   18d1e:	f142 0200 	adc.w	r2, r2, #0
   18d22:	e9cd 3204 	strd	r3, r2, [sp, #16]
   18d26:	4638      	mov	r0, r7
   18d28:	f000 f838 	bl	18d9c <__pow5bits>
   18d2c:	4607      	mov	r7, r0
   18d2e:	4620      	mov	r0, r4
   18d30:	f000 f834 	bl	18d9c <__pow5bits>
   18d34:	1a3f      	subs	r7, r7, r0
   18d36:	462a      	mov	r2, r5
   18d38:	4643      	mov	r3, r8
   18d3a:	4648      	mov	r0, r9
   18d3c:	4651      	mov	r1, sl
   18d3e:	9700      	str	r7, [sp, #0]
   18d40:	f006 fda6 	bl	1f890 <__shiftright128>
   18d44:	4a0e      	ldr	r2, [pc, #56]	; (18d80 <__double_computeInvPow5+0xf4>)
   18d46:	ea4f 1c14 	mov.w	ip, r4, lsr #4
   18d4a:	0064      	lsls	r4, r4, #1
   18d4c:	f004 031e 	and.w	r3, r4, #30
   18d50:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
   18d54:	40dc      	lsrs	r4, r3
   18d56:	f004 0403 	and.w	r4, r4, #3
   18d5a:	3401      	adds	r4, #1
   18d5c:	1824      	adds	r4, r4, r0
   18d5e:	4628      	mov	r0, r5
   18d60:	f141 0100 	adc.w	r1, r1, #0
   18d64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   18d68:	e9c6 4100 	strd	r4, r1, [r6]
   18d6c:	4641      	mov	r1, r8
   18d6e:	9700      	str	r7, [sp, #0]
   18d70:	f006 fd8e 	bl	1f890 <__shiftright128>
   18d74:	e7a3      	b.n	18cbe <__double_computeInvPow5+0x32>
   18d76:	bf00      	nop
   18d78:	00023ef8 	.word	0x00023ef8
   18d7c:	00023d58 	.word	0x00023d58
   18d80:	0002437c 	.word	0x0002437c

00018d84 <__log10Pow2>:
   18d84:	4b01      	ldr	r3, [pc, #4]	; (18d8c <__log10Pow2+0x8>)
   18d86:	4358      	muls	r0, r3
   18d88:	0c80      	lsrs	r0, r0, #18
   18d8a:	4770      	bx	lr
   18d8c:	00013441 	.word	0x00013441

00018d90 <__log10Pow5>:
   18d90:	4b01      	ldr	r3, [pc, #4]	; (18d98 <__log10Pow5+0x8>)
   18d92:	4358      	muls	r0, r3
   18d94:	0d00      	lsrs	r0, r0, #20
   18d96:	4770      	bx	lr
   18d98:	000b2efb 	.word	0x000b2efb

00018d9c <__pow5bits>:
   18d9c:	4b02      	ldr	r3, [pc, #8]	; (18da8 <__pow5bits+0xc>)
   18d9e:	4358      	muls	r0, r3
   18da0:	0cc0      	lsrs	r0, r0, #19
   18da2:	3001      	adds	r0, #1
   18da4:	4770      	bx	lr
   18da6:	bf00      	nop
   18da8:	0012934f 	.word	0x0012934f

00018dac <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
   18dac:	b480      	push	{r7}
   18dae:	af00      	add	r7, sp, #0

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   18db0:	bf00      	nop
   18db2:	46bd      	mov	sp, r7
   18db4:	bc80      	pop	{r7}
   18db6:	4770      	bx	lr

00018db8 <z_impl_device_is_ready>:
 * is passed as argument.
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
   18db8:	b580      	push	{r7, lr}
   18dba:	b082      	sub	sp, #8
   18dbc:	af00      	add	r7, sp, #0
   18dbe:	6078      	str	r0, [r7, #4]
	return z_device_is_ready(dev);
   18dc0:	6878      	ldr	r0, [r7, #4]
   18dc2:	f005 fb03 	bl	1e3cc <z_device_is_ready>
   18dc6:	4603      	mov	r3, r0
}
   18dc8:	4618      	mov	r0, r3
   18dca:	3708      	adds	r7, #8
   18dcc:	46bd      	mov	sp, r7
   18dce:	bd80      	pop	{r7, pc}

00018dd0 <device_is_ready>:

extern bool z_impl_device_is_ready(const struct device * dev);

__pinned_func
static inline bool device_is_ready(const struct device * dev)
{
   18dd0:	b580      	push	{r7, lr}
   18dd2:	b082      	sub	sp, #8
   18dd4:	af00      	add	r7, sp, #0
   18dd6:	6078      	str	r0, [r7, #4]
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_IS_READY);
	}
#endif
	compiler_barrier();
	return z_impl_device_is_ready(dev);
   18dd8:	6878      	ldr	r0, [r7, #4]
   18dda:	f7ff ffed 	bl	18db8 <z_impl_device_is_ready>
   18dde:	4603      	mov	r3, r0
}
   18de0:	4618      	mov	r0, r3
   18de2:	3708      	adds	r7, #8
   18de4:	46bd      	mov	sp, r7
   18de6:	bd80      	pop	{r7, pc}

00018de8 <gpio_is_ready_dt>:
{
   18de8:	b580      	push	{r7, lr}
   18dea:	b082      	sub	sp, #8
   18dec:	af00      	add	r7, sp, #0
   18dee:	6078      	str	r0, [r7, #4]
	return device_is_ready(spec->port);
   18df0:	687b      	ldr	r3, [r7, #4]
   18df2:	681b      	ldr	r3, [r3, #0]
   18df4:	4618      	mov	r0, r3
   18df6:	f7ff ffeb 	bl	18dd0 <device_is_ready>
   18dfa:	4603      	mov	r3, r0
}
   18dfc:	4618      	mov	r0, r3
   18dfe:	3708      	adds	r7, #8
   18e00:	46bd      	mov	sp, r7
   18e02:	bd80      	pop	{r7, pc}

00018e04 <gpio_pin_configure_dt>:
{
   18e04:	b580      	push	{r7, lr}
   18e06:	b082      	sub	sp, #8
   18e08:	af00      	add	r7, sp, #0
   18e0a:	6078      	str	r0, [r7, #4]
   18e0c:	6039      	str	r1, [r7, #0]
	return gpio_pin_configure(spec->port,
   18e0e:	687b      	ldr	r3, [r7, #4]
   18e10:	6818      	ldr	r0, [r3, #0]
				  spec->pin,
   18e12:	687b      	ldr	r3, [r7, #4]
   18e14:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   18e16:	687b      	ldr	r3, [r7, #4]
   18e18:	88db      	ldrh	r3, [r3, #6]
   18e1a:	461a      	mov	r2, r3
	return gpio_pin_configure(spec->port,
   18e1c:	683b      	ldr	r3, [r7, #0]
   18e1e:	4313      	orrs	r3, r2
   18e20:	461a      	mov	r2, r3
   18e22:	f000 f83b 	bl	18e9c <gpio_pin_configure>
   18e26:	4603      	mov	r3, r0
}
   18e28:	4618      	mov	r0, r3
   18e2a:	3708      	adds	r7, #8
   18e2c:	46bd      	mov	sp, r7
   18e2e:	bd80      	pop	{r7, pc}

00018e30 <z_impl_gpio_port_set_bits_raw>:
{
   18e30:	b580      	push	{r7, lr}
   18e32:	b084      	sub	sp, #16
   18e34:	af00      	add	r7, sp, #0
   18e36:	6078      	str	r0, [r7, #4]
   18e38:	6039      	str	r1, [r7, #0]
	const struct gpio_driver_api *api =
   18e3a:	687b      	ldr	r3, [r7, #4]
   18e3c:	689b      	ldr	r3, [r3, #8]
   18e3e:	60fb      	str	r3, [r7, #12]
	return api->port_set_bits_raw(port, pins);
   18e40:	68fb      	ldr	r3, [r7, #12]
   18e42:	68db      	ldr	r3, [r3, #12]
   18e44:	6839      	ldr	r1, [r7, #0]
   18e46:	6878      	ldr	r0, [r7, #4]
   18e48:	4798      	blx	r3
   18e4a:	4603      	mov	r3, r0
}
   18e4c:	4618      	mov	r0, r3
   18e4e:	3710      	adds	r7, #16
   18e50:	46bd      	mov	sp, r7
   18e52:	bd80      	pop	{r7, pc}

00018e54 <z_impl_gpio_port_clear_bits_raw>:
{
   18e54:	b580      	push	{r7, lr}
   18e56:	b084      	sub	sp, #16
   18e58:	af00      	add	r7, sp, #0
   18e5a:	6078      	str	r0, [r7, #4]
   18e5c:	6039      	str	r1, [r7, #0]
	const struct gpio_driver_api *api =
   18e5e:	687b      	ldr	r3, [r7, #4]
   18e60:	689b      	ldr	r3, [r3, #8]
   18e62:	60fb      	str	r3, [r7, #12]
	return api->port_clear_bits_raw(port, pins);
   18e64:	68fb      	ldr	r3, [r7, #12]
   18e66:	691b      	ldr	r3, [r3, #16]
   18e68:	6839      	ldr	r1, [r7, #0]
   18e6a:	6878      	ldr	r0, [r7, #4]
   18e6c:	4798      	blx	r3
   18e6e:	4603      	mov	r3, r0
}
   18e70:	4618      	mov	r0, r3
   18e72:	3710      	adds	r7, #16
   18e74:	46bd      	mov	sp, r7
   18e76:	bd80      	pop	{r7, pc}

00018e78 <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
   18e78:	b580      	push	{r7, lr}
   18e7a:	b082      	sub	sp, #8
   18e7c:	af00      	add	r7, sp, #0
   18e7e:	6078      	str	r0, [r7, #4]
   18e80:	6039      	str	r1, [r7, #0]
	return gpio_pin_set(spec->port, spec->pin, value);
   18e82:	687b      	ldr	r3, [r7, #4]
   18e84:	6818      	ldr	r0, [r3, #0]
   18e86:	687b      	ldr	r3, [r7, #4]
   18e88:	791b      	ldrb	r3, [r3, #4]
   18e8a:	683a      	ldr	r2, [r7, #0]
   18e8c:	4619      	mov	r1, r3
   18e8e:	f7ef fc1b 	bl	86c8 <gpio_pin_set>
   18e92:	4603      	mov	r3, r0
}
   18e94:	4618      	mov	r0, r3
   18e96:	3708      	adds	r7, #8
   18e98:	46bd      	mov	sp, r7
   18e9a:	bd80      	pop	{r7, pc}

00018e9c <gpio_pin_configure>:

extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
{
   18e9c:	b580      	push	{r7, lr}
   18e9e:	b084      	sub	sp, #16
   18ea0:	af00      	add	r7, sp, #0
   18ea2:	60f8      	str	r0, [r7, #12]
   18ea4:	460b      	mov	r3, r1
   18ea6:	607a      	str	r2, [r7, #4]
   18ea8:	72fb      	strb	r3, [r7, #11]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   18eaa:	7afb      	ldrb	r3, [r7, #11]
   18eac:	687a      	ldr	r2, [r7, #4]
   18eae:	4619      	mov	r1, r3
   18eb0:	68f8      	ldr	r0, [r7, #12]
   18eb2:	f7ef fab7 	bl	8424 <z_impl_gpio_pin_configure>
   18eb6:	4603      	mov	r3, r0
}
   18eb8:	4618      	mov	r0, r3
   18eba:	3710      	adds	r7, #16
   18ebc:	46bd      	mov	sp, r7
   18ebe:	bd80      	pop	{r7, pc}

00018ec0 <gpio_port_set_bits_raw>:

extern int z_impl_gpio_port_set_bits_raw(const struct device * port, gpio_port_pins_t pins);

__pinned_func
static inline int gpio_port_set_bits_raw(const struct device * port, gpio_port_pins_t pins)
{
   18ec0:	b580      	push	{r7, lr}
   18ec2:	b082      	sub	sp, #8
   18ec4:	af00      	add	r7, sp, #0
   18ec6:	6078      	str	r0, [r7, #4]
   18ec8:	6039      	str	r1, [r7, #0]
		union { uintptr_t x; gpio_port_pins_t val; } parm1 = { .val = pins };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_GPIO_PORT_SET_BITS_RAW);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_port_set_bits_raw(port, pins);
   18eca:	6839      	ldr	r1, [r7, #0]
   18ecc:	6878      	ldr	r0, [r7, #4]
   18ece:	f7ff ffaf 	bl	18e30 <z_impl_gpio_port_set_bits_raw>
   18ed2:	4603      	mov	r3, r0
}
   18ed4:	4618      	mov	r0, r3
   18ed6:	3708      	adds	r7, #8
   18ed8:	46bd      	mov	sp, r7
   18eda:	bd80      	pop	{r7, pc}

00018edc <gpio_port_clear_bits_raw>:

extern int z_impl_gpio_port_clear_bits_raw(const struct device * port, gpio_port_pins_t pins);

__pinned_func
static inline int gpio_port_clear_bits_raw(const struct device * port, gpio_port_pins_t pins)
{
   18edc:	b580      	push	{r7, lr}
   18ede:	b082      	sub	sp, #8
   18ee0:	af00      	add	r7, sp, #0
   18ee2:	6078      	str	r0, [r7, #4]
   18ee4:	6039      	str	r1, [r7, #0]
		union { uintptr_t x; gpio_port_pins_t val; } parm1 = { .val = pins };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_GPIO_PORT_CLEAR_BITS_RAW);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_port_clear_bits_raw(port, pins);
   18ee6:	6839      	ldr	r1, [r7, #0]
   18ee8:	6878      	ldr	r0, [r7, #4]
   18eea:	f7ff ffb3 	bl	18e54 <z_impl_gpio_port_clear_bits_raw>
   18eee:	4603      	mov	r3, r0
}
   18ef0:	4618      	mov	r0, r3
   18ef2:	3708      	adds	r7, #8
   18ef4:	46bd      	mov	sp, r7
   18ef6:	bd80      	pop	{r7, pc}

00018ef8 <k_busy_wait>:

extern void z_impl_k_busy_wait(uint32_t usec_to_wait);

__pinned_func
static inline void k_busy_wait(uint32_t usec_to_wait)
{
   18ef8:	b580      	push	{r7, lr}
   18efa:	b082      	sub	sp, #8
   18efc:	af00      	add	r7, sp, #0
   18efe:	6078      	str	r0, [r7, #4]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
   18f00:	6878      	ldr	r0, [r7, #4]
   18f02:	f005 fa4b 	bl	1e39c <z_impl_k_busy_wait>
}
   18f06:	bf00      	nop
   18f08:	3708      	adds	r7, #8
   18f0a:	46bd      	mov	sp, r7
   18f0c:	bd80      	pop	{r7, pc}

00018f0e <pyd1598_set_default_config>:
 * https://www.excelitas.com/file-download/download/public/66906?filename=PYD_1588_Low-Power_DigiPyro_datasheet_.pdf
 *
 * @param dev Pointer to the sensor device
 * @return 0 if successful, negative errno code if failure.
 */
int pyd1598_set_default_config(const struct device *dev) {    
   18f0e:	b580      	push	{r7, lr}
   18f10:	b082      	sub	sp, #8
   18f12:	af00      	add	r7, sp, #0
   18f14:	6078      	str	r0, [r7, #4]
    // access configuration in pyd1598_data and set all values to default
    if (dev == NULL || dev->data == NULL) {
   18f16:	687b      	ldr	r3, [r7, #4]
   18f18:	2b00      	cmp	r3, #0
   18f1a:	d003      	beq.n	18f24 <pyd1598_set_default_config+0x16>
   18f1c:	687b      	ldr	r3, [r7, #4]
   18f1e:	691b      	ldr	r3, [r3, #16]
   18f20:	2b00      	cmp	r3, #0
   18f22:	d102      	bne.n	18f2a <pyd1598_set_default_config+0x1c>
        return -EINVAL;
   18f24:	f06f 0315 	mvn.w	r3, #21
   18f28:	e023      	b.n	18f72 <pyd1598_set_default_config+0x64>
    }
    pyd1598_set_threshold(dev, 31);
   18f2a:	211f      	movs	r1, #31
   18f2c:	6878      	ldr	r0, [r7, #4]
   18f2e:	f7ef fe47 	bl	8bc0 <pyd1598_set_threshold>
    pyd1598_set_blind_time(dev, 6);
   18f32:	2106      	movs	r1, #6
   18f34:	6878      	ldr	r0, [r7, #4]
   18f36:	f7ef fe79 	bl	8c2c <pyd1598_set_blind_time>
    pyd1598_set_pulse_counter(dev, 0);
   18f3a:	2100      	movs	r1, #0
   18f3c:	6878      	ldr	r0, [r7, #4]
   18f3e:	f7ef fead 	bl	8c9c <pyd1598_set_pulse_counter>
    pyd1598_set_window_time(dev, 0);
   18f42:	2100      	movs	r1, #0
   18f44:	6878      	ldr	r0, [r7, #4]
   18f46:	f7ef fee1 	bl	8d0c <pyd1598_set_window_time>
    pyd1598_set_operation_mode(dev, PYD1598_WAKE_UP);
   18f4a:	2102      	movs	r1, #2
   18f4c:	6878      	ldr	r0, [r7, #4]
   18f4e:	f7ef ff15 	bl	8d7c <pyd1598_set_operation_mode>
    pyd1598_set_signal_source(dev, PYD1598_PIR_LPF);
   18f52:	2101      	movs	r1, #1
   18f54:	6878      	ldr	r0, [r7, #4]
   18f56:	f7ef ff47 	bl	8de8 <pyd1598_set_signal_source>
    pyd1598_set_hpf_cutoff(dev, PYD1598_HPF_CUTOFF_0_4HZ);
   18f5a:	2100      	movs	r1, #0
   18f5c:	6878      	ldr	r0, [r7, #4]
   18f5e:	f7ef ff79 	bl	8e54 <pyd1598_set_hpf_cutoff>
    pyd1598_set_count_mode(dev, PYD1598_COUNT_ALL);
   18f62:	2101      	movs	r1, #1
   18f64:	6878      	ldr	r0, [r7, #4]
   18f66:	f7ef ffab 	bl	8ec0 <pyd1598_set_count_mode>
    pyd1598_set_reserved_bits(dev);
   18f6a:	6878      	ldr	r0, [r7, #4]
   18f6c:	f7ef fdf2 	bl	8b54 <pyd1598_set_reserved_bits>

    return 0;
   18f70:	2300      	movs	r3, #0
}
   18f72:	4618      	mov	r0, r3
   18f74:	3708      	adds	r7, #8
   18f76:	46bd      	mov	sp, r7
   18f78:	bd80      	pop	{r7, pc}

00018f7a <k_sleep>:
{
   18f7a:	b580      	push	{r7, lr}
   18f7c:	b082      	sub	sp, #8
   18f7e:	af00      	add	r7, sp, #0
   18f80:	e9c7 0100 	strd	r0, r1, [r7]
	return z_impl_k_sleep(timeout);
   18f84:	e9d7 0100 	ldrd	r0, r1, [r7]
   18f88:	f7fd fc64 	bl	16854 <z_impl_k_sleep>
   18f8c:	4603      	mov	r3, r0
}
   18f8e:	4618      	mov	r0, r3
   18f90:	3708      	adds	r7, #8
   18f92:	46bd      	mov	sp, r7
   18f94:	bd80      	pop	{r7, pc}

00018f96 <gpio_pin_configure_dt>:
{
   18f96:	b580      	push	{r7, lr}
   18f98:	b082      	sub	sp, #8
   18f9a:	af00      	add	r7, sp, #0
   18f9c:	6078      	str	r0, [r7, #4]
   18f9e:	6039      	str	r1, [r7, #0]
	return gpio_pin_configure(spec->port,
   18fa0:	687b      	ldr	r3, [r7, #4]
   18fa2:	6818      	ldr	r0, [r3, #0]
				  spec->pin,
   18fa4:	687b      	ldr	r3, [r7, #4]
   18fa6:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   18fa8:	687b      	ldr	r3, [r7, #4]
   18faa:	88db      	ldrh	r3, [r3, #6]
   18fac:	461a      	mov	r2, r3
	return gpio_pin_configure(spec->port,
   18fae:	683b      	ldr	r3, [r7, #0]
   18fb0:	4313      	orrs	r3, r2
   18fb2:	461a      	mov	r2, r3
   18fb4:	f000 f87a 	bl	190ac <gpio_pin_configure>
   18fb8:	4603      	mov	r3, r0
}
   18fba:	4618      	mov	r0, r3
   18fbc:	3708      	adds	r7, #8
   18fbe:	46bd      	mov	sp, r7
   18fc0:	bd80      	pop	{r7, pc}

00018fc2 <z_impl_gpio_port_get_raw>:
{
   18fc2:	b580      	push	{r7, lr}
   18fc4:	b084      	sub	sp, #16
   18fc6:	af00      	add	r7, sp, #0
   18fc8:	6078      	str	r0, [r7, #4]
   18fca:	6039      	str	r1, [r7, #0]
	const struct gpio_driver_api *api =
   18fcc:	687b      	ldr	r3, [r7, #4]
   18fce:	689b      	ldr	r3, [r3, #8]
   18fd0:	60fb      	str	r3, [r7, #12]
	return api->port_get_raw(port, value);
   18fd2:	68fb      	ldr	r3, [r7, #12]
   18fd4:	685b      	ldr	r3, [r3, #4]
   18fd6:	6839      	ldr	r1, [r7, #0]
   18fd8:	6878      	ldr	r0, [r7, #4]
   18fda:	4798      	blx	r3
   18fdc:	4603      	mov	r3, r0
}
   18fde:	4618      	mov	r0, r3
   18fe0:	3710      	adds	r7, #16
   18fe2:	46bd      	mov	sp, r7
   18fe4:	bd80      	pop	{r7, pc}

00018fe6 <gpio_port_get>:
{
   18fe6:	b580      	push	{r7, lr}
   18fe8:	b084      	sub	sp, #16
   18fea:	af00      	add	r7, sp, #0
   18fec:	6078      	str	r0, [r7, #4]
   18fee:	6039      	str	r1, [r7, #0]
	const struct gpio_driver_data *const data =
   18ff0:	687b      	ldr	r3, [r7, #4]
   18ff2:	691b      	ldr	r3, [r3, #16]
   18ff4:	60fb      	str	r3, [r7, #12]
	ret = gpio_port_get_raw(port, value);
   18ff6:	6839      	ldr	r1, [r7, #0]
   18ff8:	6878      	ldr	r0, [r7, #4]
   18ffa:	f000 f869 	bl	190d0 <gpio_port_get_raw>
   18ffe:	60b8      	str	r0, [r7, #8]
	if (ret == 0) {
   19000:	68bb      	ldr	r3, [r7, #8]
   19002:	2b00      	cmp	r3, #0
   19004:	d106      	bne.n	19014 <gpio_port_get+0x2e>
		*value ^= data->invert;
   19006:	683b      	ldr	r3, [r7, #0]
   19008:	681a      	ldr	r2, [r3, #0]
   1900a:	68fb      	ldr	r3, [r7, #12]
   1900c:	681b      	ldr	r3, [r3, #0]
   1900e:	405a      	eors	r2, r3
   19010:	683b      	ldr	r3, [r7, #0]
   19012:	601a      	str	r2, [r3, #0]
	return ret;
   19014:	68bb      	ldr	r3, [r7, #8]
}
   19016:	4618      	mov	r0, r3
   19018:	3710      	adds	r7, #16
   1901a:	46bd      	mov	sp, r7
   1901c:	bd80      	pop	{r7, pc}

0001901e <z_impl_gpio_port_set_bits_raw>:
{
   1901e:	b580      	push	{r7, lr}
   19020:	b084      	sub	sp, #16
   19022:	af00      	add	r7, sp, #0
   19024:	6078      	str	r0, [r7, #4]
   19026:	6039      	str	r1, [r7, #0]
	const struct gpio_driver_api *api =
   19028:	687b      	ldr	r3, [r7, #4]
   1902a:	689b      	ldr	r3, [r3, #8]
   1902c:	60fb      	str	r3, [r7, #12]
	return api->port_set_bits_raw(port, pins);
   1902e:	68fb      	ldr	r3, [r7, #12]
   19030:	68db      	ldr	r3, [r3, #12]
   19032:	6839      	ldr	r1, [r7, #0]
   19034:	6878      	ldr	r0, [r7, #4]
   19036:	4798      	blx	r3
   19038:	4603      	mov	r3, r0
}
   1903a:	4618      	mov	r0, r3
   1903c:	3710      	adds	r7, #16
   1903e:	46bd      	mov	sp, r7
   19040:	bd80      	pop	{r7, pc}

00019042 <z_impl_gpio_port_clear_bits_raw>:
{
   19042:	b580      	push	{r7, lr}
   19044:	b084      	sub	sp, #16
   19046:	af00      	add	r7, sp, #0
   19048:	6078      	str	r0, [r7, #4]
   1904a:	6039      	str	r1, [r7, #0]
	const struct gpio_driver_api *api =
   1904c:	687b      	ldr	r3, [r7, #4]
   1904e:	689b      	ldr	r3, [r3, #8]
   19050:	60fb      	str	r3, [r7, #12]
	return api->port_clear_bits_raw(port, pins);
   19052:	68fb      	ldr	r3, [r7, #12]
   19054:	691b      	ldr	r3, [r3, #16]
   19056:	6839      	ldr	r1, [r7, #0]
   19058:	6878      	ldr	r0, [r7, #4]
   1905a:	4798      	blx	r3
   1905c:	4603      	mov	r3, r0
}
   1905e:	4618      	mov	r0, r3
   19060:	3710      	adds	r7, #16
   19062:	46bd      	mov	sp, r7
   19064:	bd80      	pop	{r7, pc}

00019066 <gpio_pin_get_dt>:
{
   19066:	b580      	push	{r7, lr}
   19068:	b082      	sub	sp, #8
   1906a:	af00      	add	r7, sp, #0
   1906c:	6078      	str	r0, [r7, #4]
	return gpio_pin_get(spec->port, spec->pin);
   1906e:	687b      	ldr	r3, [r7, #4]
   19070:	681a      	ldr	r2, [r3, #0]
   19072:	687b      	ldr	r3, [r7, #4]
   19074:	791b      	ldrb	r3, [r3, #4]
   19076:	4619      	mov	r1, r3
   19078:	4610      	mov	r0, r2
   1907a:	f7f0 f883 	bl	9184 <gpio_pin_get>
   1907e:	4603      	mov	r3, r0
}
   19080:	4618      	mov	r0, r3
   19082:	3708      	adds	r7, #8
   19084:	46bd      	mov	sp, r7
   19086:	bd80      	pop	{r7, pc}

00019088 <gpio_pin_set_dt>:
{
   19088:	b580      	push	{r7, lr}
   1908a:	b082      	sub	sp, #8
   1908c:	af00      	add	r7, sp, #0
   1908e:	6078      	str	r0, [r7, #4]
   19090:	6039      	str	r1, [r7, #0]
	return gpio_pin_set(spec->port, spec->pin, value);
   19092:	687b      	ldr	r3, [r7, #4]
   19094:	6818      	ldr	r0, [r3, #0]
   19096:	687b      	ldr	r3, [r7, #4]
   19098:	791b      	ldrb	r3, [r3, #4]
   1909a:	683a      	ldr	r2, [r7, #0]
   1909c:	4619      	mov	r1, r3
   1909e:	f7f0 f8fb 	bl	9298 <gpio_pin_set>
   190a2:	4603      	mov	r3, r0
}
   190a4:	4618      	mov	r0, r3
   190a6:	3708      	adds	r7, #8
   190a8:	46bd      	mov	sp, r7
   190aa:	bd80      	pop	{r7, pc}

000190ac <gpio_pin_configure>:
{
   190ac:	b580      	push	{r7, lr}
   190ae:	b084      	sub	sp, #16
   190b0:	af00      	add	r7, sp, #0
   190b2:	60f8      	str	r0, [r7, #12]
   190b4:	460b      	mov	r3, r1
   190b6:	607a      	str	r2, [r7, #4]
   190b8:	72fb      	strb	r3, [r7, #11]
	return z_impl_gpio_pin_configure(port, pin, flags);
   190ba:	7afb      	ldrb	r3, [r7, #11]
   190bc:	687a      	ldr	r2, [r7, #4]
   190be:	4619      	mov	r1, r3
   190c0:	68f8      	ldr	r0, [r7, #12]
   190c2:	f7ef ff53 	bl	8f6c <z_impl_gpio_pin_configure>
   190c6:	4603      	mov	r3, r0
}
   190c8:	4618      	mov	r0, r3
   190ca:	3710      	adds	r7, #16
   190cc:	46bd      	mov	sp, r7
   190ce:	bd80      	pop	{r7, pc}

000190d0 <gpio_port_get_raw>:
{
   190d0:	b580      	push	{r7, lr}
   190d2:	b082      	sub	sp, #8
   190d4:	af00      	add	r7, sp, #0
   190d6:	6078      	str	r0, [r7, #4]
   190d8:	6039      	str	r1, [r7, #0]
	return z_impl_gpio_port_get_raw(port, value);
   190da:	6839      	ldr	r1, [r7, #0]
   190dc:	6878      	ldr	r0, [r7, #4]
   190de:	f7ff ff70 	bl	18fc2 <z_impl_gpio_port_get_raw>
   190e2:	4603      	mov	r3, r0
}
   190e4:	4618      	mov	r0, r3
   190e6:	3708      	adds	r7, #8
   190e8:	46bd      	mov	sp, r7
   190ea:	bd80      	pop	{r7, pc}

000190ec <gpio_port_set_bits_raw>:
{
   190ec:	b580      	push	{r7, lr}
   190ee:	b082      	sub	sp, #8
   190f0:	af00      	add	r7, sp, #0
   190f2:	6078      	str	r0, [r7, #4]
   190f4:	6039      	str	r1, [r7, #0]
	return z_impl_gpio_port_set_bits_raw(port, pins);
   190f6:	6839      	ldr	r1, [r7, #0]
   190f8:	6878      	ldr	r0, [r7, #4]
   190fa:	f7ff ff90 	bl	1901e <z_impl_gpio_port_set_bits_raw>
   190fe:	4603      	mov	r3, r0
}
   19100:	4618      	mov	r0, r3
   19102:	3708      	adds	r7, #8
   19104:	46bd      	mov	sp, r7
   19106:	bd80      	pop	{r7, pc}

00019108 <gpio_port_clear_bits_raw>:
{
   19108:	b580      	push	{r7, lr}
   1910a:	b082      	sub	sp, #8
   1910c:	af00      	add	r7, sp, #0
   1910e:	6078      	str	r0, [r7, #4]
   19110:	6039      	str	r1, [r7, #0]
	return z_impl_gpio_port_clear_bits_raw(port, pins);
   19112:	6839      	ldr	r1, [r7, #0]
   19114:	6878      	ldr	r0, [r7, #4]
   19116:	f7ff ff94 	bl	19042 <z_impl_gpio_port_clear_bits_raw>
   1911a:	4603      	mov	r3, r0
}
   1911c:	4618      	mov	r0, r3
   1911e:	3708      	adds	r7, #8
   19120:	46bd      	mov	sp, r7
   19122:	bd80      	pop	{r7, pc}

00019124 <_Z11switch_modePK6device>:
{
   19124:	b580      	push	{r7, lr}
   19126:	b086      	sub	sp, #24
   19128:	af00      	add	r7, sp, #0
   1912a:	6078      	str	r0, [r7, #4]
    cfg = (const pyd1598_config*) (dev->config);
   1912c:	687b      	ldr	r3, [r7, #4]
   1912e:	685b      	ldr	r3, [r3, #4]
   19130:	617b      	str	r3, [r7, #20]
    int ret = 0;
   19132:	2300      	movs	r3, #0
   19134:	613b      	str	r3, [r7, #16]
    data = (pyd1598_data*)(dev->data);
   19136:	687b      	ldr	r3, [r7, #4]
   19138:	691b      	ldr	r3, [r3, #16]
   1913a:	60fb      	str	r3, [r7, #12]
    int bit = 0;
   1913c:	2300      	movs	r3, #0
   1913e:	60bb      	str	r3, [r7, #8]
        gpio_pin_set_dt(&cfg->direct_link, 1); 
   19140:	697b      	ldr	r3, [r7, #20]
   19142:	330c      	adds	r3, #12
   19144:	2101      	movs	r1, #1
   19146:	4618      	mov	r0, r3
   19148:	f7ff ff9e 	bl	19088 <gpio_pin_set_dt>
        gpio_pin_set_dt(&cfg->direct_link, 0); 
   1914c:	697b      	ldr	r3, [r7, #20]
   1914e:	330c      	adds	r3, #12
   19150:	2100      	movs	r1, #0
   19152:	4618      	mov	r0, r3
   19154:	f7ff ff98 	bl	19088 <gpio_pin_set_dt>
        gpio_pin_set_dt(&cfg->direct_link, 1); 
   19158:	697b      	ldr	r3, [r7, #20]
   1915a:	330c      	adds	r3, #12
   1915c:	2101      	movs	r1, #1
   1915e:	4618      	mov	r0, r3
   19160:	f7ff ff92 	bl	19088 <gpio_pin_set_dt>
        ret = gpio_pin_configure_dt(&cfg->direct_link, GPIO_INPUT); // initalize to low
   19164:	697b      	ldr	r3, [r7, #20]
   19166:	330c      	adds	r3, #12
   19168:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1916c:	4618      	mov	r0, r3
   1916e:	f7ff ff12 	bl	18f96 <gpio_pin_configure_dt>
   19172:	6138      	str	r0, [r7, #16]
        bit = gpio_pin_get_dt(&cfg->direct_link);
   19174:	697b      	ldr	r3, [r7, #20]
   19176:	330c      	adds	r3, #12
   19178:	4618      	mov	r0, r3
   1917a:	f7ff ff74 	bl	19066 <gpio_pin_get_dt>
   1917e:	60b8      	str	r0, [r7, #8]
        ret = gpio_pin_configure_dt(&cfg->direct_link, GPIO_OUTPUT); // initalize to low
   19180:	697b      	ldr	r3, [r7, #20]
   19182:	330c      	adds	r3, #12
   19184:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   19188:	4618      	mov	r0, r3
   1918a:	f7ff ff04 	bl	18f96 <gpio_pin_configure_dt>
   1918e:	6138      	str	r0, [r7, #16]
        gpio_pin_set_dt(&cfg->direct_link, 0); 
   19190:	697b      	ldr	r3, [r7, #20]
   19192:	330c      	adds	r3, #12
   19194:	2100      	movs	r1, #0
   19196:	4618      	mov	r0, r3
   19198:	f7ff ff76 	bl	19088 <gpio_pin_set_dt>
        gpio_pin_set_dt(&cfg->direct_link, 1); 
   1919c:	697b      	ldr	r3, [r7, #20]
   1919e:	330c      	adds	r3, #12
   191a0:	2101      	movs	r1, #1
   191a2:	4618      	mov	r0, r3
   191a4:	f7ff ff70 	bl	19088 <gpio_pin_set_dt>
        gpio_pin_set_dt(&cfg->direct_link, 0); 
   191a8:	697b      	ldr	r3, [r7, #20]
   191aa:	330c      	adds	r3, #12
   191ac:	2100      	movs	r1, #0
   191ae:	4618      	mov	r0, r3
   191b0:	f7ff ff6a 	bl	19088 <gpio_pin_set_dt>
        k_sleep(K_USEC(20));
   191b4:	f04f 0201 	mov.w	r2, #1
   191b8:	f04f 0300 	mov.w	r3, #0
   191bc:	4610      	mov	r0, r2
   191be:	4619      	mov	r1, r3
   191c0:	f7ff fedb 	bl	18f7a <k_sleep>
        gpio_pin_set_dt(&cfg->direct_link, 1); 
   191c4:	e7bc      	b.n	19140 <_Z11switch_modePK6device+0x1c>

000191c6 <k_is_user_context>:
 *
 * @return true if the CPU is currently running with user permissions
 */
__pinned_func
static inline bool k_is_user_context(void)
{
   191c6:	b480      	push	{r7}
   191c8:	af00      	add	r7, sp, #0
#ifdef CONFIG_USERSPACE
	return arch_is_user_context();
#else
	return false;
   191ca:	2300      	movs	r3, #0
#endif
}
   191cc:	4618      	mov	r0, r3
   191ce:	46bd      	mov	sp, r7
   191d0:	bc80      	pop	{r7}
   191d2:	4770      	bx	lr

000191d4 <k_str_out>:

extern void z_impl_k_str_out(char * c, size_t n);

__pinned_func
static inline void k_str_out(char * c, size_t n)
{
   191d4:	b580      	push	{r7, lr}
   191d6:	b082      	sub	sp, #8
   191d8:	af00      	add	r7, sp, #0
   191da:	6078      	str	r0, [r7, #4]
   191dc:	6039      	str	r1, [r7, #0]
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_STR_OUT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_str_out(c, n);
   191de:	6839      	ldr	r1, [r7, #0]
   191e0:	6878      	ldr	r0, [r7, #4]
   191e2:	f7f0 f94f 	bl	9484 <z_impl_k_str_out>
}
   191e6:	bf00      	nop
   191e8:	3708      	adds	r7, #8
   191ea:	46bd      	mov	sp, r7
   191ec:	bd80      	pop	{r7, pc}

000191ee <arch_printk_char_out>:
{
   191ee:	b480      	push	{r7}
   191f0:	b083      	sub	sp, #12
   191f2:	af00      	add	r7, sp, #0
   191f4:	6078      	str	r0, [r7, #4]
	return 0;
   191f6:	2300      	movs	r3, #0
}
   191f8:	4618      	mov	r0, r3
   191fa:	370c      	adds	r7, #12
   191fc:	46bd      	mov	sp, r7
   191fe:	bc80      	pop	{r7}
   19200:	4770      	bx	lr

00019202 <buf_flush>:
{
   19202:	b580      	push	{r7, lr}
   19204:	b082      	sub	sp, #8
   19206:	af00      	add	r7, sp, #0
   19208:	6078      	str	r0, [r7, #4]
	k_str_out(ctx->buf, ctx->buf_count);
   1920a:	687b      	ldr	r3, [r7, #4]
   1920c:	f103 0214 	add.w	r2, r3, #20
   19210:	687b      	ldr	r3, [r7, #4]
   19212:	691b      	ldr	r3, [r3, #16]
   19214:	4619      	mov	r1, r3
   19216:	4610      	mov	r0, r2
   19218:	f7ff ffdc 	bl	191d4 <k_str_out>
	ctx->buf_count = 0U;
   1921c:	687b      	ldr	r3, [r7, #4]
   1921e:	2200      	movs	r2, #0
   19220:	611a      	str	r2, [r3, #16]
}
   19222:	bf00      	nop
   19224:	3708      	adds	r7, #8
   19226:	46bd      	mov	sp, r7
   19228:	bd80      	pop	{r7, pc}

0001922a <buf_char_out>:
{
   1922a:	b580      	push	{r7, lr}
   1922c:	b084      	sub	sp, #16
   1922e:	af00      	add	r7, sp, #0
   19230:	6078      	str	r0, [r7, #4]
   19232:	6039      	str	r1, [r7, #0]
	struct buf_out_context *ctx = ctx_p;
   19234:	683b      	ldr	r3, [r7, #0]
   19236:	60fb      	str	r3, [r7, #12]
	ctx->buf[ctx->buf_count++] = c;
   19238:	68fb      	ldr	r3, [r7, #12]
   1923a:	691b      	ldr	r3, [r3, #16]
   1923c:	1c59      	adds	r1, r3, #1
   1923e:	68fa      	ldr	r2, [r7, #12]
   19240:	6111      	str	r1, [r2, #16]
   19242:	687a      	ldr	r2, [r7, #4]
   19244:	b2d1      	uxtb	r1, r2
   19246:	68fa      	ldr	r2, [r7, #12]
   19248:	4413      	add	r3, r2
   1924a:	460a      	mov	r2, r1
   1924c:	751a      	strb	r2, [r3, #20]
	if (ctx->buf_count == CONFIG_PRINTK_BUFFER_SIZE) {
   1924e:	68fb      	ldr	r3, [r7, #12]
   19250:	691b      	ldr	r3, [r3, #16]
   19252:	2b00      	cmp	r3, #0
   19254:	d102      	bne.n	1925c <buf_char_out+0x32>
		buf_flush(ctx);
   19256:	68f8      	ldr	r0, [r7, #12]
   19258:	f7ff ffd3 	bl	19202 <buf_flush>
	return c;
   1925c:	687b      	ldr	r3, [r7, #4]
}
   1925e:	4618      	mov	r0, r3
   19260:	3710      	adds	r7, #16
   19262:	46bd      	mov	sp, r7
   19264:	bd80      	pop	{r7, pc}

00019266 <z_current_get>:
{
   19266:	b580      	push	{r7, lr}
   19268:	af00      	add	r7, sp, #0
	return z_impl_z_current_get();
   1926a:	f7fd fb4b 	bl	16904 <z_impl_z_current_get>
   1926e:	4603      	mov	r3, r0
}
   19270:	4618      	mov	r0, r3
   19272:	bd80      	pop	{r7, pc}

00019274 <k_thread_abort>:
{
   19274:	b580      	push	{r7, lr}
   19276:	b082      	sub	sp, #8
   19278:	af00      	add	r7, sp, #0
   1927a:	6078      	str	r0, [r7, #4]
	z_impl_k_thread_abort(thread);
   1927c:	6878      	ldr	r0, [r7, #4]
   1927e:	f7f2 f857 	bl	b330 <z_impl_k_thread_abort>
}
   19282:	bf00      	nop
   19284:	3708      	adds	r7, #8
   19286:	46bd      	mov	sp, r7
   19288:	bd80      	pop	{r7, pc}

0001928a <big_heap_chunks>:
#endif
	struct z_heap_bucket buckets[0];
};

static inline bool big_heap_chunks(chunksz_t chunks)
{
   1928a:	b480      	push	{r7}
   1928c:	b083      	sub	sp, #12
   1928e:	af00      	add	r7, sp, #0
   19290:	6078      	str	r0, [r7, #4]
		return false;
	}
	if (IS_ENABLED(CONFIG_SYS_HEAP_BIG_ONLY) || sizeof(void *) > 4U) {
		return true;
	}
	return chunks > 0x7fffU;
   19292:	687b      	ldr	r3, [r7, #4]
   19294:	f647 72ff 	movw	r2, #32767	; 0x7fff
   19298:	4293      	cmp	r3, r2
   1929a:	bf8c      	ite	hi
   1929c:	2301      	movhi	r3, #1
   1929e:	2300      	movls	r3, #0
   192a0:	b2db      	uxtb	r3, r3
}
   192a2:	4618      	mov	r0, r3
   192a4:	370c      	adds	r7, #12
   192a6:	46bd      	mov	sp, r7
   192a8:	bc80      	pop	{r7}
   192aa:	4770      	bx	lr

000192ac <big_heap_bytes>:

static inline bool big_heap_bytes(size_t bytes)
{
   192ac:	b580      	push	{r7, lr}
   192ae:	b082      	sub	sp, #8
   192b0:	af00      	add	r7, sp, #0
   192b2:	6078      	str	r0, [r7, #4]
	return big_heap_chunks(bytes / CHUNK_UNIT);
   192b4:	687b      	ldr	r3, [r7, #4]
   192b6:	08db      	lsrs	r3, r3, #3
   192b8:	4618      	mov	r0, r3
   192ba:	f7ff ffe6 	bl	1928a <big_heap_chunks>
   192be:	4603      	mov	r3, r0
}
   192c0:	4618      	mov	r0, r3
   192c2:	3708      	adds	r7, #8
   192c4:	46bd      	mov	sp, r7
   192c6:	bd80      	pop	{r7, pc}

000192c8 <big_heap>:

static inline bool big_heap(struct z_heap *h)
{
   192c8:	b580      	push	{r7, lr}
   192ca:	b082      	sub	sp, #8
   192cc:	af00      	add	r7, sp, #0
   192ce:	6078      	str	r0, [r7, #4]
	return big_heap_chunks(h->end_chunk);
   192d0:	687b      	ldr	r3, [r7, #4]
   192d2:	689b      	ldr	r3, [r3, #8]
   192d4:	4618      	mov	r0, r3
   192d6:	f7ff ffd8 	bl	1928a <big_heap_chunks>
   192da:	4603      	mov	r3, r0
}
   192dc:	4618      	mov	r0, r3
   192de:	3708      	adds	r7, #8
   192e0:	46bd      	mov	sp, r7
   192e2:	bd80      	pop	{r7, pc}

000192e4 <chunk_buf>:

static inline chunk_unit_t *chunk_buf(struct z_heap *h)
{
   192e4:	b480      	push	{r7}
   192e6:	b083      	sub	sp, #12
   192e8:	af00      	add	r7, sp, #0
   192ea:	6078      	str	r0, [r7, #4]
	/* the struct z_heap matches with the first chunk */
	return (chunk_unit_t *)h;
   192ec:	687b      	ldr	r3, [r7, #4]
}
   192ee:	4618      	mov	r0, r3
   192f0:	370c      	adds	r7, #12
   192f2:	46bd      	mov	sp, r7
   192f4:	bc80      	pop	{r7}
   192f6:	4770      	bx	lr

000192f8 <chunk_field>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
   192f8:	b580      	push	{r7, lr}
   192fa:	b086      	sub	sp, #24
   192fc:	af00      	add	r7, sp, #0
   192fe:	60f8      	str	r0, [r7, #12]
   19300:	60b9      	str	r1, [r7, #8]
   19302:	4613      	mov	r3, r2
   19304:	71fb      	strb	r3, [r7, #7]
	chunk_unit_t *buf = chunk_buf(h);
   19306:	68f8      	ldr	r0, [r7, #12]
   19308:	f7ff ffec 	bl	192e4 <chunk_buf>
   1930c:	6178      	str	r0, [r7, #20]
	void *cmem = &buf[c];
   1930e:	68bb      	ldr	r3, [r7, #8]
   19310:	00db      	lsls	r3, r3, #3
   19312:	697a      	ldr	r2, [r7, #20]
   19314:	4413      	add	r3, r2
   19316:	613b      	str	r3, [r7, #16]

	if (big_heap(h)) {
   19318:	68f8      	ldr	r0, [r7, #12]
   1931a:	f7ff ffd5 	bl	192c8 <big_heap>
   1931e:	4603      	mov	r3, r0
   19320:	2b00      	cmp	r3, #0
   19322:	d005      	beq.n	19330 <chunk_field+0x38>
		return ((uint32_t *)cmem)[f];
   19324:	79fb      	ldrb	r3, [r7, #7]
   19326:	009b      	lsls	r3, r3, #2
   19328:	693a      	ldr	r2, [r7, #16]
   1932a:	4413      	add	r3, r2
   1932c:	681b      	ldr	r3, [r3, #0]
   1932e:	e004      	b.n	1933a <chunk_field+0x42>
	} else {
		return ((uint16_t *)cmem)[f];
   19330:	79fb      	ldrb	r3, [r7, #7]
   19332:	005b      	lsls	r3, r3, #1
   19334:	693a      	ldr	r2, [r7, #16]
   19336:	4413      	add	r3, r2
   19338:	881b      	ldrh	r3, [r3, #0]
	}
}
   1933a:	4618      	mov	r0, r3
   1933c:	3718      	adds	r7, #24
   1933e:	46bd      	mov	sp, r7
   19340:	bd80      	pop	{r7, pc}

00019342 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   19342:	b580      	push	{r7, lr}
   19344:	b086      	sub	sp, #24
   19346:	af00      	add	r7, sp, #0
   19348:	60f8      	str	r0, [r7, #12]
   1934a:	60b9      	str	r1, [r7, #8]
   1934c:	603b      	str	r3, [r7, #0]
   1934e:	4613      	mov	r3, r2
   19350:	71fb      	strb	r3, [r7, #7]
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
   19352:	68f8      	ldr	r0, [r7, #12]
   19354:	f7ff ffc6 	bl	192e4 <chunk_buf>
   19358:	6178      	str	r0, [r7, #20]
	void *cmem = &buf[c];
   1935a:	68bb      	ldr	r3, [r7, #8]
   1935c:	00db      	lsls	r3, r3, #3
   1935e:	697a      	ldr	r2, [r7, #20]
   19360:	4413      	add	r3, r2
   19362:	613b      	str	r3, [r7, #16]

	if (big_heap(h)) {
   19364:	68f8      	ldr	r0, [r7, #12]
   19366:	f7ff ffaf 	bl	192c8 <big_heap>
   1936a:	4603      	mov	r3, r0
   1936c:	2b00      	cmp	r3, #0
   1936e:	d006      	beq.n	1937e <chunk_set+0x3c>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   19370:	79fb      	ldrb	r3, [r7, #7]
   19372:	009b      	lsls	r3, r3, #2
   19374:	693a      	ldr	r2, [r7, #16]
   19376:	4413      	add	r3, r2
   19378:	683a      	ldr	r2, [r7, #0]
   1937a:	601a      	str	r2, [r3, #0]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
	}
}
   1937c:	e006      	b.n	1938c <chunk_set+0x4a>
		((uint16_t *)cmem)[f] = val;
   1937e:	79fb      	ldrb	r3, [r7, #7]
   19380:	005b      	lsls	r3, r3, #1
   19382:	693a      	ldr	r2, [r7, #16]
   19384:	4413      	add	r3, r2
   19386:	683a      	ldr	r2, [r7, #0]
   19388:	b292      	uxth	r2, r2
   1938a:	801a      	strh	r2, [r3, #0]
}
   1938c:	bf00      	nop
   1938e:	3718      	adds	r7, #24
   19390:	46bd      	mov	sp, r7
   19392:	bd80      	pop	{r7, pc}

00019394 <chunk_used>:

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
   19394:	b580      	push	{r7, lr}
   19396:	b082      	sub	sp, #8
   19398:	af00      	add	r7, sp, #0
   1939a:	6078      	str	r0, [r7, #4]
   1939c:	6039      	str	r1, [r7, #0]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1939e:	2201      	movs	r2, #1
   193a0:	6839      	ldr	r1, [r7, #0]
   193a2:	6878      	ldr	r0, [r7, #4]
   193a4:	f7ff ffa8 	bl	192f8 <chunk_field>
   193a8:	4603      	mov	r3, r0
   193aa:	f003 0301 	and.w	r3, r3, #1
   193ae:	2b00      	cmp	r3, #0
   193b0:	bf14      	ite	ne
   193b2:	2301      	movne	r3, #1
   193b4:	2300      	moveq	r3, #0
   193b6:	b2db      	uxtb	r3, r3
}
   193b8:	4618      	mov	r0, r3
   193ba:	3708      	adds	r7, #8
   193bc:	46bd      	mov	sp, r7
   193be:	bd80      	pop	{r7, pc}

000193c0 <chunk_size>:

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   193c0:	b580      	push	{r7, lr}
   193c2:	b082      	sub	sp, #8
   193c4:	af00      	add	r7, sp, #0
   193c6:	6078      	str	r0, [r7, #4]
   193c8:	6039      	str	r1, [r7, #0]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   193ca:	2201      	movs	r2, #1
   193cc:	6839      	ldr	r1, [r7, #0]
   193ce:	6878      	ldr	r0, [r7, #4]
   193d0:	f7ff ff92 	bl	192f8 <chunk_field>
   193d4:	4603      	mov	r3, r0
   193d6:	085b      	lsrs	r3, r3, #1
}
   193d8:	4618      	mov	r0, r3
   193da:	3708      	adds	r7, #8
   193dc:	46bd      	mov	sp, r7
   193de:	bd80      	pop	{r7, pc}

000193e0 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
   193e0:	b580      	push	{r7, lr}
   193e2:	b086      	sub	sp, #24
   193e4:	af00      	add	r7, sp, #0
   193e6:	60f8      	str	r0, [r7, #12]
   193e8:	60b9      	str	r1, [r7, #8]
   193ea:	4613      	mov	r3, r2
   193ec:	71fb      	strb	r3, [r7, #7]
	chunk_unit_t *buf = chunk_buf(h);
   193ee:	68f8      	ldr	r0, [r7, #12]
   193f0:	f7ff ff78 	bl	192e4 <chunk_buf>
   193f4:	6178      	str	r0, [r7, #20]
	void *cmem = &buf[c];
   193f6:	68bb      	ldr	r3, [r7, #8]
   193f8:	00db      	lsls	r3, r3, #3
   193fa:	697a      	ldr	r2, [r7, #20]
   193fc:	4413      	add	r3, r2
   193fe:	613b      	str	r3, [r7, #16]

	if (big_heap(h)) {
   19400:	68f8      	ldr	r0, [r7, #12]
   19402:	f7ff ff61 	bl	192c8 <big_heap>
   19406:	4603      	mov	r3, r0
   19408:	2b00      	cmp	r3, #0
   1940a:	d014      	beq.n	19436 <set_chunk_used+0x56>
		if (used) {
   1940c:	79fb      	ldrb	r3, [r7, #7]
   1940e:	2b00      	cmp	r3, #0
   19410:	d008      	beq.n	19424 <set_chunk_used+0x44>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   19412:	693b      	ldr	r3, [r7, #16]
   19414:	3304      	adds	r3, #4
   19416:	681a      	ldr	r2, [r3, #0]
   19418:	693b      	ldr	r3, [r7, #16]
   1941a:	3304      	adds	r3, #4
   1941c:	f042 0201 	orr.w	r2, r2, #1
   19420:	601a      	str	r2, [r3, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
		}
	}
}
   19422:	e01e      	b.n	19462 <set_chunk_used+0x82>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19424:	693b      	ldr	r3, [r7, #16]
   19426:	3304      	adds	r3, #4
   19428:	681a      	ldr	r2, [r3, #0]
   1942a:	693b      	ldr	r3, [r7, #16]
   1942c:	3304      	adds	r3, #4
   1942e:	f022 0201 	bic.w	r2, r2, #1
   19432:	601a      	str	r2, [r3, #0]
}
   19434:	e015      	b.n	19462 <set_chunk_used+0x82>
		if (used) {
   19436:	79fb      	ldrb	r3, [r7, #7]
   19438:	2b00      	cmp	r3, #0
   1943a:	d009      	beq.n	19450 <set_chunk_used+0x70>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1943c:	693b      	ldr	r3, [r7, #16]
   1943e:	3302      	adds	r3, #2
   19440:	881a      	ldrh	r2, [r3, #0]
   19442:	693b      	ldr	r3, [r7, #16]
   19444:	3302      	adds	r3, #2
   19446:	f042 0201 	orr.w	r2, r2, #1
   1944a:	b292      	uxth	r2, r2
   1944c:	801a      	strh	r2, [r3, #0]
}
   1944e:	e008      	b.n	19462 <set_chunk_used+0x82>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19450:	693b      	ldr	r3, [r7, #16]
   19452:	3302      	adds	r3, #2
   19454:	881a      	ldrh	r2, [r3, #0]
   19456:	693b      	ldr	r3, [r7, #16]
   19458:	3302      	adds	r3, #2
   1945a:	f022 0201 	bic.w	r2, r2, #1
   1945e:	b292      	uxth	r2, r2
   19460:	801a      	strh	r2, [r3, #0]
}
   19462:	bf00      	nop
   19464:	3718      	adds	r7, #24
   19466:	46bd      	mov	sp, r7
   19468:	bd80      	pop	{r7, pc}

0001946a <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
   1946a:	b580      	push	{r7, lr}
   1946c:	b084      	sub	sp, #16
   1946e:	af00      	add	r7, sp, #0
   19470:	60f8      	str	r0, [r7, #12]
   19472:	60b9      	str	r1, [r7, #8]
   19474:	607a      	str	r2, [r7, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19476:	687b      	ldr	r3, [r7, #4]
   19478:	005b      	lsls	r3, r3, #1
   1947a:	2201      	movs	r2, #1
   1947c:	68b9      	ldr	r1, [r7, #8]
   1947e:	68f8      	ldr	r0, [r7, #12]
   19480:	f7ff ff5f 	bl	19342 <chunk_set>
}
   19484:	bf00      	nop
   19486:	3710      	adds	r7, #16
   19488:	46bd      	mov	sp, r7
   1948a:	bd80      	pop	{r7, pc}

0001948c <prev_free_chunk>:

static inline chunkid_t prev_free_chunk(struct z_heap *h, chunkid_t c)
{
   1948c:	b580      	push	{r7, lr}
   1948e:	b082      	sub	sp, #8
   19490:	af00      	add	r7, sp, #0
   19492:	6078      	str	r0, [r7, #4]
   19494:	6039      	str	r1, [r7, #0]
	return chunk_field(h, c, FREE_PREV);
   19496:	2202      	movs	r2, #2
   19498:	6839      	ldr	r1, [r7, #0]
   1949a:	6878      	ldr	r0, [r7, #4]
   1949c:	f7ff ff2c 	bl	192f8 <chunk_field>
   194a0:	4603      	mov	r3, r0
}
   194a2:	4618      	mov	r0, r3
   194a4:	3708      	adds	r7, #8
   194a6:	46bd      	mov	sp, r7
   194a8:	bd80      	pop	{r7, pc}

000194aa <next_free_chunk>:

static inline chunkid_t next_free_chunk(struct z_heap *h, chunkid_t c)
{
   194aa:	b580      	push	{r7, lr}
   194ac:	b082      	sub	sp, #8
   194ae:	af00      	add	r7, sp, #0
   194b0:	6078      	str	r0, [r7, #4]
   194b2:	6039      	str	r1, [r7, #0]
	return chunk_field(h, c, FREE_NEXT);
   194b4:	2203      	movs	r2, #3
   194b6:	6839      	ldr	r1, [r7, #0]
   194b8:	6878      	ldr	r0, [r7, #4]
   194ba:	f7ff ff1d 	bl	192f8 <chunk_field>
   194be:	4603      	mov	r3, r0
}
   194c0:	4618      	mov	r0, r3
   194c2:	3708      	adds	r7, #8
   194c4:	46bd      	mov	sp, r7
   194c6:	bd80      	pop	{r7, pc}

000194c8 <set_prev_free_chunk>:

static inline void set_prev_free_chunk(struct z_heap *h, chunkid_t c,
				       chunkid_t prev)
{
   194c8:	b580      	push	{r7, lr}
   194ca:	b084      	sub	sp, #16
   194cc:	af00      	add	r7, sp, #0
   194ce:	60f8      	str	r0, [r7, #12]
   194d0:	60b9      	str	r1, [r7, #8]
   194d2:	607a      	str	r2, [r7, #4]
	chunk_set(h, c, FREE_PREV, prev);
   194d4:	687b      	ldr	r3, [r7, #4]
   194d6:	2202      	movs	r2, #2
   194d8:	68b9      	ldr	r1, [r7, #8]
   194da:	68f8      	ldr	r0, [r7, #12]
   194dc:	f7ff ff31 	bl	19342 <chunk_set>
}
   194e0:	bf00      	nop
   194e2:	3710      	adds	r7, #16
   194e4:	46bd      	mov	sp, r7
   194e6:	bd80      	pop	{r7, pc}

000194e8 <set_next_free_chunk>:

static inline void set_next_free_chunk(struct z_heap *h, chunkid_t c,
				       chunkid_t next)
{
   194e8:	b580      	push	{r7, lr}
   194ea:	b084      	sub	sp, #16
   194ec:	af00      	add	r7, sp, #0
   194ee:	60f8      	str	r0, [r7, #12]
   194f0:	60b9      	str	r1, [r7, #8]
   194f2:	607a      	str	r2, [r7, #4]
	chunk_set(h, c, FREE_NEXT, next);
   194f4:	687b      	ldr	r3, [r7, #4]
   194f6:	2203      	movs	r2, #3
   194f8:	68b9      	ldr	r1, [r7, #8]
   194fa:	68f8      	ldr	r0, [r7, #12]
   194fc:	f7ff ff21 	bl	19342 <chunk_set>
}
   19500:	bf00      	nop
   19502:	3710      	adds	r7, #16
   19504:	46bd      	mov	sp, r7
   19506:	bd80      	pop	{r7, pc}

00019508 <left_chunk>:

static inline chunkid_t left_chunk(struct z_heap *h, chunkid_t c)
{
   19508:	b580      	push	{r7, lr}
   1950a:	b082      	sub	sp, #8
   1950c:	af00      	add	r7, sp, #0
   1950e:	6078      	str	r0, [r7, #4]
   19510:	6039      	str	r1, [r7, #0]
	return c - chunk_field(h, c, LEFT_SIZE);
   19512:	2200      	movs	r2, #0
   19514:	6839      	ldr	r1, [r7, #0]
   19516:	6878      	ldr	r0, [r7, #4]
   19518:	f7ff feee 	bl	192f8 <chunk_field>
   1951c:	4602      	mov	r2, r0
   1951e:	683b      	ldr	r3, [r7, #0]
   19520:	1a9b      	subs	r3, r3, r2
}
   19522:	4618      	mov	r0, r3
   19524:	3708      	adds	r7, #8
   19526:	46bd      	mov	sp, r7
   19528:	bd80      	pop	{r7, pc}

0001952a <right_chunk>:

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
   1952a:	b580      	push	{r7, lr}
   1952c:	b082      	sub	sp, #8
   1952e:	af00      	add	r7, sp, #0
   19530:	6078      	str	r0, [r7, #4]
   19532:	6039      	str	r1, [r7, #0]
	return c + chunk_size(h, c);
   19534:	6839      	ldr	r1, [r7, #0]
   19536:	6878      	ldr	r0, [r7, #4]
   19538:	f7ff ff42 	bl	193c0 <chunk_size>
   1953c:	4602      	mov	r2, r0
   1953e:	683b      	ldr	r3, [r7, #0]
   19540:	4413      	add	r3, r2
}
   19542:	4618      	mov	r0, r3
   19544:	3708      	adds	r7, #8
   19546:	46bd      	mov	sp, r7
   19548:	bd80      	pop	{r7, pc}

0001954a <set_left_chunk_size>:

static inline void set_left_chunk_size(struct z_heap *h, chunkid_t c,
				       chunksz_t size)
{
   1954a:	b580      	push	{r7, lr}
   1954c:	b084      	sub	sp, #16
   1954e:	af00      	add	r7, sp, #0
   19550:	60f8      	str	r0, [r7, #12]
   19552:	60b9      	str	r1, [r7, #8]
   19554:	607a      	str	r2, [r7, #4]
	chunk_set(h, c, LEFT_SIZE, size);
   19556:	687b      	ldr	r3, [r7, #4]
   19558:	2200      	movs	r2, #0
   1955a:	68b9      	ldr	r1, [r7, #8]
   1955c:	68f8      	ldr	r0, [r7, #12]
   1955e:	f7ff fef0 	bl	19342 <chunk_set>
}
   19562:	bf00      	nop
   19564:	3710      	adds	r7, #16
   19566:	46bd      	mov	sp, r7
   19568:	bd80      	pop	{r7, pc}

0001956a <solo_free_header>:

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
   1956a:	b580      	push	{r7, lr}
   1956c:	b082      	sub	sp, #8
   1956e:	af00      	add	r7, sp, #0
   19570:	6078      	str	r0, [r7, #4]
   19572:	6039      	str	r1, [r7, #0]
	return big_heap(h) && chunk_size(h, c) == 1U;
   19574:	6878      	ldr	r0, [r7, #4]
   19576:	f7ff fea7 	bl	192c8 <big_heap>
   1957a:	4603      	mov	r3, r0
   1957c:	2b00      	cmp	r3, #0
   1957e:	d008      	beq.n	19592 <solo_free_header+0x28>
   19580:	6839      	ldr	r1, [r7, #0]
   19582:	6878      	ldr	r0, [r7, #4]
   19584:	f7ff ff1c 	bl	193c0 <chunk_size>
   19588:	4603      	mov	r3, r0
   1958a:	2b01      	cmp	r3, #1
   1958c:	d101      	bne.n	19592 <solo_free_header+0x28>
   1958e:	2301      	movs	r3, #1
   19590:	e000      	b.n	19594 <solo_free_header+0x2a>
   19592:	2300      	movs	r3, #0
   19594:	f003 0301 	and.w	r3, r3, #1
   19598:	b2db      	uxtb	r3, r3
}
   1959a:	4618      	mov	r0, r3
   1959c:	3708      	adds	r7, #8
   1959e:	46bd      	mov	sp, r7
   195a0:	bd80      	pop	{r7, pc}

000195a2 <chunk_header_bytes>:

static inline size_t chunk_header_bytes(struct z_heap *h)
{
   195a2:	b580      	push	{r7, lr}
   195a4:	b082      	sub	sp, #8
   195a6:	af00      	add	r7, sp, #0
   195a8:	6078      	str	r0, [r7, #4]
	return big_heap(h) ? 8 : 4;
   195aa:	6878      	ldr	r0, [r7, #4]
   195ac:	f7ff fe8c 	bl	192c8 <big_heap>
   195b0:	4603      	mov	r3, r0
   195b2:	2b00      	cmp	r3, #0
   195b4:	d001      	beq.n	195ba <chunk_header_bytes+0x18>
   195b6:	2308      	movs	r3, #8
   195b8:	e000      	b.n	195bc <chunk_header_bytes+0x1a>
   195ba:	2304      	movs	r3, #4
}
   195bc:	4618      	mov	r0, r3
   195be:	3708      	adds	r7, #8
   195c0:	46bd      	mov	sp, r7
   195c2:	bd80      	pop	{r7, pc}

000195c4 <heap_footer_bytes>:

static inline size_t heap_footer_bytes(size_t size)
{
   195c4:	b580      	push	{r7, lr}
   195c6:	b082      	sub	sp, #8
   195c8:	af00      	add	r7, sp, #0
   195ca:	6078      	str	r0, [r7, #4]
	return big_heap_bytes(size) ? 8 : 4;
   195cc:	6878      	ldr	r0, [r7, #4]
   195ce:	f7ff fe6d 	bl	192ac <big_heap_bytes>
   195d2:	4603      	mov	r3, r0
   195d4:	2b00      	cmp	r3, #0
   195d6:	d001      	beq.n	195dc <heap_footer_bytes+0x18>
   195d8:	2308      	movs	r3, #8
   195da:	e000      	b.n	195de <heap_footer_bytes+0x1a>
   195dc:	2304      	movs	r3, #4
}
   195de:	4618      	mov	r0, r3
   195e0:	3708      	adds	r7, #8
   195e2:	46bd      	mov	sp, r7
   195e4:	bd80      	pop	{r7, pc}

000195e6 <chunksz>:

static inline chunksz_t chunksz(size_t bytes)
{
   195e6:	b480      	push	{r7}
   195e8:	b083      	sub	sp, #12
   195ea:	af00      	add	r7, sp, #0
   195ec:	6078      	str	r0, [r7, #4]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   195ee:	687b      	ldr	r3, [r7, #4]
   195f0:	3307      	adds	r3, #7
   195f2:	08db      	lsrs	r3, r3, #3
}
   195f4:	4618      	mov	r0, r3
   195f6:	370c      	adds	r7, #12
   195f8:	46bd      	mov	sp, r7
   195fa:	bc80      	pop	{r7}
   195fc:	4770      	bx	lr

000195fe <bytes_to_chunksz>:

static inline chunksz_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
   195fe:	b580      	push	{r7, lr}
   19600:	b082      	sub	sp, #8
   19602:	af00      	add	r7, sp, #0
   19604:	6078      	str	r0, [r7, #4]
   19606:	6039      	str	r1, [r7, #0]
	return chunksz(chunk_header_bytes(h) + bytes);
   19608:	6878      	ldr	r0, [r7, #4]
   1960a:	f7ff ffca 	bl	195a2 <chunk_header_bytes>
   1960e:	4602      	mov	r2, r0
   19610:	683b      	ldr	r3, [r7, #0]
   19612:	4413      	add	r3, r2
   19614:	4618      	mov	r0, r3
   19616:	f7ff ffe6 	bl	195e6 <chunksz>
   1961a:	4603      	mov	r3, r0
}
   1961c:	4618      	mov	r0, r3
   1961e:	3708      	adds	r7, #8
   19620:	46bd      	mov	sp, r7
   19622:	bd80      	pop	{r7, pc}

00019624 <min_chunk_size>:

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
   19624:	b580      	push	{r7, lr}
   19626:	b082      	sub	sp, #8
   19628:	af00      	add	r7, sp, #0
   1962a:	6078      	str	r0, [r7, #4]
	return bytes_to_chunksz(h, 1);
   1962c:	2101      	movs	r1, #1
   1962e:	6878      	ldr	r0, [r7, #4]
   19630:	f7ff ffe5 	bl	195fe <bytes_to_chunksz>
   19634:	4603      	mov	r3, r0
}
   19636:	4618      	mov	r0, r3
   19638:	3708      	adds	r7, #8
   1963a:	46bd      	mov	sp, r7
   1963c:	bd80      	pop	{r7, pc}

0001963e <bucket_idx>:
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
   1963e:	b580      	push	{r7, lr}
   19640:	b084      	sub	sp, #16
   19642:	af00      	add	r7, sp, #0
   19644:	6078      	str	r0, [r7, #4]
   19646:	6039      	str	r1, [r7, #0]
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   19648:	6878      	ldr	r0, [r7, #4]
   1964a:	f7ff ffeb 	bl	19624 <min_chunk_size>
   1964e:	4602      	mov	r2, r0
   19650:	683b      	ldr	r3, [r7, #0]
   19652:	1a9b      	subs	r3, r3, r2
   19654:	3301      	adds	r3, #1
   19656:	60fb      	str	r3, [r7, #12]
	return 31 - __builtin_clz(usable_sz);
   19658:	68fb      	ldr	r3, [r7, #12]
   1965a:	fab3 f383 	clz	r3, r3
   1965e:	f1c3 031f 	rsb	r3, r3, #31
}
   19662:	4618      	mov	r0, r3
   19664:	3710      	adds	r7, #16
   19666:	46bd      	mov	sp, r7
   19668:	bd80      	pop	{r7, pc}

0001966a <size_too_big>:

static inline bool size_too_big(struct z_heap *h, size_t bytes)
{
   1966a:	b480      	push	{r7}
   1966c:	b083      	sub	sp, #12
   1966e:	af00      	add	r7, sp, #0
   19670:	6078      	str	r0, [r7, #4]
   19672:	6039      	str	r1, [r7, #0]
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   19674:	683b      	ldr	r3, [r7, #0]
   19676:	08da      	lsrs	r2, r3, #3
   19678:	687b      	ldr	r3, [r7, #4]
   1967a:	689b      	ldr	r3, [r3, #8]
   1967c:	429a      	cmp	r2, r3
   1967e:	bf2c      	ite	cs
   19680:	2301      	movcs	r3, #1
   19682:	2300      	movcc	r3, #0
   19684:	b2db      	uxtb	r3, r3
}
   19686:	4618      	mov	r0, r3
   19688:	370c      	adds	r7, #12
   1968a:	46bd      	mov	sp, r7
   1968c:	bc80      	pop	{r7}
   1968e:	4770      	bx	lr

00019690 <chunk_mem>:
{
   19690:	b590      	push	{r4, r7, lr}
   19692:	b085      	sub	sp, #20
   19694:	af00      	add	r7, sp, #0
   19696:	6078      	str	r0, [r7, #4]
   19698:	6039      	str	r1, [r7, #0]
	chunk_unit_t *buf = chunk_buf(h);
   1969a:	6878      	ldr	r0, [r7, #4]
   1969c:	f7ff fe22 	bl	192e4 <chunk_buf>
   196a0:	60f8      	str	r0, [r7, #12]
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   196a2:	683b      	ldr	r3, [r7, #0]
   196a4:	00dc      	lsls	r4, r3, #3
   196a6:	6878      	ldr	r0, [r7, #4]
   196a8:	f7ff ff7b 	bl	195a2 <chunk_header_bytes>
   196ac:	4603      	mov	r3, r0
   196ae:	4423      	add	r3, r4
   196b0:	68fa      	ldr	r2, [r7, #12]
   196b2:	4413      	add	r3, r2
   196b4:	60bb      	str	r3, [r7, #8]
	return ret;
   196b6:	68bb      	ldr	r3, [r7, #8]
}
   196b8:	4618      	mov	r0, r3
   196ba:	3714      	adds	r7, #20
   196bc:	46bd      	mov	sp, r7
   196be:	bd90      	pop	{r4, r7, pc}

000196c0 <free_list_remove_bidx>:
{
   196c0:	b580      	push	{r7, lr}
   196c2:	b088      	sub	sp, #32
   196c4:	af00      	add	r7, sp, #0
   196c6:	60f8      	str	r0, [r7, #12]
   196c8:	60b9      	str	r1, [r7, #8]
   196ca:	607a      	str	r2, [r7, #4]
	struct z_heap_bucket *b = &h->buckets[bidx];
   196cc:	687b      	ldr	r3, [r7, #4]
   196ce:	3304      	adds	r3, #4
   196d0:	009b      	lsls	r3, r3, #2
   196d2:	68fa      	ldr	r2, [r7, #12]
   196d4:	4413      	add	r3, r2
   196d6:	61fb      	str	r3, [r7, #28]
	if (next_free_chunk(h, c) == c) {
   196d8:	68b9      	ldr	r1, [r7, #8]
   196da:	68f8      	ldr	r0, [r7, #12]
   196dc:	f7ff fee5 	bl	194aa <next_free_chunk>
   196e0:	4602      	mov	r2, r0
   196e2:	68bb      	ldr	r3, [r7, #8]
   196e4:	4293      	cmp	r3, r2
   196e6:	d10d      	bne.n	19704 <free_list_remove_bidx+0x44>
		h->avail_buckets &= ~BIT(bidx);
   196e8:	68fb      	ldr	r3, [r7, #12]
   196ea:	68da      	ldr	r2, [r3, #12]
   196ec:	2101      	movs	r1, #1
   196ee:	687b      	ldr	r3, [r7, #4]
   196f0:	fa01 f303 	lsl.w	r3, r1, r3
   196f4:	43db      	mvns	r3, r3
   196f6:	401a      	ands	r2, r3
   196f8:	68fb      	ldr	r3, [r7, #12]
   196fa:	60da      	str	r2, [r3, #12]
		b->next = 0;
   196fc:	69fb      	ldr	r3, [r7, #28]
   196fe:	2200      	movs	r2, #0
   19700:	601a      	str	r2, [r3, #0]
}
   19702:	e016      	b.n	19732 <free_list_remove_bidx+0x72>
		chunkid_t first = prev_free_chunk(h, c),
   19704:	68b9      	ldr	r1, [r7, #8]
   19706:	68f8      	ldr	r0, [r7, #12]
   19708:	f7ff fec0 	bl	1948c <prev_free_chunk>
   1970c:	61b8      	str	r0, [r7, #24]
			  second = next_free_chunk(h, c);
   1970e:	68b9      	ldr	r1, [r7, #8]
   19710:	68f8      	ldr	r0, [r7, #12]
   19712:	f7ff feca 	bl	194aa <next_free_chunk>
   19716:	6178      	str	r0, [r7, #20]
		b->next = second;
   19718:	69fb      	ldr	r3, [r7, #28]
   1971a:	697a      	ldr	r2, [r7, #20]
   1971c:	601a      	str	r2, [r3, #0]
		set_next_free_chunk(h, first, second);
   1971e:	697a      	ldr	r2, [r7, #20]
   19720:	69b9      	ldr	r1, [r7, #24]
   19722:	68f8      	ldr	r0, [r7, #12]
   19724:	f7ff fee0 	bl	194e8 <set_next_free_chunk>
		set_prev_free_chunk(h, second, first);
   19728:	69ba      	ldr	r2, [r7, #24]
   1972a:	6979      	ldr	r1, [r7, #20]
   1972c:	68f8      	ldr	r0, [r7, #12]
   1972e:	f7ff fecb 	bl	194c8 <set_prev_free_chunk>
}
   19732:	bf00      	nop
   19734:	3720      	adds	r7, #32
   19736:	46bd      	mov	sp, r7
   19738:	bd80      	pop	{r7, pc}

0001973a <free_list_remove>:
{
   1973a:	b580      	push	{r7, lr}
   1973c:	b084      	sub	sp, #16
   1973e:	af00      	add	r7, sp, #0
   19740:	6078      	str	r0, [r7, #4]
   19742:	6039      	str	r1, [r7, #0]
	if (!solo_free_header(h, c)) {
   19744:	6839      	ldr	r1, [r7, #0]
   19746:	6878      	ldr	r0, [r7, #4]
   19748:	f7ff ff0f 	bl	1956a <solo_free_header>
   1974c:	4603      	mov	r3, r0
   1974e:	f083 0301 	eor.w	r3, r3, #1
   19752:	b2db      	uxtb	r3, r3
   19754:	2b00      	cmp	r3, #0
   19756:	d00e      	beq.n	19776 <free_list_remove+0x3c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   19758:	6839      	ldr	r1, [r7, #0]
   1975a:	6878      	ldr	r0, [r7, #4]
   1975c:	f7ff fe30 	bl	193c0 <chunk_size>
   19760:	4603      	mov	r3, r0
   19762:	4619      	mov	r1, r3
   19764:	6878      	ldr	r0, [r7, #4]
   19766:	f7ff ff6a 	bl	1963e <bucket_idx>
   1976a:	60f8      	str	r0, [r7, #12]
		free_list_remove_bidx(h, c, bidx);
   1976c:	68fa      	ldr	r2, [r7, #12]
   1976e:	6839      	ldr	r1, [r7, #0]
   19770:	6878      	ldr	r0, [r7, #4]
   19772:	f7ff ffa5 	bl	196c0 <free_list_remove_bidx>
}
   19776:	bf00      	nop
   19778:	3710      	adds	r7, #16
   1977a:	46bd      	mov	sp, r7
   1977c:	bd80      	pop	{r7, pc}

0001977e <free_list_add_bidx>:
{
   1977e:	b580      	push	{r7, lr}
   19780:	b088      	sub	sp, #32
   19782:	af00      	add	r7, sp, #0
   19784:	60f8      	str	r0, [r7, #12]
   19786:	60b9      	str	r1, [r7, #8]
   19788:	607a      	str	r2, [r7, #4]
	struct z_heap_bucket *b = &h->buckets[bidx];
   1978a:	687b      	ldr	r3, [r7, #4]
   1978c:	3304      	adds	r3, #4
   1978e:	009b      	lsls	r3, r3, #2
   19790:	68fa      	ldr	r2, [r7, #12]
   19792:	4413      	add	r3, r2
   19794:	61fb      	str	r3, [r7, #28]
	if (b->next == 0U) {
   19796:	69fb      	ldr	r3, [r7, #28]
   19798:	681b      	ldr	r3, [r3, #0]
   1979a:	2b00      	cmp	r3, #0
   1979c:	d116      	bne.n	197cc <free_list_add_bidx+0x4e>
		h->avail_buckets |= BIT(bidx);
   1979e:	68fb      	ldr	r3, [r7, #12]
   197a0:	68da      	ldr	r2, [r3, #12]
   197a2:	2101      	movs	r1, #1
   197a4:	687b      	ldr	r3, [r7, #4]
   197a6:	fa01 f303 	lsl.w	r3, r1, r3
   197aa:	431a      	orrs	r2, r3
   197ac:	68fb      	ldr	r3, [r7, #12]
   197ae:	60da      	str	r2, [r3, #12]
		b->next = c;
   197b0:	69fb      	ldr	r3, [r7, #28]
   197b2:	68ba      	ldr	r2, [r7, #8]
   197b4:	601a      	str	r2, [r3, #0]
		set_prev_free_chunk(h, c, c);
   197b6:	68ba      	ldr	r2, [r7, #8]
   197b8:	68b9      	ldr	r1, [r7, #8]
   197ba:	68f8      	ldr	r0, [r7, #12]
   197bc:	f7ff fe84 	bl	194c8 <set_prev_free_chunk>
		set_next_free_chunk(h, c, c);
   197c0:	68ba      	ldr	r2, [r7, #8]
   197c2:	68b9      	ldr	r1, [r7, #8]
   197c4:	68f8      	ldr	r0, [r7, #12]
   197c6:	f7ff fe8f 	bl	194e8 <set_next_free_chunk>
}
   197ca:	e01b      	b.n	19804 <free_list_add_bidx+0x86>
		chunkid_t second = b->next;
   197cc:	69fb      	ldr	r3, [r7, #28]
   197ce:	681b      	ldr	r3, [r3, #0]
   197d0:	61bb      	str	r3, [r7, #24]
		chunkid_t first = prev_free_chunk(h, second);
   197d2:	69b9      	ldr	r1, [r7, #24]
   197d4:	68f8      	ldr	r0, [r7, #12]
   197d6:	f7ff fe59 	bl	1948c <prev_free_chunk>
   197da:	6178      	str	r0, [r7, #20]
		set_prev_free_chunk(h, c, first);
   197dc:	697a      	ldr	r2, [r7, #20]
   197de:	68b9      	ldr	r1, [r7, #8]
   197e0:	68f8      	ldr	r0, [r7, #12]
   197e2:	f7ff fe71 	bl	194c8 <set_prev_free_chunk>
		set_next_free_chunk(h, c, second);
   197e6:	69ba      	ldr	r2, [r7, #24]
   197e8:	68b9      	ldr	r1, [r7, #8]
   197ea:	68f8      	ldr	r0, [r7, #12]
   197ec:	f7ff fe7c 	bl	194e8 <set_next_free_chunk>
		set_next_free_chunk(h, first, c);
   197f0:	68ba      	ldr	r2, [r7, #8]
   197f2:	6979      	ldr	r1, [r7, #20]
   197f4:	68f8      	ldr	r0, [r7, #12]
   197f6:	f7ff fe77 	bl	194e8 <set_next_free_chunk>
		set_prev_free_chunk(h, second, c);
   197fa:	68ba      	ldr	r2, [r7, #8]
   197fc:	69b9      	ldr	r1, [r7, #24]
   197fe:	68f8      	ldr	r0, [r7, #12]
   19800:	f7ff fe62 	bl	194c8 <set_prev_free_chunk>
}
   19804:	bf00      	nop
   19806:	3720      	adds	r7, #32
   19808:	46bd      	mov	sp, r7
   1980a:	bd80      	pop	{r7, pc}

0001980c <free_list_add>:
{
   1980c:	b580      	push	{r7, lr}
   1980e:	b084      	sub	sp, #16
   19810:	af00      	add	r7, sp, #0
   19812:	6078      	str	r0, [r7, #4]
   19814:	6039      	str	r1, [r7, #0]
	if (!solo_free_header(h, c)) {
   19816:	6839      	ldr	r1, [r7, #0]
   19818:	6878      	ldr	r0, [r7, #4]
   1981a:	f7ff fea6 	bl	1956a <solo_free_header>
   1981e:	4603      	mov	r3, r0
   19820:	f083 0301 	eor.w	r3, r3, #1
   19824:	b2db      	uxtb	r3, r3
   19826:	2b00      	cmp	r3, #0
   19828:	d00e      	beq.n	19848 <free_list_add+0x3c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1982a:	6839      	ldr	r1, [r7, #0]
   1982c:	6878      	ldr	r0, [r7, #4]
   1982e:	f7ff fdc7 	bl	193c0 <chunk_size>
   19832:	4603      	mov	r3, r0
   19834:	4619      	mov	r1, r3
   19836:	6878      	ldr	r0, [r7, #4]
   19838:	f7ff ff01 	bl	1963e <bucket_idx>
   1983c:	60f8      	str	r0, [r7, #12]
		free_list_add_bidx(h, c, bidx);
   1983e:	68fa      	ldr	r2, [r7, #12]
   19840:	6839      	ldr	r1, [r7, #0]
   19842:	6878      	ldr	r0, [r7, #4]
   19844:	f7ff ff9b 	bl	1977e <free_list_add_bidx>
}
   19848:	bf00      	nop
   1984a:	3710      	adds	r7, #16
   1984c:	46bd      	mov	sp, r7
   1984e:	bd80      	pop	{r7, pc}

00019850 <split_chunks>:
{
   19850:	b580      	push	{r7, lr}
   19852:	b088      	sub	sp, #32
   19854:	af00      	add	r7, sp, #0
   19856:	60f8      	str	r0, [r7, #12]
   19858:	60b9      	str	r1, [r7, #8]
   1985a:	607a      	str	r2, [r7, #4]
	chunksz_t sz0 = chunk_size(h, lc);
   1985c:	68b9      	ldr	r1, [r7, #8]
   1985e:	68f8      	ldr	r0, [r7, #12]
   19860:	f7ff fdae 	bl	193c0 <chunk_size>
   19864:	61f8      	str	r0, [r7, #28]
	chunksz_t lsz = rc - lc;
   19866:	687a      	ldr	r2, [r7, #4]
   19868:	68bb      	ldr	r3, [r7, #8]
   1986a:	1ad3      	subs	r3, r2, r3
   1986c:	61bb      	str	r3, [r7, #24]
	chunksz_t rsz = sz0 - lsz;
   1986e:	69fa      	ldr	r2, [r7, #28]
   19870:	69bb      	ldr	r3, [r7, #24]
   19872:	1ad3      	subs	r3, r2, r3
   19874:	617b      	str	r3, [r7, #20]
	set_chunk_size(h, lc, lsz);
   19876:	69ba      	ldr	r2, [r7, #24]
   19878:	68b9      	ldr	r1, [r7, #8]
   1987a:	68f8      	ldr	r0, [r7, #12]
   1987c:	f7ff fdf5 	bl	1946a <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   19880:	697a      	ldr	r2, [r7, #20]
   19882:	6879      	ldr	r1, [r7, #4]
   19884:	68f8      	ldr	r0, [r7, #12]
   19886:	f7ff fdf0 	bl	1946a <set_chunk_size>
	set_left_chunk_size(h, rc, lsz);
   1988a:	69ba      	ldr	r2, [r7, #24]
   1988c:	6879      	ldr	r1, [r7, #4]
   1988e:	68f8      	ldr	r0, [r7, #12]
   19890:	f7ff fe5b 	bl	1954a <set_left_chunk_size>
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
   19894:	6879      	ldr	r1, [r7, #4]
   19896:	68f8      	ldr	r0, [r7, #12]
   19898:	f7ff fe47 	bl	1952a <right_chunk>
   1989c:	4603      	mov	r3, r0
   1989e:	697a      	ldr	r2, [r7, #20]
   198a0:	4619      	mov	r1, r3
   198a2:	68f8      	ldr	r0, [r7, #12]
   198a4:	f7ff fe51 	bl	1954a <set_left_chunk_size>
}
   198a8:	bf00      	nop
   198aa:	3720      	adds	r7, #32
   198ac:	46bd      	mov	sp, r7
   198ae:	bd80      	pop	{r7, pc}

000198b0 <merge_chunks>:
{
   198b0:	b590      	push	{r4, r7, lr}
   198b2:	b087      	sub	sp, #28
   198b4:	af00      	add	r7, sp, #0
   198b6:	60f8      	str	r0, [r7, #12]
   198b8:	60b9      	str	r1, [r7, #8]
   198ba:	607a      	str	r2, [r7, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   198bc:	68b9      	ldr	r1, [r7, #8]
   198be:	68f8      	ldr	r0, [r7, #12]
   198c0:	f7ff fd7e 	bl	193c0 <chunk_size>
   198c4:	4604      	mov	r4, r0
   198c6:	6879      	ldr	r1, [r7, #4]
   198c8:	68f8      	ldr	r0, [r7, #12]
   198ca:	f7ff fd79 	bl	193c0 <chunk_size>
   198ce:	4603      	mov	r3, r0
   198d0:	4423      	add	r3, r4
   198d2:	617b      	str	r3, [r7, #20]
	set_chunk_size(h, lc, newsz);
   198d4:	697a      	ldr	r2, [r7, #20]
   198d6:	68b9      	ldr	r1, [r7, #8]
   198d8:	68f8      	ldr	r0, [r7, #12]
   198da:	f7ff fdc6 	bl	1946a <set_chunk_size>
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
   198de:	6879      	ldr	r1, [r7, #4]
   198e0:	68f8      	ldr	r0, [r7, #12]
   198e2:	f7ff fe22 	bl	1952a <right_chunk>
   198e6:	4603      	mov	r3, r0
   198e8:	697a      	ldr	r2, [r7, #20]
   198ea:	4619      	mov	r1, r3
   198ec:	68f8      	ldr	r0, [r7, #12]
   198ee:	f7ff fe2c 	bl	1954a <set_left_chunk_size>
}
   198f2:	bf00      	nop
   198f4:	371c      	adds	r7, #28
   198f6:	46bd      	mov	sp, r7
   198f8:	bd90      	pop	{r4, r7, pc}

000198fa <free_chunk>:
{
   198fa:	b580      	push	{r7, lr}
   198fc:	b082      	sub	sp, #8
   198fe:	af00      	add	r7, sp, #0
   19900:	6078      	str	r0, [r7, #4]
   19902:	6039      	str	r1, [r7, #0]
	if (!chunk_used(h, right_chunk(h, c))) {
   19904:	6839      	ldr	r1, [r7, #0]
   19906:	6878      	ldr	r0, [r7, #4]
   19908:	f7ff fe0f 	bl	1952a <right_chunk>
   1990c:	4603      	mov	r3, r0
   1990e:	4619      	mov	r1, r3
   19910:	6878      	ldr	r0, [r7, #4]
   19912:	f7ff fd3f 	bl	19394 <chunk_used>
   19916:	4603      	mov	r3, r0
   19918:	f083 0301 	eor.w	r3, r3, #1
   1991c:	b2db      	uxtb	r3, r3
   1991e:	2b00      	cmp	r3, #0
   19920:	d012      	beq.n	19948 <free_chunk+0x4e>
		free_list_remove(h, right_chunk(h, c));
   19922:	6839      	ldr	r1, [r7, #0]
   19924:	6878      	ldr	r0, [r7, #4]
   19926:	f7ff fe00 	bl	1952a <right_chunk>
   1992a:	4603      	mov	r3, r0
   1992c:	4619      	mov	r1, r3
   1992e:	6878      	ldr	r0, [r7, #4]
   19930:	f7ff ff03 	bl	1973a <free_list_remove>
		merge_chunks(h, c, right_chunk(h, c));
   19934:	6839      	ldr	r1, [r7, #0]
   19936:	6878      	ldr	r0, [r7, #4]
   19938:	f7ff fdf7 	bl	1952a <right_chunk>
   1993c:	4603      	mov	r3, r0
   1993e:	461a      	mov	r2, r3
   19940:	6839      	ldr	r1, [r7, #0]
   19942:	6878      	ldr	r0, [r7, #4]
   19944:	f7ff ffb4 	bl	198b0 <merge_chunks>
	if (!chunk_used(h, left_chunk(h, c))) {
   19948:	6839      	ldr	r1, [r7, #0]
   1994a:	6878      	ldr	r0, [r7, #4]
   1994c:	f7ff fddc 	bl	19508 <left_chunk>
   19950:	4603      	mov	r3, r0
   19952:	4619      	mov	r1, r3
   19954:	6878      	ldr	r0, [r7, #4]
   19956:	f7ff fd1d 	bl	19394 <chunk_used>
   1995a:	4603      	mov	r3, r0
   1995c:	f083 0301 	eor.w	r3, r3, #1
   19960:	b2db      	uxtb	r3, r3
   19962:	2b00      	cmp	r3, #0
   19964:	d017      	beq.n	19996 <free_chunk+0x9c>
		free_list_remove(h, left_chunk(h, c));
   19966:	6839      	ldr	r1, [r7, #0]
   19968:	6878      	ldr	r0, [r7, #4]
   1996a:	f7ff fdcd 	bl	19508 <left_chunk>
   1996e:	4603      	mov	r3, r0
   19970:	4619      	mov	r1, r3
   19972:	6878      	ldr	r0, [r7, #4]
   19974:	f7ff fee1 	bl	1973a <free_list_remove>
		merge_chunks(h, left_chunk(h, c), c);
   19978:	6839      	ldr	r1, [r7, #0]
   1997a:	6878      	ldr	r0, [r7, #4]
   1997c:	f7ff fdc4 	bl	19508 <left_chunk>
   19980:	4603      	mov	r3, r0
   19982:	683a      	ldr	r2, [r7, #0]
   19984:	4619      	mov	r1, r3
   19986:	6878      	ldr	r0, [r7, #4]
   19988:	f7ff ff92 	bl	198b0 <merge_chunks>
		c = left_chunk(h, c);
   1998c:	6839      	ldr	r1, [r7, #0]
   1998e:	6878      	ldr	r0, [r7, #4]
   19990:	f7ff fdba 	bl	19508 <left_chunk>
   19994:	6038      	str	r0, [r7, #0]
	free_list_add(h, c);
   19996:	6839      	ldr	r1, [r7, #0]
   19998:	6878      	ldr	r0, [r7, #4]
   1999a:	f7ff ff37 	bl	1980c <free_list_add>
}
   1999e:	bf00      	nop
   199a0:	3708      	adds	r7, #8
   199a2:	46bd      	mov	sp, r7
   199a4:	bd80      	pop	{r7, pc}

000199a6 <mem_to_chunkid>:
{
   199a6:	b580      	push	{r7, lr}
   199a8:	b084      	sub	sp, #16
   199aa:	af00      	add	r7, sp, #0
   199ac:	6078      	str	r0, [r7, #4]
   199ae:	6039      	str	r1, [r7, #0]
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
   199b0:	683b      	ldr	r3, [r7, #0]
   199b2:	60fb      	str	r3, [r7, #12]
   199b4:	6878      	ldr	r0, [r7, #4]
   199b6:	f7ff fc95 	bl	192e4 <chunk_buf>
   199ba:	60b8      	str	r0, [r7, #8]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   199bc:	6878      	ldr	r0, [r7, #4]
   199be:	f7ff fdf0 	bl	195a2 <chunk_header_bytes>
   199c2:	4603      	mov	r3, r0
   199c4:	425b      	negs	r3, r3
   199c6:	68fa      	ldr	r2, [r7, #12]
   199c8:	441a      	add	r2, r3
   199ca:	68bb      	ldr	r3, [r7, #8]
   199cc:	1ad3      	subs	r3, r2, r3
   199ce:	08db      	lsrs	r3, r3, #3
}
   199d0:	4618      	mov	r0, r3
   199d2:	3710      	adds	r7, #16
   199d4:	46bd      	mov	sp, r7
   199d6:	bd80      	pop	{r7, pc}

000199d8 <alloc_chunk>:
{
   199d8:	b580      	push	{r7, lr}
   199da:	b08a      	sub	sp, #40	; 0x28
   199dc:	af00      	add	r7, sp, #0
   199de:	6078      	str	r0, [r7, #4]
   199e0:	6039      	str	r1, [r7, #0]
	int bi = bucket_idx(h, sz);
   199e2:	6839      	ldr	r1, [r7, #0]
   199e4:	6878      	ldr	r0, [r7, #4]
   199e6:	f7ff fe2a 	bl	1963e <bucket_idx>
   199ea:	6238      	str	r0, [r7, #32]
	struct z_heap_bucket *b = &h->buckets[bi];
   199ec:	6a3b      	ldr	r3, [r7, #32]
   199ee:	3304      	adds	r3, #4
   199f0:	009b      	lsls	r3, r3, #2
   199f2:	687a      	ldr	r2, [r7, #4]
   199f4:	4413      	add	r3, r2
   199f6:	61fb      	str	r3, [r7, #28]
	if (b->next) {
   199f8:	69fb      	ldr	r3, [r7, #28]
   199fa:	681b      	ldr	r3, [r3, #0]
   199fc:	2b00      	cmp	r3, #0
   199fe:	d028      	beq.n	19a52 <alloc_chunk+0x7a>
		chunkid_t first = b->next;
   19a00:	69fb      	ldr	r3, [r7, #28]
   19a02:	681b      	ldr	r3, [r3, #0]
   19a04:	61bb      	str	r3, [r7, #24]
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   19a06:	2303      	movs	r3, #3
   19a08:	627b      	str	r3, [r7, #36]	; 0x24
			chunkid_t c = b->next;
   19a0a:	69fb      	ldr	r3, [r7, #28]
   19a0c:	681b      	ldr	r3, [r3, #0]
   19a0e:	617b      	str	r3, [r7, #20]
			if (chunk_size(h, c) >= sz) {
   19a10:	6979      	ldr	r1, [r7, #20]
   19a12:	6878      	ldr	r0, [r7, #4]
   19a14:	f7ff fcd4 	bl	193c0 <chunk_size>
   19a18:	4602      	mov	r2, r0
   19a1a:	683b      	ldr	r3, [r7, #0]
   19a1c:	4293      	cmp	r3, r2
   19a1e:	d806      	bhi.n	19a2e <alloc_chunk+0x56>
				free_list_remove_bidx(h, c, bi);
   19a20:	6a3a      	ldr	r2, [r7, #32]
   19a22:	6979      	ldr	r1, [r7, #20]
   19a24:	6878      	ldr	r0, [r7, #4]
   19a26:	f7ff fe4b 	bl	196c0 <free_list_remove_bidx>
				return c;
   19a2a:	697b      	ldr	r3, [r7, #20]
   19a2c:	e032      	b.n	19a94 <alloc_chunk+0xbc>
			b->next = next_free_chunk(h, c);
   19a2e:	6979      	ldr	r1, [r7, #20]
   19a30:	6878      	ldr	r0, [r7, #4]
   19a32:	f7ff fd3a 	bl	194aa <next_free_chunk>
   19a36:	4602      	mov	r2, r0
   19a38:	69fb      	ldr	r3, [r7, #28]
   19a3a:	601a      	str	r2, [r3, #0]
		} while (--i && b->next != first);
   19a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19a3e:	3b01      	subs	r3, #1
   19a40:	627b      	str	r3, [r7, #36]	; 0x24
   19a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19a44:	2b00      	cmp	r3, #0
   19a46:	d004      	beq.n	19a52 <alloc_chunk+0x7a>
   19a48:	69fb      	ldr	r3, [r7, #28]
   19a4a:	681b      	ldr	r3, [r3, #0]
   19a4c:	69ba      	ldr	r2, [r7, #24]
   19a4e:	429a      	cmp	r2, r3
   19a50:	d1db      	bne.n	19a0a <alloc_chunk+0x32>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   19a52:	687b      	ldr	r3, [r7, #4]
   19a54:	68da      	ldr	r2, [r3, #12]
   19a56:	6a3b      	ldr	r3, [r7, #32]
   19a58:	3301      	adds	r3, #1
   19a5a:	2101      	movs	r1, #1
   19a5c:	fa01 f303 	lsl.w	r3, r1, r3
   19a60:	425b      	negs	r3, r3
   19a62:	4013      	ands	r3, r2
   19a64:	613b      	str	r3, [r7, #16]
	if (bmask != 0U) {
   19a66:	693b      	ldr	r3, [r7, #16]
   19a68:	2b00      	cmp	r3, #0
   19a6a:	d012      	beq.n	19a92 <alloc_chunk+0xba>
		int minbucket = __builtin_ctz(bmask);
   19a6c:	693b      	ldr	r3, [r7, #16]
   19a6e:	fa93 f3a3 	rbit	r3, r3
   19a72:	fab3 f383 	clz	r3, r3
   19a76:	60fb      	str	r3, [r7, #12]
		chunkid_t c = h->buckets[minbucket].next;
   19a78:	687b      	ldr	r3, [r7, #4]
   19a7a:	68fa      	ldr	r2, [r7, #12]
   19a7c:	3204      	adds	r2, #4
   19a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   19a82:	60bb      	str	r3, [r7, #8]
		free_list_remove_bidx(h, c, minbucket);
   19a84:	68fa      	ldr	r2, [r7, #12]
   19a86:	68b9      	ldr	r1, [r7, #8]
   19a88:	6878      	ldr	r0, [r7, #4]
   19a8a:	f7ff fe19 	bl	196c0 <free_list_remove_bidx>
		return c;
   19a8e:	68bb      	ldr	r3, [r7, #8]
   19a90:	e000      	b.n	19a94 <alloc_chunk+0xbc>
	return 0;
   19a92:	2300      	movs	r3, #0
}
   19a94:	4618      	mov	r0, r3
   19a96:	3728      	adds	r7, #40	; 0x28
   19a98:	46bd      	mov	sp, r7
   19a9a:	bd80      	pop	{r7, pc}

00019a9c <sys_heap_alloc>:
{
   19a9c:	b580      	push	{r7, lr}
   19a9e:	b086      	sub	sp, #24
   19aa0:	af00      	add	r7, sp, #0
   19aa2:	6078      	str	r0, [r7, #4]
   19aa4:	6039      	str	r1, [r7, #0]
	struct z_heap *h = heap->heap;
   19aa6:	687b      	ldr	r3, [r7, #4]
   19aa8:	681b      	ldr	r3, [r3, #0]
   19aaa:	617b      	str	r3, [r7, #20]
	if (bytes == 0U || size_too_big(h, bytes)) {
   19aac:	683b      	ldr	r3, [r7, #0]
   19aae:	2b00      	cmp	r3, #0
   19ab0:	d006      	beq.n	19ac0 <sys_heap_alloc+0x24>
   19ab2:	6839      	ldr	r1, [r7, #0]
   19ab4:	6978      	ldr	r0, [r7, #20]
   19ab6:	f7ff fdd8 	bl	1966a <size_too_big>
   19aba:	4603      	mov	r3, r0
   19abc:	2b00      	cmp	r3, #0
   19abe:	d001      	beq.n	19ac4 <sys_heap_alloc+0x28>
		return NULL;
   19ac0:	2300      	movs	r3, #0
   19ac2:	e030      	b.n	19b26 <sys_heap_alloc+0x8a>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   19ac4:	6839      	ldr	r1, [r7, #0]
   19ac6:	6978      	ldr	r0, [r7, #20]
   19ac8:	f7ff fd99 	bl	195fe <bytes_to_chunksz>
   19acc:	6138      	str	r0, [r7, #16]
	chunkid_t c = alloc_chunk(h, chunk_sz);
   19ace:	6939      	ldr	r1, [r7, #16]
   19ad0:	6978      	ldr	r0, [r7, #20]
   19ad2:	f7ff ff81 	bl	199d8 <alloc_chunk>
   19ad6:	60f8      	str	r0, [r7, #12]
	if (c == 0U) {
   19ad8:	68fb      	ldr	r3, [r7, #12]
   19ada:	2b00      	cmp	r3, #0
   19adc:	d101      	bne.n	19ae2 <sys_heap_alloc+0x46>
		return NULL;
   19ade:	2300      	movs	r3, #0
   19ae0:	e021      	b.n	19b26 <sys_heap_alloc+0x8a>
	if (chunk_size(h, c) > chunk_sz) {
   19ae2:	68f9      	ldr	r1, [r7, #12]
   19ae4:	6978      	ldr	r0, [r7, #20]
   19ae6:	f7ff fc6b 	bl	193c0 <chunk_size>
   19aea:	4602      	mov	r2, r0
   19aec:	693b      	ldr	r3, [r7, #16]
   19aee:	4293      	cmp	r3, r2
   19af0:	d20e      	bcs.n	19b10 <sys_heap_alloc+0x74>
		split_chunks(h, c, c + chunk_sz);
   19af2:	68fa      	ldr	r2, [r7, #12]
   19af4:	693b      	ldr	r3, [r7, #16]
   19af6:	4413      	add	r3, r2
   19af8:	461a      	mov	r2, r3
   19afa:	68f9      	ldr	r1, [r7, #12]
   19afc:	6978      	ldr	r0, [r7, #20]
   19afe:	f7ff fea7 	bl	19850 <split_chunks>
		free_list_add(h, c + chunk_sz);
   19b02:	68fa      	ldr	r2, [r7, #12]
   19b04:	693b      	ldr	r3, [r7, #16]
   19b06:	4413      	add	r3, r2
   19b08:	4619      	mov	r1, r3
   19b0a:	6978      	ldr	r0, [r7, #20]
   19b0c:	f7ff fe7e 	bl	1980c <free_list_add>
	set_chunk_used(h, c, true);
   19b10:	2201      	movs	r2, #1
   19b12:	68f9      	ldr	r1, [r7, #12]
   19b14:	6978      	ldr	r0, [r7, #20]
   19b16:	f7ff fc63 	bl	193e0 <set_chunk_used>
	mem = chunk_mem(h, c);
   19b1a:	68f9      	ldr	r1, [r7, #12]
   19b1c:	6978      	ldr	r0, [r7, #20]
   19b1e:	f7ff fdb7 	bl	19690 <chunk_mem>
   19b22:	60b8      	str	r0, [r7, #8]
	return mem;
   19b24:	68bb      	ldr	r3, [r7, #8]
}
   19b26:	4618      	mov	r0, r3
   19b28:	3718      	adds	r7, #24
   19b2a:	46bd      	mov	sp, r7
   19b2c:	bd80      	pop	{r7, pc}

00019b2e <sys_slist_init>:
 * @brief Initialize a list
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
   19b2e:	b480      	push	{r7}
   19b30:	b083      	sub	sp, #12
   19b32:	af00      	add	r7, sp, #0
   19b34:	6078      	str	r0, [r7, #4]
	list->head = NULL;
   19b36:	687b      	ldr	r3, [r7, #4]
   19b38:	2200      	movs	r2, #0
   19b3a:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   19b3c:	687b      	ldr	r3, [r7, #4]
   19b3e:	2200      	movs	r2, #0
   19b40:	605a      	str	r2, [r3, #4]
}
   19b42:	bf00      	nop
   19b44:	370c      	adds	r7, #12
   19b46:	46bd      	mov	sp, r7
   19b48:	bc80      	pop	{r7}
   19b4a:	4770      	bx	lr

00019b4c <z_snode_next_peek>:
 * @param ptr_to_list A pointer on the list to initialize
 */
#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
   19b4c:	b480      	push	{r7}
   19b4e:	b083      	sub	sp, #12
   19b50:	af00      	add	r7, sp, #0
   19b52:	6078      	str	r0, [r7, #4]
	return node->next;
   19b54:	687b      	ldr	r3, [r7, #4]
   19b56:	681b      	ldr	r3, [r3, #0]
}
   19b58:	4618      	mov	r0, r3
   19b5a:	370c      	adds	r7, #12
   19b5c:	46bd      	mov	sp, r7
   19b5e:	bc80      	pop	{r7}
   19b60:	4770      	bx	lr

00019b62 <z_snode_next_set>:

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
   19b62:	b480      	push	{r7}
   19b64:	b083      	sub	sp, #12
   19b66:	af00      	add	r7, sp, #0
   19b68:	6078      	str	r0, [r7, #4]
   19b6a:	6039      	str	r1, [r7, #0]
	parent->next = child;
   19b6c:	687b      	ldr	r3, [r7, #4]
   19b6e:	683a      	ldr	r2, [r7, #0]
   19b70:	601a      	str	r2, [r3, #0]
}
   19b72:	bf00      	nop
   19b74:	370c      	adds	r7, #12
   19b76:	46bd      	mov	sp, r7
   19b78:	bc80      	pop	{r7}
   19b7a:	4770      	bx	lr

00019b7c <z_slist_head_set>:

static inline void z_slist_head_set(sys_slist_t *list, sys_snode_t *node)
{
   19b7c:	b480      	push	{r7}
   19b7e:	b083      	sub	sp, #12
   19b80:	af00      	add	r7, sp, #0
   19b82:	6078      	str	r0, [r7, #4]
   19b84:	6039      	str	r1, [r7, #0]
	list->head = node;
   19b86:	687b      	ldr	r3, [r7, #4]
   19b88:	683a      	ldr	r2, [r7, #0]
   19b8a:	601a      	str	r2, [r3, #0]
}
   19b8c:	bf00      	nop
   19b8e:	370c      	adds	r7, #12
   19b90:	46bd      	mov	sp, r7
   19b92:	bc80      	pop	{r7}
   19b94:	4770      	bx	lr

00019b96 <z_slist_tail_set>:

static inline void z_slist_tail_set(sys_slist_t *list, sys_snode_t *node)
{
   19b96:	b480      	push	{r7}
   19b98:	b083      	sub	sp, #12
   19b9a:	af00      	add	r7, sp, #0
   19b9c:	6078      	str	r0, [r7, #4]
   19b9e:	6039      	str	r1, [r7, #0]
	list->tail = node;
   19ba0:	687b      	ldr	r3, [r7, #4]
   19ba2:	683a      	ldr	r2, [r7, #0]
   19ba4:	605a      	str	r2, [r3, #4]
}
   19ba6:	bf00      	nop
   19ba8:	370c      	adds	r7, #12
   19baa:	46bd      	mov	sp, r7
   19bac:	bc80      	pop	{r7}
   19bae:	4770      	bx	lr

00019bb0 <sys_slist_peek_head>:
 * @param list A point on the list to peek the first node from
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
   19bb0:	b480      	push	{r7}
   19bb2:	b083      	sub	sp, #12
   19bb4:	af00      	add	r7, sp, #0
   19bb6:	6078      	str	r0, [r7, #4]
	return list->head;
   19bb8:	687b      	ldr	r3, [r7, #4]
   19bba:	681b      	ldr	r3, [r3, #0]
}
   19bbc:	4618      	mov	r0, r3
   19bbe:	370c      	adds	r7, #12
   19bc0:	46bd      	mov	sp, r7
   19bc2:	bc80      	pop	{r7}
   19bc4:	4770      	bx	lr

00019bc6 <sys_slist_peek_tail>:
 * @param list A point on the list to peek the last node from
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
   19bc6:	b480      	push	{r7}
   19bc8:	b083      	sub	sp, #12
   19bca:	af00      	add	r7, sp, #0
   19bcc:	6078      	str	r0, [r7, #4]
	return list->tail;
   19bce:	687b      	ldr	r3, [r7, #4]
   19bd0:	685b      	ldr	r3, [r3, #4]
}
   19bd2:	4618      	mov	r0, r3
   19bd4:	370c      	adds	r7, #12
   19bd6:	46bd      	mov	sp, r7
   19bd8:	bc80      	pop	{r7}
   19bda:	4770      	bx	lr

00019bdc <sys_slist_is_empty>:
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
   19bdc:	b580      	push	{r7, lr}
   19bde:	b082      	sub	sp, #8
   19be0:	af00      	add	r7, sp, #0
   19be2:	6078      	str	r0, [r7, #4]
   19be4:	6878      	ldr	r0, [r7, #4]
   19be6:	f7ff ffe3 	bl	19bb0 <sys_slist_peek_head>
   19bea:	4603      	mov	r3, r0
   19bec:	2b00      	cmp	r3, #0
   19bee:	bf0c      	ite	eq
   19bf0:	2301      	moveq	r3, #1
   19bf2:	2300      	movne	r3, #0
   19bf4:	b2db      	uxtb	r3, r3
   19bf6:	4618      	mov	r0, r3
   19bf8:	3708      	adds	r7, #8
   19bfa:	46bd      	mov	sp, r7
   19bfc:	bd80      	pop	{r7, pc}

00019bfe <sys_slist_peek_next_no_check>:
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19bfe:	b580      	push	{r7, lr}
   19c00:	b082      	sub	sp, #8
   19c02:	af00      	add	r7, sp, #0
   19c04:	6078      	str	r0, [r7, #4]
   19c06:	6878      	ldr	r0, [r7, #4]
   19c08:	f7ff ffa0 	bl	19b4c <z_snode_next_peek>
   19c0c:	4603      	mov	r3, r0
   19c0e:	4618      	mov	r0, r3
   19c10:	3708      	adds	r7, #8
   19c12:	46bd      	mov	sp, r7
   19c14:	bd80      	pop	{r7, pc}

00019c16 <sys_slist_peek_next>:
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   19c16:	b580      	push	{r7, lr}
   19c18:	b082      	sub	sp, #8
   19c1a:	af00      	add	r7, sp, #0
   19c1c:	6078      	str	r0, [r7, #4]
   19c1e:	687b      	ldr	r3, [r7, #4]
   19c20:	2b00      	cmp	r3, #0
   19c22:	d004      	beq.n	19c2e <sys_slist_peek_next+0x18>
   19c24:	6878      	ldr	r0, [r7, #4]
   19c26:	f7ff ffea 	bl	19bfe <sys_slist_peek_next_no_check>
   19c2a:	4603      	mov	r3, r0
   19c2c:	e000      	b.n	19c30 <sys_slist_peek_next+0x1a>
   19c2e:	2300      	movs	r3, #0
   19c30:	4618      	mov	r0, r3
   19c32:	3708      	adds	r7, #8
   19c34:	46bd      	mov	sp, r7
   19c36:	bd80      	pop	{r7, pc}

00019c38 <sys_slist_append>:
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   19c38:	b580      	push	{r7, lr}
   19c3a:	b082      	sub	sp, #8
   19c3c:	af00      	add	r7, sp, #0
   19c3e:	6078      	str	r0, [r7, #4]
   19c40:	6039      	str	r1, [r7, #0]
   19c42:	2100      	movs	r1, #0
   19c44:	6838      	ldr	r0, [r7, #0]
   19c46:	f7ff ff8c 	bl	19b62 <z_snode_next_set>
   19c4a:	6878      	ldr	r0, [r7, #4]
   19c4c:	f7ff ffbb 	bl	19bc6 <sys_slist_peek_tail>
   19c50:	4603      	mov	r3, r0
   19c52:	2b00      	cmp	r3, #0
   19c54:	d108      	bne.n	19c68 <sys_slist_append+0x30>
   19c56:	6839      	ldr	r1, [r7, #0]
   19c58:	6878      	ldr	r0, [r7, #4]
   19c5a:	f7ff ff9c 	bl	19b96 <z_slist_tail_set>
   19c5e:	6839      	ldr	r1, [r7, #0]
   19c60:	6878      	ldr	r0, [r7, #4]
   19c62:	f7ff ff8b 	bl	19b7c <z_slist_head_set>
   19c66:	e00b      	b.n	19c80 <sys_slist_append+0x48>
   19c68:	6878      	ldr	r0, [r7, #4]
   19c6a:	f7ff ffac 	bl	19bc6 <sys_slist_peek_tail>
   19c6e:	4603      	mov	r3, r0
   19c70:	6839      	ldr	r1, [r7, #0]
   19c72:	4618      	mov	r0, r3
   19c74:	f7ff ff75 	bl	19b62 <z_snode_next_set>
   19c78:	6839      	ldr	r1, [r7, #0]
   19c7a:	6878      	ldr	r0, [r7, #4]
   19c7c:	f7ff ff8b 	bl	19b96 <z_slist_tail_set>
   19c80:	3708      	adds	r7, #8
   19c82:	46bd      	mov	sp, r7
   19c84:	bd80      	pop	{r7, pc}

00019c86 <sys_slist_get_not_empty>:
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19c86:	b580      	push	{r7, lr}
   19c88:	b084      	sub	sp, #16
   19c8a:	af00      	add	r7, sp, #0
   19c8c:	6078      	str	r0, [r7, #4]
   19c8e:	6878      	ldr	r0, [r7, #4]
   19c90:	f7ff ff8e 	bl	19bb0 <sys_slist_peek_head>
   19c94:	60f8      	str	r0, [r7, #12]
   19c96:	68f8      	ldr	r0, [r7, #12]
   19c98:	f7ff ff58 	bl	19b4c <z_snode_next_peek>
   19c9c:	4603      	mov	r3, r0
   19c9e:	4619      	mov	r1, r3
   19ca0:	6878      	ldr	r0, [r7, #4]
   19ca2:	f7ff ff6b 	bl	19b7c <z_slist_head_set>
   19ca6:	6878      	ldr	r0, [r7, #4]
   19ca8:	f7ff ff8d 	bl	19bc6 <sys_slist_peek_tail>
   19cac:	4602      	mov	r2, r0
   19cae:	68fb      	ldr	r3, [r7, #12]
   19cb0:	4293      	cmp	r3, r2
   19cb2:	d107      	bne.n	19cc4 <sys_slist_get_not_empty+0x3e>
   19cb4:	6878      	ldr	r0, [r7, #4]
   19cb6:	f7ff ff7b 	bl	19bb0 <sys_slist_peek_head>
   19cba:	4603      	mov	r3, r0
   19cbc:	4619      	mov	r1, r3
   19cbe:	6878      	ldr	r0, [r7, #4]
   19cc0:	f7ff ff69 	bl	19b96 <z_slist_tail_set>
   19cc4:	68fb      	ldr	r3, [r7, #12]
   19cc6:	4618      	mov	r0, r3
   19cc8:	3710      	adds	r7, #16
   19cca:	46bd      	mov	sp, r7
   19ccc:	bd80      	pop	{r7, pc}

00019cce <set_state>:
{
   19cce:	b480      	push	{r7}
   19cd0:	b083      	sub	sp, #12
   19cd2:	af00      	add	r7, sp, #0
   19cd4:	6078      	str	r0, [r7, #4]
   19cd6:	6039      	str	r1, [r7, #0]
	mgr->flags = (state & ONOFF_STATE_MASK)
   19cd8:	683b      	ldr	r3, [r7, #0]
   19cda:	b29b      	uxth	r3, r3
   19cdc:	f003 0307 	and.w	r3, r3, #7
   19ce0:	b29a      	uxth	r2, r3
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19ce2:	687b      	ldr	r3, [r7, #4]
   19ce4:	8b9b      	ldrh	r3, [r3, #28]
   19ce6:	f023 0307 	bic.w	r3, r3, #7
   19cea:	b29b      	uxth	r3, r3
   19cec:	4313      	orrs	r3, r2
   19cee:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   19cf0:	687b      	ldr	r3, [r7, #4]
   19cf2:	839a      	strh	r2, [r3, #28]
}
   19cf4:	bf00      	nop
   19cf6:	370c      	adds	r7, #12
   19cf8:	46bd      	mov	sp, r7
   19cfa:	bc80      	pop	{r7}
   19cfc:	4770      	bx	lr

00019cfe <validate_args>:
{
   19cfe:	b580      	push	{r7, lr}
   19d00:	b084      	sub	sp, #16
   19d02:	af00      	add	r7, sp, #0
   19d04:	6078      	str	r0, [r7, #4]
   19d06:	6039      	str	r1, [r7, #0]
	if ((mgr == NULL) || (cli == NULL)) {
   19d08:	687b      	ldr	r3, [r7, #4]
   19d0a:	2b00      	cmp	r3, #0
   19d0c:	d002      	beq.n	19d14 <validate_args+0x16>
   19d0e:	683b      	ldr	r3, [r7, #0]
   19d10:	2b00      	cmp	r3, #0
   19d12:	d102      	bne.n	19d1a <validate_args+0x1c>
		return -EINVAL;
   19d14:	f06f 0315 	mvn.w	r3, #21
   19d18:	e010      	b.n	19d3c <validate_args+0x3e>
	int rv = sys_notify_validate(&cli->notify);
   19d1a:	683b      	ldr	r3, [r7, #0]
   19d1c:	3304      	adds	r3, #4
   19d1e:	4618      	mov	r0, r3
   19d20:	f000 f90a 	bl	19f38 <sys_notify_validate>
   19d24:	60f8      	str	r0, [r7, #12]
	if ((rv == 0)
   19d26:	68fb      	ldr	r3, [r7, #12]
   19d28:	2b00      	cmp	r3, #0
   19d2a:	d106      	bne.n	19d3a <validate_args+0x3c>
	    && ((cli->notify.flags
   19d2c:	683b      	ldr	r3, [r7, #0]
   19d2e:	689b      	ldr	r3, [r3, #8]
   19d30:	2b03      	cmp	r3, #3
   19d32:	d902      	bls.n	19d3a <validate_args+0x3c>
		rv = -EINVAL;
   19d34:	f06f 0315 	mvn.w	r3, #21
   19d38:	60fb      	str	r3, [r7, #12]
	return rv;
   19d3a:	68fb      	ldr	r3, [r7, #12]
}
   19d3c:	4618      	mov	r0, r3
   19d3e:	3710      	adds	r7, #16
   19d40:	46bd      	mov	sp, r7
   19d42:	bd80      	pop	{r7, pc}

00019d44 <onoff_manager_init>:
{
   19d44:	b580      	push	{r7, lr}
   19d46:	b08a      	sub	sp, #40	; 0x28
   19d48:	af00      	add	r7, sp, #0
   19d4a:	6078      	str	r0, [r7, #4]
   19d4c:	6039      	str	r1, [r7, #0]
	if ((mgr == NULL)
   19d4e:	687b      	ldr	r3, [r7, #4]
   19d50:	2b00      	cmp	r3, #0
   19d52:	d00a      	beq.n	19d6a <onoff_manager_init+0x26>
	    || (transitions == NULL)
   19d54:	683b      	ldr	r3, [r7, #0]
   19d56:	2b00      	cmp	r3, #0
   19d58:	d007      	beq.n	19d6a <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   19d5a:	683b      	ldr	r3, [r7, #0]
   19d5c:	681b      	ldr	r3, [r3, #0]
   19d5e:	2b00      	cmp	r3, #0
   19d60:	d003      	beq.n	19d6a <onoff_manager_init+0x26>
	    || (transitions->stop == NULL)) {
   19d62:	683b      	ldr	r3, [r7, #0]
   19d64:	685b      	ldr	r3, [r3, #4]
   19d66:	2b00      	cmp	r3, #0
   19d68:	d102      	bne.n	19d70 <onoff_manager_init+0x2c>
		return -EINVAL;
   19d6a:	f06f 0315 	mvn.w	r3, #21
   19d6e:	e00a      	b.n	19d86 <onoff_manager_init+0x42>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   19d70:	687b      	ldr	r3, [r7, #4]
   19d72:	4618      	mov	r0, r3
   19d74:	2320      	movs	r3, #32
   19d76:	461a      	mov	r2, r3
   19d78:	2100      	movs	r1, #0
   19d7a:	f005 fdb5 	bl	1f8e8 <memset>
   19d7e:	687b      	ldr	r3, [r7, #4]
   19d80:	683a      	ldr	r2, [r7, #0]
   19d82:	611a      	str	r2, [r3, #16]
	return 0;
   19d84:	2300      	movs	r3, #0
}
   19d86:	4618      	mov	r0, r3
   19d88:	3728      	adds	r7, #40	; 0x28
   19d8a:	46bd      	mov	sp, r7
   19d8c:	bd80      	pop	{r7, pc}

00019d8e <notify_monitors>:
{
   19d8e:	b590      	push	{r4, r7, lr}
   19d90:	b089      	sub	sp, #36	; 0x24
   19d92:	af00      	add	r7, sp, #0
   19d94:	60f8      	str	r0, [r7, #12]
   19d96:	60b9      	str	r1, [r7, #8]
   19d98:	607a      	str	r2, [r7, #4]
	sys_slist_t *mlist = &mgr->monitors;
   19d9a:	68fb      	ldr	r3, [r7, #12]
   19d9c:	3308      	adds	r3, #8
   19d9e:	617b      	str	r3, [r7, #20]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19da0:	6978      	ldr	r0, [r7, #20]
   19da2:	f7ff ff05 	bl	19bb0 <sys_slist_peek_head>
   19da6:	4603      	mov	r3, r0
   19da8:	2b00      	cmp	r3, #0
   19daa:	d004      	beq.n	19db6 <notify_monitors+0x28>
   19dac:	6978      	ldr	r0, [r7, #20]
   19dae:	f7ff feff 	bl	19bb0 <sys_slist_peek_head>
   19db2:	4603      	mov	r3, r0
   19db4:	e000      	b.n	19db8 <notify_monitors+0x2a>
   19db6:	2300      	movs	r3, #0
   19db8:	61fb      	str	r3, [r7, #28]
   19dba:	69fb      	ldr	r3, [r7, #28]
   19dbc:	2b00      	cmp	r3, #0
   19dbe:	d00e      	beq.n	19dde <notify_monitors+0x50>
   19dc0:	69fb      	ldr	r3, [r7, #28]
   19dc2:	4618      	mov	r0, r3
   19dc4:	f7ff ff27 	bl	19c16 <sys_slist_peek_next>
   19dc8:	4603      	mov	r3, r0
   19dca:	2b00      	cmp	r3, #0
   19dcc:	d005      	beq.n	19dda <notify_monitors+0x4c>
   19dce:	69fb      	ldr	r3, [r7, #28]
   19dd0:	4618      	mov	r0, r3
   19dd2:	f7ff ff20 	bl	19c16 <sys_slist_peek_next>
   19dd6:	4603      	mov	r3, r0
   19dd8:	e002      	b.n	19de0 <notify_monitors+0x52>
   19dda:	2300      	movs	r3, #0
   19ddc:	e000      	b.n	19de0 <notify_monitors+0x52>
   19dde:	2300      	movs	r3, #0
   19de0:	61bb      	str	r3, [r7, #24]
   19de2:	e01c      	b.n	19e1e <notify_monitors+0x90>
		mon->callback(mgr, mon, state, res);
   19de4:	69fb      	ldr	r3, [r7, #28]
   19de6:	685c      	ldr	r4, [r3, #4]
   19de8:	687b      	ldr	r3, [r7, #4]
   19dea:	68ba      	ldr	r2, [r7, #8]
   19dec:	69f9      	ldr	r1, [r7, #28]
   19dee:	68f8      	ldr	r0, [r7, #12]
   19df0:	47a0      	blx	r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19df2:	69bb      	ldr	r3, [r7, #24]
   19df4:	61fb      	str	r3, [r7, #28]
   19df6:	69fb      	ldr	r3, [r7, #28]
   19df8:	2b00      	cmp	r3, #0
   19dfa:	d00e      	beq.n	19e1a <notify_monitors+0x8c>
   19dfc:	69fb      	ldr	r3, [r7, #28]
   19dfe:	4618      	mov	r0, r3
   19e00:	f7ff ff09 	bl	19c16 <sys_slist_peek_next>
   19e04:	4603      	mov	r3, r0
   19e06:	2b00      	cmp	r3, #0
   19e08:	d005      	beq.n	19e16 <notify_monitors+0x88>
   19e0a:	69fb      	ldr	r3, [r7, #28]
   19e0c:	4618      	mov	r0, r3
   19e0e:	f7ff ff02 	bl	19c16 <sys_slist_peek_next>
   19e12:	4603      	mov	r3, r0
   19e14:	e002      	b.n	19e1c <notify_monitors+0x8e>
   19e16:	2300      	movs	r3, #0
   19e18:	e000      	b.n	19e1c <notify_monitors+0x8e>
   19e1a:	2300      	movs	r3, #0
   19e1c:	61bb      	str	r3, [r7, #24]
   19e1e:	69fb      	ldr	r3, [r7, #28]
   19e20:	2b00      	cmp	r3, #0
   19e22:	d1df      	bne.n	19de4 <notify_monitors+0x56>
}
   19e24:	bf00      	nop
   19e26:	bf00      	nop
   19e28:	3724      	adds	r7, #36	; 0x24
   19e2a:	46bd      	mov	sp, r7
   19e2c:	bd90      	pop	{r4, r7, pc}

00019e2e <notify_one>:
{
   19e2e:	b590      	push	{r4, r7, lr}
   19e30:	b087      	sub	sp, #28
   19e32:	af00      	add	r7, sp, #0
   19e34:	60f8      	str	r0, [r7, #12]
   19e36:	60b9      	str	r1, [r7, #8]
   19e38:	607a      	str	r2, [r7, #4]
   19e3a:	603b      	str	r3, [r7, #0]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19e3c:	68bb      	ldr	r3, [r7, #8]
   19e3e:	3304      	adds	r3, #4
   19e40:	6839      	ldr	r1, [r7, #0]
   19e42:	4618      	mov	r0, r3
   19e44:	f7f0 f99c 	bl	a180 <sys_notify_finalize>
   19e48:	6178      	str	r0, [r7, #20]
	if (cb) {
   19e4a:	697b      	ldr	r3, [r7, #20]
   19e4c:	2b00      	cmp	r3, #0
   19e4e:	d005      	beq.n	19e5c <notify_one+0x2e>
		cb(mgr, cli, state, res);
   19e50:	697c      	ldr	r4, [r7, #20]
   19e52:	683b      	ldr	r3, [r7, #0]
   19e54:	687a      	ldr	r2, [r7, #4]
   19e56:	68b9      	ldr	r1, [r7, #8]
   19e58:	68f8      	ldr	r0, [r7, #12]
   19e5a:	47a0      	blx	r4
}
   19e5c:	bf00      	nop
   19e5e:	371c      	adds	r7, #28
   19e60:	46bd      	mov	sp, r7
   19e62:	bd90      	pop	{r4, r7, pc}

00019e64 <notify_all>:
{
   19e64:	b580      	push	{r7, lr}
   19e66:	b086      	sub	sp, #24
   19e68:	af00      	add	r7, sp, #0
   19e6a:	60f8      	str	r0, [r7, #12]
   19e6c:	60b9      	str	r1, [r7, #8]
   19e6e:	607a      	str	r2, [r7, #4]
   19e70:	603b      	str	r3, [r7, #0]
	while (!sys_slist_is_empty(list)) {
   19e72:	e00b      	b.n	19e8c <notify_all+0x28>
		sys_snode_t *node = sys_slist_get_not_empty(list);
   19e74:	68b8      	ldr	r0, [r7, #8]
   19e76:	f7ff ff06 	bl	19c86 <sys_slist_get_not_empty>
   19e7a:	6178      	str	r0, [r7, #20]
		struct onoff_client *cli =
   19e7c:	697b      	ldr	r3, [r7, #20]
   19e7e:	613b      	str	r3, [r7, #16]
		notify_one(mgr, cli, state, res);
   19e80:	683b      	ldr	r3, [r7, #0]
   19e82:	687a      	ldr	r2, [r7, #4]
   19e84:	6939      	ldr	r1, [r7, #16]
   19e86:	68f8      	ldr	r0, [r7, #12]
   19e88:	f7ff ffd1 	bl	19e2e <notify_one>
	while (!sys_slist_is_empty(list)) {
   19e8c:	68b8      	ldr	r0, [r7, #8]
   19e8e:	f7ff fea5 	bl	19bdc <sys_slist_is_empty>
   19e92:	4603      	mov	r3, r0
   19e94:	f083 0301 	eor.w	r3, r3, #1
   19e98:	b2db      	uxtb	r3, r3
   19e9a:	2b00      	cmp	r3, #0
   19e9c:	d1ea      	bne.n	19e74 <notify_all+0x10>
}
   19e9e:	bf00      	nop
   19ea0:	bf00      	nop
   19ea2:	3718      	adds	r7, #24
   19ea4:	46bd      	mov	sp, r7
   19ea6:	bd80      	pop	{r7, pc}

00019ea8 <process_recheck>:
{
   19ea8:	b580      	push	{r7, lr}
   19eaa:	b084      	sub	sp, #16
   19eac:	af00      	add	r7, sp, #0
   19eae:	6078      	str	r0, [r7, #4]
	int evt = EVT_NOP;
   19eb0:	2300      	movs	r3, #0
   19eb2:	60fb      	str	r3, [r7, #12]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19eb4:	687b      	ldr	r3, [r7, #4]
   19eb6:	8b9b      	ldrh	r3, [r3, #28]
   19eb8:	f003 0307 	and.w	r3, r3, #7
   19ebc:	60bb      	str	r3, [r7, #8]
	if ((state == ONOFF_STATE_OFF)
   19ebe:	68bb      	ldr	r3, [r7, #8]
   19ec0:	2b00      	cmp	r3, #0
   19ec2:	d10c      	bne.n	19ede <process_recheck+0x36>
	    && !sys_slist_is_empty(&mgr->clients)) {
   19ec4:	687b      	ldr	r3, [r7, #4]
   19ec6:	4618      	mov	r0, r3
   19ec8:	f7ff fe88 	bl	19bdc <sys_slist_is_empty>
   19ecc:	4603      	mov	r3, r0
   19ece:	f083 0301 	eor.w	r3, r3, #1
   19ed2:	b2db      	uxtb	r3, r3
   19ed4:	2b00      	cmp	r3, #0
   19ed6:	d002      	beq.n	19ede <process_recheck+0x36>
		evt = EVT_START;
   19ed8:	2303      	movs	r3, #3
   19eda:	60fb      	str	r3, [r7, #12]
   19edc:	e018      	b.n	19f10 <process_recheck+0x68>
	} else if ((state == ONOFF_STATE_ON)
   19ede:	68bb      	ldr	r3, [r7, #8]
   19ee0:	2b02      	cmp	r3, #2
   19ee2:	d106      	bne.n	19ef2 <process_recheck+0x4a>
		   && (mgr->refs == 0U)) {
   19ee4:	687b      	ldr	r3, [r7, #4]
   19ee6:	8bdb      	ldrh	r3, [r3, #30]
   19ee8:	2b00      	cmp	r3, #0
   19eea:	d102      	bne.n	19ef2 <process_recheck+0x4a>
		evt = EVT_STOP;
   19eec:	2304      	movs	r3, #4
   19eee:	60fb      	str	r3, [r7, #12]
   19ef0:	e00e      	b.n	19f10 <process_recheck+0x68>
	} else if ((state == ONOFF_STATE_ERROR)
   19ef2:	68bb      	ldr	r3, [r7, #8]
   19ef4:	2b01      	cmp	r3, #1
   19ef6:	d10b      	bne.n	19f10 <process_recheck+0x68>
		   && !sys_slist_is_empty(&mgr->clients)) {
   19ef8:	687b      	ldr	r3, [r7, #4]
   19efa:	4618      	mov	r0, r3
   19efc:	f7ff fe6e 	bl	19bdc <sys_slist_is_empty>
   19f00:	4603      	mov	r3, r0
   19f02:	f083 0301 	eor.w	r3, r3, #1
   19f06:	b2db      	uxtb	r3, r3
   19f08:	2b00      	cmp	r3, #0
   19f0a:	d001      	beq.n	19f10 <process_recheck+0x68>
		evt = EVT_RESET;
   19f0c:	2305      	movs	r3, #5
   19f0e:	60fb      	str	r3, [r7, #12]
	return evt;
   19f10:	68fb      	ldr	r3, [r7, #12]
}
   19f12:	4618      	mov	r0, r3
   19f14:	3710      	adds	r7, #16
   19f16:	46bd      	mov	sp, r7
   19f18:	bd80      	pop	{r7, pc}

00019f1a <sys_notify_get_method>:
{
   19f1a:	b480      	push	{r7}
   19f1c:	b085      	sub	sp, #20
   19f1e:	af00      	add	r7, sp, #0
   19f20:	6078      	str	r0, [r7, #4]
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19f22:	687b      	ldr	r3, [r7, #4]
   19f24:	685b      	ldr	r3, [r3, #4]
   19f26:	60fb      	str	r3, [r7, #12]
	return method & SYS_NOTIFY_METHOD_MASK;
   19f28:	68fb      	ldr	r3, [r7, #12]
   19f2a:	f003 0303 	and.w	r3, r3, #3
}
   19f2e:	4618      	mov	r0, r3
   19f30:	3714      	adds	r7, #20
   19f32:	46bd      	mov	sp, r7
   19f34:	bc80      	pop	{r7}
   19f36:	4770      	bx	lr

00019f38 <sys_notify_validate>:
{
   19f38:	b580      	push	{r7, lr}
   19f3a:	b084      	sub	sp, #16
   19f3c:	af00      	add	r7, sp, #0
   19f3e:	6078      	str	r0, [r7, #4]
	int rv = 0;
   19f40:	2300      	movs	r3, #0
   19f42:	60fb      	str	r3, [r7, #12]
	if (notify == NULL) {
   19f44:	687b      	ldr	r3, [r7, #4]
   19f46:	2b00      	cmp	r3, #0
   19f48:	d102      	bne.n	19f50 <sys_notify_validate+0x18>
		return -EINVAL;
   19f4a:	f06f 0315 	mvn.w	r3, #21
   19f4e:	e01d      	b.n	19f8c <sys_notify_validate+0x54>
	switch (sys_notify_get_method(notify)) {
   19f50:	6878      	ldr	r0, [r7, #4]
   19f52:	f7ff ffe2 	bl	19f1a <sys_notify_get_method>
   19f56:	4603      	mov	r3, r0
   19f58:	2b01      	cmp	r3, #1
   19f5a:	d00d      	beq.n	19f78 <sys_notify_validate+0x40>
   19f5c:	2b03      	cmp	r3, #3
   19f5e:	d107      	bne.n	19f70 <sys_notify_validate+0x38>
		if (notify->method.callback == NULL) {
   19f60:	687b      	ldr	r3, [r7, #4]
   19f62:	681b      	ldr	r3, [r3, #0]
   19f64:	2b00      	cmp	r3, #0
   19f66:	d109      	bne.n	19f7c <sys_notify_validate+0x44>
			rv = -EINVAL;
   19f68:	f06f 0315 	mvn.w	r3, #21
   19f6c:	60fb      	str	r3, [r7, #12]
		break;
   19f6e:	e005      	b.n	19f7c <sys_notify_validate+0x44>
		rv = -EINVAL;
   19f70:	f06f 0315 	mvn.w	r3, #21
   19f74:	60fb      	str	r3, [r7, #12]
		break;
   19f76:	e002      	b.n	19f7e <sys_notify_validate+0x46>
		break;
   19f78:	bf00      	nop
   19f7a:	e000      	b.n	19f7e <sys_notify_validate+0x46>
		break;
   19f7c:	bf00      	nop
	if (rv == 0) {
   19f7e:	68fb      	ldr	r3, [r7, #12]
   19f80:	2b00      	cmp	r3, #0
   19f82:	d102      	bne.n	19f8a <sys_notify_validate+0x52>
		notify->result = 0;
   19f84:	687b      	ldr	r3, [r7, #4]
   19f86:	2200      	movs	r2, #0
   19f88:	609a      	str	r2, [r3, #8]
	return rv;
   19f8a:	68fb      	ldr	r3, [r7, #12]
}
   19f8c:	4618      	mov	r0, r3
   19f8e:	3710      	adds	r7, #16
   19f90:	46bd      	mov	sp, r7
   19f92:	bd80      	pop	{r7, pc}

00019f94 <assert_post_action>:
#ifdef CONFIG_ASSERT_NO_FILE_INFO
__weak void assert_post_action(void)
#else
__weak void assert_post_action(const char *file, unsigned int line)
#endif
{
   19f94:	b480      	push	{r7}
   19f96:	b083      	sub	sp, #12
   19f98:	af00      	add	r7, sp, #0
   19f9a:	6078      	str	r0, [r7, #4]
   19f9c:	6039      	str	r1, [r7, #0]
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   19f9e:	4040      	eors	r0, r0
   19fa0:	f380 8811 	msr	BASEPRI, r0
   19fa4:	f04f 0004 	mov.w	r0, #4
   19fa8:	df02      	svc	2
}
   19faa:	bf00      	nop
   19fac:	370c      	adds	r7, #12
   19fae:	46bd      	mov	sp, r7
   19fb0:	bc80      	pop	{r7}
   19fb2:	4770      	bx	lr

00019fb4 <assert_print>:

void assert_print(const char *fmt, ...)
{
   19fb4:	b40f      	push	{r0, r1, r2, r3}
   19fb6:	b580      	push	{r7, lr}
   19fb8:	b082      	sub	sp, #8
   19fba:	af00      	add	r7, sp, #0
	va_list ap;

	va_start(ap, fmt);
   19fbc:	f107 0314 	add.w	r3, r7, #20
   19fc0:	607b      	str	r3, [r7, #4]

	vprintk(fmt, ap);
   19fc2:	6879      	ldr	r1, [r7, #4]
   19fc4:	6938      	ldr	r0, [r7, #16]
   19fc6:	f7ef fa1d 	bl	9404 <vprintk>

	va_end(ap);
}
   19fca:	bf00      	nop
   19fcc:	3708      	adds	r7, #8
   19fce:	46bd      	mov	sp, r7
   19fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   19fd4:	b004      	add	sp, #16
   19fd6:	4770      	bx	lr

00019fd8 <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <zephyr/toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
   19fd8:	b480      	push	{r7}
   19fda:	af00      	add	r7, sp, #0
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_PYD1598, 1);

GEN_ABS_SYM_END
   19fdc:	bf00      	nop
   19fde:	46bd      	mov	sp, r7
   19fe0:	bc80      	pop	{r7}
   19fe2:	4770      	bx	lr

00019fe4 <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
   19fe4:	b580      	push	{r7, lr}
   19fe6:	b082      	sub	sp, #8
   19fe8:	af00      	add	r7, sp, #0
   19fea:	6078      	str	r0, [r7, #4]
	nrfx_coredep_delay_us(time_us);
   19fec:	6878      	ldr	r0, [r7, #4]
   19fee:	f7f0 f905 	bl	a1fc <nrfx_coredep_delay_us>
}
   19ff2:	bf00      	nop
   19ff4:	3708      	adds	r7, #8
   19ff6:	46bd      	mov	sp, r7
   19ff8:	bd80      	pop	{r7, pc}

00019ffa <z_log_minimal_printk>:
#include <zephyr/sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
   19ffa:	b40f      	push	{r0, r1, r2, r3}
   19ffc:	b580      	push	{r7, lr}
   19ffe:	b082      	sub	sp, #8
   1a000:	af00      	add	r7, sp, #0
	va_list ap;

	va_start(ap, fmt);
   1a002:	f107 0314 	add.w	r3, r7, #20
   1a006:	607b      	str	r3, [r7, #4]
	vprintk(fmt, ap);
   1a008:	6879      	ldr	r1, [r7, #4]
   1a00a:	6938      	ldr	r0, [r7, #16]
   1a00c:	f7ef f9fa 	bl	9404 <vprintk>
	va_end(ap);
}
   1a010:	bf00      	nop
   1a012:	3708      	adds	r7, #8
   1a014:	46bd      	mov	sp, r7
   1a016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1a01a:	b004      	add	sp, #16
   1a01c:	4770      	bx	lr

0001a01e <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1a01e:	b580      	push	{r7, lr}
   1a020:	b082      	sub	sp, #8
   1a022:	af00      	add	r7, sp, #0
   1a024:	6078      	str	r0, [r7, #4]
   1a026:	6039      	str	r1, [r7, #0]

	if (esf != NULL) {
   1a028:	683b      	ldr	r3, [r7, #0]
   1a02a:	2b00      	cmp	r3, #0
   1a02c:	d002      	beq.n	1a034 <z_arm_fatal_error+0x16>
		esf_dump(esf);
   1a02e:	6838      	ldr	r0, [r7, #0]
   1a030:	f7f0 f94e 	bl	a2d0 <esf_dump>
	}
	z_fatal_error(reason, esf);
   1a034:	6839      	ldr	r1, [r7, #0]
   1a036:	6878      	ldr	r0, [r7, #4]
   1a038:	f7f8 fbf2 	bl	12820 <z_fatal_error>
}
   1a03c:	bf00      	nop
   1a03e:	3708      	adds	r7, #8
   1a040:	46bd      	mov	sp, r7
   1a042:	bd80      	pop	{r7, pc}

0001a044 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1a044:	b580      	push	{r7, lr}
   1a046:	b084      	sub	sp, #16
   1a048:	af00      	add	r7, sp, #0
   1a04a:	6078      	str	r0, [r7, #4]
   1a04c:	6039      	str	r1, [r7, #0]
#if !(defined(CONFIG_EXTRA_EXCEPTION_INFO) && defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE))
	ARG_UNUSED(callee_regs);
#endif
	/* Stacked R0 holds the exception reason. */
	unsigned int reason = esf->basic.r0;
   1a04e:	687b      	ldr	r3, [r7, #4]
   1a050:	681b      	ldr	r3, [r3, #0]
   1a052:	60fb      	str	r3, [r7, #12]
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1a054:	6879      	ldr	r1, [r7, #4]
   1a056:	68f8      	ldr	r0, [r7, #12]
   1a058:	f7ff ffe1 	bl	1a01e <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   1a05c:	bf00      	nop
   1a05e:	3710      	adds	r7, #16
   1a060:	46bd      	mov	sp, r7
   1a062:	bd80      	pop	{r7, pc}

0001a064 <arch_irq_enable>:
{
   1a064:	b580      	push	{r7, lr}
   1a066:	b082      	sub	sp, #8
   1a068:	af00      	add	r7, sp, #0
   1a06a:	6078      	str	r0, [r7, #4]
	NVIC_EnableIRQ((IRQn_Type)irq);
   1a06c:	687b      	ldr	r3, [r7, #4]
   1a06e:	b25b      	sxtb	r3, r3
   1a070:	4618      	mov	r0, r3
   1a072:	f7f0 f981 	bl	a378 <__NVIC_EnableIRQ>
}
   1a076:	bf00      	nop
   1a078:	3708      	adds	r7, #8
   1a07a:	46bd      	mov	sp, r7
   1a07c:	bd80      	pop	{r7, pc}

0001a07e <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
   1a07e:	b580      	push	{r7, lr}
   1a080:	b082      	sub	sp, #8
   1a082:	af00      	add	r7, sp, #0
   1a084:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1a086:	2100      	movs	r1, #0
   1a088:	2001      	movs	r0, #1
   1a08a:	f7ff ffc8 	bl	1a01e <z_arm_fatal_error>
}
   1a08e:	bf00      	nop
   1a090:	3708      	adds	r7, #8
   1a092:	46bd      	mov	sp, r7
   1a094:	bd80      	pop	{r7, pc}

0001a096 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1a096:	b580      	push	{r7, lr}
   1a098:	af00      	add	r7, sp, #0
	handler();
   1a09a:	f7f0 f9fb 	bl	a494 <z_SysNmiOnReset>
	z_arm_int_exit();
   1a09e:	f7f0 fb6d 	bl	a77c <z_arm_exc_exit>
}
   1a0a2:	bf00      	nop
   1a0a4:	bd80      	pop	{r7, pc}

0001a0a6 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1a0a6:	b580      	push	{r7, lr}
   1a0a8:	af00      	add	r7, sp, #0
	relocate_vector_table();
   1a0aa:	f7f0 f9f7 	bl	a49c <relocate_vector_table>
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
   1a0ae:	f7f0 fa0f 	bl	a4d0 <z_arm_floating_point_init>
#endif
	z_bss_zero();
   1a0b2:	f7f8 fc95 	bl	129e0 <z_bss_zero>
	z_data_copy();
   1a0b6:	f7fc fda3 	bl	16c00 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1a0ba:	f000 f861 	bl	1a180 <z_arm_interrupt_init>
	z_cstart();
   1a0be:	f7f8 fddd 	bl	12c7c <z_cstart>

0001a0c2 <configure_builtin_stack_guard>:
{
   1a0c2:	b480      	push	{r7}
   1a0c4:	b085      	sub	sp, #20
   1a0c6:	af00      	add	r7, sp, #0
   1a0c8:	6078      	str	r0, [r7, #4]
	uint32_t guard_start = thread->stack_info.start;
   1a0ca:	687b      	ldr	r3, [r7, #4]
   1a0cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a0d0:	60fb      	str	r3, [r7, #12]
   1a0d2:	68fb      	ldr	r3, [r7, #12]
   1a0d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1a0d6:	68bb      	ldr	r3, [r7, #8]
   1a0d8:	f383 880b 	msr	PSPLIM, r3
}
   1a0dc:	bf00      	nop
}
   1a0de:	bf00      	nop
   1a0e0:	3714      	adds	r7, #20
   1a0e2:	46bd      	mov	sp, r7
   1a0e4:	bc80      	pop	{r7}
   1a0e6:	4770      	bx	lr

0001a0e8 <z_arm_prepare_switch_to_main>:
{
   1a0e8:	b480      	push	{r7}
   1a0ea:	af00      	add	r7, sp, #0
}
   1a0ec:	bf00      	nop
   1a0ee:	46bd      	mov	sp, r7
   1a0f0:	bc80      	pop	{r7}
   1a0f2:	4770      	bx	lr

0001a0f4 <arch_tls_stack_setup>:
 */
K_APP_DMEM(z_libc_partition) uintptr_t z_arm_tls_ptr;
#endif

size_t arch_tls_stack_setup(struct k_thread *new_thread, char *stack_ptr)
{
   1a0f4:	b580      	push	{r7, lr}
   1a0f6:	b082      	sub	sp, #8
   1a0f8:	af00      	add	r7, sp, #0
   1a0fa:	6078      	str	r0, [r7, #4]
   1a0fc:	6039      	str	r1, [r7, #0]

	/*
	 * Since we are populating things backwards,
	 * setup the TLS data/bss area first.
	 */
	stack_ptr -= z_tls_data_size();
   1a0fe:	f7f0 fae7 	bl	a6d0 <z_tls_data_size>
   1a102:	4603      	mov	r3, r0
   1a104:	425b      	negs	r3, r3
   1a106:	683a      	ldr	r2, [r7, #0]
   1a108:	4413      	add	r3, r2
   1a10a:	603b      	str	r3, [r7, #0]
	z_tls_copy(stack_ptr);
   1a10c:	6838      	ldr	r0, [r7, #0]
   1a10e:	f7f0 fb09 	bl	a724 <z_tls_copy>

	/* Skip two pointers due to toolchain */
	stack_ptr -= sizeof(uintptr_t) * 2;
   1a112:	683b      	ldr	r3, [r7, #0]
   1a114:	3b08      	subs	r3, #8
   1a116:	603b      	str	r3, [r7, #0]

	/*
	 * Set thread TLS pointer which is used in
	 * context switch to point to TLS area.
	 */
	new_thread->tls = POINTER_TO_UINT(stack_ptr);
   1a118:	683a      	ldr	r2, [r7, #0]
   1a11a:	687b      	ldr	r3, [r7, #4]
   1a11c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	return (z_tls_data_size() + (sizeof(uintptr_t) * 2));
   1a120:	f7f0 fad6 	bl	a6d0 <z_tls_data_size>
   1a124:	4603      	mov	r3, r0
   1a126:	3308      	adds	r3, #8
}
   1a128:	4618      	mov	r0, r3
   1a12a:	3708      	adds	r7, #8
   1a12c:	46bd      	mov	sp, r7
   1a12e:	bd80      	pop	{r7, pc}

0001a130 <fault_show>:
{
   1a130:	b480      	push	{r7}
   1a132:	b083      	sub	sp, #12
   1a134:	af00      	add	r7, sp, #0
   1a136:	6078      	str	r0, [r7, #4]
   1a138:	6039      	str	r1, [r7, #0]
}
   1a13a:	bf00      	nop
   1a13c:	370c      	adds	r7, #12
   1a13e:	46bd      	mov	sp, r7
   1a140:	bc80      	pop	{r7}
   1a142:	4770      	bx	lr

0001a144 <memory_fault_recoverable>:
{
   1a144:	b480      	push	{r7}
   1a146:	b083      	sub	sp, #12
   1a148:	af00      	add	r7, sp, #0
   1a14a:	6078      	str	r0, [r7, #4]
   1a14c:	460b      	mov	r3, r1
   1a14e:	70fb      	strb	r3, [r7, #3]
	return false;
   1a150:	2300      	movs	r3, #0
}
   1a152:	4618      	mov	r0, r3
   1a154:	370c      	adds	r7, #12
   1a156:	46bd      	mov	sp, r7
   1a158:	bc80      	pop	{r7}
   1a15a:	4770      	bx	lr

0001a15c <z_arm_save_fp_context>:
 * @file @brief Helper functions for saving and restoring the FP context.
 *
 */

void z_arm_save_fp_context(struct fpu_ctx_full *buffer)
{
   1a15c:	b480      	push	{r7}
   1a15e:	b083      	sub	sp, #12
   1a160:	af00      	add	r7, sp, #0
   1a162:	6078      	str	r0, [r7, #4]
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   1a164:	bf00      	nop
   1a166:	370c      	adds	r7, #12
   1a168:	46bd      	mov	sp, r7
   1a16a:	bc80      	pop	{r7}
   1a16c:	4770      	bx	lr

0001a16e <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
   1a16e:	b480      	push	{r7}
   1a170:	b083      	sub	sp, #12
   1a172:	af00      	add	r7, sp, #0
   1a174:	6078      	str	r0, [r7, #4]
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   1a176:	bf00      	nop
   1a178:	370c      	adds	r7, #12
   1a17a:	46bd      	mov	sp, r7
   1a17c:	bc80      	pop	{r7}
   1a17e:	4770      	bx	lr

0001a180 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
   1a180:	b580      	push	{r7, lr}
   1a182:	b082      	sub	sp, #8
   1a184:	af00      	add	r7, sp, #0
	int irq = 0;
   1a186:	2300      	movs	r3, #0
   1a188:	607b      	str	r3, [r7, #4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1a18a:	e008      	b.n	1a19e <z_arm_interrupt_init+0x1e>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   1a18c:	687b      	ldr	r3, [r7, #4]
   1a18e:	b25b      	sxtb	r3, r3
   1a190:	2101      	movs	r1, #1
   1a192:	4618      	mov	r0, r3
   1a194:	f7f1 f806 	bl	b1a4 <__NVIC_SetPriority>
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1a198:	687b      	ldr	r3, [r7, #4]
   1a19a:	3301      	adds	r3, #1
   1a19c:	607b      	str	r3, [r7, #4]
   1a19e:	687b      	ldr	r3, [r7, #4]
   1a1a0:	2b40      	cmp	r3, #64	; 0x40
   1a1a2:	ddf3      	ble.n	1a18c <z_arm_interrupt_init+0xc>
	}
}
   1a1a4:	bf00      	nop
   1a1a6:	bf00      	nop
   1a1a8:	3708      	adds	r7, #8
   1a1aa:	46bd      	mov	sp, r7
   1a1ac:	bd80      	pop	{r7, pc}

0001a1ae <ARM_MPU_ClrRegionEx>:
{
   1a1ae:	b480      	push	{r7}
   1a1b0:	b083      	sub	sp, #12
   1a1b2:	af00      	add	r7, sp, #0
   1a1b4:	6078      	str	r0, [r7, #4]
   1a1b6:	6039      	str	r1, [r7, #0]
  mpu->RNR = rnr;
   1a1b8:	687b      	ldr	r3, [r7, #4]
   1a1ba:	683a      	ldr	r2, [r7, #0]
   1a1bc:	609a      	str	r2, [r3, #8]
  mpu->RLAR = 0U;
   1a1be:	687b      	ldr	r3, [r7, #4]
   1a1c0:	2200      	movs	r2, #0
   1a1c2:	611a      	str	r2, [r3, #16]
}
   1a1c4:	bf00      	nop
   1a1c6:	370c      	adds	r7, #12
   1a1c8:	46bd      	mov	sp, r7
   1a1ca:	bc80      	pop	{r7}
   1a1cc:	4770      	bx	lr

0001a1ce <arm_cmse_mpu_region_get>:

#include <zephyr/kernel.h>
#include <aarch32/cortex_m/cmse.h>

int arm_cmse_mpu_region_get(uint32_t addr)
{
   1a1ce:	b480      	push	{r7}
   1a1d0:	b087      	sub	sp, #28
   1a1d2:	af00      	add	r7, sp, #0
   1a1d4:	6078      	str	r0, [r7, #4]
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);
   1a1d6:	687b      	ldr	r3, [r7, #4]
   1a1d8:	617b      	str	r3, [r7, #20]
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1a1da:	697b      	ldr	r3, [r7, #20]
   1a1dc:	e843 f300 	tt	r3, r3
   1a1e0:	60fb      	str	r3, [r7, #12]
   1a1e2:	68fb      	ldr	r3, [r7, #12]
   1a1e4:	613b      	str	r3, [r7, #16]

	if (addr_info.flags.mpu_region_valid) {
   1a1e6:	7cbb      	ldrb	r3, [r7, #18]
   1a1e8:	f003 0301 	and.w	r3, r3, #1
   1a1ec:	b2db      	uxtb	r3, r3
   1a1ee:	2b00      	cmp	r3, #0
   1a1f0:	d001      	beq.n	1a1f6 <arm_cmse_mpu_region_get+0x28>
		return addr_info.flags.mpu_region;
   1a1f2:	7c3b      	ldrb	r3, [r7, #16]
   1a1f4:	e001      	b.n	1a1fa <arm_cmse_mpu_region_get+0x2c>
	}

	return -EINVAL;
   1a1f6:	f06f 0315 	mvn.w	r3, #21
}
   1a1fa:	4618      	mov	r0, r3
   1a1fc:	371c      	adds	r7, #28
   1a1fe:	46bd      	mov	sp, r7
   1a200:	bc80      	pop	{r7}
   1a202:	4770      	bx	lr

0001a204 <mpu_set_region>:
{
   1a204:	b580      	push	{r7, lr}
   1a206:	b084      	sub	sp, #16
   1a208:	af00      	add	r7, sp, #0
   1a20a:	60f8      	str	r0, [r7, #12]
   1a20c:	60b9      	str	r1, [r7, #8]
   1a20e:	607a      	str	r2, [r7, #4]
	mpu_set_rnr(rnr);
   1a210:	68f8      	ldr	r0, [r7, #12]
   1a212:	f7f1 f90f 	bl	b434 <mpu_set_rnr>
	mpu_set_rbar(rbar);
   1a216:	68b8      	ldr	r0, [r7, #8]
   1a218:	f7f1 f91a 	bl	b450 <mpu_set_rbar>
	mpu_set_rlar(rlar);
   1a21c:	6878      	ldr	r0, [r7, #4]
   1a21e:	f7f1 f92f 	bl	b480 <mpu_set_rlar>
}
   1a222:	bf00      	nop
   1a224:	3710      	adds	r7, #16
   1a226:	46bd      	mov	sp, r7
   1a228:	bd80      	pop	{r7, pc}

0001a22a <mpu_partition_is_valid>:
{
   1a22a:	b480      	push	{r7}
   1a22c:	b085      	sub	sp, #20
   1a22e:	af00      	add	r7, sp, #0
   1a230:	6078      	str	r0, [r7, #4]
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   1a232:	687b      	ldr	r3, [r7, #4]
   1a234:	685b      	ldr	r3, [r3, #4]
		&&
   1a236:	2b1f      	cmp	r3, #31
   1a238:	d90f      	bls.n	1a25a <mpu_partition_is_valid+0x30>
		((part->size &
   1a23a:	687b      	ldr	r3, [r7, #4]
   1a23c:	685b      	ldr	r3, [r3, #4]
   1a23e:	f023 021f 	bic.w	r2, r3, #31
			== part->size)
   1a242:	687b      	ldr	r3, [r7, #4]
   1a244:	685b      	ldr	r3, [r3, #4]
		&&
   1a246:	429a      	cmp	r2, r3
   1a248:	d107      	bne.n	1a25a <mpu_partition_is_valid+0x30>
		((part->start &
   1a24a:	687b      	ldr	r3, [r7, #4]
   1a24c:	681b      	ldr	r3, [r3, #0]
   1a24e:	f003 031f 	and.w	r3, r3, #31
		&&
   1a252:	2b00      	cmp	r3, #0
   1a254:	d101      	bne.n	1a25a <mpu_partition_is_valid+0x30>
   1a256:	2301      	movs	r3, #1
   1a258:	e000      	b.n	1a25c <mpu_partition_is_valid+0x32>
   1a25a:	2300      	movs	r3, #0
	int partition_is_valid =
   1a25c:	60fb      	str	r3, [r7, #12]
	return partition_is_valid;
   1a25e:	68fb      	ldr	r3, [r7, #12]
}
   1a260:	4618      	mov	r0, r3
   1a262:	3714      	adds	r7, #20
   1a264:	46bd      	mov	sp, r7
   1a266:	bc80      	pop	{r7}
   1a268:	4770      	bx	lr

0001a26a <get_region_index>:
{
   1a26a:	b580      	push	{r7, lr}
   1a26c:	b084      	sub	sp, #16
   1a26e:	af00      	add	r7, sp, #0
   1a270:	6078      	str	r0, [r7, #4]
   1a272:	6039      	str	r1, [r7, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1a274:	6878      	ldr	r0, [r7, #4]
   1a276:	f7ff ffaa 	bl	1a1ce <arm_cmse_mpu_region_get>
   1a27a:	4603      	mov	r3, r0
   1a27c:	60fb      	str	r3, [r7, #12]
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1a27e:	687a      	ldr	r2, [r7, #4]
   1a280:	683b      	ldr	r3, [r7, #0]
   1a282:	4413      	add	r3, r2
   1a284:	3b01      	subs	r3, #1
   1a286:	4618      	mov	r0, r3
   1a288:	f7ff ffa1 	bl	1a1ce <arm_cmse_mpu_region_get>
   1a28c:	4603      	mov	r3, r0
   1a28e:	60bb      	str	r3, [r7, #8]
	if (region_start_addr == region_end_addr) {
   1a290:	68fa      	ldr	r2, [r7, #12]
   1a292:	68bb      	ldr	r3, [r7, #8]
   1a294:	429a      	cmp	r2, r3
   1a296:	d101      	bne.n	1a29c <get_region_index+0x32>
		return region_start_addr;
   1a298:	68fb      	ldr	r3, [r7, #12]
   1a29a:	e001      	b.n	1a2a0 <get_region_index+0x36>
	return -EINVAL;
   1a29c:	f06f 0315 	mvn.w	r3, #21
}
   1a2a0:	4618      	mov	r0, r3
   1a2a2:	3710      	adds	r7, #16
   1a2a4:	46bd      	mov	sp, r7
   1a2a6:	bd80      	pop	{r7, pc}

0001a2a8 <mpu_region_get_base>:
{
   1a2a8:	b580      	push	{r7, lr}
   1a2aa:	b082      	sub	sp, #8
   1a2ac:	af00      	add	r7, sp, #0
   1a2ae:	6078      	str	r0, [r7, #4]
	mpu_set_rnr(index);
   1a2b0:	6878      	ldr	r0, [r7, #4]
   1a2b2:	f7f1 f8bf 	bl	b434 <mpu_set_rnr>
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1a2b6:	f7f1 f8d9 	bl	b46c <mpu_get_rbar>
   1a2ba:	4603      	mov	r3, r0
   1a2bc:	f023 031f 	bic.w	r3, r3, #31
}
   1a2c0:	4618      	mov	r0, r3
   1a2c2:	3708      	adds	r7, #8
   1a2c4:	46bd      	mov	sp, r7
   1a2c6:	bd80      	pop	{r7, pc}

0001a2c8 <mpu_region_set_base>:
{
   1a2c8:	b580      	push	{r7, lr}
   1a2ca:	b082      	sub	sp, #8
   1a2cc:	af00      	add	r7, sp, #0
   1a2ce:	6078      	str	r0, [r7, #4]
   1a2d0:	6039      	str	r1, [r7, #0]
	mpu_set_rnr(index);
   1a2d2:	6878      	ldr	r0, [r7, #4]
   1a2d4:	f7f1 f8ae 	bl	b434 <mpu_set_rnr>
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   1a2d8:	f7f1 f8c8 	bl	b46c <mpu_get_rbar>
   1a2dc:	4603      	mov	r3, r0
   1a2de:	f003 021f 	and.w	r2, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   1a2e2:	683b      	ldr	r3, [r7, #0]
   1a2e4:	f023 031f 	bic.w	r3, r3, #31
   1a2e8:	4313      	orrs	r3, r2
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   1a2ea:	4618      	mov	r0, r3
   1a2ec:	f7f1 f8b0 	bl	b450 <mpu_set_rbar>
}
   1a2f0:	bf00      	nop
   1a2f2:	3708      	adds	r7, #8
   1a2f4:	46bd      	mov	sp, r7
   1a2f6:	bd80      	pop	{r7, pc}

0001a2f8 <mpu_region_get_last_addr>:
{
   1a2f8:	b580      	push	{r7, lr}
   1a2fa:	b082      	sub	sp, #8
   1a2fc:	af00      	add	r7, sp, #0
   1a2fe:	6078      	str	r0, [r7, #4]
	mpu_set_rnr(index);
   1a300:	6878      	ldr	r0, [r7, #4]
   1a302:	f7f1 f897 	bl	b434 <mpu_set_rnr>
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1a306:	f7f1 f8c9 	bl	b49c <mpu_get_rlar>
   1a30a:	4603      	mov	r3, r0
   1a30c:	f043 031f 	orr.w	r3, r3, #31
}
   1a310:	4618      	mov	r0, r3
   1a312:	3708      	adds	r7, #8
   1a314:	46bd      	mov	sp, r7
   1a316:	bd80      	pop	{r7, pc}

0001a318 <mpu_region_set_limit>:
{
   1a318:	b580      	push	{r7, lr}
   1a31a:	b082      	sub	sp, #8
   1a31c:	af00      	add	r7, sp, #0
   1a31e:	6078      	str	r0, [r7, #4]
   1a320:	6039      	str	r1, [r7, #0]
	mpu_set_rnr(index);
   1a322:	6878      	ldr	r0, [r7, #4]
   1a324:	f7f1 f886 	bl	b434 <mpu_set_rnr>
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   1a328:	f7f1 f8b8 	bl	b49c <mpu_get_rlar>
   1a32c:	4603      	mov	r3, r0
   1a32e:	f003 021f 	and.w	r2, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1a332:	683b      	ldr	r3, [r7, #0]
   1a334:	f023 031f 	bic.w	r3, r3, #31
   1a338:	4313      	orrs	r3, r2
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   1a33a:	4618      	mov	r0, r3
   1a33c:	f7f1 f8a0 	bl	b480 <mpu_set_rlar>
}
   1a340:	bf00      	nop
   1a342:	3708      	adds	r7, #8
   1a344:	46bd      	mov	sp, r7
   1a346:	bd80      	pop	{r7, pc}

0001a348 <mpu_region_get_access_attr>:
{
   1a348:	b580      	push	{r7, lr}
   1a34a:	b082      	sub	sp, #8
   1a34c:	af00      	add	r7, sp, #0
   1a34e:	6078      	str	r0, [r7, #4]
   1a350:	6039      	str	r1, [r7, #0]
	mpu_set_rnr(index);
   1a352:	6878      	ldr	r0, [r7, #4]
   1a354:	f7f1 f86e 	bl	b434 <mpu_set_rnr>
	attr->rbar = mpu_get_rbar() &
   1a358:	f7f1 f888 	bl	b46c <mpu_get_rbar>
   1a35c:	4603      	mov	r3, r0
   1a35e:	f003 031f 	and.w	r3, r3, #31
   1a362:	b2d9      	uxtb	r1, r3
   1a364:	683a      	ldr	r2, [r7, #0]
   1a366:	7813      	ldrb	r3, [r2, #0]
   1a368:	f361 0304 	bfi	r3, r1, #0, #5
   1a36c:	7013      	strb	r3, [r2, #0]
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1a36e:	f7f1 f895 	bl	b49c <mpu_get_rlar>
   1a372:	4603      	mov	r3, r0
   1a374:	085b      	lsrs	r3, r3, #1
   1a376:	f003 0307 	and.w	r3, r3, #7
   1a37a:	b2d9      	uxtb	r1, r3
   1a37c:	683a      	ldr	r2, [r7, #0]
   1a37e:	7813      	ldrb	r3, [r2, #0]
   1a380:	f361 1347 	bfi	r3, r1, #5, #3
   1a384:	7013      	strb	r3, [r2, #0]
}
   1a386:	bf00      	nop
   1a388:	3708      	adds	r7, #8
   1a38a:	46bd      	mov	sp, r7
   1a38c:	bd80      	pop	{r7, pc}

0001a38e <mpu_region_get_conf>:
{
   1a38e:	b580      	push	{r7, lr}
   1a390:	b082      	sub	sp, #8
   1a392:	af00      	add	r7, sp, #0
   1a394:	6078      	str	r0, [r7, #4]
   1a396:	6039      	str	r1, [r7, #0]
	mpu_set_rnr(index);
   1a398:	6878      	ldr	r0, [r7, #4]
   1a39a:	f7f1 f84b 	bl	b434 <mpu_set_rnr>
	mpu_region_get_access_attr(index, &region_conf->attr);
   1a39e:	683b      	ldr	r3, [r7, #0]
   1a3a0:	3308      	adds	r3, #8
   1a3a2:	4619      	mov	r1, r3
   1a3a4:	6878      	ldr	r0, [r7, #4]
   1a3a6:	f7ff ffcf 	bl	1a348 <mpu_region_get_access_attr>
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1a3aa:	f7f1 f85f 	bl	b46c <mpu_get_rbar>
   1a3ae:	4603      	mov	r3, r0
   1a3b0:	f023 021f 	bic.w	r2, r3, #31
   1a3b4:	683b      	ldr	r3, [r7, #0]
   1a3b6:	601a      	str	r2, [r3, #0]
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   1a3b8:	f7f1 f870 	bl	b49c <mpu_get_rlar>
   1a3bc:	4603      	mov	r3, r0
   1a3be:	f023 021f 	bic.w	r2, r3, #31
   1a3c2:	683b      	ldr	r3, [r7, #0]
   1a3c4:	60da      	str	r2, [r3, #12]
}
   1a3c6:	bf00      	nop
   1a3c8:	3708      	adds	r7, #8
   1a3ca:	46bd      	mov	sp, r7
   1a3cc:	bd80      	pop	{r7, pc}

0001a3ce <get_region_attr_from_mpu_partition_info>:
{
   1a3ce:	b480      	push	{r7}
   1a3d0:	b085      	sub	sp, #20
   1a3d2:	af00      	add	r7, sp, #0
   1a3d4:	60f8      	str	r0, [r7, #12]
   1a3d6:	60b9      	str	r1, [r7, #8]
   1a3d8:	607a      	str	r2, [r7, #4]
   1a3da:	603b      	str	r3, [r7, #0]
	p_attr->rbar = attr->rbar &
   1a3dc:	68bb      	ldr	r3, [r7, #8]
   1a3de:	881b      	ldrh	r3, [r3, #0]
   1a3e0:	f003 031f 	and.w	r3, r3, #31
   1a3e4:	b2d9      	uxtb	r1, r3
   1a3e6:	68fa      	ldr	r2, [r7, #12]
   1a3e8:	7813      	ldrb	r3, [r2, #0]
   1a3ea:	f361 0304 	bfi	r3, r1, #0, #5
   1a3ee:	7013      	strb	r3, [r2, #0]
	p_attr->mair_idx = attr->mair_idx;
   1a3f0:	68bb      	ldr	r3, [r7, #8]
   1a3f2:	885b      	ldrh	r3, [r3, #2]
   1a3f4:	f003 0307 	and.w	r3, r3, #7
   1a3f8:	b2d9      	uxtb	r1, r3
   1a3fa:	68fa      	ldr	r2, [r7, #12]
   1a3fc:	7813      	ldrb	r3, [r2, #0]
   1a3fe:	f361 1347 	bfi	r3, r1, #5, #3
   1a402:	7013      	strb	r3, [r2, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1a404:	687b      	ldr	r3, [r7, #4]
   1a406:	f023 021f 	bic.w	r2, r3, #31
   1a40a:	683b      	ldr	r3, [r7, #0]
   1a40c:	4413      	add	r3, r2
   1a40e:	3b01      	subs	r3, #1
   1a410:	f023 021f 	bic.w	r2, r3, #31
   1a414:	68fb      	ldr	r3, [r7, #12]
   1a416:	605a      	str	r2, [r3, #4]
}
   1a418:	bf00      	nop
   1a41a:	3714      	adds	r7, #20
   1a41c:	46bd      	mov	sp, r7
   1a41e:	bc80      	pop	{r7}
   1a420:	4770      	bx	lr

0001a422 <get_num_regions>:

/**
 *  Get the number of supported MPU regions.
 */
static inline uint8_t get_num_regions(void)
{
   1a422:	b480      	push	{r7}
   1a424:	af00      	add	r7, sp, #0
#if defined(NUM_MPU_REGIONS)
	/* Retrieve the number of regions from DTS configuration. */
	return NUM_MPU_REGIONS;
   1a426:	2310      	movs	r3, #16
#else
	return mpu_get_num_regions();
#endif /* NUM_MPU_REGIONS */
}
   1a428:	4618      	mov	r0, r3
   1a42a:	46bd      	mov	sp, r7
   1a42c:	bc80      	pop	{r7}
   1a42e:	4770      	bx	lr

0001a430 <zephyr_fputc>:

extern int z_impl_zephyr_fputc(int c, FILE * stream);

__pinned_func
static inline int zephyr_fputc(int c, FILE * stream)
{
   1a430:	b580      	push	{r7, lr}
   1a432:	b082      	sub	sp, #8
   1a434:	af00      	add	r7, sp, #0
   1a436:	6078      	str	r0, [r7, #4]
   1a438:	6039      	str	r1, [r7, #0]
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   1a43a:	6839      	ldr	r1, [r7, #0]
   1a43c:	6878      	ldr	r0, [r7, #4]
   1a43e:	f7f1 fc19 	bl	bc74 <z_impl_zephyr_fputc>
   1a442:	4603      	mov	r3, r0
}
   1a444:	4618      	mov	r0, r3
   1a446:	3708      	adds	r7, #8
   1a448:	46bd      	mov	sp, r7
   1a44a:	bd80      	pop	{r7, pc}

0001a44c <picolibc_put>:
{
   1a44c:	b580      	push	{r7, lr}
   1a44e:	b082      	sub	sp, #8
   1a450:	af00      	add	r7, sp, #0
   1a452:	4603      	mov	r3, r0
   1a454:	6039      	str	r1, [r7, #0]
   1a456:	71fb      	strb	r3, [r7, #7]
	zephyr_fputc(a, f);
   1a458:	79fb      	ldrb	r3, [r7, #7]
   1a45a:	6839      	ldr	r1, [r7, #0]
   1a45c:	4618      	mov	r0, r3
   1a45e:	f7ff ffe7 	bl	1a430 <zephyr_fputc>
	return 0;
   1a462:	2300      	movs	r3, #0
}
   1a464:	4618      	mov	r0, r3
   1a466:	3708      	adds	r7, #8
   1a468:	46bd      	mov	sp, r7
   1a46a:	bd80      	pop	{r7, pc}

0001a46c <atomic_set>:
 * @param value Value to write to @a target.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{
   1a46c:	b480      	push	{r7}
   1a46e:	b083      	sub	sp, #12
   1a470:	af00      	add	r7, sp, #0
   1a472:	6078      	str	r0, [r7, #4]
   1a474:	6039      	str	r1, [r7, #0]
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a476:	683a      	ldr	r2, [r7, #0]
   1a478:	687b      	ldr	r3, [r7, #4]
   1a47a:	e8d3 1fef 	ldaex	r1, [r3]
   1a47e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1a482:	2800      	cmp	r0, #0
   1a484:	d1f9      	bne.n	1a47a <atomic_set+0xe>
   1a486:	460b      	mov	r3, r1
}
   1a488:	4618      	mov	r0, r3
   1a48a:	370c      	adds	r7, #12
   1a48c:	46bd      	mov	sp, r7
   1a48e:	bc80      	pop	{r7}
   1a490:	4770      	bx	lr

0001a492 <nrf_event_readback>:
NRF_STATIC_INLINE void nrf_barrier_rw(void);

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
   1a492:	b480      	push	{r7}
   1a494:	b083      	sub	sp, #12
   1a496:	af00      	add	r7, sp, #0
   1a498:	6078      	str	r0, [r7, #4]
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1a49a:	687b      	ldr	r3, [r7, #4]
   1a49c:	681b      	ldr	r3, [r3, #0]
#else
    (void)p_event_reg;
#endif
}
   1a49e:	bf00      	nop
   1a4a0:	370c      	adds	r7, #12
   1a4a2:	46bd      	mov	sp, r7
   1a4a4:	bc80      	pop	{r7}
   1a4a6:	4770      	bx	lr

0001a4a8 <k_msleep>:
{
   1a4a8:	b5b0      	push	{r4, r5, r7, lr}
   1a4aa:	b082      	sub	sp, #8
   1a4ac:	af00      	add	r7, sp, #0
   1a4ae:	6078      	str	r0, [r7, #4]
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a4b0:	687b      	ldr	r3, [r7, #4]
   1a4b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1a4b6:	17da      	asrs	r2, r3, #31
   1a4b8:	461c      	mov	r4, r3
   1a4ba:	4615      	mov	r5, r2
   1a4bc:	4620      	mov	r0, r4
   1a4be:	4629      	mov	r1, r5
   1a4c0:	f7f1 fc22 	bl	bd08 <k_ms_to_ticks_ceil64>
   1a4c4:	4602      	mov	r2, r0
   1a4c6:	460b      	mov	r3, r1
   1a4c8:	4610      	mov	r0, r2
   1a4ca:	4619      	mov	r1, r3
   1a4cc:	f000 f811 	bl	1a4f2 <k_sleep>
   1a4d0:	4601      	mov	r1, r0
   1a4d2:	460b      	mov	r3, r1
}
   1a4d4:	4618      	mov	r0, r3
   1a4d6:	3708      	adds	r7, #8
   1a4d8:	46bd      	mov	sp, r7
   1a4da:	bdb0      	pop	{r4, r5, r7, pc}

0001a4dc <k_cpu_atomic_idle>:
 * be restored as if by irq_unlock(key).
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
   1a4dc:	b580      	push	{r7, lr}
   1a4de:	b082      	sub	sp, #8
   1a4e0:	af00      	add	r7, sp, #0
   1a4e2:	6078      	str	r0, [r7, #4]
	arch_cpu_atomic_idle(key);
   1a4e4:	6878      	ldr	r0, [r7, #4]
   1a4e6:	f7ef fec5 	bl	a274 <arch_cpu_atomic_idle>
}
   1a4ea:	bf00      	nop
   1a4ec:	3708      	adds	r7, #8
   1a4ee:	46bd      	mov	sp, r7
   1a4f0:	bd80      	pop	{r7, pc}

0001a4f2 <k_sleep>:
{
   1a4f2:	b580      	push	{r7, lr}
   1a4f4:	b082      	sub	sp, #8
   1a4f6:	af00      	add	r7, sp, #0
   1a4f8:	e9c7 0100 	strd	r0, r1, [r7]
	return z_impl_k_sleep(timeout);
   1a4fc:	e9d7 0100 	ldrd	r0, r1, [r7]
   1a500:	f7fc f9a8 	bl	16854 <z_impl_k_sleep>
   1a504:	4603      	mov	r3, r0
}
   1a506:	4618      	mov	r0, r3
   1a508:	3708      	adds	r7, #8
   1a50a:	46bd      	mov	sp, r7
   1a50c:	bd80      	pop	{r7, pc}

0001a50e <k_sem_take>:
{
   1a50e:	b580      	push	{r7, lr}
   1a510:	b084      	sub	sp, #16
   1a512:	af00      	add	r7, sp, #0
   1a514:	60f8      	str	r0, [r7, #12]
   1a516:	e9c7 2300 	strd	r2, r3, [r7]
	return z_impl_k_sem_take(sem, timeout);
   1a51a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1a51e:	68f8      	ldr	r0, [r7, #12]
   1a520:	f7f9 feb4 	bl	1428c <z_impl_k_sem_take>
   1a524:	4603      	mov	r3, r0
}
   1a526:	4618      	mov	r0, r3
   1a528:	3710      	adds	r7, #16
   1a52a:	46bd      	mov	sp, r7
   1a52c:	bd80      	pop	{r7, pc}

0001a52e <k_sem_give>:
{
   1a52e:	b580      	push	{r7, lr}
   1a530:	b082      	sub	sp, #8
   1a532:	af00      	add	r7, sp, #0
   1a534:	6078      	str	r0, [r7, #4]
	z_impl_k_sem_give(sem);
   1a536:	6878      	ldr	r0, [r7, #4]
   1a538:	f7f9 fe08 	bl	1414c <z_impl_k_sem_give>
}
   1a53c:	bf00      	nop
   1a53e:	3708      	adds	r7, #8
   1a540:	46bd      	mov	sp, r7
   1a542:	bd80      	pop	{r7, pc}

0001a544 <nrf_clock_int_enable>:
{
   1a544:	b480      	push	{r7}
   1a546:	b083      	sub	sp, #12
   1a548:	af00      	add	r7, sp, #0
   1a54a:	6078      	str	r0, [r7, #4]
   1a54c:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   1a54e:	687b      	ldr	r3, [r7, #4]
   1a550:	683a      	ldr	r2, [r7, #0]
   1a552:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1a556:	bf00      	nop
   1a558:	370c      	adds	r7, #12
   1a55a:	46bd      	mov	sp, r7
   1a55c:	bc80      	pop	{r7}
   1a55e:	4770      	bx	lr

0001a560 <nrf_clock_int_disable>:
{
   1a560:	b480      	push	{r7}
   1a562:	b083      	sub	sp, #12
   1a564:	af00      	add	r7, sp, #0
   1a566:	6078      	str	r0, [r7, #4]
   1a568:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   1a56a:	687b      	ldr	r3, [r7, #4]
   1a56c:	683a      	ldr	r2, [r7, #0]
   1a56e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1a572:	bf00      	nop
   1a574:	370c      	adds	r7, #12
   1a576:	46bd      	mov	sp, r7
   1a578:	bc80      	pop	{r7}
   1a57a:	4770      	bx	lr

0001a57c <nrf_clock_task_trigger>:
{
   1a57c:	b480      	push	{r7}
   1a57e:	b083      	sub	sp, #12
   1a580:	af00      	add	r7, sp, #0
   1a582:	6078      	str	r0, [r7, #4]
   1a584:	460b      	mov	r3, r1
   1a586:	70fb      	strb	r3, [r7, #3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a588:	78fb      	ldrb	r3, [r7, #3]
   1a58a:	687a      	ldr	r2, [r7, #4]
   1a58c:	4413      	add	r3, r2
   1a58e:	2201      	movs	r2, #1
   1a590:	601a      	str	r2, [r3, #0]
}
   1a592:	bf00      	nop
   1a594:	370c      	adds	r7, #12
   1a596:	46bd      	mov	sp, r7
   1a598:	bc80      	pop	{r7}
   1a59a:	4770      	bx	lr

0001a59c <nrf_clock_event_clear>:
{
   1a59c:	b580      	push	{r7, lr}
   1a59e:	b082      	sub	sp, #8
   1a5a0:	af00      	add	r7, sp, #0
   1a5a2:	6078      	str	r0, [r7, #4]
   1a5a4:	460b      	mov	r3, r1
   1a5a6:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a5a8:	887b      	ldrh	r3, [r7, #2]
   1a5aa:	687a      	ldr	r2, [r7, #4]
   1a5ac:	4413      	add	r3, r2
   1a5ae:	2200      	movs	r2, #0
   1a5b0:	601a      	str	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
   1a5b2:	887b      	ldrh	r3, [r7, #2]
   1a5b4:	687a      	ldr	r2, [r7, #4]
   1a5b6:	4413      	add	r3, r2
   1a5b8:	4618      	mov	r0, r3
   1a5ba:	f7ff ff6a 	bl	1a492 <nrf_event_readback>
}
   1a5be:	bf00      	nop
   1a5c0:	3708      	adds	r7, #8
   1a5c2:	46bd      	mov	sp, r7
   1a5c4:	bd80      	pop	{r7, pc}

0001a5c6 <nrf_clock_event_check>:
{
   1a5c6:	b480      	push	{r7}
   1a5c8:	b083      	sub	sp, #12
   1a5ca:	af00      	add	r7, sp, #0
   1a5cc:	6078      	str	r0, [r7, #4]
   1a5ce:	460b      	mov	r3, r1
   1a5d0:	807b      	strh	r3, [r7, #2]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1a5d2:	887b      	ldrh	r3, [r7, #2]
   1a5d4:	687a      	ldr	r2, [r7, #4]
   1a5d6:	4413      	add	r3, r2
   1a5d8:	681b      	ldr	r3, [r3, #0]
   1a5da:	2b00      	cmp	r3, #0
   1a5dc:	bf14      	ite	ne
   1a5de:	2301      	movne	r3, #1
   1a5e0:	2300      	moveq	r3, #0
   1a5e2:	b2db      	uxtb	r3, r3
}
   1a5e4:	4618      	mov	r0, r3
   1a5e6:	370c      	adds	r7, #12
   1a5e8:	46bd      	mov	sp, r7
   1a5ea:	bc80      	pop	{r7}
   1a5ec:	4770      	bx	lr

0001a5ee <nrf_clock_lf_src_set>:
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
   1a5ee:	b480      	push	{r7}
   1a5f0:	b083      	sub	sp, #12
   1a5f2:	af00      	add	r7, sp, #0
   1a5f4:	6078      	str	r0, [r7, #4]
   1a5f6:	460b      	mov	r3, r1
   1a5f8:	70fb      	strb	r3, [r7, #3]
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   1a5fa:	78fa      	ldrb	r2, [r7, #3]
   1a5fc:	687b      	ldr	r3, [r7, #4]
   1a5fe:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1a602:	bf00      	nop
   1a604:	370c      	adds	r7, #12
   1a606:	46bd      	mov	sp, r7
   1a608:	bc80      	pop	{r7}
   1a60a:	4770      	bx	lr

0001a60c <nrf_clock_lf_src_get>:

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_src_get(NRF_CLOCK_Type const * p_reg)
{
   1a60c:	b480      	push	{r7}
   1a60e:	b083      	sub	sp, #12
   1a610:	af00      	add	r7, sp, #0
   1a612:	6078      	str	r0, [r7, #4]
    return (nrf_clock_lfclk_t)(p_reg->NRF_LFCLKSRC);
   1a614:	687b      	ldr	r3, [r7, #4]
   1a616:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1a61a:	b2db      	uxtb	r3, r3
}
   1a61c:	4618      	mov	r0, r3
   1a61e:	370c      	adds	r7, #12
   1a620:	46bd      	mov	sp, r7
   1a622:	bc80      	pop	{r7}
   1a624:	4770      	bx	lr

0001a626 <nrf_clock_lf_srccopy_get>:
    (void)nrf_clock_is_running(p_reg, NRF_CLOCK_DOMAIN_LFCLK, &clk_src);
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
   1a626:	b480      	push	{r7}
   1a628:	b083      	sub	sp, #12
   1a62a:	af00      	add	r7, sp, #0
   1a62c:	6078      	str	r0, [r7, #4]
    return (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSRCCOPY & NRF_CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1a62e:	687b      	ldr	r3, [r7, #4]
   1a630:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1a634:	b2db      	uxtb	r3, r3
   1a636:	f003 0303 	and.w	r3, r3, #3
   1a63a:	b2db      	uxtb	r3, r3
                                >> NRF_CLOCK_LFCLKSRCCOPY_SRC_Pos);
}
   1a63c:	4618      	mov	r0, r3
   1a63e:	370c      	adds	r7, #12
   1a640:	46bd      	mov	sp, r7
   1a642:	bc80      	pop	{r7}
   1a644:	4770      	bx	lr

0001a646 <nrfx_clock_lfclk_start>:
{
   1a646:	b580      	push	{r7, lr}
   1a648:	af00      	add	r7, sp, #0
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1a64a:	2000      	movs	r0, #0
   1a64c:	f7f6 f80c 	bl	10668 <nrfx_clock_start>
}
   1a650:	bf00      	nop
   1a652:	bd80      	pop	{r7, pc}

0001a654 <nrfx_clock_lfclk_stop>:
{
   1a654:	b580      	push	{r7, lr}
   1a656:	af00      	add	r7, sp, #0
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1a658:	2000      	movs	r0, #0
   1a65a:	f7f6 f88d 	bl	10778 <nrfx_clock_stop>
}
   1a65e:	bf00      	nop
   1a660:	bd80      	pop	{r7, pc}

0001a662 <nrfx_clock_hfclk_start>:
{
   1a662:	b580      	push	{r7, lr}
   1a664:	af00      	add	r7, sp, #0
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1a666:	2001      	movs	r0, #1
   1a668:	f7f5 fffe 	bl	10668 <nrfx_clock_start>
}
   1a66c:	bf00      	nop
   1a66e:	bd80      	pop	{r7, pc}

0001a670 <nrfx_clock_hfclk_stop>:
{
   1a670:	b580      	push	{r7, lr}
   1a672:	af00      	add	r7, sp, #0
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1a674:	2001      	movs	r0, #1
   1a676:	f7f6 f87f 	bl	10778 <nrfx_clock_stop>
}
   1a67a:	bf00      	nop
   1a67c:	bd80      	pop	{r7, pc}

0001a67e <get_sub_data>:
{
   1a67e:	b480      	push	{r7}
   1a680:	b085      	sub	sp, #20
   1a682:	af00      	add	r7, sp, #0
   1a684:	6078      	str	r0, [r7, #4]
   1a686:	460b      	mov	r3, r1
   1a688:	70fb      	strb	r3, [r7, #3]
	struct nrf_clock_control_data *data = dev->data;
   1a68a:	687b      	ldr	r3, [r7, #4]
   1a68c:	691b      	ldr	r3, [r3, #16]
   1a68e:	60fb      	str	r3, [r7, #12]
	return &data->subsys[type];
   1a690:	78fa      	ldrb	r2, [r7, #3]
   1a692:	4613      	mov	r3, r2
   1a694:	005b      	lsls	r3, r3, #1
   1a696:	4413      	add	r3, r2
   1a698:	009b      	lsls	r3, r3, #2
   1a69a:	3340      	adds	r3, #64	; 0x40
   1a69c:	68fa      	ldr	r2, [r7, #12]
   1a69e:	4413      	add	r3, r2
}
   1a6a0:	4618      	mov	r0, r3
   1a6a2:	3714      	adds	r7, #20
   1a6a4:	46bd      	mov	sp, r7
   1a6a6:	bc80      	pop	{r7}
   1a6a8:	4770      	bx	lr

0001a6aa <get_sub_config>:
{
   1a6aa:	b480      	push	{r7}
   1a6ac:	b085      	sub	sp, #20
   1a6ae:	af00      	add	r7, sp, #0
   1a6b0:	6078      	str	r0, [r7, #4]
   1a6b2:	460b      	mov	r3, r1
   1a6b4:	70fb      	strb	r3, [r7, #3]
	const struct nrf_clock_control_config *config =
   1a6b6:	687b      	ldr	r3, [r7, #4]
   1a6b8:	685b      	ldr	r3, [r3, #4]
   1a6ba:	60fb      	str	r3, [r7, #12]
	return &config->subsys[type];
   1a6bc:	78fa      	ldrb	r2, [r7, #3]
   1a6be:	4613      	mov	r3, r2
   1a6c0:	005b      	lsls	r3, r3, #1
   1a6c2:	4413      	add	r3, r2
   1a6c4:	009b      	lsls	r3, r3, #2
   1a6c6:	68fa      	ldr	r2, [r7, #12]
   1a6c8:	4413      	add	r3, r2
}
   1a6ca:	4618      	mov	r0, r3
   1a6cc:	3714      	adds	r7, #20
   1a6ce:	46bd      	mov	sp, r7
   1a6d0:	bc80      	pop	{r7}
   1a6d2:	4770      	bx	lr

0001a6d4 <get_onoff_manager>:
{
   1a6d4:	b480      	push	{r7}
   1a6d6:	b085      	sub	sp, #20
   1a6d8:	af00      	add	r7, sp, #0
   1a6da:	6078      	str	r0, [r7, #4]
   1a6dc:	460b      	mov	r3, r1
   1a6de:	70fb      	strb	r3, [r7, #3]
	struct nrf_clock_control_data *data = dev->data;
   1a6e0:	687b      	ldr	r3, [r7, #4]
   1a6e2:	691b      	ldr	r3, [r3, #16]
   1a6e4:	60fb      	str	r3, [r7, #12]
	return &data->mgr[type];
   1a6e6:	78fb      	ldrb	r3, [r7, #3]
   1a6e8:	015b      	lsls	r3, r3, #5
   1a6ea:	68fa      	ldr	r2, [r7, #12]
   1a6ec:	4413      	add	r3, r2
}
   1a6ee:	4618      	mov	r0, r3
   1a6f0:	3714      	adds	r7, #20
   1a6f2:	46bd      	mov	sp, r7
   1a6f4:	bc80      	pop	{r7}
   1a6f6:	4770      	bx	lr

0001a6f8 <set_off_state>:
{
   1a6f8:	b480      	push	{r7}
   1a6fa:	b089      	sub	sp, #36	; 0x24
   1a6fc:	af00      	add	r7, sp, #0
   1a6fe:	6078      	str	r0, [r7, #4]
   1a700:	6039      	str	r1, [r7, #0]
	int err = 0;
   1a702:	2300      	movs	r3, #0
   1a704:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1a706:	f04f 0320 	mov.w	r3, #32
   1a70a:	f3ef 8211 	mrs	r2, BASEPRI
   1a70e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a712:	f3bf 8f6f 	isb	sy
   1a716:	613a      	str	r2, [r7, #16]
   1a718:	60fb      	str	r3, [r7, #12]
	return key;
   1a71a:	693b      	ldr	r3, [r7, #16]
	unsigned int key = irq_lock();
   1a71c:	61bb      	str	r3, [r7, #24]
	uint32_t current_ctx = GET_CTX(*flags);
   1a71e:	687b      	ldr	r3, [r7, #4]
   1a720:	681b      	ldr	r3, [r3, #0]
   1a722:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a726:	617b      	str	r3, [r7, #20]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1a728:	697b      	ldr	r3, [r7, #20]
   1a72a:	2b00      	cmp	r3, #0
   1a72c:	d007      	beq.n	1a73e <set_off_state+0x46>
   1a72e:	697a      	ldr	r2, [r7, #20]
   1a730:	683b      	ldr	r3, [r7, #0]
   1a732:	429a      	cmp	r2, r3
   1a734:	d003      	beq.n	1a73e <set_off_state+0x46>
		err = -EPERM;
   1a736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a73a:	61fb      	str	r3, [r7, #28]
   1a73c:	e002      	b.n	1a744 <set_off_state+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1a73e:	687b      	ldr	r3, [r7, #4]
   1a740:	2201      	movs	r2, #1
   1a742:	601a      	str	r2, [r3, #0]
   1a744:	69bb      	ldr	r3, [r7, #24]
   1a746:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   1a748:	68bb      	ldr	r3, [r7, #8]
   1a74a:	f383 8811 	msr	BASEPRI, r3
   1a74e:	f3bf 8f6f 	isb	sy
}
   1a752:	bf00      	nop
	return err;
   1a754:	69fb      	ldr	r3, [r7, #28]
}
   1a756:	4618      	mov	r0, r3
   1a758:	3724      	adds	r7, #36	; 0x24
   1a75a:	46bd      	mov	sp, r7
   1a75c:	bc80      	pop	{r7}
   1a75e:	4770      	bx	lr

0001a760 <set_starting_state>:
{
   1a760:	b480      	push	{r7}
   1a762:	b089      	sub	sp, #36	; 0x24
   1a764:	af00      	add	r7, sp, #0
   1a766:	6078      	str	r0, [r7, #4]
   1a768:	6039      	str	r1, [r7, #0]
	int err = 0;
   1a76a:	2300      	movs	r3, #0
   1a76c:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1a76e:	f04f 0320 	mov.w	r3, #32
   1a772:	f3ef 8211 	mrs	r2, BASEPRI
   1a776:	f383 8812 	msr	BASEPRI_MAX, r3
   1a77a:	f3bf 8f6f 	isb	sy
   1a77e:	613a      	str	r2, [r7, #16]
   1a780:	60fb      	str	r3, [r7, #12]
	return key;
   1a782:	693b      	ldr	r3, [r7, #16]
	unsigned int key = irq_lock();
   1a784:	61bb      	str	r3, [r7, #24]
	uint32_t current_ctx = GET_CTX(*flags);
   1a786:	687b      	ldr	r3, [r7, #4]
   1a788:	681b      	ldr	r3, [r3, #0]
   1a78a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a78e:	617b      	str	r3, [r7, #20]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1a790:	687b      	ldr	r3, [r7, #4]
   1a792:	681b      	ldr	r3, [r3, #0]
   1a794:	f003 0307 	and.w	r3, r3, #7
   1a798:	2b01      	cmp	r3, #1
   1a79a:	d103      	bne.n	1a7a4 <set_starting_state+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1a79c:	687b      	ldr	r3, [r7, #4]
   1a79e:	683a      	ldr	r2, [r7, #0]
   1a7a0:	601a      	str	r2, [r3, #0]
   1a7a2:	e00a      	b.n	1a7ba <set_starting_state+0x5a>
	} else if (current_ctx != ctx) {
   1a7a4:	697a      	ldr	r2, [r7, #20]
   1a7a6:	683b      	ldr	r3, [r7, #0]
   1a7a8:	429a      	cmp	r2, r3
   1a7aa:	d003      	beq.n	1a7b4 <set_starting_state+0x54>
		err = -EPERM;
   1a7ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a7b0:	61fb      	str	r3, [r7, #28]
   1a7b2:	e002      	b.n	1a7ba <set_starting_state+0x5a>
		err = -EALREADY;
   1a7b4:	f06f 0377 	mvn.w	r3, #119	; 0x77
   1a7b8:	61fb      	str	r3, [r7, #28]
   1a7ba:	69bb      	ldr	r3, [r7, #24]
   1a7bc:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   1a7be:	68bb      	ldr	r3, [r7, #8]
   1a7c0:	f383 8811 	msr	BASEPRI, r3
   1a7c4:	f3bf 8f6f 	isb	sy
}
   1a7c8:	bf00      	nop
	return err;
   1a7ca:	69fb      	ldr	r3, [r7, #28]
}
   1a7cc:	4618      	mov	r0, r3
   1a7ce:	3724      	adds	r7, #36	; 0x24
   1a7d0:	46bd      	mov	sp, r7
   1a7d2:	bc80      	pop	{r7}
   1a7d4:	4770      	bx	lr

0001a7d6 <set_on_state>:
{
   1a7d6:	b480      	push	{r7}
   1a7d8:	b087      	sub	sp, #28
   1a7da:	af00      	add	r7, sp, #0
   1a7dc:	6078      	str	r0, [r7, #4]
	__asm__ volatile(
   1a7de:	f04f 0320 	mov.w	r3, #32
   1a7e2:	f3ef 8211 	mrs	r2, BASEPRI
   1a7e6:	f383 8812 	msr	BASEPRI_MAX, r3
   1a7ea:	f3bf 8f6f 	isb	sy
   1a7ee:	60fa      	str	r2, [r7, #12]
   1a7f0:	60bb      	str	r3, [r7, #8]
	return key;
   1a7f2:	68fb      	ldr	r3, [r7, #12]
	unsigned int key = irq_lock();
   1a7f4:	617b      	str	r3, [r7, #20]
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1a7f6:	687b      	ldr	r3, [r7, #4]
   1a7f8:	681b      	ldr	r3, [r3, #0]
   1a7fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a7fe:	f043 0202 	orr.w	r2, r3, #2
   1a802:	687b      	ldr	r3, [r7, #4]
   1a804:	601a      	str	r2, [r3, #0]
   1a806:	697b      	ldr	r3, [r7, #20]
   1a808:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   1a80a:	693b      	ldr	r3, [r7, #16]
   1a80c:	f383 8811 	msr	BASEPRI, r3
   1a810:	f3bf 8f6f 	isb	sy
}
   1a814:	bf00      	nop
}
   1a816:	bf00      	nop
   1a818:	371c      	adds	r7, #28
   1a81a:	46bd      	mov	sp, r7
   1a81c:	bc80      	pop	{r7}
   1a81e:	4770      	bx	lr

0001a820 <lfclk_start>:
{
   1a820:	b580      	push	{r7, lr}
   1a822:	af00      	add	r7, sp, #0
	nrfx_clock_lfclk_start();
   1a824:	f7ff ff0f 	bl	1a646 <nrfx_clock_lfclk_start>
}
   1a828:	bf00      	nop
   1a82a:	bd80      	pop	{r7, pc}

0001a82c <lfclk_stop>:
{
   1a82c:	b580      	push	{r7, lr}
   1a82e:	af00      	add	r7, sp, #0
	nrfx_clock_lfclk_stop();
   1a830:	f7ff ff10 	bl	1a654 <nrfx_clock_lfclk_stop>
}
   1a834:	bf00      	nop
   1a836:	bd80      	pop	{r7, pc}

0001a838 <hfclk_start>:
{
   1a838:	b580      	push	{r7, lr}
   1a83a:	af00      	add	r7, sp, #0
	nrfx_clock_hfclk_start();
   1a83c:	f7ff ff11 	bl	1a662 <nrfx_clock_hfclk_start>
}
   1a840:	bf00      	nop
   1a842:	bd80      	pop	{r7, pc}

0001a844 <hfclk_stop>:
{
   1a844:	b580      	push	{r7, lr}
   1a846:	af00      	add	r7, sp, #0
	nrfx_clock_hfclk_stop();
   1a848:	f7ff ff12 	bl	1a670 <nrfx_clock_hfclk_stop>
}
   1a84c:	bf00      	nop
   1a84e:	bd80      	pop	{r7, pc}

0001a850 <api_stop>:
{
   1a850:	b580      	push	{r7, lr}
   1a852:	b082      	sub	sp, #8
   1a854:	af00      	add	r7, sp, #0
   1a856:	6078      	str	r0, [r7, #4]
   1a858:	6039      	str	r1, [r7, #0]
	return stop(dev, subsys, CTX_API);
   1a85a:	2280      	movs	r2, #128	; 0x80
   1a85c:	6839      	ldr	r1, [r7, #0]
   1a85e:	6878      	ldr	r0, [r7, #4]
   1a860:	f7f1 fe7e 	bl	c560 <stop>
   1a864:	4603      	mov	r3, r0
}
   1a866:	4618      	mov	r0, r3
   1a868:	3708      	adds	r7, #8
   1a86a:	46bd      	mov	sp, r7
   1a86c:	bd80      	pop	{r7, pc}

0001a86e <async_start>:
{
   1a86e:	b580      	push	{r7, lr}
   1a870:	b088      	sub	sp, #32
   1a872:	af00      	add	r7, sp, #0
   1a874:	60f8      	str	r0, [r7, #12]
   1a876:	60b9      	str	r1, [r7, #8]
   1a878:	607a      	str	r2, [r7, #4]
   1a87a:	603b      	str	r3, [r7, #0]
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)(size_t)subsys;
   1a87c:	68bb      	ldr	r3, [r7, #8]
   1a87e:	77fb      	strb	r3, [r7, #31]
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1a880:	7ffb      	ldrb	r3, [r7, #31]
   1a882:	4619      	mov	r1, r3
   1a884:	68f8      	ldr	r0, [r7, #12]
   1a886:	f7ff fefa 	bl	1a67e <get_sub_data>
   1a88a:	61b8      	str	r0, [r7, #24]
	err = set_starting_state(&subdata->flags, ctx);
   1a88c:	69bb      	ldr	r3, [r7, #24]
   1a88e:	3308      	adds	r3, #8
   1a890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1a892:	4618      	mov	r0, r3
   1a894:	f7ff ff64 	bl	1a760 <set_starting_state>
   1a898:	6178      	str	r0, [r7, #20]
	if (err < 0) {
   1a89a:	697b      	ldr	r3, [r7, #20]
   1a89c:	2b00      	cmp	r3, #0
   1a89e:	da01      	bge.n	1a8a4 <async_start+0x36>
		return err;
   1a8a0:	697b      	ldr	r3, [r7, #20]
   1a8a2:	e00e      	b.n	1a8c2 <async_start+0x54>
	subdata->cb = cb;
   1a8a4:	69bb      	ldr	r3, [r7, #24]
   1a8a6:	687a      	ldr	r2, [r7, #4]
   1a8a8:	601a      	str	r2, [r3, #0]
	subdata->user_data = user_data;
   1a8aa:	69bb      	ldr	r3, [r7, #24]
   1a8ac:	683a      	ldr	r2, [r7, #0]
   1a8ae:	605a      	str	r2, [r3, #4]
	 get_sub_config(dev, type)->start();
   1a8b0:	7ffb      	ldrb	r3, [r7, #31]
   1a8b2:	4619      	mov	r1, r3
   1a8b4:	68f8      	ldr	r0, [r7, #12]
   1a8b6:	f7ff fef8 	bl	1a6aa <get_sub_config>
   1a8ba:	4603      	mov	r3, r0
   1a8bc:	681b      	ldr	r3, [r3, #0]
   1a8be:	4798      	blx	r3
	return 0;
   1a8c0:	2300      	movs	r3, #0
}
   1a8c2:	4618      	mov	r0, r3
   1a8c4:	3720      	adds	r7, #32
   1a8c6:	46bd      	mov	sp, r7
   1a8c8:	bd80      	pop	{r7, pc}

0001a8ca <api_start>:
{
   1a8ca:	b580      	push	{r7, lr}
   1a8cc:	b086      	sub	sp, #24
   1a8ce:	af02      	add	r7, sp, #8
   1a8d0:	60f8      	str	r0, [r7, #12]
   1a8d2:	60b9      	str	r1, [r7, #8]
   1a8d4:	607a      	str	r2, [r7, #4]
   1a8d6:	603b      	str	r3, [r7, #0]
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1a8d8:	2380      	movs	r3, #128	; 0x80
   1a8da:	9300      	str	r3, [sp, #0]
   1a8dc:	683b      	ldr	r3, [r7, #0]
   1a8de:	687a      	ldr	r2, [r7, #4]
   1a8e0:	68b9      	ldr	r1, [r7, #8]
   1a8e2:	68f8      	ldr	r0, [r7, #12]
   1a8e4:	f7ff ffc3 	bl	1a86e <async_start>
   1a8e8:	4603      	mov	r3, r0
}
   1a8ea:	4618      	mov	r0, r3
   1a8ec:	3710      	adds	r7, #16
   1a8ee:	46bd      	mov	sp, r7
   1a8f0:	bd80      	pop	{r7, pc}

0001a8f2 <blocking_start_callback>:
{
   1a8f2:	b580      	push	{r7, lr}
   1a8f4:	b086      	sub	sp, #24
   1a8f6:	af00      	add	r7, sp, #0
   1a8f8:	60f8      	str	r0, [r7, #12]
   1a8fa:	60b9      	str	r1, [r7, #8]
   1a8fc:	607a      	str	r2, [r7, #4]
	struct k_sem *sem = user_data;
   1a8fe:	687b      	ldr	r3, [r7, #4]
   1a900:	617b      	str	r3, [r7, #20]
	k_sem_give(sem);
   1a902:	6978      	ldr	r0, [r7, #20]
   1a904:	f7ff fe13 	bl	1a52e <k_sem_give>
}
   1a908:	bf00      	nop
   1a90a:	3718      	adds	r7, #24
   1a90c:	46bd      	mov	sp, r7
   1a90e:	bd80      	pop	{r7, pc}

0001a910 <onoff_started_callback>:
{
   1a910:	b580      	push	{r7, lr}
   1a912:	b088      	sub	sp, #32
   1a914:	af00      	add	r7, sp, #0
   1a916:	60f8      	str	r0, [r7, #12]
   1a918:	60b9      	str	r1, [r7, #8]
   1a91a:	607a      	str	r2, [r7, #4]
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)(size_t)sys;
   1a91c:	68bb      	ldr	r3, [r7, #8]
   1a91e:	77fb      	strb	r3, [r7, #31]
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   1a920:	7ffb      	ldrb	r3, [r7, #31]
   1a922:	4619      	mov	r1, r3
   1a924:	68f8      	ldr	r0, [r7, #12]
   1a926:	f7ff fed5 	bl	1a6d4 <get_onoff_manager>
   1a92a:	61b8      	str	r0, [r7, #24]
	onoff_notify_fn notify = user_data;
   1a92c:	687b      	ldr	r3, [r7, #4]
   1a92e:	617b      	str	r3, [r7, #20]
	notify(mgr, 0);
   1a930:	697b      	ldr	r3, [r7, #20]
   1a932:	2100      	movs	r1, #0
   1a934:	69b8      	ldr	r0, [r7, #24]
   1a936:	4798      	blx	r3
}
   1a938:	bf00      	nop
   1a93a:	3720      	adds	r7, #32
   1a93c:	46bd      	mov	sp, r7
   1a93e:	bd80      	pop	{r7, pc}

0001a940 <hfclkaudio_init>:
{
   1a940:	b480      	push	{r7}
   1a942:	af00      	add	r7, sp, #0
}
   1a944:	bf00      	nop
   1a946:	46bd      	mov	sp, r7
   1a948:	bc80      	pop	{r7}
   1a94a:	4770      	bx	lr

0001a94c <z_impl_device_is_ready>:
{
   1a94c:	b580      	push	{r7, lr}
   1a94e:	b082      	sub	sp, #8
   1a950:	af00      	add	r7, sp, #0
   1a952:	6078      	str	r0, [r7, #4]
	return z_device_is_ready(dev);
   1a954:	6878      	ldr	r0, [r7, #4]
   1a956:	f003 fd39 	bl	1e3cc <z_device_is_ready>
   1a95a:	4603      	mov	r3, r0
}
   1a95c:	4618      	mov	r0, r3
   1a95e:	3708      	adds	r7, #8
   1a960:	46bd      	mov	sp, r7
   1a962:	bd80      	pop	{r7, pc}

0001a964 <device_is_ready>:
{
   1a964:	b580      	push	{r7, lr}
   1a966:	b082      	sub	sp, #8
   1a968:	af00      	add	r7, sp, #0
   1a96a:	6078      	str	r0, [r7, #4]
	return z_impl_device_is_ready(dev);
   1a96c:	6878      	ldr	r0, [r7, #4]
   1a96e:	f7ff ffed 	bl	1a94c <z_impl_device_is_ready>
   1a972:	4603      	mov	r3, r0
}
   1a974:	4618      	mov	r0, r3
   1a976:	3708      	adds	r7, #8
   1a978:	46bd      	mov	sp, r7
   1a97a:	bd80      	pop	{r7, pc}

0001a97c <z_impl_uart_poll_out>:
__syscall void uart_poll_out(const struct device *dev,
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
   1a97c:	b580      	push	{r7, lr}
   1a97e:	b084      	sub	sp, #16
   1a980:	af00      	add	r7, sp, #0
   1a982:	6078      	str	r0, [r7, #4]
   1a984:	460b      	mov	r3, r1
   1a986:	70fb      	strb	r3, [r7, #3]
	const struct uart_driver_api *api =
   1a988:	687b      	ldr	r3, [r7, #4]
   1a98a:	689b      	ldr	r3, [r3, #8]
   1a98c:	60fb      	str	r3, [r7, #12]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1a98e:	68fb      	ldr	r3, [r7, #12]
   1a990:	69db      	ldr	r3, [r3, #28]
   1a992:	78fa      	ldrb	r2, [r7, #3]
   1a994:	4611      	mov	r1, r2
   1a996:	6878      	ldr	r0, [r7, #4]
   1a998:	4798      	blx	r3
}
   1a99a:	bf00      	nop
   1a99c:	3710      	adds	r7, #16
   1a99e:	46bd      	mov	sp, r7
   1a9a0:	bd80      	pop	{r7, pc}

0001a9a2 <uart_poll_out>:

extern void z_impl_uart_poll_out(const struct device * dev, unsigned char out_char);

__pinned_func
static inline void uart_poll_out(const struct device * dev, unsigned char out_char)
{
   1a9a2:	b580      	push	{r7, lr}
   1a9a4:	b082      	sub	sp, #8
   1a9a6:	af00      	add	r7, sp, #0
   1a9a8:	6078      	str	r0, [r7, #4]
   1a9aa:	460b      	mov	r3, r1
   1a9ac:	70fb      	strb	r3, [r7, #3]
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_UART_POLL_OUT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
   1a9ae:	78fb      	ldrb	r3, [r7, #3]
   1a9b0:	4619      	mov	r1, r3
   1a9b2:	6878      	ldr	r0, [r7, #4]
   1a9b4:	f7ff ffe2 	bl	1a97c <z_impl_uart_poll_out>
}
   1a9b8:	bf00      	nop
   1a9ba:	3708      	adds	r7, #8
   1a9bc:	46bd      	mov	sp, r7
   1a9be:	bd80      	pop	{r7, pc}

0001a9c0 <pm_device_runtime_get>:
	ARG_UNUSED(dev);
	return 0;
}

static inline int pm_device_runtime_get(const struct device *dev)
{
   1a9c0:	b480      	push	{r7}
   1a9c2:	b083      	sub	sp, #12
   1a9c4:	af00      	add	r7, sp, #0
   1a9c6:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(dev);
	return 0;
   1a9c8:	2300      	movs	r3, #0
}
   1a9ca:	4618      	mov	r0, r3
   1a9cc:	370c      	adds	r7, #12
   1a9ce:	46bd      	mov	sp, r7
   1a9d0:	bc80      	pop	{r7}
   1a9d2:	4770      	bx	lr

0001a9d4 <pm_device_runtime_put>:

static inline int pm_device_runtime_put(const struct device *dev)
{
   1a9d4:	b480      	push	{r7}
   1a9d6:	b083      	sub	sp, #12
   1a9d8:	af00      	add	r7, sp, #0
   1a9da:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(dev);
	return 0;
   1a9dc:	2300      	movs	r3, #0
}
   1a9de:	4618      	mov	r0, r3
   1a9e0:	370c      	adds	r7, #12
   1a9e2:	46bd      	mov	sp, r7
   1a9e4:	bc80      	pop	{r7}
   1a9e6:	4770      	bx	lr

0001a9e8 <pm_device_runtime_is_enabled>:
	ARG_UNUSED(dev);
	return 0;
}

static inline bool pm_device_runtime_is_enabled(const struct device *dev)
{
   1a9e8:	b480      	push	{r7}
   1a9ea:	b083      	sub	sp, #12
   1a9ec:	af00      	add	r7, sp, #0
   1a9ee:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(dev);
	return false;
   1a9f0:	2300      	movs	r3, #0
}
   1a9f2:	4618      	mov	r0, r3
   1a9f4:	370c      	adds	r7, #12
   1a9f6:	46bd      	mov	sp, r7
   1a9f8:	bc80      	pop	{r7}
   1a9fa:	4770      	bx	lr

0001a9fc <entropy_psa_crypto_rng_init>:
#include <zephyr/drivers/entropy.h>
#include <psa/crypto.h>

/* API implementation: PSA Crypto initialization */
static int entropy_psa_crypto_rng_init(const struct device *dev)
{
   1a9fc:	b580      	push	{r7, lr}
   1a9fe:	b084      	sub	sp, #16
   1aa00:	af00      	add	r7, sp, #0
   1aa02:	6078      	str	r0, [r7, #4]
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
   1aa04:	f06f 0396 	mvn.w	r3, #150	; 0x96
   1aa08:	60fb      	str	r3, [r7, #12]

	ARG_UNUSED(dev);

	status = psa_crypto_init();
   1aa0a:	f002 faed 	bl	1cfe8 <psa_crypto_init>
   1aa0e:	60f8      	str	r0, [r7, #12]
	if (status != PSA_SUCCESS) {
   1aa10:	68fb      	ldr	r3, [r7, #12]
   1aa12:	2b00      	cmp	r3, #0
   1aa14:	d002      	beq.n	1aa1c <entropy_psa_crypto_rng_init+0x20>
		return -EIO;
   1aa16:	f06f 0304 	mvn.w	r3, #4
   1aa1a:	e000      	b.n	1aa1e <entropy_psa_crypto_rng_init+0x22>
	}

	return 0;
   1aa1c:	2300      	movs	r3, #0
}
   1aa1e:	4618      	mov	r0, r3
   1aa20:	3710      	adds	r7, #16
   1aa22:	46bd      	mov	sp, r7
   1aa24:	bd80      	pop	{r7, pc}

0001aa26 <entropy_psa_crypto_rng_get_entropy>:

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   1aa26:	b580      	push	{r7, lr}
   1aa28:	b086      	sub	sp, #24
   1aa2a:	af00      	add	r7, sp, #0
   1aa2c:	60f8      	str	r0, [r7, #12]
   1aa2e:	60b9      	str	r1, [r7, #8]
   1aa30:	4613      	mov	r3, r2
   1aa32:	80fb      	strh	r3, [r7, #6]
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
   1aa34:	f06f 0396 	mvn.w	r3, #150	; 0x96
   1aa38:	617b      	str	r3, [r7, #20]

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   1aa3a:	88fb      	ldrh	r3, [r7, #6]
   1aa3c:	4619      	mov	r1, r3
   1aa3e:	68b8      	ldr	r0, [r7, #8]
   1aa40:	f7f5 fa80 	bl	ff44 <psa_generate_random>
   1aa44:	6178      	str	r0, [r7, #20]
	if (status != PSA_SUCCESS) {
   1aa46:	697b      	ldr	r3, [r7, #20]
   1aa48:	2b00      	cmp	r3, #0
   1aa4a:	d002      	beq.n	1aa52 <entropy_psa_crypto_rng_get_entropy+0x2c>
		return -EIO;
   1aa4c:	f06f 0304 	mvn.w	r3, #4
   1aa50:	e000      	b.n	1aa54 <entropy_psa_crypto_rng_get_entropy+0x2e>
	}

	return 0;
   1aa52:	2300      	movs	r3, #0
}
   1aa54:	4618      	mov	r0, r3
   1aa56:	3718      	adds	r7, #24
   1aa58:	46bd      	mov	sp, r7
   1aa5a:	bd80      	pop	{r7, pc}

0001aa5c <nrf_gpio_pin_dir_get>:
{
   1aa5c:	b580      	push	{r7, lr}
   1aa5e:	b084      	sub	sp, #16
   1aa60:	af00      	add	r7, sp, #0
   1aa62:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1aa64:	1d3b      	adds	r3, r7, #4
   1aa66:	4618      	mov	r0, r3
   1aa68:	f7f2 f816 	bl	ca98 <nrf_gpio_pin_port_decode>
   1aa6c:	60f8      	str	r0, [r7, #12]
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1aa6e:	687a      	ldr	r2, [r7, #4]
   1aa70:	68fb      	ldr	r3, [r7, #12]
   1aa72:	3280      	adds	r2, #128	; 0x80
   1aa74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1aa78:	b2db      	uxtb	r3, r3
   1aa7a:	f003 0301 	and.w	r3, r3, #1
   1aa7e:	b2db      	uxtb	r3, r3
}
   1aa80:	4618      	mov	r0, r3
   1aa82:	3710      	adds	r7, #16
   1aa84:	46bd      	mov	sp, r7
   1aa86:	bd80      	pop	{r7, pc}

0001aa88 <nrf_gpio_port_in_read>:
{
   1aa88:	b480      	push	{r7}
   1aa8a:	b083      	sub	sp, #12
   1aa8c:	af00      	add	r7, sp, #0
   1aa8e:	6078      	str	r0, [r7, #4]
    return p_reg->IN;
   1aa90:	687b      	ldr	r3, [r7, #4]
   1aa92:	691b      	ldr	r3, [r3, #16]
}
   1aa94:	4618      	mov	r0, r3
   1aa96:	370c      	adds	r7, #12
   1aa98:	46bd      	mov	sp, r7
   1aa9a:	bc80      	pop	{r7}
   1aa9c:	4770      	bx	lr

0001aa9e <nrf_gpio_port_out_read>:
{
   1aa9e:	b480      	push	{r7}
   1aaa0:	b083      	sub	sp, #12
   1aaa2:	af00      	add	r7, sp, #0
   1aaa4:	6078      	str	r0, [r7, #4]
    return p_reg->OUT;
   1aaa6:	687b      	ldr	r3, [r7, #4]
   1aaa8:	685b      	ldr	r3, [r3, #4]
}
   1aaaa:	4618      	mov	r0, r3
   1aaac:	370c      	adds	r7, #12
   1aaae:	46bd      	mov	sp, r7
   1aab0:	bc80      	pop	{r7}
   1aab2:	4770      	bx	lr

0001aab4 <nrf_gpio_port_out_set>:
{
   1aab4:	b480      	push	{r7}
   1aab6:	b083      	sub	sp, #12
   1aab8:	af00      	add	r7, sp, #0
   1aaba:	6078      	str	r0, [r7, #4]
   1aabc:	6039      	str	r1, [r7, #0]
    p_reg->OUTSET = set_mask;
   1aabe:	687b      	ldr	r3, [r7, #4]
   1aac0:	683a      	ldr	r2, [r7, #0]
   1aac2:	609a      	str	r2, [r3, #8]
}
   1aac4:	bf00      	nop
   1aac6:	370c      	adds	r7, #12
   1aac8:	46bd      	mov	sp, r7
   1aaca:	bc80      	pop	{r7}
   1aacc:	4770      	bx	lr

0001aace <nrf_gpio_port_out_clear>:
{
   1aace:	b480      	push	{r7}
   1aad0:	b083      	sub	sp, #12
   1aad2:	af00      	add	r7, sp, #0
   1aad4:	6078      	str	r0, [r7, #4]
   1aad6:	6039      	str	r1, [r7, #0]
    p_reg->OUTCLR = clr_mask;
   1aad8:	687b      	ldr	r3, [r7, #4]
   1aada:	683a      	ldr	r2, [r7, #0]
   1aadc:	60da      	str	r2, [r3, #12]
}
   1aade:	bf00      	nop
   1aae0:	370c      	adds	r7, #12
   1aae2:	46bd      	mov	sp, r7
   1aae4:	bc80      	pop	{r7}
   1aae6:	4770      	bx	lr

0001aae8 <nrf_gpio_pin_present_check>:
            == GPIO_PIN_CNF_CLOCKPIN_Enabled);
}
#endif

NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
   1aae8:	b480      	push	{r7}
   1aaea:	b085      	sub	sp, #20
   1aaec:	af00      	add	r7, sp, #0
   1aaee:	6078      	str	r0, [r7, #4]
    uint32_t port = pin_number >> 5;
   1aaf0:	687b      	ldr	r3, [r7, #4]
   1aaf2:	095b      	lsrs	r3, r3, #5
   1aaf4:	60fb      	str	r3, [r7, #12]
    uint32_t mask = 0;
   1aaf6:	2300      	movs	r3, #0
   1aaf8:	60bb      	str	r3, [r7, #8]

    switch (port)
   1aafa:	68fb      	ldr	r3, [r7, #12]
   1aafc:	2b00      	cmp	r3, #0
   1aafe:	d112      	bne.n	1ab26 <nrf_gpio_pin_present_check+0x3e>
    {
        NRF_INTERNAL_GPIO_PORT_MASK_SET(mask);
   1ab00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ab04:	60bb      	str	r3, [r7, #8]
        */
    mask |= 0x03003800;
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
#endif

    pin_number &= 0x1F;
   1ab06:	687b      	ldr	r3, [r7, #4]
   1ab08:	f003 031f 	and.w	r3, r3, #31
   1ab0c:	607b      	str	r3, [r7, #4]

    return (mask & (1UL << pin_number)) ? true : false;
   1ab0e:	68ba      	ldr	r2, [r7, #8]
   1ab10:	687b      	ldr	r3, [r7, #4]
   1ab12:	fa22 f303 	lsr.w	r3, r2, r3
   1ab16:	f003 0301 	and.w	r3, r3, #1
   1ab1a:	2b00      	cmp	r3, #0
   1ab1c:	bf14      	ite	ne
   1ab1e:	2301      	movne	r3, #1
   1ab20:	2300      	moveq	r3, #0
   1ab22:	b2db      	uxtb	r3, r3
   1ab24:	e000      	b.n	1ab28 <nrf_gpio_pin_present_check+0x40>
            return false;
   1ab26:	2300      	movs	r3, #0
}
   1ab28:	4618      	mov	r0, r3
   1ab2a:	3714      	adds	r7, #20
   1ab2c:	46bd      	mov	sp, r7
   1ab2e:	bc80      	pop	{r7}
   1ab30:	4770      	bx	lr

0001ab32 <nrf_gpio_pin_port_number_extract>:

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
   1ab32:	b480      	push	{r7}
   1ab34:	b085      	sub	sp, #20
   1ab36:	af00      	add	r7, sp, #0
   1ab38:	6078      	str	r0, [r7, #4]
    uint32_t pin_number = *p_pin;
   1ab3a:	687b      	ldr	r3, [r7, #4]
   1ab3c:	681b      	ldr	r3, [r3, #0]
   1ab3e:	60fb      	str	r3, [r7, #12]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   1ab40:	68fb      	ldr	r3, [r7, #12]
   1ab42:	f003 021f 	and.w	r2, r3, #31
   1ab46:	687b      	ldr	r3, [r7, #4]
   1ab48:	601a      	str	r2, [r3, #0]

    return NRF_PIN_NUMBER_TO_PORT(pin_number);
   1ab4a:	68fb      	ldr	r3, [r7, #12]
   1ab4c:	095b      	lsrs	r3, r3, #5
}
   1ab4e:	4618      	mov	r0, r3
   1ab50:	3714      	adds	r7, #20
   1ab52:	46bd      	mov	sp, r7
   1ab54:	bc80      	pop	{r7}
   1ab56:	4770      	bx	lr

0001ab58 <z_snode_next_peek>:
{
   1ab58:	b480      	push	{r7}
   1ab5a:	b083      	sub	sp, #12
   1ab5c:	af00      	add	r7, sp, #0
   1ab5e:	6078      	str	r0, [r7, #4]
	return node->next;
   1ab60:	687b      	ldr	r3, [r7, #4]
   1ab62:	681b      	ldr	r3, [r3, #0]
}
   1ab64:	4618      	mov	r0, r3
   1ab66:	370c      	adds	r7, #12
   1ab68:	46bd      	mov	sp, r7
   1ab6a:	bc80      	pop	{r7}
   1ab6c:	4770      	bx	lr

0001ab6e <z_snode_next_set>:
{
   1ab6e:	b480      	push	{r7}
   1ab70:	b083      	sub	sp, #12
   1ab72:	af00      	add	r7, sp, #0
   1ab74:	6078      	str	r0, [r7, #4]
   1ab76:	6039      	str	r1, [r7, #0]
	parent->next = child;
   1ab78:	687b      	ldr	r3, [r7, #4]
   1ab7a:	683a      	ldr	r2, [r7, #0]
   1ab7c:	601a      	str	r2, [r3, #0]
}
   1ab7e:	bf00      	nop
   1ab80:	370c      	adds	r7, #12
   1ab82:	46bd      	mov	sp, r7
   1ab84:	bc80      	pop	{r7}
   1ab86:	4770      	bx	lr

0001ab88 <z_slist_head_set>:
{
   1ab88:	b480      	push	{r7}
   1ab8a:	b083      	sub	sp, #12
   1ab8c:	af00      	add	r7, sp, #0
   1ab8e:	6078      	str	r0, [r7, #4]
   1ab90:	6039      	str	r1, [r7, #0]
	list->head = node;
   1ab92:	687b      	ldr	r3, [r7, #4]
   1ab94:	683a      	ldr	r2, [r7, #0]
   1ab96:	601a      	str	r2, [r3, #0]
}
   1ab98:	bf00      	nop
   1ab9a:	370c      	adds	r7, #12
   1ab9c:	46bd      	mov	sp, r7
   1ab9e:	bc80      	pop	{r7}
   1aba0:	4770      	bx	lr

0001aba2 <z_slist_tail_set>:
{
   1aba2:	b480      	push	{r7}
   1aba4:	b083      	sub	sp, #12
   1aba6:	af00      	add	r7, sp, #0
   1aba8:	6078      	str	r0, [r7, #4]
   1abaa:	6039      	str	r1, [r7, #0]
	list->tail = node;
   1abac:	687b      	ldr	r3, [r7, #4]
   1abae:	683a      	ldr	r2, [r7, #0]
   1abb0:	605a      	str	r2, [r3, #4]
}
   1abb2:	bf00      	nop
   1abb4:	370c      	adds	r7, #12
   1abb6:	46bd      	mov	sp, r7
   1abb8:	bc80      	pop	{r7}
   1abba:	4770      	bx	lr

0001abbc <sys_slist_peek_head>:
{
   1abbc:	b480      	push	{r7}
   1abbe:	b083      	sub	sp, #12
   1abc0:	af00      	add	r7, sp, #0
   1abc2:	6078      	str	r0, [r7, #4]
	return list->head;
   1abc4:	687b      	ldr	r3, [r7, #4]
   1abc6:	681b      	ldr	r3, [r3, #0]
}
   1abc8:	4618      	mov	r0, r3
   1abca:	370c      	adds	r7, #12
   1abcc:	46bd      	mov	sp, r7
   1abce:	bc80      	pop	{r7}
   1abd0:	4770      	bx	lr

0001abd2 <sys_slist_peek_tail>:
{
   1abd2:	b480      	push	{r7}
   1abd4:	b083      	sub	sp, #12
   1abd6:	af00      	add	r7, sp, #0
   1abd8:	6078      	str	r0, [r7, #4]
	return list->tail;
   1abda:	687b      	ldr	r3, [r7, #4]
   1abdc:	685b      	ldr	r3, [r3, #4]
}
   1abde:	4618      	mov	r0, r3
   1abe0:	370c      	adds	r7, #12
   1abe2:	46bd      	mov	sp, r7
   1abe4:	bc80      	pop	{r7}
   1abe6:	4770      	bx	lr

0001abe8 <sys_slist_is_empty>:
Z_GENLIST_IS_EMPTY(slist)
   1abe8:	b580      	push	{r7, lr}
   1abea:	b082      	sub	sp, #8
   1abec:	af00      	add	r7, sp, #0
   1abee:	6078      	str	r0, [r7, #4]
   1abf0:	6878      	ldr	r0, [r7, #4]
   1abf2:	f7ff ffe3 	bl	1abbc <sys_slist_peek_head>
   1abf6:	4603      	mov	r3, r0
   1abf8:	2b00      	cmp	r3, #0
   1abfa:	bf0c      	ite	eq
   1abfc:	2301      	moveq	r3, #1
   1abfe:	2300      	movne	r3, #0
   1ac00:	b2db      	uxtb	r3, r3
   1ac02:	4618      	mov	r0, r3
   1ac04:	3708      	adds	r7, #8
   1ac06:	46bd      	mov	sp, r7
   1ac08:	bd80      	pop	{r7, pc}

0001ac0a <sys_slist_peek_next_no_check>:
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ac0a:	b580      	push	{r7, lr}
   1ac0c:	b082      	sub	sp, #8
   1ac0e:	af00      	add	r7, sp, #0
   1ac10:	6078      	str	r0, [r7, #4]
   1ac12:	6878      	ldr	r0, [r7, #4]
   1ac14:	f7ff ffa0 	bl	1ab58 <z_snode_next_peek>
   1ac18:	4603      	mov	r3, r0
   1ac1a:	4618      	mov	r0, r3
   1ac1c:	3708      	adds	r7, #8
   1ac1e:	46bd      	mov	sp, r7
   1ac20:	bd80      	pop	{r7, pc}

0001ac22 <sys_slist_peek_next>:
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ac22:	b580      	push	{r7, lr}
   1ac24:	b082      	sub	sp, #8
   1ac26:	af00      	add	r7, sp, #0
   1ac28:	6078      	str	r0, [r7, #4]
   1ac2a:	687b      	ldr	r3, [r7, #4]
   1ac2c:	2b00      	cmp	r3, #0
   1ac2e:	d004      	beq.n	1ac3a <sys_slist_peek_next+0x18>
   1ac30:	6878      	ldr	r0, [r7, #4]
   1ac32:	f7ff ffea 	bl	1ac0a <sys_slist_peek_next_no_check>
   1ac36:	4603      	mov	r3, r0
   1ac38:	e000      	b.n	1ac3c <sys_slist_peek_next+0x1a>
   1ac3a:	2300      	movs	r3, #0
   1ac3c:	4618      	mov	r0, r3
   1ac3e:	3708      	adds	r7, #8
   1ac40:	46bd      	mov	sp, r7
   1ac42:	bd80      	pop	{r7, pc}

0001ac44 <sys_slist_prepend>:
Z_GENLIST_PREPEND(slist, snode)
   1ac44:	b580      	push	{r7, lr}
   1ac46:	b082      	sub	sp, #8
   1ac48:	af00      	add	r7, sp, #0
   1ac4a:	6078      	str	r0, [r7, #4]
   1ac4c:	6039      	str	r1, [r7, #0]
   1ac4e:	6878      	ldr	r0, [r7, #4]
   1ac50:	f7ff ffb4 	bl	1abbc <sys_slist_peek_head>
   1ac54:	4603      	mov	r3, r0
   1ac56:	4619      	mov	r1, r3
   1ac58:	6838      	ldr	r0, [r7, #0]
   1ac5a:	f7ff ff88 	bl	1ab6e <z_snode_next_set>
   1ac5e:	6839      	ldr	r1, [r7, #0]
   1ac60:	6878      	ldr	r0, [r7, #4]
   1ac62:	f7ff ff91 	bl	1ab88 <z_slist_head_set>
   1ac66:	6878      	ldr	r0, [r7, #4]
   1ac68:	f7ff ffb3 	bl	1abd2 <sys_slist_peek_tail>
   1ac6c:	4603      	mov	r3, r0
   1ac6e:	2b00      	cmp	r3, #0
   1ac70:	d107      	bne.n	1ac82 <sys_slist_prepend+0x3e>
   1ac72:	6878      	ldr	r0, [r7, #4]
   1ac74:	f7ff ffa2 	bl	1abbc <sys_slist_peek_head>
   1ac78:	4603      	mov	r3, r0
   1ac7a:	4619      	mov	r1, r3
   1ac7c:	6878      	ldr	r0, [r7, #4]
   1ac7e:	f7ff ff90 	bl	1aba2 <z_slist_tail_set>
   1ac82:	3708      	adds	r7, #8
   1ac84:	46bd      	mov	sp, r7
   1ac86:	bd80      	pop	{r7, pc}

0001ac88 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1ac88:	b580      	push	{r7, lr}
   1ac8a:	b084      	sub	sp, #16
   1ac8c:	af00      	add	r7, sp, #0
   1ac8e:	60f8      	str	r0, [r7, #12]
   1ac90:	60b9      	str	r1, [r7, #8]
   1ac92:	607a      	str	r2, [r7, #4]
   1ac94:	68bb      	ldr	r3, [r7, #8]
   1ac96:	2b00      	cmp	r3, #0
   1ac98:	d117      	bne.n	1acca <sys_slist_remove+0x42>
   1ac9a:	6878      	ldr	r0, [r7, #4]
   1ac9c:	f7ff ff5c 	bl	1ab58 <z_snode_next_peek>
   1aca0:	4603      	mov	r3, r0
   1aca2:	4619      	mov	r1, r3
   1aca4:	68f8      	ldr	r0, [r7, #12]
   1aca6:	f7ff ff6f 	bl	1ab88 <z_slist_head_set>
   1acaa:	68f8      	ldr	r0, [r7, #12]
   1acac:	f7ff ff91 	bl	1abd2 <sys_slist_peek_tail>
   1acb0:	4602      	mov	r2, r0
   1acb2:	687b      	ldr	r3, [r7, #4]
   1acb4:	4293      	cmp	r3, r2
   1acb6:	d11b      	bne.n	1acf0 <sys_slist_remove+0x68>
   1acb8:	68f8      	ldr	r0, [r7, #12]
   1acba:	f7ff ff7f 	bl	1abbc <sys_slist_peek_head>
   1acbe:	4603      	mov	r3, r0
   1acc0:	4619      	mov	r1, r3
   1acc2:	68f8      	ldr	r0, [r7, #12]
   1acc4:	f7ff ff6d 	bl	1aba2 <z_slist_tail_set>
   1acc8:	e012      	b.n	1acf0 <sys_slist_remove+0x68>
   1acca:	6878      	ldr	r0, [r7, #4]
   1accc:	f7ff ff44 	bl	1ab58 <z_snode_next_peek>
   1acd0:	4603      	mov	r3, r0
   1acd2:	4619      	mov	r1, r3
   1acd4:	68b8      	ldr	r0, [r7, #8]
   1acd6:	f7ff ff4a 	bl	1ab6e <z_snode_next_set>
   1acda:	68f8      	ldr	r0, [r7, #12]
   1acdc:	f7ff ff79 	bl	1abd2 <sys_slist_peek_tail>
   1ace0:	4602      	mov	r2, r0
   1ace2:	687b      	ldr	r3, [r7, #4]
   1ace4:	4293      	cmp	r3, r2
   1ace6:	d103      	bne.n	1acf0 <sys_slist_remove+0x68>
   1ace8:	68b9      	ldr	r1, [r7, #8]
   1acea:	68f8      	ldr	r0, [r7, #12]
   1acec:	f7ff ff59 	bl	1aba2 <z_slist_tail_set>
   1acf0:	2100      	movs	r1, #0
   1acf2:	6878      	ldr	r0, [r7, #4]
   1acf4:	f7ff ff3b 	bl	1ab6e <z_snode_next_set>
   1acf8:	3710      	adds	r7, #16
   1acfa:	46bd      	mov	sp, r7
   1acfc:	bd80      	pop	{r7, pc}

0001acfe <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1acfe:	b580      	push	{r7, lr}
   1ad00:	b084      	sub	sp, #16
   1ad02:	af00      	add	r7, sp, #0
   1ad04:	6078      	str	r0, [r7, #4]
   1ad06:	6039      	str	r1, [r7, #0]
   1ad08:	2300      	movs	r3, #0
   1ad0a:	60fb      	str	r3, [r7, #12]
   1ad0c:	6878      	ldr	r0, [r7, #4]
   1ad0e:	f7ff ff55 	bl	1abbc <sys_slist_peek_head>
   1ad12:	60b8      	str	r0, [r7, #8]
   1ad14:	e010      	b.n	1ad38 <sys_slist_find_and_remove+0x3a>
   1ad16:	68ba      	ldr	r2, [r7, #8]
   1ad18:	683b      	ldr	r3, [r7, #0]
   1ad1a:	429a      	cmp	r2, r3
   1ad1c:	d106      	bne.n	1ad2c <sys_slist_find_and_remove+0x2e>
   1ad1e:	683a      	ldr	r2, [r7, #0]
   1ad20:	68f9      	ldr	r1, [r7, #12]
   1ad22:	6878      	ldr	r0, [r7, #4]
   1ad24:	f7ff ffb0 	bl	1ac88 <sys_slist_remove>
   1ad28:	2301      	movs	r3, #1
   1ad2a:	e009      	b.n	1ad40 <sys_slist_find_and_remove+0x42>
   1ad2c:	68bb      	ldr	r3, [r7, #8]
   1ad2e:	60fb      	str	r3, [r7, #12]
   1ad30:	68b8      	ldr	r0, [r7, #8]
   1ad32:	f7ff ff76 	bl	1ac22 <sys_slist_peek_next>
   1ad36:	60b8      	str	r0, [r7, #8]
   1ad38:	68bb      	ldr	r3, [r7, #8]
   1ad3a:	2b00      	cmp	r3, #0
   1ad3c:	d1eb      	bne.n	1ad16 <sys_slist_find_and_remove+0x18>
   1ad3e:	2300      	movs	r3, #0
   1ad40:	4618      	mov	r0, r3
   1ad42:	3710      	adds	r7, #16
   1ad44:	46bd      	mov	sp, r7
   1ad46:	bd80      	pop	{r7, pc}

0001ad48 <get_port_data>:
{
   1ad48:	b480      	push	{r7}
   1ad4a:	b083      	sub	sp, #12
   1ad4c:	af00      	add	r7, sp, #0
   1ad4e:	6078      	str	r0, [r7, #4]
	return port->data;
   1ad50:	687b      	ldr	r3, [r7, #4]
   1ad52:	691b      	ldr	r3, [r3, #16]
}
   1ad54:	4618      	mov	r0, r3
   1ad56:	370c      	adds	r7, #12
   1ad58:	46bd      	mov	sp, r7
   1ad5a:	bc80      	pop	{r7}
   1ad5c:	4770      	bx	lr

0001ad5e <get_port_cfg>:
{
   1ad5e:	b480      	push	{r7}
   1ad60:	b083      	sub	sp, #12
   1ad62:	af00      	add	r7, sp, #0
   1ad64:	6078      	str	r0, [r7, #4]
	return port->config;
   1ad66:	687b      	ldr	r3, [r7, #4]
   1ad68:	685b      	ldr	r3, [r3, #4]
}
   1ad6a:	4618      	mov	r0, r3
   1ad6c:	370c      	adds	r7, #12
   1ad6e:	46bd      	mov	sp, r7
   1ad70:	bc80      	pop	{r7}
   1ad72:	4770      	bx	lr

0001ad74 <get_drive>:
{
   1ad74:	b480      	push	{r7}
   1ad76:	b083      	sub	sp, #12
   1ad78:	af00      	add	r7, sp, #0
   1ad7a:	6078      	str	r0, [r7, #4]
   1ad7c:	6039      	str	r1, [r7, #0]
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1ad7e:	687a      	ldr	r2, [r7, #4]
   1ad80:	f240 3306 	movw	r3, #774	; 0x306
   1ad84:	4013      	ands	r3, r2
   1ad86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1ad8a:	d031      	beq.n	1adf0 <get_drive+0x7c>
   1ad8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1ad90:	d842      	bhi.n	1ae18 <get_drive+0xa4>
   1ad92:	f240 2202 	movw	r2, #514	; 0x202
   1ad96:	4293      	cmp	r3, r2
   1ad98:	d03a      	beq.n	1ae10 <get_drive+0x9c>
   1ad9a:	f240 2202 	movw	r2, #514	; 0x202
   1ad9e:	4293      	cmp	r3, r2
   1ada0:	d83a      	bhi.n	1ae18 <get_drive+0xa4>
   1ada2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1ada6:	d01b      	beq.n	1ade0 <get_drive+0x6c>
   1ada8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1adac:	d834      	bhi.n	1ae18 <get_drive+0xa4>
   1adae:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1adb2:	d025      	beq.n	1ae00 <get_drive+0x8c>
   1adb4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1adb8:	d82e      	bhi.n	1ae18 <get_drive+0xa4>
   1adba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1adbe:	d013      	beq.n	1ade8 <get_drive+0x74>
   1adc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1adc4:	d828      	bhi.n	1ae18 <get_drive+0xa4>
   1adc6:	2b06      	cmp	r3, #6
   1adc8:	d016      	beq.n	1adf8 <get_drive+0x84>
   1adca:	2b06      	cmp	r3, #6
   1adcc:	d824      	bhi.n	1ae18 <get_drive+0xa4>
   1adce:	2b00      	cmp	r3, #0
   1add0:	d002      	beq.n	1add8 <get_drive+0x64>
   1add2:	2b02      	cmp	r3, #2
   1add4:	d018      	beq.n	1ae08 <get_drive+0x94>
   1add6:	e01f      	b.n	1ae18 <get_drive+0xa4>
		*drive = NRF_GPIO_PIN_S0S1;
   1add8:	683b      	ldr	r3, [r7, #0]
   1adda:	2200      	movs	r2, #0
   1addc:	701a      	strb	r2, [r3, #0]
		break;
   1adde:	e01e      	b.n	1ae1e <get_drive+0xaa>
		*drive = NRF_GPIO_PIN_S0H1;
   1ade0:	683b      	ldr	r3, [r7, #0]
   1ade2:	2202      	movs	r2, #2
   1ade4:	701a      	strb	r2, [r3, #0]
		break;
   1ade6:	e01a      	b.n	1ae1e <get_drive+0xaa>
		*drive = NRF_GPIO_PIN_H0S1;
   1ade8:	683b      	ldr	r3, [r7, #0]
   1adea:	2201      	movs	r2, #1
   1adec:	701a      	strb	r2, [r3, #0]
		break;
   1adee:	e016      	b.n	1ae1e <get_drive+0xaa>
		*drive = NRF_GPIO_PIN_H0H1;
   1adf0:	683b      	ldr	r3, [r7, #0]
   1adf2:	2203      	movs	r2, #3
   1adf4:	701a      	strb	r2, [r3, #0]
		break;
   1adf6:	e012      	b.n	1ae1e <get_drive+0xaa>
		*drive = NRF_GPIO_PIN_S0D1;
   1adf8:	683b      	ldr	r3, [r7, #0]
   1adfa:	2206      	movs	r2, #6
   1adfc:	701a      	strb	r2, [r3, #0]
		break;
   1adfe:	e00e      	b.n	1ae1e <get_drive+0xaa>
		*drive = NRF_GPIO_PIN_H0D1;
   1ae00:	683b      	ldr	r3, [r7, #0]
   1ae02:	2207      	movs	r2, #7
   1ae04:	701a      	strb	r2, [r3, #0]
		break;
   1ae06:	e00a      	b.n	1ae1e <get_drive+0xaa>
		*drive = NRF_GPIO_PIN_D0S1;
   1ae08:	683b      	ldr	r3, [r7, #0]
   1ae0a:	2204      	movs	r2, #4
   1ae0c:	701a      	strb	r2, [r3, #0]
		break;
   1ae0e:	e006      	b.n	1ae1e <get_drive+0xaa>
		*drive = NRF_GPIO_PIN_D0H1;
   1ae10:	683b      	ldr	r3, [r7, #0]
   1ae12:	2205      	movs	r2, #5
   1ae14:	701a      	strb	r2, [r3, #0]
		break;
   1ae16:	e002      	b.n	1ae1e <get_drive+0xaa>
		return -EINVAL;
   1ae18:	f06f 0315 	mvn.w	r3, #21
   1ae1c:	e000      	b.n	1ae20 <get_drive+0xac>
	return 0;
   1ae1e:	2300      	movs	r3, #0
}
   1ae20:	4618      	mov	r0, r3
   1ae22:	370c      	adds	r7, #12
   1ae24:	46bd      	mov	sp, r7
   1ae26:	bc80      	pop	{r7}
   1ae28:	4770      	bx	lr

0001ae2a <get_pull>:
{
   1ae2a:	b480      	push	{r7}
   1ae2c:	b083      	sub	sp, #12
   1ae2e:	af00      	add	r7, sp, #0
   1ae30:	6078      	str	r0, [r7, #4]
	if (flags & GPIO_PULL_UP) {
   1ae32:	687b      	ldr	r3, [r7, #4]
   1ae34:	f003 0310 	and.w	r3, r3, #16
   1ae38:	2b00      	cmp	r3, #0
   1ae3a:	d001      	beq.n	1ae40 <get_pull+0x16>
		return NRF_GPIO_PIN_PULLUP;
   1ae3c:	2303      	movs	r3, #3
   1ae3e:	e007      	b.n	1ae50 <get_pull+0x26>
	} else if (flags & GPIO_PULL_DOWN) {
   1ae40:	687b      	ldr	r3, [r7, #4]
   1ae42:	f003 0320 	and.w	r3, r3, #32
   1ae46:	2b00      	cmp	r3, #0
   1ae48:	d001      	beq.n	1ae4e <get_pull+0x24>
		return NRF_GPIO_PIN_PULLDOWN;
   1ae4a:	2301      	movs	r3, #1
   1ae4c:	e000      	b.n	1ae50 <get_pull+0x26>
	return NRF_GPIO_PIN_NOPULL;
   1ae4e:	2300      	movs	r3, #0
}
   1ae50:	4618      	mov	r0, r3
   1ae52:	370c      	adds	r7, #12
   1ae54:	46bd      	mov	sp, r7
   1ae56:	bc80      	pop	{r7}
   1ae58:	4770      	bx	lr

0001ae5a <gpio_nrfx_port_get_raw>:
{
   1ae5a:	b580      	push	{r7, lr}
   1ae5c:	b084      	sub	sp, #16
   1ae5e:	af00      	add	r7, sp, #0
   1ae60:	6078      	str	r0, [r7, #4]
   1ae62:	6039      	str	r1, [r7, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ae64:	6878      	ldr	r0, [r7, #4]
   1ae66:	f7ff ff7a 	bl	1ad5e <get_port_cfg>
   1ae6a:	4603      	mov	r3, r0
   1ae6c:	685b      	ldr	r3, [r3, #4]
   1ae6e:	60fb      	str	r3, [r7, #12]
	*value = nrf_gpio_port_in_read(reg);
   1ae70:	68f8      	ldr	r0, [r7, #12]
   1ae72:	f7ff fe09 	bl	1aa88 <nrf_gpio_port_in_read>
   1ae76:	4602      	mov	r2, r0
   1ae78:	683b      	ldr	r3, [r7, #0]
   1ae7a:	601a      	str	r2, [r3, #0]
	return 0;
   1ae7c:	2300      	movs	r3, #0
}
   1ae7e:	4618      	mov	r0, r3
   1ae80:	3710      	adds	r7, #16
   1ae82:	46bd      	mov	sp, r7
   1ae84:	bd80      	pop	{r7, pc}

0001ae86 <gpio_nrfx_port_set_masked_raw>:
{
   1ae86:	b580      	push	{r7, lr}
   1ae88:	b088      	sub	sp, #32
   1ae8a:	af00      	add	r7, sp, #0
   1ae8c:	60f8      	str	r0, [r7, #12]
   1ae8e:	60b9      	str	r1, [r7, #8]
   1ae90:	607a      	str	r2, [r7, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ae92:	68f8      	ldr	r0, [r7, #12]
   1ae94:	f7ff ff63 	bl	1ad5e <get_port_cfg>
   1ae98:	4603      	mov	r3, r0
   1ae9a:	685b      	ldr	r3, [r3, #4]
   1ae9c:	61fb      	str	r3, [r7, #28]
	const uint32_t set_mask = value & mask;
   1ae9e:	687a      	ldr	r2, [r7, #4]
   1aea0:	68bb      	ldr	r3, [r7, #8]
   1aea2:	4013      	ands	r3, r2
   1aea4:	61bb      	str	r3, [r7, #24]
	const uint32_t clear_mask = (~set_mask) & mask;
   1aea6:	69bb      	ldr	r3, [r7, #24]
   1aea8:	43db      	mvns	r3, r3
   1aeaa:	68ba      	ldr	r2, [r7, #8]
   1aeac:	4013      	ands	r3, r2
   1aeae:	617b      	str	r3, [r7, #20]
	nrf_gpio_port_out_set(reg, set_mask);
   1aeb0:	69b9      	ldr	r1, [r7, #24]
   1aeb2:	69f8      	ldr	r0, [r7, #28]
   1aeb4:	f7ff fdfe 	bl	1aab4 <nrf_gpio_port_out_set>
	nrf_gpio_port_out_clear(reg, clear_mask);
   1aeb8:	6979      	ldr	r1, [r7, #20]
   1aeba:	69f8      	ldr	r0, [r7, #28]
   1aebc:	f7ff fe07 	bl	1aace <nrf_gpio_port_out_clear>
	return 0;
   1aec0:	2300      	movs	r3, #0
}
   1aec2:	4618      	mov	r0, r3
   1aec4:	3720      	adds	r7, #32
   1aec6:	46bd      	mov	sp, r7
   1aec8:	bd80      	pop	{r7, pc}

0001aeca <gpio_nrfx_port_set_bits_raw>:
{
   1aeca:	b580      	push	{r7, lr}
   1aecc:	b084      	sub	sp, #16
   1aece:	af00      	add	r7, sp, #0
   1aed0:	6078      	str	r0, [r7, #4]
   1aed2:	6039      	str	r1, [r7, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1aed4:	6878      	ldr	r0, [r7, #4]
   1aed6:	f7ff ff42 	bl	1ad5e <get_port_cfg>
   1aeda:	4603      	mov	r3, r0
   1aedc:	685b      	ldr	r3, [r3, #4]
   1aede:	60fb      	str	r3, [r7, #12]
	nrf_gpio_port_out_set(reg, mask);
   1aee0:	6839      	ldr	r1, [r7, #0]
   1aee2:	68f8      	ldr	r0, [r7, #12]
   1aee4:	f7ff fde6 	bl	1aab4 <nrf_gpio_port_out_set>
	return 0;
   1aee8:	2300      	movs	r3, #0
}
   1aeea:	4618      	mov	r0, r3
   1aeec:	3710      	adds	r7, #16
   1aeee:	46bd      	mov	sp, r7
   1aef0:	bd80      	pop	{r7, pc}

0001aef2 <gpio_nrfx_port_clear_bits_raw>:
{
   1aef2:	b580      	push	{r7, lr}
   1aef4:	b084      	sub	sp, #16
   1aef6:	af00      	add	r7, sp, #0
   1aef8:	6078      	str	r0, [r7, #4]
   1aefa:	6039      	str	r1, [r7, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1aefc:	6878      	ldr	r0, [r7, #4]
   1aefe:	f7ff ff2e 	bl	1ad5e <get_port_cfg>
   1af02:	4603      	mov	r3, r0
   1af04:	685b      	ldr	r3, [r3, #4]
   1af06:	60fb      	str	r3, [r7, #12]
	nrf_gpio_port_out_clear(reg, mask);
   1af08:	6839      	ldr	r1, [r7, #0]
   1af0a:	68f8      	ldr	r0, [r7, #12]
   1af0c:	f7ff fddf 	bl	1aace <nrf_gpio_port_out_clear>
	return 0;
   1af10:	2300      	movs	r3, #0
}
   1af12:	4618      	mov	r0, r3
   1af14:	3710      	adds	r7, #16
   1af16:	46bd      	mov	sp, r7
   1af18:	bd80      	pop	{r7, pc}

0001af1a <gpio_nrfx_port_toggle_bits>:
{
   1af1a:	b580      	push	{r7, lr}
   1af1c:	b086      	sub	sp, #24
   1af1e:	af00      	add	r7, sp, #0
   1af20:	6078      	str	r0, [r7, #4]
   1af22:	6039      	str	r1, [r7, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1af24:	6878      	ldr	r0, [r7, #4]
   1af26:	f7ff ff1a 	bl	1ad5e <get_port_cfg>
   1af2a:	4603      	mov	r3, r0
   1af2c:	685b      	ldr	r3, [r3, #4]
   1af2e:	617b      	str	r3, [r7, #20]
	const uint32_t value = nrf_gpio_port_out_read(reg) ^ mask;
   1af30:	6978      	ldr	r0, [r7, #20]
   1af32:	f7ff fdb4 	bl	1aa9e <nrf_gpio_port_out_read>
   1af36:	4602      	mov	r2, r0
   1af38:	683b      	ldr	r3, [r7, #0]
   1af3a:	4053      	eors	r3, r2
   1af3c:	613b      	str	r3, [r7, #16]
	const uint32_t set_mask = value & mask;
   1af3e:	693a      	ldr	r2, [r7, #16]
   1af40:	683b      	ldr	r3, [r7, #0]
   1af42:	4013      	ands	r3, r2
   1af44:	60fb      	str	r3, [r7, #12]
	const uint32_t clear_mask = (~value) & mask;
   1af46:	693b      	ldr	r3, [r7, #16]
   1af48:	43db      	mvns	r3, r3
   1af4a:	683a      	ldr	r2, [r7, #0]
   1af4c:	4013      	ands	r3, r2
   1af4e:	60bb      	str	r3, [r7, #8]
	nrf_gpio_port_out_set(reg, set_mask);
   1af50:	68f9      	ldr	r1, [r7, #12]
   1af52:	6978      	ldr	r0, [r7, #20]
   1af54:	f7ff fdae 	bl	1aab4 <nrf_gpio_port_out_set>
	nrf_gpio_port_out_clear(reg, clear_mask);
   1af58:	68b9      	ldr	r1, [r7, #8]
   1af5a:	6978      	ldr	r0, [r7, #20]
   1af5c:	f7ff fdb7 	bl	1aace <nrf_gpio_port_out_clear>
	return 0;
   1af60:	2300      	movs	r3, #0
}
   1af62:	4618      	mov	r0, r3
   1af64:	3718      	adds	r7, #24
   1af66:	46bd      	mov	sp, r7
   1af68:	bd80      	pop	{r7, pc}

0001af6a <get_trigger>:
{
   1af6a:	b480      	push	{r7}
   1af6c:	b083      	sub	sp, #12
   1af6e:	af00      	add	r7, sp, #0
   1af70:	6078      	str	r0, [r7, #4]
   1af72:	6039      	str	r1, [r7, #0]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1af74:	687b      	ldr	r3, [r7, #4]
   1af76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1af7a:	d107      	bne.n	1af8c <get_trigger+0x22>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1af7c:	683b      	ldr	r3, [r7, #0]
   1af7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1af82:	d101      	bne.n	1af88 <get_trigger+0x1e>
   1af84:	2304      	movs	r3, #4
   1af86:	e00e      	b.n	1afa6 <get_trigger+0x3c>
   1af88:	2305      	movs	r3, #5
   1af8a:	e00c      	b.n	1afa6 <get_trigger+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1af8c:	683b      	ldr	r3, [r7, #0]
   1af8e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1af92:	d007      	beq.n	1afa4 <get_trigger+0x3a>
   1af94:	683b      	ldr	r3, [r7, #0]
   1af96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1af9a:	d101      	bne.n	1afa0 <get_trigger+0x36>
   1af9c:	2302      	movs	r3, #2
   1af9e:	e002      	b.n	1afa6 <get_trigger+0x3c>
   1afa0:	2301      	movs	r3, #1
   1afa2:	e000      	b.n	1afa6 <get_trigger+0x3c>
   1afa4:	2303      	movs	r3, #3
}
   1afa6:	4618      	mov	r0, r3
   1afa8:	370c      	adds	r7, #12
   1afaa:	46bd      	mov	sp, r7
   1afac:	bc80      	pop	{r7}
   1afae:	4770      	bx	lr

0001afb0 <gpio_nrfx_manage_callback>:
{
   1afb0:	b580      	push	{r7, lr}
   1afb2:	b084      	sub	sp, #16
   1afb4:	af00      	add	r7, sp, #0
   1afb6:	60f8      	str	r0, [r7, #12]
   1afb8:	60b9      	str	r1, [r7, #8]
   1afba:	4613      	mov	r3, r2
   1afbc:	71fb      	strb	r3, [r7, #7]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1afbe:	68f8      	ldr	r0, [r7, #12]
   1afc0:	f7ff fec2 	bl	1ad48 <get_port_data>
   1afc4:	4603      	mov	r3, r0
   1afc6:	3304      	adds	r3, #4
   1afc8:	79fa      	ldrb	r2, [r7, #7]
   1afca:	68b9      	ldr	r1, [r7, #8]
   1afcc:	4618      	mov	r0, r3
   1afce:	f7f1 fda5 	bl	cb1c <gpio_manage_callback>
   1afd2:	4603      	mov	r3, r0
}
   1afd4:	4618      	mov	r0, r3
   1afd6:	3710      	adds	r7, #16
   1afd8:	46bd      	mov	sp, r7
   1afda:	bd80      	pop	{r7, pc}

0001afdc <nrfx_gpio_handler>:
{
   1afdc:	b580      	push	{r7, lr}
   1afde:	b08a      	sub	sp, #40	; 0x28
   1afe0:	af00      	add	r7, sp, #0
   1afe2:	60f8      	str	r0, [r7, #12]
   1afe4:	460b      	mov	r3, r1
   1afe6:	607a      	str	r2, [r7, #4]
   1afe8:	72fb      	strb	r3, [r7, #11]
	uint32_t pin = abs_pin;
   1afea:	68fb      	ldr	r3, [r7, #12]
   1afec:	617b      	str	r3, [r7, #20]
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
   1afee:	f107 0314 	add.w	r3, r7, #20
   1aff2:	4618      	mov	r0, r3
   1aff4:	f7ff fd9d 	bl	1ab32 <nrf_gpio_pin_port_number_extract>
   1aff8:	6278      	str	r0, [r7, #36]	; 0x24
	const struct device *port = get_dev(port_id);
   1affa:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1affc:	f7f1 ffc0 	bl	cf80 <get_dev>
   1b000:	6238      	str	r0, [r7, #32]
	if (port == NULL) {
   1b002:	6a3b      	ldr	r3, [r7, #32]
   1b004:	2b00      	cmp	r3, #0
   1b006:	d010      	beq.n	1b02a <nrfx_gpio_handler+0x4e>
	struct gpio_nrfx_data *data = get_port_data(port);
   1b008:	6a38      	ldr	r0, [r7, #32]
   1b00a:	f7ff fe9d 	bl	1ad48 <get_port_data>
   1b00e:	61f8      	str	r0, [r7, #28]
	sys_slist_t *list = &data->callbacks;
   1b010:	69fb      	ldr	r3, [r7, #28]
   1b012:	3304      	adds	r3, #4
   1b014:	61bb      	str	r3, [r7, #24]
	gpio_fire_callbacks(list, port, BIT(pin));
   1b016:	697b      	ldr	r3, [r7, #20]
   1b018:	2201      	movs	r2, #1
   1b01a:	fa02 f303 	lsl.w	r3, r2, r3
   1b01e:	461a      	mov	r2, r3
   1b020:	6a39      	ldr	r1, [r7, #32]
   1b022:	69b8      	ldr	r0, [r7, #24]
   1b024:	f7f1 fde2 	bl	cbec <gpio_fire_callbacks>
   1b028:	e000      	b.n	1b02c <nrfx_gpio_handler+0x50>
		return;
   1b02a:	bf00      	nop
}
   1b02c:	3728      	adds	r7, #40	; 0x28
   1b02e:	46bd      	mov	sp, r7
   1b030:	bd80      	pop	{r7, pc}

0001b032 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1b032:	b480      	push	{r7}
   1b034:	b085      	sub	sp, #20
   1b036:	af00      	add	r7, sp, #0
   1b038:	60f8      	str	r0, [r7, #12]
   1b03a:	460b      	mov	r3, r1
   1b03c:	607a      	str	r2, [r7, #4]
   1b03e:	72fb      	strb	r3, [r7, #11]
	*state = &config->states[0];
   1b040:	68fb      	ldr	r3, [r7, #12]
   1b042:	685a      	ldr	r2, [r3, #4]
   1b044:	687b      	ldr	r3, [r7, #4]
   1b046:	601a      	str	r2, [r3, #0]
	while (*state < &config->states[config->state_cnt]) {
   1b048:	e00d      	b.n	1b066 <pinctrl_lookup_state+0x34>
		if (id == (*state)->id) {
   1b04a:	687b      	ldr	r3, [r7, #4]
   1b04c:	681b      	ldr	r3, [r3, #0]
   1b04e:	795b      	ldrb	r3, [r3, #5]
   1b050:	7afa      	ldrb	r2, [r7, #11]
   1b052:	429a      	cmp	r2, r3
   1b054:	d101      	bne.n	1b05a <pinctrl_lookup_state+0x28>
			return 0;
   1b056:	2300      	movs	r3, #0
   1b058:	e011      	b.n	1b07e <pinctrl_lookup_state+0x4c>
		}

		(*state)++;
   1b05a:	687b      	ldr	r3, [r7, #4]
   1b05c:	681b      	ldr	r3, [r3, #0]
   1b05e:	f103 0208 	add.w	r2, r3, #8
   1b062:	687b      	ldr	r3, [r7, #4]
   1b064:	601a      	str	r2, [r3, #0]
	while (*state < &config->states[config->state_cnt]) {
   1b066:	687b      	ldr	r3, [r7, #4]
   1b068:	681a      	ldr	r2, [r3, #0]
   1b06a:	68fb      	ldr	r3, [r7, #12]
   1b06c:	6859      	ldr	r1, [r3, #4]
   1b06e:	68fb      	ldr	r3, [r7, #12]
   1b070:	7a1b      	ldrb	r3, [r3, #8]
   1b072:	00db      	lsls	r3, r3, #3
   1b074:	440b      	add	r3, r1
   1b076:	429a      	cmp	r2, r3
   1b078:	d3e7      	bcc.n	1b04a <pinctrl_lookup_state+0x18>
	}

	return -ENOENT;
   1b07a:	f06f 0301 	mvn.w	r3, #1
}
   1b07e:	4618      	mov	r0, r3
   1b080:	3714      	adds	r7, #20
   1b082:	46bd      	mov	sp, r7
   1b084:	bc80      	pop	{r7}
   1b086:	4770      	bx	lr

0001b088 <nrf_gpio_pin_set>:
{
   1b088:	b580      	push	{r7, lr}
   1b08a:	b084      	sub	sp, #16
   1b08c:	af00      	add	r7, sp, #0
   1b08e:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b090:	1d3b      	adds	r3, r7, #4
   1b092:	4618      	mov	r0, r3
   1b094:	f7f1 ffb0 	bl	cff8 <nrf_gpio_pin_port_decode>
   1b098:	60f8      	str	r0, [r7, #12]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1b09a:	687b      	ldr	r3, [r7, #4]
   1b09c:	2201      	movs	r2, #1
   1b09e:	fa02 f303 	lsl.w	r3, r2, r3
   1b0a2:	4619      	mov	r1, r3
   1b0a4:	68f8      	ldr	r0, [r7, #12]
   1b0a6:	f000 f82c 	bl	1b102 <nrf_gpio_port_out_set>
}
   1b0aa:	bf00      	nop
   1b0ac:	3710      	adds	r7, #16
   1b0ae:	46bd      	mov	sp, r7
   1b0b0:	bd80      	pop	{r7, pc}

0001b0b2 <nrf_gpio_pin_clear>:
{
   1b0b2:	b580      	push	{r7, lr}
   1b0b4:	b084      	sub	sp, #16
   1b0b6:	af00      	add	r7, sp, #0
   1b0b8:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b0ba:	1d3b      	adds	r3, r7, #4
   1b0bc:	4618      	mov	r0, r3
   1b0be:	f7f1 ff9b 	bl	cff8 <nrf_gpio_pin_port_decode>
   1b0c2:	60f8      	str	r0, [r7, #12]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1b0c4:	687b      	ldr	r3, [r7, #4]
   1b0c6:	2201      	movs	r2, #1
   1b0c8:	fa02 f303 	lsl.w	r3, r2, r3
   1b0cc:	4619      	mov	r1, r3
   1b0ce:	68f8      	ldr	r0, [r7, #12]
   1b0d0:	f000 f824 	bl	1b11c <nrf_gpio_port_out_clear>
}
   1b0d4:	bf00      	nop
   1b0d6:	3710      	adds	r7, #16
   1b0d8:	46bd      	mov	sp, r7
   1b0da:	bd80      	pop	{r7, pc}

0001b0dc <nrf_gpio_pin_write>:
{
   1b0dc:	b580      	push	{r7, lr}
   1b0de:	b082      	sub	sp, #8
   1b0e0:	af00      	add	r7, sp, #0
   1b0e2:	6078      	str	r0, [r7, #4]
   1b0e4:	6039      	str	r1, [r7, #0]
    if (value == 0)
   1b0e6:	683b      	ldr	r3, [r7, #0]
   1b0e8:	2b00      	cmp	r3, #0
   1b0ea:	d103      	bne.n	1b0f4 <nrf_gpio_pin_write+0x18>
        nrf_gpio_pin_clear(pin_number);
   1b0ec:	6878      	ldr	r0, [r7, #4]
   1b0ee:	f7ff ffe0 	bl	1b0b2 <nrf_gpio_pin_clear>
}
   1b0f2:	e002      	b.n	1b0fa <nrf_gpio_pin_write+0x1e>
        nrf_gpio_pin_set(pin_number);
   1b0f4:	6878      	ldr	r0, [r7, #4]
   1b0f6:	f7ff ffc7 	bl	1b088 <nrf_gpio_pin_set>
}
   1b0fa:	bf00      	nop
   1b0fc:	3708      	adds	r7, #8
   1b0fe:	46bd      	mov	sp, r7
   1b100:	bd80      	pop	{r7, pc}

0001b102 <nrf_gpio_port_out_set>:
{
   1b102:	b480      	push	{r7}
   1b104:	b083      	sub	sp, #12
   1b106:	af00      	add	r7, sp, #0
   1b108:	6078      	str	r0, [r7, #4]
   1b10a:	6039      	str	r1, [r7, #0]
    p_reg->OUTSET = set_mask;
   1b10c:	687b      	ldr	r3, [r7, #4]
   1b10e:	683a      	ldr	r2, [r7, #0]
   1b110:	609a      	str	r2, [r3, #8]
}
   1b112:	bf00      	nop
   1b114:	370c      	adds	r7, #12
   1b116:	46bd      	mov	sp, r7
   1b118:	bc80      	pop	{r7}
   1b11a:	4770      	bx	lr

0001b11c <nrf_gpio_port_out_clear>:
{
   1b11c:	b480      	push	{r7}
   1b11e:	b083      	sub	sp, #12
   1b120:	af00      	add	r7, sp, #0
   1b122:	6078      	str	r0, [r7, #4]
   1b124:	6039      	str	r1, [r7, #0]
    p_reg->OUTCLR = clr_mask;
   1b126:	687b      	ldr	r3, [r7, #4]
   1b128:	683a      	ldr	r2, [r7, #0]
   1b12a:	60da      	str	r2, [r3, #12]
}
   1b12c:	bf00      	nop
   1b12e:	370c      	adds	r7, #12
   1b130:	46bd      	mov	sp, r7
   1b132:	bc80      	pop	{r7}
   1b134:	4770      	bx	lr

0001b136 <nrf_gpio_pin_present_check>:
{
   1b136:	b480      	push	{r7}
   1b138:	b085      	sub	sp, #20
   1b13a:	af00      	add	r7, sp, #0
   1b13c:	6078      	str	r0, [r7, #4]
    uint32_t port = pin_number >> 5;
   1b13e:	687b      	ldr	r3, [r7, #4]
   1b140:	095b      	lsrs	r3, r3, #5
   1b142:	60fb      	str	r3, [r7, #12]
    uint32_t mask = 0;
   1b144:	2300      	movs	r3, #0
   1b146:	60bb      	str	r3, [r7, #8]
    switch (port)
   1b148:	68fb      	ldr	r3, [r7, #12]
   1b14a:	2b00      	cmp	r3, #0
   1b14c:	d112      	bne.n	1b174 <nrf_gpio_pin_present_check+0x3e>
        NRF_INTERNAL_GPIO_PORT_MASK_SET(mask);
   1b14e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b152:	60bb      	str	r3, [r7, #8]
    pin_number &= 0x1F;
   1b154:	687b      	ldr	r3, [r7, #4]
   1b156:	f003 031f 	and.w	r3, r3, #31
   1b15a:	607b      	str	r3, [r7, #4]
    return (mask & (1UL << pin_number)) ? true : false;
   1b15c:	68ba      	ldr	r2, [r7, #8]
   1b15e:	687b      	ldr	r3, [r7, #4]
   1b160:	fa22 f303 	lsr.w	r3, r2, r3
   1b164:	f003 0301 	and.w	r3, r3, #1
   1b168:	2b00      	cmp	r3, #0
   1b16a:	bf14      	ite	ne
   1b16c:	2301      	movne	r3, #1
   1b16e:	2300      	moveq	r3, #0
   1b170:	b2db      	uxtb	r3, r3
   1b172:	e000      	b.n	1b176 <nrf_gpio_pin_present_check+0x40>
            return false;
   1b174:	2300      	movs	r3, #0
}
   1b176:	4618      	mov	r0, r3
   1b178:	3714      	adds	r7, #20
   1b17a:	46bd      	mov	sp, r7
   1b17c:	bc80      	pop	{r7}
   1b17e:	4770      	bx	lr

0001b180 <nrf_gpio_pin_port_number_extract>:
{
   1b180:	b480      	push	{r7}
   1b182:	b085      	sub	sp, #20
   1b184:	af00      	add	r7, sp, #0
   1b186:	6078      	str	r0, [r7, #4]
    uint32_t pin_number = *p_pin;
   1b188:	687b      	ldr	r3, [r7, #4]
   1b18a:	681b      	ldr	r3, [r3, #0]
   1b18c:	60fb      	str	r3, [r7, #12]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   1b18e:	68fb      	ldr	r3, [r7, #12]
   1b190:	f003 021f 	and.w	r2, r3, #31
   1b194:	687b      	ldr	r3, [r7, #4]
   1b196:	601a      	str	r2, [r3, #0]
    return NRF_PIN_NUMBER_TO_PORT(pin_number);
   1b198:	68fb      	ldr	r3, [r7, #12]
   1b19a:	095b      	lsrs	r3, r3, #5
}
   1b19c:	4618      	mov	r0, r3
   1b19e:	3714      	adds	r7, #20
   1b1a0:	46bd      	mov	sp, r7
   1b1a2:	bc80      	pop	{r7}
   1b1a4:	4770      	bx	lr

0001b1a6 <nrfx_is_in_ram>:
NRF_STATIC_INLINE uint32_t nrfx_event_to_bitpos(uint32_t event);

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
   1b1a6:	b480      	push	{r7}
   1b1a8:	b083      	sub	sp, #12
   1b1aa:	af00      	add	r7, sp, #0
   1b1ac:	6078      	str	r0, [r7, #4]
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1b1ae:	687b      	ldr	r3, [r7, #4]
   1b1b0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   1b1b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1b1b8:	bf0c      	ite	eq
   1b1ba:	2301      	moveq	r3, #1
   1b1bc:	2300      	movne	r3, #0
   1b1be:	b2db      	uxtb	r3, r3
}
   1b1c0:	4618      	mov	r0, r3
   1b1c2:	370c      	adds	r7, #12
   1b1c4:	46bd      	mov	sp, r7
   1b1c6:	bc80      	pop	{r7}
   1b1c8:	4770      	bx	lr

0001b1ca <nrf_event_readback>:
{
   1b1ca:	b480      	push	{r7}
   1b1cc:	b083      	sub	sp, #12
   1b1ce:	af00      	add	r7, sp, #0
   1b1d0:	6078      	str	r0, [r7, #4]
    (void)*((volatile uint32_t *)(p_event_reg));
   1b1d2:	687b      	ldr	r3, [r7, #4]
   1b1d4:	681b      	ldr	r3, [r3, #0]
}
   1b1d6:	bf00      	nop
   1b1d8:	370c      	adds	r7, #12
   1b1da:	46bd      	mov	sp, r7
   1b1dc:	bc80      	pop	{r7}
   1b1de:	4770      	bx	lr

0001b1e0 <k_msleep>:
{
   1b1e0:	b5b0      	push	{r4, r5, r7, lr}
   1b1e2:	b082      	sub	sp, #8
   1b1e4:	af00      	add	r7, sp, #0
   1b1e6:	6078      	str	r0, [r7, #4]
	return k_sleep(Z_TIMEOUT_MS(ms));
   1b1e8:	687b      	ldr	r3, [r7, #4]
   1b1ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1b1ee:	17da      	asrs	r2, r3, #31
   1b1f0:	461c      	mov	r4, r3
   1b1f2:	4615      	mov	r5, r2
   1b1f4:	4620      	mov	r0, r4
   1b1f6:	4629      	mov	r1, r5
   1b1f8:	f7f2 f8e0 	bl	d3bc <k_ms_to_ticks_ceil64>
   1b1fc:	4602      	mov	r2, r0
   1b1fe:	460b      	mov	r3, r1
   1b200:	4610      	mov	r0, r2
   1b202:	4619      	mov	r1, r3
   1b204:	f000 f81e 	bl	1b244 <k_sleep>
   1b208:	4601      	mov	r1, r0
   1b20a:	460b      	mov	r3, r1
}
   1b20c:	4618      	mov	r0, r3
   1b20e:	3708      	adds	r7, #8
   1b210:	46bd      	mov	sp, r7
   1b212:	bdb0      	pop	{r4, r5, r7, pc}

0001b214 <z_impl_k_timer_user_data_set>:
{
   1b214:	b480      	push	{r7}
   1b216:	b083      	sub	sp, #12
   1b218:	af00      	add	r7, sp, #0
   1b21a:	6078      	str	r0, [r7, #4]
   1b21c:	6039      	str	r1, [r7, #0]
	timer->user_data = user_data;
   1b21e:	687b      	ldr	r3, [r7, #4]
   1b220:	683a      	ldr	r2, [r7, #0]
   1b222:	635a      	str	r2, [r3, #52]	; 0x34
}
   1b224:	bf00      	nop
   1b226:	370c      	adds	r7, #12
   1b228:	46bd      	mov	sp, r7
   1b22a:	bc80      	pop	{r7}
   1b22c:	4770      	bx	lr

0001b22e <z_impl_k_timer_user_data_get>:
{
   1b22e:	b480      	push	{r7}
   1b230:	b083      	sub	sp, #12
   1b232:	af00      	add	r7, sp, #0
   1b234:	6078      	str	r0, [r7, #4]
	return timer->user_data;
   1b236:	687b      	ldr	r3, [r7, #4]
   1b238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
   1b23a:	4618      	mov	r0, r3
   1b23c:	370c      	adds	r7, #12
   1b23e:	46bd      	mov	sp, r7
   1b240:	bc80      	pop	{r7}
   1b242:	4770      	bx	lr

0001b244 <k_sleep>:
{
   1b244:	b580      	push	{r7, lr}
   1b246:	b082      	sub	sp, #8
   1b248:	af00      	add	r7, sp, #0
   1b24a:	e9c7 0100 	strd	r0, r1, [r7]
	return z_impl_k_sleep(timeout);
   1b24e:	e9d7 0100 	ldrd	r0, r1, [r7]
   1b252:	f7fb faff 	bl	16854 <z_impl_k_sleep>
   1b256:	4603      	mov	r3, r0
}
   1b258:	4618      	mov	r0, r3
   1b25a:	3708      	adds	r7, #8
   1b25c:	46bd      	mov	sp, r7
   1b25e:	bd80      	pop	{r7, pc}

0001b260 <k_timer_start>:
{
   1b260:	b580      	push	{r7, lr}
   1b262:	b086      	sub	sp, #24
   1b264:	af02      	add	r7, sp, #8
   1b266:	60f8      	str	r0, [r7, #12]
   1b268:	e9c7 2300 	strd	r2, r3, [r7]
	z_impl_k_timer_start(timer, duration, period);
   1b26c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1b270:	e9cd 2300 	strd	r2, r3, [sp]
   1b274:	e9d7 2300 	ldrd	r2, r3, [r7]
   1b278:	68f8      	ldr	r0, [r7, #12]
   1b27a:	f7fc fabd 	bl	177f8 <z_impl_k_timer_start>
}
   1b27e:	bf00      	nop
   1b280:	3710      	adds	r7, #16
   1b282:	46bd      	mov	sp, r7
   1b284:	bd80      	pop	{r7, pc}

0001b286 <k_timer_stop>:
{
   1b286:	b580      	push	{r7, lr}
   1b288:	b082      	sub	sp, #8
   1b28a:	af00      	add	r7, sp, #0
   1b28c:	6078      	str	r0, [r7, #4]
	z_impl_k_timer_stop(timer);
   1b28e:	6878      	ldr	r0, [r7, #4]
   1b290:	f004 f99e 	bl	1f5d0 <z_impl_k_timer_stop>
}
   1b294:	bf00      	nop
   1b296:	3708      	adds	r7, #8
   1b298:	46bd      	mov	sp, r7
   1b29a:	bd80      	pop	{r7, pc}

0001b29c <k_timer_user_data_set>:
{
   1b29c:	b580      	push	{r7, lr}
   1b29e:	b082      	sub	sp, #8
   1b2a0:	af00      	add	r7, sp, #0
   1b2a2:	6078      	str	r0, [r7, #4]
   1b2a4:	6039      	str	r1, [r7, #0]
	z_impl_k_timer_user_data_set(timer, user_data);
   1b2a6:	6839      	ldr	r1, [r7, #0]
   1b2a8:	6878      	ldr	r0, [r7, #4]
   1b2aa:	f7ff ffb3 	bl	1b214 <z_impl_k_timer_user_data_set>
}
   1b2ae:	bf00      	nop
   1b2b0:	3708      	adds	r7, #8
   1b2b2:	46bd      	mov	sp, r7
   1b2b4:	bd80      	pop	{r7, pc}

0001b2b6 <k_timer_user_data_get>:
{
   1b2b6:	b580      	push	{r7, lr}
   1b2b8:	b082      	sub	sp, #8
   1b2ba:	af00      	add	r7, sp, #0
   1b2bc:	6078      	str	r0, [r7, #4]
	return z_impl_k_timer_user_data_get(timer);
   1b2be:	6878      	ldr	r0, [r7, #4]
   1b2c0:	f7ff ffb5 	bl	1b22e <z_impl_k_timer_user_data_get>
   1b2c4:	4603      	mov	r3, r0
}
   1b2c6:	4618      	mov	r0, r3
   1b2c8:	3708      	adds	r7, #8
   1b2ca:	46bd      	mov	sp, r7
   1b2cc:	bd80      	pop	{r7, pc}

0001b2ce <nrf_uarte_event_clear>:
 */
NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg);

#ifndef NRF_DECLARE_ONLY
NRF_STATIC_INLINE void nrf_uarte_event_clear(NRF_UARTE_Type * p_reg, nrf_uarte_event_t event)
{
   1b2ce:	b580      	push	{r7, lr}
   1b2d0:	b082      	sub	sp, #8
   1b2d2:	af00      	add	r7, sp, #0
   1b2d4:	6078      	str	r0, [r7, #4]
   1b2d6:	460b      	mov	r3, r1
   1b2d8:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b2da:	887b      	ldrh	r3, [r7, #2]
   1b2dc:	687a      	ldr	r2, [r7, #4]
   1b2de:	4413      	add	r3, r2
   1b2e0:	2200      	movs	r2, #0
   1b2e2:	601a      	str	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
   1b2e4:	887b      	ldrh	r3, [r7, #2]
   1b2e6:	687a      	ldr	r2, [r7, #4]
   1b2e8:	4413      	add	r3, r2
   1b2ea:	4618      	mov	r0, r3
   1b2ec:	f7ff ff6d 	bl	1b1ca <nrf_event_readback>
}
   1b2f0:	bf00      	nop
   1b2f2:	3708      	adds	r7, #8
   1b2f4:	46bd      	mov	sp, r7
   1b2f6:	bd80      	pop	{r7, pc}

0001b2f8 <nrf_uarte_event_check>:

NRF_STATIC_INLINE bool nrf_uarte_event_check(NRF_UARTE_Type const * p_reg,
                                             nrf_uarte_event_t      event)
{
   1b2f8:	b480      	push	{r7}
   1b2fa:	b083      	sub	sp, #12
   1b2fc:	af00      	add	r7, sp, #0
   1b2fe:	6078      	str	r0, [r7, #4]
   1b300:	460b      	mov	r3, r1
   1b302:	807b      	strh	r3, [r7, #2]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b304:	887b      	ldrh	r3, [r7, #2]
   1b306:	687a      	ldr	r2, [r7, #4]
   1b308:	4413      	add	r3, r2
   1b30a:	681b      	ldr	r3, [r3, #0]
   1b30c:	2b00      	cmp	r3, #0
   1b30e:	bf14      	ite	ne
   1b310:	2301      	movne	r3, #1
   1b312:	2300      	moveq	r3, #0
   1b314:	b2db      	uxtb	r3, r3
}
   1b316:	4618      	mov	r0, r3
   1b318:	370c      	adds	r7, #12
   1b31a:	46bd      	mov	sp, r7
   1b31c:	bc80      	pop	{r7}
   1b31e:	4770      	bx	lr

0001b320 <nrf_uarte_event_address_get>:

NRF_STATIC_INLINE uint32_t nrf_uarte_event_address_get(NRF_UARTE_Type const * p_reg,
                                                       nrf_uarte_event_t      event)
{
   1b320:	b480      	push	{r7}
   1b322:	b083      	sub	sp, #12
   1b324:	af00      	add	r7, sp, #0
   1b326:	6078      	str	r0, [r7, #4]
   1b328:	460b      	mov	r3, r1
   1b32a:	807b      	strh	r3, [r7, #2]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1b32c:	887b      	ldrh	r3, [r7, #2]
   1b32e:	687a      	ldr	r2, [r7, #4]
   1b330:	4413      	add	r3, r2
}
   1b332:	4618      	mov	r0, r3
   1b334:	370c      	adds	r7, #12
   1b336:	46bd      	mov	sp, r7
   1b338:	bc80      	pop	{r7}
   1b33a:	4770      	bx	lr

0001b33c <nrf_uarte_shorts_enable>:

NRF_STATIC_INLINE void nrf_uarte_shorts_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
   1b33c:	b480      	push	{r7}
   1b33e:	b083      	sub	sp, #12
   1b340:	af00      	add	r7, sp, #0
   1b342:	6078      	str	r0, [r7, #4]
   1b344:	6039      	str	r1, [r7, #0]
    p_reg->SHORTS |= mask;
   1b346:	687b      	ldr	r3, [r7, #4]
   1b348:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1b34c:	683b      	ldr	r3, [r7, #0]
   1b34e:	431a      	orrs	r2, r3
   1b350:	687b      	ldr	r3, [r7, #4]
   1b352:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   1b356:	bf00      	nop
   1b358:	370c      	adds	r7, #12
   1b35a:	46bd      	mov	sp, r7
   1b35c:	bc80      	pop	{r7}
   1b35e:	4770      	bx	lr

0001b360 <nrf_uarte_shorts_disable>:

NRF_STATIC_INLINE void nrf_uarte_shorts_disable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
   1b360:	b480      	push	{r7}
   1b362:	b083      	sub	sp, #12
   1b364:	af00      	add	r7, sp, #0
   1b366:	6078      	str	r0, [r7, #4]
   1b368:	6039      	str	r1, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1b36a:	687b      	ldr	r3, [r7, #4]
   1b36c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1b370:	683b      	ldr	r3, [r7, #0]
   1b372:	43db      	mvns	r3, r3
   1b374:	401a      	ands	r2, r3
   1b376:	687b      	ldr	r3, [r7, #4]
   1b378:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   1b37c:	bf00      	nop
   1b37e:	370c      	adds	r7, #12
   1b380:	46bd      	mov	sp, r7
   1b382:	bc80      	pop	{r7}
   1b384:	4770      	bx	lr

0001b386 <nrf_uarte_int_enable>:

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
   1b386:	b480      	push	{r7}
   1b388:	b083      	sub	sp, #12
   1b38a:	af00      	add	r7, sp, #0
   1b38c:	6078      	str	r0, [r7, #4]
   1b38e:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   1b390:	687b      	ldr	r3, [r7, #4]
   1b392:	683a      	ldr	r2, [r7, #0]
   1b394:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1b398:	bf00      	nop
   1b39a:	370c      	adds	r7, #12
   1b39c:	46bd      	mov	sp, r7
   1b39e:	bc80      	pop	{r7}
   1b3a0:	4770      	bx	lr

0001b3a2 <nrf_uarte_int_enable_check>:

NRF_STATIC_INLINE uint32_t nrf_uarte_int_enable_check(NRF_UARTE_Type const * p_reg, uint32_t mask)
{
   1b3a2:	b480      	push	{r7}
   1b3a4:	b083      	sub	sp, #12
   1b3a6:	af00      	add	r7, sp, #0
   1b3a8:	6078      	str	r0, [r7, #4]
   1b3aa:	6039      	str	r1, [r7, #0]
    return p_reg->INTENSET & mask;
   1b3ac:	687b      	ldr	r3, [r7, #4]
   1b3ae:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   1b3b2:	683b      	ldr	r3, [r7, #0]
   1b3b4:	4013      	ands	r3, r2
}
   1b3b6:	4618      	mov	r0, r3
   1b3b8:	370c      	adds	r7, #12
   1b3ba:	46bd      	mov	sp, r7
   1b3bc:	bc80      	pop	{r7}
   1b3be:	4770      	bx	lr

0001b3c0 <nrf_uarte_int_disable>:

NRF_STATIC_INLINE void nrf_uarte_int_disable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
   1b3c0:	b480      	push	{r7}
   1b3c2:	b083      	sub	sp, #12
   1b3c4:	af00      	add	r7, sp, #0
   1b3c6:	6078      	str	r0, [r7, #4]
   1b3c8:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   1b3ca:	687b      	ldr	r3, [r7, #4]
   1b3cc:	683a      	ldr	r2, [r7, #0]
   1b3ce:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1b3d2:	bf00      	nop
   1b3d4:	370c      	adds	r7, #12
   1b3d6:	46bd      	mov	sp, r7
   1b3d8:	bc80      	pop	{r7}
   1b3da:	4770      	bx	lr

0001b3dc <nrf_uarte_errorsrc_get_and_clear>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
}
#endif // defined(DPPI_PRESENT)

NRF_STATIC_INLINE uint32_t nrf_uarte_errorsrc_get_and_clear(NRF_UARTE_Type * p_reg)
{
   1b3dc:	b480      	push	{r7}
   1b3de:	b085      	sub	sp, #20
   1b3e0:	af00      	add	r7, sp, #0
   1b3e2:	6078      	str	r0, [r7, #4]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1b3e4:	687b      	ldr	r3, [r7, #4]
   1b3e6:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
   1b3ea:	60fb      	str	r3, [r7, #12]
    p_reg->ERRORSRC = errsrc_mask;
   1b3ec:	687b      	ldr	r3, [r7, #4]
   1b3ee:	68fa      	ldr	r2, [r7, #12]
   1b3f0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    return errsrc_mask;
   1b3f4:	68fb      	ldr	r3, [r7, #12]
}
   1b3f6:	4618      	mov	r0, r3
   1b3f8:	3714      	adds	r7, #20
   1b3fa:	46bd      	mov	sp, r7
   1b3fc:	bc80      	pop	{r7}
   1b3fe:	4770      	bx	lr

0001b400 <nrf_uarte_enable>:

NRF_STATIC_INLINE void nrf_uarte_enable(NRF_UARTE_Type * p_reg)
{
   1b400:	b480      	push	{r7}
   1b402:	b083      	sub	sp, #12
   1b404:	af00      	add	r7, sp, #0
   1b406:	6078      	str	r0, [r7, #4]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b408:	687b      	ldr	r3, [r7, #4]
   1b40a:	2208      	movs	r2, #8
   1b40c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1b410:	bf00      	nop
   1b412:	370c      	adds	r7, #12
   1b414:	46bd      	mov	sp, r7
   1b416:	bc80      	pop	{r7}
   1b418:	4770      	bx	lr

0001b41a <nrf_uarte_disable>:

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
   1b41a:	b480      	push	{r7}
   1b41c:	b083      	sub	sp, #12
   1b41e:	af00      	add	r7, sp, #0
   1b420:	6078      	str	r0, [r7, #4]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1b422:	687b      	ldr	r3, [r7, #4]
   1b424:	2200      	movs	r2, #0
   1b426:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1b42a:	bf00      	nop
   1b42c:	370c      	adds	r7, #12
   1b42e:	46bd      	mov	sp, r7
   1b430:	bc80      	pop	{r7}
   1b432:	4770      	bx	lr

0001b434 <nrf_uarte_task_trigger>:
{
    nrf_uarte_hwfc_pins_set(p_reg, NRF_UARTE_PSEL_DISCONNECTED, NRF_UARTE_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE void nrf_uarte_task_trigger(NRF_UARTE_Type * p_reg, nrf_uarte_task_t task)
{
   1b434:	b480      	push	{r7}
   1b436:	b083      	sub	sp, #12
   1b438:	af00      	add	r7, sp, #0
   1b43a:	6078      	str	r0, [r7, #4]
   1b43c:	460b      	mov	r3, r1
   1b43e:	70fb      	strb	r3, [r7, #3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b440:	78fb      	ldrb	r3, [r7, #3]
   1b442:	687a      	ldr	r2, [r7, #4]
   1b444:	4413      	add	r3, r2
   1b446:	2201      	movs	r2, #1
   1b448:	601a      	str	r2, [r3, #0]
}
   1b44a:	bf00      	nop
   1b44c:	370c      	adds	r7, #12
   1b44e:	46bd      	mov	sp, r7
   1b450:	bc80      	pop	{r7}
   1b452:	4770      	bx	lr

0001b454 <nrf_uarte_task_address_get>:

NRF_STATIC_INLINE uint32_t nrf_uarte_task_address_get(NRF_UARTE_Type const * p_reg,
                                                      nrf_uarte_task_t       task)
{
   1b454:	b480      	push	{r7}
   1b456:	b083      	sub	sp, #12
   1b458:	af00      	add	r7, sp, #0
   1b45a:	6078      	str	r0, [r7, #4]
   1b45c:	460b      	mov	r3, r1
   1b45e:	70fb      	strb	r3, [r7, #3]
    return (uint32_t)p_reg + (uint32_t)task;
   1b460:	78fa      	ldrb	r2, [r7, #3]
   1b462:	687b      	ldr	r3, [r7, #4]
   1b464:	4413      	add	r3, r2
}
   1b466:	4618      	mov	r0, r3
   1b468:	370c      	adds	r7, #12
   1b46a:	46bd      	mov	sp, r7
   1b46c:	bc80      	pop	{r7}
   1b46e:	4770      	bx	lr

0001b470 <nrf_uarte_configure>:

NRF_STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type           * p_reg,
                                           nrf_uarte_config_t const * p_cfg)
{
   1b470:	b480      	push	{r7}
   1b472:	b083      	sub	sp, #12
   1b474:	af00      	add	r7, sp, #0
   1b476:	6078      	str	r0, [r7, #4]
   1b478:	6039      	str	r1, [r7, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1b47a:	683b      	ldr	r3, [r7, #0]
   1b47c:	785a      	ldrb	r2, [r3, #1]
#if defined(UARTE_CONFIG_STOP_Msk)
                    | (uint32_t)p_cfg->stop
   1b47e:	683b      	ldr	r3, [r7, #0]
   1b480:	789b      	ldrb	r3, [r3, #2]
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
   1b482:	4313      	orrs	r3, r2
   1b484:	b2da      	uxtb	r2, r3
   1b486:	683b      	ldr	r3, [r7, #0]
   1b488:	781b      	ldrb	r3, [r3, #0]
   1b48a:	4313      	orrs	r3, r2
   1b48c:	b2db      	uxtb	r3, r3
   1b48e:	461a      	mov	r2, r3
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1b490:	687b      	ldr	r3, [r7, #4]
   1b492:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
}
   1b496:	bf00      	nop
   1b498:	370c      	adds	r7, #12
   1b49a:	46bd      	mov	sp, r7
   1b49c:	bc80      	pop	{r7}
   1b49e:	4770      	bx	lr

0001b4a0 <nrf_uarte_baudrate_set>:

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
   1b4a0:	b480      	push	{r7}
   1b4a2:	b083      	sub	sp, #12
   1b4a4:	af00      	add	r7, sp, #0
   1b4a6:	6078      	str	r0, [r7, #4]
   1b4a8:	6039      	str	r1, [r7, #0]
    p_reg->BAUDRATE = baudrate;
   1b4aa:	687b      	ldr	r3, [r7, #4]
   1b4ac:	683a      	ldr	r2, [r7, #0]
   1b4ae:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
   1b4b2:	bf00      	nop
   1b4b4:	370c      	adds	r7, #12
   1b4b6:	46bd      	mov	sp, r7
   1b4b8:	bc80      	pop	{r7}
   1b4ba:	4770      	bx	lr

0001b4bc <nrf_uarte_tx_buffer_set>:

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
   1b4bc:	b480      	push	{r7}
   1b4be:	b085      	sub	sp, #20
   1b4c0:	af00      	add	r7, sp, #0
   1b4c2:	60f8      	str	r0, [r7, #12]
   1b4c4:	60b9      	str	r1, [r7, #8]
   1b4c6:	607a      	str	r2, [r7, #4]
#if NRF_UARTE_HAS_DMA_REG
    p_reg->DMA.TX.PTR    = (uint32_t)p_buffer;
    p_reg->DMA.TX.MAXCNT = length;
#else
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1b4c8:	68ba      	ldr	r2, [r7, #8]
   1b4ca:	68fb      	ldr	r3, [r7, #12]
   1b4cc:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1b4d0:	68fb      	ldr	r3, [r7, #12]
   1b4d2:	687a      	ldr	r2, [r7, #4]
   1b4d4:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
#endif
}
   1b4d8:	bf00      	nop
   1b4da:	3714      	adds	r7, #20
   1b4dc:	46bd      	mov	sp, r7
   1b4de:	bc80      	pop	{r7}
   1b4e0:	4770      	bx	lr

0001b4e2 <nrf_uarte_tx_amount_get>:

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
   1b4e2:	b480      	push	{r7}
   1b4e4:	b083      	sub	sp, #12
   1b4e6:	af00      	add	r7, sp, #0
   1b4e8:	6078      	str	r0, [r7, #4]
#if NRF_UARTE_HAS_DMA_REG
    return p_reg->DMA.TX.AMOUNT;
#else
    return p_reg->TXD.AMOUNT;
   1b4ea:	687b      	ldr	r3, [r7, #4]
   1b4ec:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
#endif
}
   1b4f0:	4618      	mov	r0, r3
   1b4f2:	370c      	adds	r7, #12
   1b4f4:	46bd      	mov	sp, r7
   1b4f6:	bc80      	pop	{r7}
   1b4f8:	4770      	bx	lr

0001b4fa <nrf_uarte_rx_buffer_set>:

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
   1b4fa:	b480      	push	{r7}
   1b4fc:	b085      	sub	sp, #20
   1b4fe:	af00      	add	r7, sp, #0
   1b500:	60f8      	str	r0, [r7, #12]
   1b502:	60b9      	str	r1, [r7, #8]
   1b504:	607a      	str	r2, [r7, #4]
#if NRF_UARTE_HAS_DMA_REG
    p_reg->DMA.RX.PTR    = (uint32_t)p_buffer;
    p_reg->DMA.RX.MAXCNT = length;
#else
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b506:	68ba      	ldr	r2, [r7, #8]
   1b508:	68fb      	ldr	r3, [r7, #12]
   1b50a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1b50e:	68fb      	ldr	r3, [r7, #12]
   1b510:	687a      	ldr	r2, [r7, #4]
   1b512:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
#endif
}
   1b516:	bf00      	nop
   1b518:	3714      	adds	r7, #20
   1b51a:	46bd      	mov	sp, r7
   1b51c:	bc80      	pop	{r7}
   1b51e:	4770      	bx	lr

0001b520 <nrf_uarte_rx_amount_get>:

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
   1b520:	b480      	push	{r7}
   1b522:	b083      	sub	sp, #12
   1b524:	af00      	add	r7, sp, #0
   1b526:	6078      	str	r0, [r7, #4]
#if NRF_UARTE_HAS_DMA_REG
    return p_reg->DMA.RX.AMOUNT;
#else
    return p_reg->RXD.AMOUNT;
   1b528:	687b      	ldr	r3, [r7, #4]
   1b52a:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
#endif
}
   1b52e:	4618      	mov	r0, r3
   1b530:	370c      	adds	r7, #12
   1b532:	46bd      	mov	sp, r7
   1b534:	bc80      	pop	{r7}
   1b536:	4770      	bx	lr

0001b538 <pinctrl_apply_state_direct>:
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state_direct(
	const struct pinctrl_dev_config *config,
	const struct pinctrl_state *state)
{
   1b538:	b580      	push	{r7, lr}
   1b53a:	b084      	sub	sp, #16
   1b53c:	af00      	add	r7, sp, #0
   1b53e:	6078      	str	r0, [r7, #4]
   1b540:	6039      	str	r1, [r7, #0]
	uintptr_t reg;

#ifdef CONFIG_PINCTRL_STORE_REG
	reg = config->reg;
   1b542:	687b      	ldr	r3, [r7, #4]
   1b544:	681b      	ldr	r3, [r3, #0]
   1b546:	60fb      	str	r3, [r7, #12]
#else
	ARG_UNUSED(config);
	reg = PINCTRL_REG_NONE;
#endif

	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1b548:	683b      	ldr	r3, [r7, #0]
   1b54a:	6818      	ldr	r0, [r3, #0]
   1b54c:	683b      	ldr	r3, [r7, #0]
   1b54e:	791b      	ldrb	r3, [r3, #4]
   1b550:	68fa      	ldr	r2, [r7, #12]
   1b552:	4619      	mov	r1, r3
   1b554:	f7f1 fdd0 	bl	d0f8 <pinctrl_configure_pins>
   1b558:	4603      	mov	r3, r0
}
   1b55a:	4618      	mov	r0, r3
   1b55c:	3710      	adds	r7, #16
   1b55e:	46bd      	mov	sp, r7
   1b560:	bd80      	pop	{r7, pc}

0001b562 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   1b562:	b580      	push	{r7, lr}
   1b564:	b084      	sub	sp, #16
   1b566:	af00      	add	r7, sp, #0
   1b568:	6078      	str	r0, [r7, #4]
   1b56a:	460b      	mov	r3, r1
   1b56c:	70fb      	strb	r3, [r7, #3]
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1b56e:	f107 0208 	add.w	r2, r7, #8
   1b572:	78fb      	ldrb	r3, [r7, #3]
   1b574:	4619      	mov	r1, r3
   1b576:	6878      	ldr	r0, [r7, #4]
   1b578:	f7ff fd5b 	bl	1b032 <pinctrl_lookup_state>
   1b57c:	60f8      	str	r0, [r7, #12]
	if (ret < 0) {
   1b57e:	68fb      	ldr	r3, [r7, #12]
   1b580:	2b00      	cmp	r3, #0
   1b582:	da01      	bge.n	1b588 <pinctrl_apply_state+0x26>
		return ret;
   1b584:	68fb      	ldr	r3, [r7, #12]
   1b586:	e005      	b.n	1b594 <pinctrl_apply_state+0x32>
	}

	return pinctrl_apply_state_direct(config, state);
   1b588:	68bb      	ldr	r3, [r7, #8]
   1b58a:	4619      	mov	r1, r3
   1b58c:	6878      	ldr	r0, [r7, #4]
   1b58e:	f7ff ffd3 	bl	1b538 <pinctrl_apply_state_direct>
   1b592:	4603      	mov	r3, r0
}
   1b594:	4618      	mov	r0, r3
   1b596:	3710      	adds	r7, #16
   1b598:	46bd      	mov	sp, r7
   1b59a:	bd80      	pop	{r7, pc}

0001b59c <get_uarte_instance>:
{
   1b59c:	b480      	push	{r7}
   1b59e:	b085      	sub	sp, #20
   1b5a0:	af00      	add	r7, sp, #0
   1b5a2:	6078      	str	r0, [r7, #4]
	const struct uarte_nrfx_config *config = dev->config;
   1b5a4:	687b      	ldr	r3, [r7, #4]
   1b5a6:	685b      	ldr	r3, [r3, #4]
   1b5a8:	60fb      	str	r3, [r7, #12]
	return config->uarte_regs;
   1b5aa:	68fb      	ldr	r3, [r7, #12]
   1b5ac:	681b      	ldr	r3, [r3, #0]
}
   1b5ae:	4618      	mov	r0, r3
   1b5b0:	3714      	adds	r7, #20
   1b5b2:	46bd      	mov	sp, r7
   1b5b4:	bc80      	pop	{r7}
   1b5b6:	4770      	bx	lr

0001b5b8 <endtx_isr>:
{
   1b5b8:	b580      	push	{r7, lr}
   1b5ba:	b088      	sub	sp, #32
   1b5bc:	af00      	add	r7, sp, #0
   1b5be:	6078      	str	r0, [r7, #4]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1b5c0:	6878      	ldr	r0, [r7, #4]
   1b5c2:	f7ff ffeb 	bl	1b59c <get_uarte_instance>
   1b5c6:	61f8      	str	r0, [r7, #28]
	__asm__ volatile(
   1b5c8:	f04f 0320 	mov.w	r3, #32
   1b5cc:	f3ef 8211 	mrs	r2, BASEPRI
   1b5d0:	f383 8812 	msr	BASEPRI_MAX, r3
   1b5d4:	f3bf 8f6f 	isb	sy
   1b5d8:	617a      	str	r2, [r7, #20]
   1b5da:	613b      	str	r3, [r7, #16]
	return key;
   1b5dc:	697b      	ldr	r3, [r7, #20]
	unsigned int key = irq_lock();
   1b5de:	61bb      	str	r3, [r7, #24]
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1b5e0:	f44f 7190 	mov.w	r1, #288	; 0x120
   1b5e4:	69f8      	ldr	r0, [r7, #28]
   1b5e6:	f7ff fe87 	bl	1b2f8 <nrf_uarte_event_check>
   1b5ea:	4603      	mov	r3, r0
   1b5ec:	2b00      	cmp	r3, #0
   1b5ee:	d008      	beq.n	1b602 <endtx_isr+0x4a>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
   1b5f0:	f44f 7190 	mov.w	r1, #288	; 0x120
   1b5f4:	69f8      	ldr	r0, [r7, #28]
   1b5f6:	f7ff fe6a 	bl	1b2ce <nrf_uarte_event_clear>
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
   1b5fa:	210c      	movs	r1, #12
   1b5fc:	69f8      	ldr	r0, [r7, #28]
   1b5fe:	f7ff ff19 	bl	1b434 <nrf_uarte_task_trigger>
   1b602:	69bb      	ldr	r3, [r7, #24]
   1b604:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   1b606:	68fb      	ldr	r3, [r7, #12]
   1b608:	f383 8811 	msr	BASEPRI, r3
   1b60c:	f3bf 8f6f 	isb	sy
}
   1b610:	bf00      	nop
}
   1b612:	bf00      	nop
   1b614:	3720      	adds	r7, #32
   1b616:	46bd      	mov	sp, r7
   1b618:	bd80      	pop	{r7, pc}

0001b61a <uarte_nrfx_configure>:
{
   1b61a:	b580      	push	{r7, lr}
   1b61c:	b084      	sub	sp, #16
   1b61e:	af00      	add	r7, sp, #0
   1b620:	6078      	str	r0, [r7, #4]
   1b622:	6039      	str	r1, [r7, #0]
	struct uarte_nrfx_data *data = dev->data;
   1b624:	687b      	ldr	r3, [r7, #4]
   1b626:	691b      	ldr	r3, [r3, #16]
   1b628:	60fb      	str	r3, [r7, #12]
	switch (cfg->stop_bits) {
   1b62a:	683b      	ldr	r3, [r7, #0]
   1b62c:	795b      	ldrb	r3, [r3, #5]
   1b62e:	2b01      	cmp	r3, #1
   1b630:	d002      	beq.n	1b638 <uarte_nrfx_configure+0x1e>
   1b632:	2b03      	cmp	r3, #3
   1b634:	d003      	beq.n	1b63e <uarte_nrfx_configure+0x24>
   1b636:	e005      	b.n	1b644 <uarte_nrfx_configure+0x2a>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   1b638:	2300      	movs	r3, #0
   1b63a:	72bb      	strb	r3, [r7, #10]
		break;
   1b63c:	e005      	b.n	1b64a <uarte_nrfx_configure+0x30>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1b63e:	2310      	movs	r3, #16
   1b640:	72bb      	strb	r3, [r7, #10]
		break;
   1b642:	e002      	b.n	1b64a <uarte_nrfx_configure+0x30>
		return -ENOTSUP;
   1b644:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1b648:	e044      	b.n	1b6d4 <uarte_nrfx_configure+0xba>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1b64a:	683b      	ldr	r3, [r7, #0]
   1b64c:	799b      	ldrb	r3, [r3, #6]
   1b64e:	2b03      	cmp	r3, #3
   1b650:	d002      	beq.n	1b658 <uarte_nrfx_configure+0x3e>
		return -ENOTSUP;
   1b652:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1b656:	e03d      	b.n	1b6d4 <uarte_nrfx_configure+0xba>
	switch (cfg->flow_ctrl) {
   1b658:	683b      	ldr	r3, [r7, #0]
   1b65a:	79db      	ldrb	r3, [r3, #7]
   1b65c:	2b00      	cmp	r3, #0
   1b65e:	d002      	beq.n	1b666 <uarte_nrfx_configure+0x4c>
   1b660:	2b01      	cmp	r3, #1
   1b662:	d003      	beq.n	1b66c <uarte_nrfx_configure+0x52>
   1b664:	e005      	b.n	1b672 <uarte_nrfx_configure+0x58>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   1b666:	2300      	movs	r3, #0
   1b668:	723b      	strb	r3, [r7, #8]
		break;
   1b66a:	e005      	b.n	1b678 <uarte_nrfx_configure+0x5e>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   1b66c:	2301      	movs	r3, #1
   1b66e:	723b      	strb	r3, [r7, #8]
		break;
   1b670:	e002      	b.n	1b678 <uarte_nrfx_configure+0x5e>
		return -ENOTSUP;
   1b672:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1b676:	e02d      	b.n	1b6d4 <uarte_nrfx_configure+0xba>
	switch (cfg->parity) {
   1b678:	683b      	ldr	r3, [r7, #0]
   1b67a:	791b      	ldrb	r3, [r3, #4]
   1b67c:	2b00      	cmp	r3, #0
   1b67e:	d002      	beq.n	1b686 <uarte_nrfx_configure+0x6c>
   1b680:	2b02      	cmp	r3, #2
   1b682:	d003      	beq.n	1b68c <uarte_nrfx_configure+0x72>
   1b684:	e005      	b.n	1b692 <uarte_nrfx_configure+0x78>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   1b686:	2300      	movs	r3, #0
   1b688:	727b      	strb	r3, [r7, #9]
		break;
   1b68a:	e005      	b.n	1b698 <uarte_nrfx_configure+0x7e>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1b68c:	230e      	movs	r3, #14
   1b68e:	727b      	strb	r3, [r7, #9]
		break;
   1b690:	e002      	b.n	1b698 <uarte_nrfx_configure+0x7e>
		return -ENOTSUP;
   1b692:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1b696:	e01d      	b.n	1b6d4 <uarte_nrfx_configure+0xba>
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1b698:	683b      	ldr	r3, [r7, #0]
   1b69a:	681b      	ldr	r3, [r3, #0]
   1b69c:	4619      	mov	r1, r3
   1b69e:	6878      	ldr	r0, [r7, #4]
   1b6a0:	f7f2 fb7e 	bl	dda0 <baudrate_set>
   1b6a4:	4603      	mov	r3, r0
   1b6a6:	2b00      	cmp	r3, #0
   1b6a8:	d002      	beq.n	1b6b0 <uarte_nrfx_configure+0x96>
		return -ENOTSUP;
   1b6aa:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1b6ae:	e011      	b.n	1b6d4 <uarte_nrfx_configure+0xba>
	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);
   1b6b0:	6878      	ldr	r0, [r7, #4]
   1b6b2:	f7ff ff73 	bl	1b59c <get_uarte_instance>
   1b6b6:	4602      	mov	r2, r0
   1b6b8:	f107 0308 	add.w	r3, r7, #8
   1b6bc:	4619      	mov	r1, r3
   1b6be:	4610      	mov	r0, r2
   1b6c0:	f7ff fed6 	bl	1b470 <nrf_uarte_configure>
	data->uart_config = *cfg;
   1b6c4:	68fb      	ldr	r3, [r7, #12]
   1b6c6:	683a      	ldr	r2, [r7, #0]
   1b6c8:	3304      	adds	r3, #4
   1b6ca:	e892 0003 	ldmia.w	r2, {r0, r1}
   1b6ce:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1b6d2:	2300      	movs	r3, #0
}
   1b6d4:	4618      	mov	r0, r3
   1b6d6:	3710      	adds	r7, #16
   1b6d8:	46bd      	mov	sp, r7
   1b6da:	bd80      	pop	{r7, pc}

0001b6dc <uarte_nrfx_config_get>:
{
   1b6dc:	b480      	push	{r7}
   1b6de:	b085      	sub	sp, #20
   1b6e0:	af00      	add	r7, sp, #0
   1b6e2:	6078      	str	r0, [r7, #4]
   1b6e4:	6039      	str	r1, [r7, #0]
	struct uarte_nrfx_data *data = dev->data;
   1b6e6:	687b      	ldr	r3, [r7, #4]
   1b6e8:	691b      	ldr	r3, [r3, #16]
   1b6ea:	60fb      	str	r3, [r7, #12]
	*cfg = data->uart_config;
   1b6ec:	683a      	ldr	r2, [r7, #0]
   1b6ee:	68fb      	ldr	r3, [r7, #12]
   1b6f0:	3304      	adds	r3, #4
   1b6f2:	e893 0003 	ldmia.w	r3, {r0, r1}
   1b6f6:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   1b6fa:	2300      	movs	r3, #0
}
   1b6fc:	4618      	mov	r0, r3
   1b6fe:	3714      	adds	r7, #20
   1b700:	46bd      	mov	sp, r7
   1b702:	bc80      	pop	{r7}
   1b704:	4770      	bx	lr

0001b706 <uarte_nrfx_err_check>:
{
   1b706:	b580      	push	{r7, lr}
   1b708:	b084      	sub	sp, #16
   1b70a:	af00      	add	r7, sp, #0
   1b70c:	6078      	str	r0, [r7, #4]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1b70e:	6878      	ldr	r0, [r7, #4]
   1b710:	f7ff ff44 	bl	1b59c <get_uarte_instance>
   1b714:	60f8      	str	r0, [r7, #12]
	return nrf_uarte_errorsrc_get_and_clear(uarte);
   1b716:	68f8      	ldr	r0, [r7, #12]
   1b718:	f7ff fe60 	bl	1b3dc <nrf_uarte_errorsrc_get_and_clear>
   1b71c:	4603      	mov	r3, r0
}
   1b71e:	4618      	mov	r0, r3
   1b720:	3710      	adds	r7, #16
   1b722:	46bd      	mov	sp, r7
   1b724:	bd80      	pop	{r7, pc}

0001b726 <is_tx_ready>:
{
   1b726:	b580      	push	{r7, lr}
   1b728:	b086      	sub	sp, #24
   1b72a:	af00      	add	r7, sp, #0
   1b72c:	6078      	str	r0, [r7, #4]
	const struct uarte_nrfx_config *config = dev->config;
   1b72e:	687b      	ldr	r3, [r7, #4]
   1b730:	685b      	ldr	r3, [r3, #4]
   1b732:	617b      	str	r3, [r7, #20]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1b734:	6878      	ldr	r0, [r7, #4]
   1b736:	f7ff ff31 	bl	1b59c <get_uarte_instance>
   1b73a:	6138      	str	r0, [r7, #16]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1b73c:	697b      	ldr	r3, [r7, #20]
   1b73e:	685b      	ldr	r3, [r3, #4]
   1b740:	f003 0302 	and.w	r3, r3, #2
   1b744:	2b00      	cmp	r3, #0
   1b746:	bf14      	ite	ne
   1b748:	2301      	movne	r3, #1
   1b74a:	2300      	moveq	r3, #0
   1b74c:	73fb      	strb	r3, [r7, #15]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1b74e:	f44f 71ac 	mov.w	r1, #344	; 0x158
   1b752:	6938      	ldr	r0, [r7, #16]
   1b754:	f7ff fdd0 	bl	1b2f8 <nrf_uarte_event_check>
   1b758:	4603      	mov	r3, r0
   1b75a:	2b00      	cmp	r3, #0
   1b75c:	d10d      	bne.n	1b77a <is_tx_ready+0x54>
		(!ppi_endtx ?
   1b75e:	7bfb      	ldrb	r3, [r7, #15]
   1b760:	f083 0301 	eor.w	r3, r3, #1
   1b764:	b2db      	uxtb	r3, r3
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1b766:	2b00      	cmp	r3, #0
   1b768:	d009      	beq.n	1b77e <is_tx_ready+0x58>
		       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) : 0);
   1b76a:	f44f 7190 	mov.w	r1, #288	; 0x120
   1b76e:	6938      	ldr	r0, [r7, #16]
   1b770:	f7ff fdc2 	bl	1b2f8 <nrf_uarte_event_check>
   1b774:	4603      	mov	r3, r0
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1b776:	2b00      	cmp	r3, #0
   1b778:	d001      	beq.n	1b77e <is_tx_ready+0x58>
   1b77a:	2301      	movs	r3, #1
   1b77c:	e000      	b.n	1b780 <is_tx_ready+0x5a>
   1b77e:	2300      	movs	r3, #0
   1b780:	f003 0301 	and.w	r3, r3, #1
   1b784:	b2db      	uxtb	r3, r3
}
   1b786:	4618      	mov	r0, r3
   1b788:	3718      	adds	r7, #24
   1b78a:	46bd      	mov	sp, r7
   1b78c:	bd80      	pop	{r7, pc}

0001b78e <wait_tx_ready>:
{
   1b78e:	b580      	push	{r7, lr}
   1b790:	b088      	sub	sp, #32
   1b792:	af00      	add	r7, sp, #0
   1b794:	6078      	str	r0, [r7, #4]
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1b796:	2300      	movs	r3, #0
   1b798:	77fb      	strb	r3, [r7, #31]
   1b79a:	2364      	movs	r3, #100	; 0x64
   1b79c:	61bb      	str	r3, [r7, #24]
   1b79e:	6878      	ldr	r0, [r7, #4]
   1b7a0:	f7ff ffc1 	bl	1b726 <is_tx_ready>
   1b7a4:	4603      	mov	r3, r0
   1b7a6:	2b00      	cmp	r3, #0
   1b7a8:	d002      	beq.n	1b7b0 <wait_tx_ready+0x22>
   1b7aa:	2301      	movs	r3, #1
   1b7ac:	77fb      	strb	r3, [r7, #31]
   1b7ae:	e008      	b.n	1b7c2 <wait_tx_ready+0x34>
   1b7b0:	2001      	movs	r0, #1
   1b7b2:	f001 fc3b 	bl	1d02c <nrfx_busy_wait>
   1b7b6:	69bb      	ldr	r3, [r7, #24]
   1b7b8:	3b01      	subs	r3, #1
   1b7ba:	61bb      	str	r3, [r7, #24]
   1b7bc:	69bb      	ldr	r3, [r7, #24]
   1b7be:	2b00      	cmp	r3, #0
   1b7c0:	d1ed      	bne.n	1b79e <wait_tx_ready+0x10>
		if (res) {
   1b7c2:	7ffb      	ldrb	r3, [r7, #31]
   1b7c4:	2b00      	cmp	r3, #0
   1b7c6:	d019      	beq.n	1b7fc <wait_tx_ready+0x6e>
	__asm__ volatile(
   1b7c8:	f04f 0320 	mov.w	r3, #32
   1b7cc:	f3ef 8211 	mrs	r2, BASEPRI
   1b7d0:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7d4:	f3bf 8f6f 	isb	sy
   1b7d8:	613a      	str	r2, [r7, #16]
   1b7da:	60fb      	str	r3, [r7, #12]
	return key;
   1b7dc:	693b      	ldr	r3, [r7, #16]
			key = irq_lock();
   1b7de:	617b      	str	r3, [r7, #20]
			if (is_tx_ready(dev)) {
   1b7e0:	6878      	ldr	r0, [r7, #4]
   1b7e2:	f7ff ffa0 	bl	1b726 <is_tx_ready>
   1b7e6:	4603      	mov	r3, r0
   1b7e8:	2b00      	cmp	r3, #0
   1b7ea:	d10b      	bne.n	1b804 <wait_tx_ready+0x76>
   1b7ec:	697b      	ldr	r3, [r7, #20]
   1b7ee:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   1b7f0:	68bb      	ldr	r3, [r7, #8]
   1b7f2:	f383 8811 	msr	BASEPRI, r3
   1b7f6:	f3bf 8f6f 	isb	sy
}
   1b7fa:	bf00      	nop
			k_msleep(1);
   1b7fc:	2001      	movs	r0, #1
   1b7fe:	f7ff fcef 	bl	1b1e0 <k_msleep>
	do {
   1b802:	e7c8      	b.n	1b796 <wait_tx_ready+0x8>
				break;
   1b804:	bf00      	nop
	return key;
   1b806:	697b      	ldr	r3, [r7, #20]
}
   1b808:	4618      	mov	r0, r3
   1b80a:	3720      	adds	r7, #32
   1b80c:	46bd      	mov	sp, r7
   1b80e:	bd80      	pop	{r7, pc}

0001b810 <uarte_enable>:
{
   1b810:	b580      	push	{r7, lr}
   1b812:	b086      	sub	sp, #24
   1b814:	af00      	add	r7, sp, #0
   1b816:	6078      	str	r0, [r7, #4]
   1b818:	6039      	str	r1, [r7, #0]
	const struct uarte_nrfx_config *config = dev->config;
   1b81a:	687b      	ldr	r3, [r7, #4]
   1b81c:	685b      	ldr	r3, [r3, #4]
   1b81e:	617b      	str	r3, [r7, #20]
	struct uarte_nrfx_data *data = dev->data;
   1b820:	687b      	ldr	r3, [r7, #4]
   1b822:	691b      	ldr	r3, [r3, #16]
   1b824:	613b      	str	r3, [r7, #16]
	if (data->async) {
   1b826:	693b      	ldr	r3, [r7, #16]
   1b828:	68db      	ldr	r3, [r3, #12]
   1b82a:	2b00      	cmp	r3, #0
   1b82c:	d013      	beq.n	1b856 <uarte_enable+0x46>
		bool disabled = data->async->low_power_mask == 0;
   1b82e:	693b      	ldr	r3, [r7, #16]
   1b830:	68db      	ldr	r3, [r3, #12]
   1b832:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   1b836:	2b00      	cmp	r3, #0
   1b838:	bf0c      	ite	eq
   1b83a:	2301      	moveq	r3, #1
   1b83c:	2300      	movne	r3, #0
   1b83e:	73fb      	strb	r3, [r7, #15]
		data->async->low_power_mask |= mask;
   1b840:	693b      	ldr	r3, [r7, #16]
   1b842:	68db      	ldr	r3, [r3, #12]
   1b844:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   1b848:	461a      	mov	r2, r3
   1b84a:	683b      	ldr	r3, [r7, #0]
   1b84c:	431a      	orrs	r2, r3
   1b84e:	693b      	ldr	r3, [r7, #16]
   1b850:	68db      	ldr	r3, [r3, #12]
   1b852:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	nrf_uarte_enable(get_uarte_instance(dev));
   1b856:	6878      	ldr	r0, [r7, #4]
   1b858:	f7ff fea0 	bl	1b59c <get_uarte_instance>
   1b85c:	4603      	mov	r3, r0
   1b85e:	4618      	mov	r0, r3
   1b860:	f7ff fdce 	bl	1b400 <nrf_uarte_enable>
}
   1b864:	bf00      	nop
   1b866:	3718      	adds	r7, #24
   1b868:	46bd      	mov	sp, r7
   1b86a:	bd80      	pop	{r7, pc}

0001b86c <tx_start>:
{
   1b86c:	b580      	push	{r7, lr}
   1b86e:	b086      	sub	sp, #24
   1b870:	af00      	add	r7, sp, #0
   1b872:	60f8      	str	r0, [r7, #12]
   1b874:	60b9      	str	r1, [r7, #8]
   1b876:	607a      	str	r2, [r7, #4]
	const struct uarte_nrfx_config *config = dev->config;
   1b878:	68fb      	ldr	r3, [r7, #12]
   1b87a:	685b      	ldr	r3, [r3, #4]
   1b87c:	617b      	str	r3, [r7, #20]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1b87e:	68f8      	ldr	r0, [r7, #12]
   1b880:	f7ff fe8c 	bl	1b59c <get_uarte_instance>
   1b884:	6138      	str	r0, [r7, #16]
	nrf_uarte_tx_buffer_set(uarte, buf, len);
   1b886:	687a      	ldr	r2, [r7, #4]
   1b888:	68b9      	ldr	r1, [r7, #8]
   1b88a:	6938      	ldr	r0, [r7, #16]
   1b88c:	f7ff fe16 	bl	1b4bc <nrf_uarte_tx_buffer_set>
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
   1b890:	f44f 7190 	mov.w	r1, #288	; 0x120
   1b894:	6938      	ldr	r0, [r7, #16]
   1b896:	f7ff fd1a 	bl	1b2ce <nrf_uarte_event_clear>
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_TXSTOPPED);
   1b89a:	f44f 71ac 	mov.w	r1, #344	; 0x158
   1b89e:	6938      	ldr	r0, [r7, #16]
   1b8a0:	f7ff fd15 	bl	1b2ce <nrf_uarte_event_clear>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b8a4:	697b      	ldr	r3, [r7, #20]
   1b8a6:	685b      	ldr	r3, [r3, #4]
   1b8a8:	f003 0310 	and.w	r3, r3, #16
   1b8ac:	2b00      	cmp	r3, #0
   1b8ae:	d008      	beq.n	1b8c2 <tx_start+0x56>
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   1b8b0:	2101      	movs	r1, #1
   1b8b2:	68f8      	ldr	r0, [r7, #12]
   1b8b4:	f7ff ffac 	bl	1b810 <uarte_enable>
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_TXSTOPPED_MASK);
   1b8b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1b8bc:	6938      	ldr	r0, [r7, #16]
   1b8be:	f7ff fd62 	bl	1b386 <nrf_uarte_int_enable>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTTX);
   1b8c2:	2108      	movs	r1, #8
   1b8c4:	6938      	ldr	r0, [r7, #16]
   1b8c6:	f7ff fdb5 	bl	1b434 <nrf_uarte_task_trigger>
}
   1b8ca:	bf00      	nop
   1b8cc:	3718      	adds	r7, #24
   1b8ce:	46bd      	mov	sp, r7
   1b8d0:	bd80      	pop	{r7, pc}

0001b8d2 <uart_disable>:
{
   1b8d2:	b580      	push	{r7, lr}
   1b8d4:	b084      	sub	sp, #16
   1b8d6:	af00      	add	r7, sp, #0
   1b8d8:	6078      	str	r0, [r7, #4]
	const struct uarte_nrfx_config *config = dev->config;
   1b8da:	687b      	ldr	r3, [r7, #4]
   1b8dc:	685b      	ldr	r3, [r3, #4]
   1b8de:	60fb      	str	r3, [r7, #12]
	struct uarte_nrfx_data *data = dev->data;
   1b8e0:	687b      	ldr	r3, [r7, #4]
   1b8e2:	691b      	ldr	r3, [r3, #16]
   1b8e4:	60bb      	str	r3, [r7, #8]
	nrf_uarte_disable(get_uarte_instance(dev));
   1b8e6:	6878      	ldr	r0, [r7, #4]
   1b8e8:	f7ff fe58 	bl	1b59c <get_uarte_instance>
   1b8ec:	4603      	mov	r3, r0
   1b8ee:	4618      	mov	r0, r3
   1b8f0:	f7ff fd93 	bl	1b41a <nrf_uarte_disable>
}
   1b8f4:	bf00      	nop
   1b8f6:	3710      	adds	r7, #16
   1b8f8:	46bd      	mov	sp, r7
   1b8fa:	bd80      	pop	{r7, pc}

0001b8fc <uarte_nrfx_rx_counting_init>:
{
   1b8fc:	b580      	push	{r7, lr}
   1b8fe:	b088      	sub	sp, #32
   1b900:	af00      	add	r7, sp, #0
   1b902:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1b904:	687b      	ldr	r3, [r7, #4]
   1b906:	691b      	ldr	r3, [r3, #16]
   1b908:	61fb      	str	r3, [r7, #28]
	const struct uarte_nrfx_config *cfg = dev->config;
   1b90a:	687b      	ldr	r3, [r7, #4]
   1b90c:	685b      	ldr	r3, [r3, #4]
   1b90e:	61bb      	str	r3, [r7, #24]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1b910:	6878      	ldr	r0, [r7, #4]
   1b912:	f7ff fe43 	bl	1b59c <get_uarte_instance>
   1b916:	6178      	str	r0, [r7, #20]
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_RXDRDY_MASK);
   1b918:	2104      	movs	r1, #4
   1b91a:	6978      	ldr	r0, [r7, #20]
   1b91c:	f7ff fd33 	bl	1b386 <nrf_uarte_int_enable>
	return 0;
   1b920:	2300      	movs	r3, #0
}
   1b922:	4618      	mov	r0, r3
   1b924:	3720      	adds	r7, #32
   1b926:	46bd      	mov	sp, r7
   1b928:	bd80      	pop	{r7, pc}

0001b92a <start_tx_locked>:
{
   1b92a:	b580      	push	{r7, lr}
   1b92c:	b082      	sub	sp, #8
   1b92e:	af00      	add	r7, sp, #0
   1b930:	6078      	str	r0, [r7, #4]
   1b932:	6039      	str	r1, [r7, #0]
	if (!is_tx_ready(dev)) {
   1b934:	6878      	ldr	r0, [r7, #4]
   1b936:	f7ff fef6 	bl	1b726 <is_tx_ready>
   1b93a:	4603      	mov	r3, r0
   1b93c:	f083 0301 	eor.w	r3, r3, #1
   1b940:	b2db      	uxtb	r3, r3
   1b942:	2b00      	cmp	r3, #0
   1b944:	d005      	beq.n	1b952 <start_tx_locked+0x28>
		data->async->pending_tx = true;
   1b946:	683b      	ldr	r3, [r7, #0]
   1b948:	68db      	ldr	r3, [r3, #12]
   1b94a:	2201      	movs	r2, #1
   1b94c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
}
   1b950:	e014      	b.n	1b97c <start_tx_locked+0x52>
		data->async->pending_tx = false;
   1b952:	683b      	ldr	r3, [r7, #0]
   1b954:	68db      	ldr	r3, [r3, #12]
   1b956:	2200      	movs	r2, #0
   1b958:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
		data->async->tx_amount = -1;
   1b95c:	683b      	ldr	r3, [r7, #0]
   1b95e:	68db      	ldr	r3, [r3, #12]
   1b960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b964:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   1b968:	683b      	ldr	r3, [r7, #0]
   1b96a:	68db      	ldr	r3, [r3, #12]
   1b96c:	6919      	ldr	r1, [r3, #16]
   1b96e:	683b      	ldr	r3, [r7, #0]
   1b970:	68db      	ldr	r3, [r3, #12]
   1b972:	695b      	ldr	r3, [r3, #20]
   1b974:	461a      	mov	r2, r3
   1b976:	6878      	ldr	r0, [r7, #4]
   1b978:	f7ff ff78 	bl	1b86c <tx_start>
}
   1b97c:	bf00      	nop
   1b97e:	3708      	adds	r7, #8
   1b980:	46bd      	mov	sp, r7
   1b982:	bd80      	pop	{r7, pc}

0001b984 <setup_tx_cache>:
{
   1b984:	b580      	push	{r7, lr}
   1b986:	b084      	sub	sp, #16
   1b988:	af00      	add	r7, sp, #0
   1b98a:	6078      	str	r0, [r7, #4]
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   1b98c:	687b      	ldr	r3, [r7, #4]
   1b98e:	68db      	ldr	r3, [r3, #12]
   1b990:	68da      	ldr	r2, [r3, #12]
   1b992:	687b      	ldr	r3, [r7, #4]
   1b994:	68db      	ldr	r3, [r3, #12]
   1b996:	69db      	ldr	r3, [r3, #28]
   1b998:	1ad3      	subs	r3, r2, r3
   1b99a:	60fb      	str	r3, [r7, #12]
	if (!remaining) {
   1b99c:	68fb      	ldr	r3, [r7, #12]
   1b99e:	2b00      	cmp	r3, #0
   1b9a0:	d101      	bne.n	1b9a6 <setup_tx_cache+0x22>
		return false;
   1b9a2:	2300      	movs	r3, #0
   1b9a4:	e01d      	b.n	1b9e2 <setup_tx_cache+0x5e>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   1b9a6:	68fb      	ldr	r3, [r7, #12]
   1b9a8:	2b08      	cmp	r3, #8
   1b9aa:	bf28      	it	cs
   1b9ac:	2308      	movcs	r3, #8
   1b9ae:	60bb      	str	r3, [r7, #8]
	data->async->xfer_len = len;
   1b9b0:	687b      	ldr	r3, [r7, #4]
   1b9b2:	68db      	ldr	r3, [r3, #12]
   1b9b4:	68ba      	ldr	r2, [r7, #8]
   1b9b6:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   1b9b8:	687b      	ldr	r3, [r7, #4]
   1b9ba:	68da      	ldr	r2, [r3, #12]
   1b9bc:	687b      	ldr	r3, [r7, #4]
   1b9be:	68db      	ldr	r3, [r3, #12]
   1b9c0:	6992      	ldr	r2, [r2, #24]
   1b9c2:	611a      	str	r2, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   1b9c4:	687b      	ldr	r3, [r7, #4]
   1b9c6:	68db      	ldr	r3, [r3, #12]
   1b9c8:	6998      	ldr	r0, [r3, #24]
   1b9ca:	687b      	ldr	r3, [r7, #4]
   1b9cc:	68db      	ldr	r3, [r3, #12]
   1b9ce:	689a      	ldr	r2, [r3, #8]
   1b9d0:	687b      	ldr	r3, [r7, #4]
   1b9d2:	68db      	ldr	r3, [r3, #12]
   1b9d4:	69db      	ldr	r3, [r3, #28]
   1b9d6:	4413      	add	r3, r2
   1b9d8:	68ba      	ldr	r2, [r7, #8]
   1b9da:	4619      	mov	r1, r3
   1b9dc:	f003 ff77 	bl	1f8ce <__aeabi_memcpy>
	return true;
   1b9e0:	2301      	movs	r3, #1
}
   1b9e2:	4618      	mov	r0, r3
   1b9e4:	3710      	adds	r7, #16
   1b9e6:	46bd      	mov	sp, r7
   1b9e8:	bd80      	pop	{r7, pc}

0001b9ea <uarte_nrfx_tx>:
{
   1b9ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b9ec:	b08f      	sub	sp, #60	; 0x3c
   1b9ee:	af02      	add	r7, sp, #8
   1b9f0:	60f8      	str	r0, [r7, #12]
   1b9f2:	60b9      	str	r1, [r7, #8]
   1b9f4:	607a      	str	r2, [r7, #4]
   1b9f6:	603b      	str	r3, [r7, #0]
	struct uarte_nrfx_data *data = dev->data;
   1b9f8:	68fb      	ldr	r3, [r7, #12]
   1b9fa:	691b      	ldr	r3, [r3, #16]
   1b9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1b9fe:	68f8      	ldr	r0, [r7, #12]
   1ba00:	f7ff fdcc 	bl	1b59c <get_uarte_instance>
   1ba04:	62b8      	str	r0, [r7, #40]	; 0x28
	__asm__ volatile(
   1ba06:	f04f 0320 	mov.w	r3, #32
   1ba0a:	f3ef 8211 	mrs	r2, BASEPRI
   1ba0e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba12:	f3bf 8f6f 	isb	sy
   1ba16:	623a      	str	r2, [r7, #32]
   1ba18:	61fb      	str	r3, [r7, #28]
	return key;
   1ba1a:	6a3b      	ldr	r3, [r7, #32]
	unsigned int key = irq_lock();
   1ba1c:	627b      	str	r3, [r7, #36]	; 0x24
	if (data->async->tx_size) {
   1ba1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ba20:	68db      	ldr	r3, [r3, #12]
   1ba22:	68db      	ldr	r3, [r3, #12]
   1ba24:	2b00      	cmp	r3, #0
   1ba26:	d00a      	beq.n	1ba3e <uarte_nrfx_tx+0x54>
   1ba28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba2a:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   1ba2c:	69bb      	ldr	r3, [r7, #24]
   1ba2e:	f383 8811 	msr	BASEPRI, r3
   1ba32:	f3bf 8f6f 	isb	sy
}
   1ba36:	bf00      	nop
		return -EBUSY;
   1ba38:	f06f 030f 	mvn.w	r3, #15
   1ba3c:	e054      	b.n	1bae8 <uarte_nrfx_tx+0xfe>
	data->async->tx_size = len;
   1ba3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ba40:	68db      	ldr	r3, [r3, #12]
   1ba42:	687a      	ldr	r2, [r7, #4]
   1ba44:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1ba46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ba48:	68db      	ldr	r3, [r3, #12]
   1ba4a:	68ba      	ldr	r2, [r7, #8]
   1ba4c:	609a      	str	r2, [r3, #8]
	nrf_uarte_int_enable(uarte, NRF_UARTE_INT_TXSTOPPED_MASK);
   1ba4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1ba52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1ba54:	f7ff fc97 	bl	1b386 <nrf_uarte_int_enable>
	if (nrfx_is_in_ram(buf)) {
   1ba58:	68b8      	ldr	r0, [r7, #8]
   1ba5a:	f7ff fba4 	bl	1b1a6 <nrfx_is_in_ram>
   1ba5e:	4603      	mov	r3, r0
   1ba60:	2b00      	cmp	r3, #0
   1ba62:	d008      	beq.n	1ba76 <uarte_nrfx_tx+0x8c>
		data->async->xfer_buf = buf;
   1ba64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ba66:	68db      	ldr	r3, [r3, #12]
   1ba68:	68ba      	ldr	r2, [r7, #8]
   1ba6a:	611a      	str	r2, [r3, #16]
		data->async->xfer_len = len;
   1ba6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ba6e:	68db      	ldr	r3, [r3, #12]
   1ba70:	687a      	ldr	r2, [r7, #4]
   1ba72:	615a      	str	r2, [r3, #20]
   1ba74:	e006      	b.n	1ba84 <uarte_nrfx_tx+0x9a>
		data->async->tx_cache_offset = 0;
   1ba76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ba78:	68db      	ldr	r3, [r3, #12]
   1ba7a:	2200      	movs	r2, #0
   1ba7c:	61da      	str	r2, [r3, #28]
		(void)setup_tx_cache(data);
   1ba7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1ba80:	f7ff ff80 	bl	1b984 <setup_tx_cache>
	start_tx_locked(dev, data);
   1ba84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1ba86:	68f8      	ldr	r0, [r7, #12]
   1ba88:	f7ff ff4f 	bl	1b92a <start_tx_locked>
   1ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba8e:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   1ba90:	697b      	ldr	r3, [r7, #20]
   1ba92:	f383 8811 	msr	BASEPRI, r3
   1ba96:	f3bf 8f6f 	isb	sy
}
   1ba9a:	bf00      	nop
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1ba9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ba9e:	7adb      	ldrb	r3, [r3, #11]
   1baa0:	2b01      	cmp	r3, #1
   1baa2:	d120      	bne.n	1bae6 <uarte_nrfx_tx+0xfc>
	    && timeout != SYS_FOREVER_US) {
   1baa4:	683b      	ldr	r3, [r7, #0]
   1baa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1baaa:	d01c      	beq.n	1bae6 <uarte_nrfx_tx+0xfc>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1baac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1baae:	68db      	ldr	r3, [r3, #12]
   1bab0:	f103 0620 	add.w	r6, r3, #32
   1bab4:	683b      	ldr	r3, [r7, #0]
   1bab6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1baba:	17da      	asrs	r2, r3, #31
   1babc:	461c      	mov	r4, r3
   1babe:	4615      	mov	r5, r2
   1bac0:	4620      	mov	r0, r4
   1bac2:	4629      	mov	r1, r5
   1bac4:	f7f1 fed6 	bl	d874 <k_us_to_ticks_ceil64>
   1bac8:	4602      	mov	r2, r0
   1baca:	460b      	mov	r3, r1
   1bacc:	4610      	mov	r0, r2
   1bace:	4619      	mov	r1, r3
			      K_NO_WAIT);
   1bad0:	f04f 0200 	mov.w	r2, #0
   1bad4:	f04f 0300 	mov.w	r3, #0
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1bad8:	e9cd 2300 	strd	r2, r3, [sp]
   1badc:	4602      	mov	r2, r0
   1bade:	460b      	mov	r3, r1
   1bae0:	4630      	mov	r0, r6
   1bae2:	f7ff fbbd 	bl	1b260 <k_timer_start>
	return 0;
   1bae6:	2300      	movs	r3, #0
}
   1bae8:	4618      	mov	r0, r3
   1baea:	3734      	adds	r7, #52	; 0x34
   1baec:	46bd      	mov	sp, r7
   1baee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001baf0 <uarte_nrfx_tx_abort>:
{
   1baf0:	b580      	push	{r7, lr}
   1baf2:	b084      	sub	sp, #16
   1baf4:	af00      	add	r7, sp, #0
   1baf6:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1baf8:	687b      	ldr	r3, [r7, #4]
   1bafa:	691b      	ldr	r3, [r3, #16]
   1bafc:	60fb      	str	r3, [r7, #12]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1bafe:	6878      	ldr	r0, [r7, #4]
   1bb00:	f7ff fd4c 	bl	1b59c <get_uarte_instance>
   1bb04:	60b8      	str	r0, [r7, #8]
	if (data->async->tx_buf == NULL) {
   1bb06:	68fb      	ldr	r3, [r7, #12]
   1bb08:	68db      	ldr	r3, [r3, #12]
   1bb0a:	689b      	ldr	r3, [r3, #8]
   1bb0c:	2b00      	cmp	r3, #0
   1bb0e:	d102      	bne.n	1bb16 <uarte_nrfx_tx_abort+0x26>
		return -EFAULT;
   1bb10:	f06f 030d 	mvn.w	r3, #13
   1bb14:	e00f      	b.n	1bb36 <uarte_nrfx_tx_abort+0x46>
	data->async->pending_tx = false;
   1bb16:	68fb      	ldr	r3, [r7, #12]
   1bb18:	68db      	ldr	r3, [r3, #12]
   1bb1a:	2200      	movs	r2, #0
   1bb1c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->tx_timeout_timer);
   1bb20:	68fb      	ldr	r3, [r7, #12]
   1bb22:	68db      	ldr	r3, [r3, #12]
   1bb24:	3320      	adds	r3, #32
   1bb26:	4618      	mov	r0, r3
   1bb28:	f7ff fbad 	bl	1b286 <k_timer_stop>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
   1bb2c:	210c      	movs	r1, #12
   1bb2e:	68b8      	ldr	r0, [r7, #8]
   1bb30:	f7ff fc80 	bl	1b434 <nrf_uarte_task_trigger>
	return 0;
   1bb34:	2300      	movs	r3, #0
}
   1bb36:	4618      	mov	r0, r3
   1bb38:	3710      	adds	r7, #16
   1bb3a:	46bd      	mov	sp, r7
   1bb3c:	bd80      	pop	{r7, pc}

0001bb3e <user_callback>:
{
   1bb3e:	b580      	push	{r7, lr}
   1bb40:	b084      	sub	sp, #16
   1bb42:	af00      	add	r7, sp, #0
   1bb44:	6078      	str	r0, [r7, #4]
   1bb46:	6039      	str	r1, [r7, #0]
	struct uarte_nrfx_data *data = dev->data;
   1bb48:	687b      	ldr	r3, [r7, #4]
   1bb4a:	691b      	ldr	r3, [r3, #16]
   1bb4c:	60fb      	str	r3, [r7, #12]
	if (data->async->user_callback) {
   1bb4e:	68fb      	ldr	r3, [r7, #12]
   1bb50:	68db      	ldr	r3, [r3, #12]
   1bb52:	681b      	ldr	r3, [r3, #0]
   1bb54:	2b00      	cmp	r3, #0
   1bb56:	d008      	beq.n	1bb6a <user_callback+0x2c>
		data->async->user_callback(dev, evt, data->async->user_data);
   1bb58:	68fb      	ldr	r3, [r7, #12]
   1bb5a:	68db      	ldr	r3, [r3, #12]
   1bb5c:	681b      	ldr	r3, [r3, #0]
   1bb5e:	68fa      	ldr	r2, [r7, #12]
   1bb60:	68d2      	ldr	r2, [r2, #12]
   1bb62:	6852      	ldr	r2, [r2, #4]
   1bb64:	6839      	ldr	r1, [r7, #0]
   1bb66:	6878      	ldr	r0, [r7, #4]
   1bb68:	4798      	blx	r3
}
   1bb6a:	bf00      	nop
   1bb6c:	3710      	adds	r7, #16
   1bb6e:	46bd      	mov	sp, r7
   1bb70:	bd80      	pop	{r7, pc}

0001bb72 <notify_uart_rx_rdy>:
{
   1bb72:	b580      	push	{r7, lr}
   1bb74:	b088      	sub	sp, #32
   1bb76:	af00      	add	r7, sp, #0
   1bb78:	6078      	str	r0, [r7, #4]
   1bb7a:	6039      	str	r1, [r7, #0]
	struct uarte_nrfx_data *data = dev->data;
   1bb7c:	687b      	ldr	r3, [r7, #4]
   1bb7e:	691b      	ldr	r3, [r3, #16]
   1bb80:	61fb      	str	r3, [r7, #28]
	struct uart_event evt = {
   1bb82:	f107 0308 	add.w	r3, r7, #8
   1bb86:	2200      	movs	r2, #0
   1bb88:	601a      	str	r2, [r3, #0]
   1bb8a:	605a      	str	r2, [r3, #4]
   1bb8c:	609a      	str	r2, [r3, #8]
   1bb8e:	60da      	str	r2, [r3, #12]
   1bb90:	611a      	str	r2, [r3, #16]
   1bb92:	2302      	movs	r3, #2
   1bb94:	723b      	strb	r3, [r7, #8]
		.data.rx.buf = data->async->rx_buf,
   1bb96:	69fb      	ldr	r3, [r7, #28]
   1bb98:	68db      	ldr	r3, [r3, #12]
   1bb9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	struct uart_event evt = {
   1bb9c:	60fb      	str	r3, [r7, #12]
		.data.rx.offset = data->async->rx_offset
   1bb9e:	69fb      	ldr	r3, [r7, #28]
   1bba0:	68db      	ldr	r3, [r3, #12]
   1bba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	struct uart_event evt = {
   1bba4:	613b      	str	r3, [r7, #16]
   1bba6:	683b      	ldr	r3, [r7, #0]
   1bba8:	617b      	str	r3, [r7, #20]
	user_callback(dev, &evt);
   1bbaa:	f107 0308 	add.w	r3, r7, #8
   1bbae:	4619      	mov	r1, r3
   1bbb0:	6878      	ldr	r0, [r7, #4]
   1bbb2:	f7ff ffc4 	bl	1bb3e <user_callback>
}
   1bbb6:	bf00      	nop
   1bbb8:	3720      	adds	r7, #32
   1bbba:	46bd      	mov	sp, r7
   1bbbc:	bd80      	pop	{r7, pc}

0001bbbe <rx_buf_release>:
{
   1bbbe:	b580      	push	{r7, lr}
   1bbc0:	b088      	sub	sp, #32
   1bbc2:	af00      	add	r7, sp, #0
   1bbc4:	6078      	str	r0, [r7, #4]
   1bbc6:	6039      	str	r1, [r7, #0]
	if (*buf) {
   1bbc8:	683b      	ldr	r3, [r7, #0]
   1bbca:	681b      	ldr	r3, [r3, #0]
   1bbcc:	2b00      	cmp	r3, #0
   1bbce:	d015      	beq.n	1bbfc <rx_buf_release+0x3e>
		struct uart_event evt = {
   1bbd0:	f107 030c 	add.w	r3, r7, #12
   1bbd4:	2200      	movs	r2, #0
   1bbd6:	601a      	str	r2, [r3, #0]
   1bbd8:	605a      	str	r2, [r3, #4]
   1bbda:	609a      	str	r2, [r3, #8]
   1bbdc:	60da      	str	r2, [r3, #12]
   1bbde:	611a      	str	r2, [r3, #16]
   1bbe0:	2304      	movs	r3, #4
   1bbe2:	733b      	strb	r3, [r7, #12]
			.data.rx_buf.buf = *buf,
   1bbe4:	683b      	ldr	r3, [r7, #0]
   1bbe6:	681b      	ldr	r3, [r3, #0]
		struct uart_event evt = {
   1bbe8:	613b      	str	r3, [r7, #16]
		user_callback(dev, &evt);
   1bbea:	f107 030c 	add.w	r3, r7, #12
   1bbee:	4619      	mov	r1, r3
   1bbf0:	6878      	ldr	r0, [r7, #4]
   1bbf2:	f7ff ffa4 	bl	1bb3e <user_callback>
		*buf = NULL;
   1bbf6:	683b      	ldr	r3, [r7, #0]
   1bbf8:	2200      	movs	r2, #0
   1bbfa:	601a      	str	r2, [r3, #0]
}
   1bbfc:	bf00      	nop
   1bbfe:	3720      	adds	r7, #32
   1bc00:	46bd      	mov	sp, r7
   1bc02:	bd80      	pop	{r7, pc}

0001bc04 <notify_rx_disable>:
{
   1bc04:	b580      	push	{r7, lr}
   1bc06:	b088      	sub	sp, #32
   1bc08:	af00      	add	r7, sp, #0
   1bc0a:	6078      	str	r0, [r7, #4]
	struct uart_event evt = {
   1bc0c:	f107 030c 	add.w	r3, r7, #12
   1bc10:	2200      	movs	r2, #0
   1bc12:	601a      	str	r2, [r3, #0]
   1bc14:	605a      	str	r2, [r3, #4]
   1bc16:	609a      	str	r2, [r3, #8]
   1bc18:	60da      	str	r2, [r3, #12]
   1bc1a:	611a      	str	r2, [r3, #16]
   1bc1c:	2305      	movs	r3, #5
   1bc1e:	733b      	strb	r3, [r7, #12]
	user_callback(dev, (struct uart_event *)&evt);
   1bc20:	f107 030c 	add.w	r3, r7, #12
   1bc24:	4619      	mov	r1, r3
   1bc26:	6878      	ldr	r0, [r7, #4]
   1bc28:	f7ff ff89 	bl	1bb3e <user_callback>
}
   1bc2c:	bf00      	nop
   1bc2e:	3720      	adds	r7, #32
   1bc30:	46bd      	mov	sp, r7
   1bc32:	bd80      	pop	{r7, pc}

0001bc34 <uarte_nrfx_rx_buf_rsp>:
{
   1bc34:	b580      	push	{r7, lr}
   1bc36:	b08c      	sub	sp, #48	; 0x30
   1bc38:	af00      	add	r7, sp, #0
   1bc3a:	60f8      	str	r0, [r7, #12]
   1bc3c:	60b9      	str	r1, [r7, #8]
   1bc3e:	607a      	str	r2, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1bc40:	68fb      	ldr	r3, [r7, #12]
   1bc42:	691b      	ldr	r3, [r3, #16]
   1bc44:	62bb      	str	r3, [r7, #40]	; 0x28
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1bc46:	68f8      	ldr	r0, [r7, #12]
   1bc48:	f7ff fca8 	bl	1b59c <get_uarte_instance>
   1bc4c:	6278      	str	r0, [r7, #36]	; 0x24
	__asm__ volatile(
   1bc4e:	f04f 0320 	mov.w	r3, #32
   1bc52:	f3ef 8211 	mrs	r2, BASEPRI
   1bc56:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc5a:	f3bf 8f6f 	isb	sy
   1bc5e:	61fa      	str	r2, [r7, #28]
   1bc60:	61bb      	str	r3, [r7, #24]
	return key;
   1bc62:	69fb      	ldr	r3, [r7, #28]
	unsigned int key = irq_lock();
   1bc64:	623b      	str	r3, [r7, #32]
	if (data->async->rx_buf == NULL) {
   1bc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc68:	68db      	ldr	r3, [r3, #12]
   1bc6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1bc6c:	2b00      	cmp	r3, #0
   1bc6e:	d103      	bne.n	1bc78 <uarte_nrfx_rx_buf_rsp+0x44>
		err = -EACCES;
   1bc70:	f06f 030c 	mvn.w	r3, #12
   1bc74:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bc76:	e01b      	b.n	1bcb0 <uarte_nrfx_rx_buf_rsp+0x7c>
	} else if (data->async->rx_next_buf == NULL) {
   1bc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc7a:	68db      	ldr	r3, [r3, #12]
   1bc7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1bc7e:	2b00      	cmp	r3, #0
   1bc80:	d113      	bne.n	1bcaa <uarte_nrfx_rx_buf_rsp+0x76>
		data->async->rx_next_buf = buf;
   1bc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc84:	68db      	ldr	r3, [r3, #12]
   1bc86:	68ba      	ldr	r2, [r7, #8]
   1bc88:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   1bc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc8c:	68db      	ldr	r3, [r3, #12]
   1bc8e:	687a      	ldr	r2, [r7, #4]
   1bc90:	669a      	str	r2, [r3, #104]	; 0x68
		nrf_uarte_rx_buffer_set(uarte, buf, len);
   1bc92:	687a      	ldr	r2, [r7, #4]
   1bc94:	68b9      	ldr	r1, [r7, #8]
   1bc96:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1bc98:	f7ff fc2f 	bl	1b4fa <nrf_uarte_rx_buffer_set>
		nrf_uarte_shorts_enable(uarte, NRF_UARTE_SHORT_ENDRX_STARTRX);
   1bc9c:	2120      	movs	r1, #32
   1bc9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1bca0:	f7ff fb4c 	bl	1b33c <nrf_uarte_shorts_enable>
		err = 0;
   1bca4:	2300      	movs	r3, #0
   1bca6:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bca8:	e002      	b.n	1bcb0 <uarte_nrfx_rx_buf_rsp+0x7c>
		err = -EBUSY;
   1bcaa:	f06f 030f 	mvn.w	r3, #15
   1bcae:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bcb0:	6a3b      	ldr	r3, [r7, #32]
   1bcb2:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   1bcb4:	697b      	ldr	r3, [r7, #20]
   1bcb6:	f383 8811 	msr	BASEPRI, r3
   1bcba:	f3bf 8f6f 	isb	sy
}
   1bcbe:	bf00      	nop
	return err;
   1bcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1bcc2:	4618      	mov	r0, r3
   1bcc4:	3730      	adds	r7, #48	; 0x30
   1bcc6:	46bd      	mov	sp, r7
   1bcc8:	bd80      	pop	{r7, pc}

0001bcca <uarte_nrfx_callback_set>:
{
   1bcca:	b480      	push	{r7}
   1bccc:	b087      	sub	sp, #28
   1bcce:	af00      	add	r7, sp, #0
   1bcd0:	60f8      	str	r0, [r7, #12]
   1bcd2:	60b9      	str	r1, [r7, #8]
   1bcd4:	607a      	str	r2, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1bcd6:	68fb      	ldr	r3, [r7, #12]
   1bcd8:	691b      	ldr	r3, [r3, #16]
   1bcda:	617b      	str	r3, [r7, #20]
	if (!data->async) {
   1bcdc:	697b      	ldr	r3, [r7, #20]
   1bcde:	68db      	ldr	r3, [r3, #12]
   1bce0:	2b00      	cmp	r3, #0
   1bce2:	d102      	bne.n	1bcea <uarte_nrfx_callback_set+0x20>
		return -ENOTSUP;
   1bce4:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1bce8:	e008      	b.n	1bcfc <uarte_nrfx_callback_set+0x32>
	data->async->user_callback = callback;
   1bcea:	697b      	ldr	r3, [r7, #20]
   1bcec:	68db      	ldr	r3, [r3, #12]
   1bcee:	68ba      	ldr	r2, [r7, #8]
   1bcf0:	601a      	str	r2, [r3, #0]
	data->async->user_data = user_data;
   1bcf2:	697b      	ldr	r3, [r7, #20]
   1bcf4:	68db      	ldr	r3, [r3, #12]
   1bcf6:	687a      	ldr	r2, [r7, #4]
   1bcf8:	605a      	str	r2, [r3, #4]
	return 0;
   1bcfa:	2300      	movs	r3, #0
}
   1bcfc:	4618      	mov	r0, r3
   1bcfe:	371c      	adds	r7, #28
   1bd00:	46bd      	mov	sp, r7
   1bd02:	bc80      	pop	{r7}
   1bd04:	4770      	bx	lr

0001bd06 <uarte_nrfx_rx_disable>:
{
   1bd06:	b580      	push	{r7, lr}
   1bd08:	b084      	sub	sp, #16
   1bd0a:	af00      	add	r7, sp, #0
   1bd0c:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1bd0e:	687b      	ldr	r3, [r7, #4]
   1bd10:	691b      	ldr	r3, [r3, #16]
   1bd12:	60fb      	str	r3, [r7, #12]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1bd14:	6878      	ldr	r0, [r7, #4]
   1bd16:	f7ff fc41 	bl	1b59c <get_uarte_instance>
   1bd1a:	60b8      	str	r0, [r7, #8]
	if (data->async->rx_buf == NULL) {
   1bd1c:	68fb      	ldr	r3, [r7, #12]
   1bd1e:	68db      	ldr	r3, [r3, #12]
   1bd20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1bd22:	2b00      	cmp	r3, #0
   1bd24:	d102      	bne.n	1bd2c <uarte_nrfx_rx_disable+0x26>
		return -EFAULT;
   1bd26:	f06f 030d 	mvn.w	r3, #13
   1bd2a:	e022      	b.n	1bd72 <uarte_nrfx_rx_disable+0x6c>
	if (data->async->rx_next_buf != NULL) {
   1bd2c:	68fb      	ldr	r3, [r7, #12]
   1bd2e:	68db      	ldr	r3, [r3, #12]
   1bd30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1bd32:	2b00      	cmp	r3, #0
   1bd34:	d008      	beq.n	1bd48 <uarte_nrfx_rx_disable+0x42>
		nrf_uarte_shorts_disable(uarte, NRF_UARTE_SHORT_ENDRX_STARTRX);
   1bd36:	2120      	movs	r1, #32
   1bd38:	68b8      	ldr	r0, [r7, #8]
   1bd3a:	f7ff fb11 	bl	1b360 <nrf_uarte_shorts_disable>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXSTARTED);
   1bd3e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
   1bd42:	68b8      	ldr	r0, [r7, #8]
   1bd44:	f7ff fac3 	bl	1b2ce <nrf_uarte_event_clear>
	k_timer_stop(&data->async->rx_timeout_timer);
   1bd48:	68fb      	ldr	r3, [r7, #12]
   1bd4a:	68db      	ldr	r3, [r3, #12]
   1bd4c:	3380      	adds	r3, #128	; 0x80
   1bd4e:	4618      	mov	r0, r3
   1bd50:	f7ff fa99 	bl	1b286 <k_timer_stop>
	data->async->rx_enabled = false;
   1bd54:	68fb      	ldr	r3, [r7, #12]
   1bd56:	68db      	ldr	r3, [r3, #12]
   1bd58:	2200      	movs	r2, #0
   1bd5a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	data->async->discard_rx_fifo = true;
   1bd5e:	68fb      	ldr	r3, [r7, #12]
   1bd60:	68db      	ldr	r3, [r3, #12]
   1bd62:	2201      	movs	r2, #1
   1bd64:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPRX);
   1bd68:	2104      	movs	r1, #4
   1bd6a:	68b8      	ldr	r0, [r7, #8]
   1bd6c:	f7ff fb62 	bl	1b434 <nrf_uarte_task_trigger>
	return 0;
   1bd70:	2300      	movs	r3, #0
}
   1bd72:	4618      	mov	r0, r3
   1bd74:	3710      	adds	r7, #16
   1bd76:	46bd      	mov	sp, r7
   1bd78:	bd80      	pop	{r7, pc}

0001bd7a <tx_timeout>:
{
   1bd7a:	b580      	push	{r7, lr}
   1bd7c:	b084      	sub	sp, #16
   1bd7e:	af00      	add	r7, sp, #0
   1bd80:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = k_timer_user_data_get(timer);
   1bd82:	6878      	ldr	r0, [r7, #4]
   1bd84:	f7ff fa97 	bl	1b2b6 <k_timer_user_data_get>
   1bd88:	60f8      	str	r0, [r7, #12]
	(void) uarte_nrfx_tx_abort(data->dev);
   1bd8a:	68fb      	ldr	r3, [r7, #12]
   1bd8c:	681b      	ldr	r3, [r3, #0]
   1bd8e:	4618      	mov	r0, r3
   1bd90:	f7ff feae 	bl	1baf0 <uarte_nrfx_tx_abort>
}
   1bd94:	bf00      	nop
   1bd96:	3710      	adds	r7, #16
   1bd98:	46bd      	mov	sp, r7
   1bd9a:	bd80      	pop	{r7, pc}

0001bd9c <rx_timeout>:
{
   1bd9c:	b580      	push	{r7, lr}
   1bd9e:	b088      	sub	sp, #32
   1bda0:	af00      	add	r7, sp, #0
   1bda2:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = k_timer_user_data_get(timer);
   1bda4:	6878      	ldr	r0, [r7, #4]
   1bda6:	f7ff fa86 	bl	1b2b6 <k_timer_user_data_get>
   1bdaa:	6178      	str	r0, [r7, #20]
	const struct device *dev = data->dev;
   1bdac:	697b      	ldr	r3, [r7, #20]
   1bdae:	681b      	ldr	r3, [r3, #0]
   1bdb0:	613b      	str	r3, [r7, #16]
	const struct uarte_nrfx_config *cfg = dev->config;
   1bdb2:	693b      	ldr	r3, [r7, #16]
   1bdb4:	685b      	ldr	r3, [r3, #4]
   1bdb6:	60fb      	str	r3, [r7, #12]
	if (data->async->is_in_irq) {
   1bdb8:	697b      	ldr	r3, [r7, #20]
   1bdba:	68db      	ldr	r3, [r3, #12]
   1bdbc:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   1bdc0:	b2db      	uxtb	r3, r3
   1bdc2:	2b00      	cmp	r3, #0
   1bdc4:	f040 8087 	bne.w	1bed6 <rx_timeout+0x13a>
	nrf_uarte_int_disable(get_uarte_instance(dev),
   1bdc8:	6938      	ldr	r0, [r7, #16]
   1bdca:	f7ff fbe7 	bl	1b59c <get_uarte_instance>
   1bdce:	4603      	mov	r3, r0
   1bdd0:	2110      	movs	r1, #16
   1bdd2:	4618      	mov	r0, r3
   1bdd4:	f7ff faf4 	bl	1b3c0 <nrf_uarte_int_disable>
		read = data->async->rx_cnt.cnt;
   1bdd8:	697b      	ldr	r3, [r7, #20]
   1bdda:	68db      	ldr	r3, [r3, #12]
   1bddc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   1bde0:	60bb      	str	r3, [r7, #8]
	if (read != data->async->rx_total_byte_cnt) {
   1bde2:	697b      	ldr	r3, [r7, #20]
   1bde4:	68db      	ldr	r3, [r3, #12]
   1bde6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1bde8:	68ba      	ldr	r2, [r7, #8]
   1bdea:	429a      	cmp	r2, r3
   1bdec:	d009      	beq.n	1be02 <rx_timeout+0x66>
		data->async->rx_total_byte_cnt = read;
   1bdee:	697b      	ldr	r3, [r7, #20]
   1bdf0:	68db      	ldr	r3, [r3, #12]
   1bdf2:	68ba      	ldr	r2, [r7, #8]
   1bdf4:	66da      	str	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   1bdf6:	697b      	ldr	r3, [r7, #20]
   1bdf8:	68da      	ldr	r2, [r3, #12]
   1bdfa:	697b      	ldr	r3, [r7, #20]
   1bdfc:	68db      	ldr	r3, [r3, #12]
   1bdfe:	6f52      	ldr	r2, [r2, #116]	; 0x74
   1be00:	67da      	str	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   1be02:	697b      	ldr	r3, [r7, #20]
   1be04:	68db      	ldr	r3, [r3, #12]
   1be06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
		    - data->async->rx_total_user_byte_cnt;
   1be08:	697b      	ldr	r3, [r7, #20]
   1be0a:	68db      	ldr	r3, [r3, #12]
   1be0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1be0e:	1ad3      	subs	r3, r2, r3
	int32_t len = data->async->rx_total_byte_cnt
   1be10:	61fb      	str	r3, [r7, #28]
	if (!HW_RX_COUNTING_ENABLED(data) &&
   1be12:	69fb      	ldr	r3, [r7, #28]
   1be14:	2b00      	cmp	r3, #0
   1be16:	da08      	bge.n	1be2a <rx_timeout+0x8e>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   1be18:	697b      	ldr	r3, [r7, #20]
   1be1a:	68da      	ldr	r2, [r3, #12]
   1be1c:	697b      	ldr	r3, [r7, #20]
   1be1e:	68db      	ldr	r3, [r3, #12]
   1be20:	6f12      	ldr	r2, [r2, #112]	; 0x70
   1be22:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		len = 0;
   1be26:	2300      	movs	r3, #0
   1be28:	61fb      	str	r3, [r7, #28]
	bool clipped = false;
   1be2a:	2300      	movs	r3, #0
   1be2c:	76fb      	strb	r3, [r7, #27]
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   1be2e:	697b      	ldr	r3, [r7, #20]
   1be30:	68db      	ldr	r3, [r3, #12]
   1be32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1be34:	69fb      	ldr	r3, [r7, #28]
   1be36:	441a      	add	r2, r3
   1be38:	697b      	ldr	r3, [r7, #20]
   1be3a:	68db      	ldr	r3, [r3, #12]
   1be3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1be3e:	429a      	cmp	r2, r3
   1be40:	d909      	bls.n	1be56 <rx_timeout+0xba>
		len = data->async->rx_buf_len - data->async->rx_offset;
   1be42:	697b      	ldr	r3, [r7, #20]
   1be44:	68db      	ldr	r3, [r3, #12]
   1be46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1be48:	697b      	ldr	r3, [r7, #20]
   1be4a:	68db      	ldr	r3, [r3, #12]
   1be4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1be4e:	1ad3      	subs	r3, r2, r3
   1be50:	61fb      	str	r3, [r7, #28]
		clipped = true;
   1be52:	2301      	movs	r3, #1
   1be54:	76fb      	strb	r3, [r7, #27]
	if (len > 0) {
   1be56:	69fb      	ldr	r3, [r7, #28]
   1be58:	2b00      	cmp	r3, #0
   1be5a:	dd33      	ble.n	1bec4 <rx_timeout+0x128>
		if (clipped ||
   1be5c:	7efb      	ldrb	r3, [r7, #27]
   1be5e:	2b00      	cmp	r3, #0
   1be60:	d107      	bne.n	1be72 <rx_timeout+0xd6>
			(data->async->rx_timeout_left
   1be62:	697b      	ldr	r3, [r7, #20]
   1be64:	68db      	ldr	r3, [r3, #12]
   1be66:	6fda      	ldr	r2, [r3, #124]	; 0x7c
				< data->async->rx_timeout_slab)) {
   1be68:	697b      	ldr	r3, [r7, #20]
   1be6a:	68db      	ldr	r3, [r3, #12]
   1be6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
		if (clipped ||
   1be6e:	429a      	cmp	r2, r3
   1be70:	da15      	bge.n	1be9e <rx_timeout+0x102>
			notify_uart_rx_rdy(dev, len);
   1be72:	69fb      	ldr	r3, [r7, #28]
   1be74:	4619      	mov	r1, r3
   1be76:	6938      	ldr	r0, [r7, #16]
   1be78:	f7ff fe7b 	bl	1bb72 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   1be7c:	697b      	ldr	r3, [r7, #20]
   1be7e:	68db      	ldr	r3, [r3, #12]
   1be80:	6e19      	ldr	r1, [r3, #96]	; 0x60
   1be82:	69fa      	ldr	r2, [r7, #28]
   1be84:	697b      	ldr	r3, [r7, #20]
   1be86:	68db      	ldr	r3, [r3, #12]
   1be88:	440a      	add	r2, r1
   1be8a:	661a      	str	r2, [r3, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   1be8c:	697b      	ldr	r3, [r7, #20]
   1be8e:	68db      	ldr	r3, [r3, #12]
   1be90:	6f19      	ldr	r1, [r3, #112]	; 0x70
   1be92:	69fa      	ldr	r2, [r7, #28]
   1be94:	697b      	ldr	r3, [r7, #20]
   1be96:	68db      	ldr	r3, [r3, #12]
   1be98:	440a      	add	r2, r1
   1be9a:	671a      	str	r2, [r3, #112]	; 0x70
   1be9c:	e009      	b.n	1beb2 <rx_timeout+0x116>
			data->async->rx_timeout_left -=
   1be9e:	697b      	ldr	r3, [r7, #20]
   1bea0:	68db      	ldr	r3, [r3, #12]
   1bea2:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
				data->async->rx_timeout_slab;
   1bea4:	697b      	ldr	r3, [r7, #20]
   1bea6:	68db      	ldr	r3, [r3, #12]
   1bea8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
			data->async->rx_timeout_left -=
   1beaa:	697b      	ldr	r3, [r7, #20]
   1beac:	68db      	ldr	r3, [r3, #12]
   1beae:	1a8a      	subs	r2, r1, r2
   1beb0:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   1beb2:	7efb      	ldrb	r3, [r7, #27]
   1beb4:	2b00      	cmp	r3, #0
   1beb6:	d005      	beq.n	1bec4 <rx_timeout+0x128>
			k_timer_stop(&data->async->rx_timeout_timer);
   1beb8:	697b      	ldr	r3, [r7, #20]
   1beba:	68db      	ldr	r3, [r3, #12]
   1bebc:	3380      	adds	r3, #128	; 0x80
   1bebe:	4618      	mov	r0, r3
   1bec0:	f7ff f9e1 	bl	1b286 <k_timer_stop>
	nrf_uarte_int_enable(get_uarte_instance(dev),
   1bec4:	6938      	ldr	r0, [r7, #16]
   1bec6:	f7ff fb69 	bl	1b59c <get_uarte_instance>
   1beca:	4603      	mov	r3, r0
   1becc:	2110      	movs	r1, #16
   1bece:	4618      	mov	r0, r3
   1bed0:	f7ff fa59 	bl	1b386 <nrf_uarte_int_enable>
   1bed4:	e000      	b.n	1bed8 <rx_timeout+0x13c>
		return;
   1bed6:	bf00      	nop
}
   1bed8:	3720      	adds	r7, #32
   1beda:	46bd      	mov	sp, r7
   1bedc:	bd80      	pop	{r7, pc}

0001bede <error_isr>:
{
   1bede:	b580      	push	{r7, lr}
   1bee0:	b08a      	sub	sp, #40	; 0x28
   1bee2:	af00      	add	r7, sp, #0
   1bee4:	6078      	str	r0, [r7, #4]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1bee6:	6878      	ldr	r0, [r7, #4]
   1bee8:	f7ff fb58 	bl	1b59c <get_uarte_instance>
   1beec:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t err = nrf_uarte_errorsrc_get_and_clear(uarte);
   1beee:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1bef0:	f7ff fa74 	bl	1b3dc <nrf_uarte_errorsrc_get_and_clear>
   1bef4:	6238      	str	r0, [r7, #32]
	struct uart_event evt = {
   1bef6:	f107 030c 	add.w	r3, r7, #12
   1befa:	2200      	movs	r2, #0
   1befc:	601a      	str	r2, [r3, #0]
   1befe:	605a      	str	r2, [r3, #4]
   1bf00:	609a      	str	r2, [r3, #8]
   1bf02:	60da      	str	r2, [r3, #12]
   1bf04:	611a      	str	r2, [r3, #16]
   1bf06:	2306      	movs	r3, #6
   1bf08:	733b      	strb	r3, [r7, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1bf0a:	6a3b      	ldr	r3, [r7, #32]
   1bf0c:	f003 0301 	and.w	r3, r3, #1
   1bf10:	2b00      	cmp	r3, #0
   1bf12:	d113      	bne.n	1bf3c <error_isr+0x5e>
   1bf14:	6a3b      	ldr	r3, [r7, #32]
   1bf16:	f003 0302 	and.w	r3, r3, #2
   1bf1a:	2b00      	cmp	r3, #0
   1bf1c:	d10c      	bne.n	1bf38 <error_isr+0x5a>
   1bf1e:	6a3b      	ldr	r3, [r7, #32]
   1bf20:	f003 0304 	and.w	r3, r3, #4
   1bf24:	2b00      	cmp	r3, #0
   1bf26:	d105      	bne.n	1bf34 <error_isr+0x56>
   1bf28:	6a3b      	ldr	r3, [r7, #32]
   1bf2a:	b2db      	uxtb	r3, r3
   1bf2c:	f003 0308 	and.w	r3, r3, #8
   1bf30:	b2db      	uxtb	r3, r3
   1bf32:	e004      	b.n	1bf3e <error_isr+0x60>
   1bf34:	2304      	movs	r3, #4
   1bf36:	e002      	b.n	1bf3e <error_isr+0x60>
   1bf38:	2302      	movs	r3, #2
   1bf3a:	e000      	b.n	1bf3e <error_isr+0x60>
   1bf3c:	2301      	movs	r3, #1
	struct uart_event evt = {
   1bf3e:	743b      	strb	r3, [r7, #16]
	user_callback(dev, &evt);
   1bf40:	f107 030c 	add.w	r3, r7, #12
   1bf44:	4619      	mov	r1, r3
   1bf46:	6878      	ldr	r0, [r7, #4]
   1bf48:	f7ff fdf9 	bl	1bb3e <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1bf4c:	6878      	ldr	r0, [r7, #4]
   1bf4e:	f7ff feda 	bl	1bd06 <uarte_nrfx_rx_disable>
}
   1bf52:	bf00      	nop
   1bf54:	3728      	adds	r7, #40	; 0x28
   1bf56:	46bd      	mov	sp, r7
   1bf58:	bd80      	pop	{r7, pc}

0001bf5a <rxstarted_isr>:
{
   1bf5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bf5e:	b08b      	sub	sp, #44	; 0x2c
   1bf60:	af02      	add	r7, sp, #8
   1bf62:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1bf64:	687b      	ldr	r3, [r7, #4]
   1bf66:	691b      	ldr	r3, [r3, #16]
   1bf68:	61fb      	str	r3, [r7, #28]
	struct uart_event evt = {
   1bf6a:	f107 0308 	add.w	r3, r7, #8
   1bf6e:	2200      	movs	r2, #0
   1bf70:	601a      	str	r2, [r3, #0]
   1bf72:	605a      	str	r2, [r3, #4]
   1bf74:	609a      	str	r2, [r3, #8]
   1bf76:	60da      	str	r2, [r3, #12]
   1bf78:	611a      	str	r2, [r3, #16]
   1bf7a:	2303      	movs	r3, #3
   1bf7c:	723b      	strb	r3, [r7, #8]
	user_callback(dev, &evt);
   1bf7e:	f107 0308 	add.w	r3, r7, #8
   1bf82:	4619      	mov	r1, r3
   1bf84:	6878      	ldr	r0, [r7, #4]
   1bf86:	f7ff fdda 	bl	1bb3e <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1bf8a:	69fb      	ldr	r3, [r7, #28]
   1bf8c:	68db      	ldr	r3, [r3, #12]
   1bf8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1bf90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bf94:	d02e      	beq.n	1bff4 <rxstarted_isr+0x9a>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1bf96:	69fb      	ldr	r3, [r7, #28]
   1bf98:	68da      	ldr	r2, [r3, #12]
   1bf9a:	69fb      	ldr	r3, [r7, #28]
   1bf9c:	68db      	ldr	r3, [r3, #12]
   1bf9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
   1bfa0:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1bfa2:	69fb      	ldr	r3, [r7, #28]
   1bfa4:	68db      	ldr	r3, [r3, #12]
   1bfa6:	f103 0680 	add.w	r6, r3, #128	; 0x80
			      K_USEC(data->async->rx_timeout_slab),
   1bfaa:	69fb      	ldr	r3, [r7, #28]
   1bfac:	68db      	ldr	r3, [r3, #12]
   1bfae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1bfb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1bfb4:	17da      	asrs	r2, r3, #31
   1bfb6:	4698      	mov	r8, r3
   1bfb8:	4691      	mov	r9, r2
   1bfba:	4640      	mov	r0, r8
   1bfbc:	4649      	mov	r1, r9
   1bfbe:	f7f1 fc59 	bl	d874 <k_us_to_ticks_ceil64>
   1bfc2:	4602      	mov	r2, r0
   1bfc4:	460b      	mov	r3, r1
   1bfc6:	4690      	mov	r8, r2
   1bfc8:	4699      	mov	r9, r3
			      K_USEC(data->async->rx_timeout_slab));
   1bfca:	69fb      	ldr	r3, [r7, #28]
   1bfcc:	68db      	ldr	r3, [r3, #12]
   1bfce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1bfd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1bfd4:	17da      	asrs	r2, r3, #31
   1bfd6:	461c      	mov	r4, r3
   1bfd8:	4615      	mov	r5, r2
   1bfda:	4620      	mov	r0, r4
   1bfdc:	4629      	mov	r1, r5
   1bfde:	f7f1 fc49 	bl	d874 <k_us_to_ticks_ceil64>
   1bfe2:	4602      	mov	r2, r0
   1bfe4:	460b      	mov	r3, r1
		k_timer_start(&data->async->rx_timeout_timer,
   1bfe6:	e9cd 2300 	strd	r2, r3, [sp]
   1bfea:	4642      	mov	r2, r8
   1bfec:	464b      	mov	r3, r9
   1bfee:	4630      	mov	r0, r6
   1bff0:	f7ff f936 	bl	1b260 <k_timer_start>
}
   1bff4:	bf00      	nop
   1bff6:	3724      	adds	r7, #36	; 0x24
   1bff8:	46bd      	mov	sp, r7
   1bffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001bffe <endrx_isr>:
{
   1bffe:	b580      	push	{r7, lr}
   1c000:	b08a      	sub	sp, #40	; 0x28
   1c002:	af00      	add	r7, sp, #0
   1c004:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1c006:	687b      	ldr	r3, [r7, #4]
   1c008:	691b      	ldr	r3, [r3, #16]
   1c00a:	623b      	str	r3, [r7, #32]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1c00c:	6878      	ldr	r0, [r7, #4]
   1c00e:	f7ff fac5 	bl	1b59c <get_uarte_instance>
   1c012:	61f8      	str	r0, [r7, #28]
	data->async->is_in_irq = true;
   1c014:	6a3b      	ldr	r3, [r7, #32]
   1c016:	68db      	ldr	r3, [r3, #12]
   1c018:	2201      	movs	r2, #1
   1c01a:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	k_timer_stop(&data->async->rx_timeout_timer);
   1c01e:	6a3b      	ldr	r3, [r7, #32]
   1c020:	68db      	ldr	r3, [r3, #12]
   1c022:	3380      	adds	r3, #128	; 0x80
   1c024:	4618      	mov	r0, r3
   1c026:	f7ff f92e 	bl	1b286 <k_timer_stop>
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
   1c02a:	69f8      	ldr	r0, [r7, #28]
   1c02c:	f7ff fa78 	bl	1b520 <nrf_uarte_rx_amount_get>
   1c030:	4602      	mov	r2, r0
				data->async->rx_flush_cnt;
   1c032:	6a3b      	ldr	r3, [r7, #32]
   1c034:	68db      	ldr	r3, [r3, #12]
   1c036:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
   1c03a:	4413      	add	r3, r2
   1c03c:	61bb      	str	r3, [r7, #24]
	data->async->rx_flush_cnt = 0;
   1c03e:	6a3b      	ldr	r3, [r7, #32]
   1c040:	68db      	ldr	r3, [r3, #12]
   1c042:	2200      	movs	r2, #0
   1c044:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1c048:	69ba      	ldr	r2, [r7, #24]
   1c04a:	6a3b      	ldr	r3, [r7, #32]
   1c04c:	68db      	ldr	r3, [r3, #12]
   1c04e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1c050:	1ad3      	subs	r3, r2, r3
   1c052:	627b      	str	r3, [r7, #36]	; 0x24
	if (rx_len < 0) {
   1c054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c056:	2b00      	cmp	r3, #0
   1c058:	da01      	bge.n	1c05e <endrx_isr+0x60>
		rx_len = 0;
   1c05a:	2300      	movs	r3, #0
   1c05c:	627b      	str	r3, [r7, #36]	; 0x24
	data->async->rx_total_user_byte_cnt += rx_len;
   1c05e:	6a3b      	ldr	r3, [r7, #32]
   1c060:	68db      	ldr	r3, [r3, #12]
   1c062:	6f19      	ldr	r1, [r3, #112]	; 0x70
   1c064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c066:	6a3b      	ldr	r3, [r7, #32]
   1c068:	68db      	ldr	r3, [r3, #12]
   1c06a:	440a      	add	r2, r1
   1c06c:	671a      	str	r2, [r3, #112]	; 0x70
	if (rx_len > 0) {
   1c06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c070:	2b00      	cmp	r3, #0
   1c072:	dd04      	ble.n	1c07e <endrx_isr+0x80>
		notify_uart_rx_rdy(dev, rx_len);
   1c074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c076:	4619      	mov	r1, r3
   1c078:	6878      	ldr	r0, [r7, #4]
   1c07a:	f7ff fd7a 	bl	1bb72 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1c07e:	6a3b      	ldr	r3, [r7, #32]
   1c080:	68db      	ldr	r3, [r3, #12]
   1c082:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   1c086:	b2db      	uxtb	r3, r3
   1c088:	f083 0301 	eor.w	r3, r3, #1
   1c08c:	b2db      	uxtb	r3, r3
   1c08e:	2b00      	cmp	r3, #0
   1c090:	d005      	beq.n	1c09e <endrx_isr+0xa0>
		data->async->is_in_irq = false;
   1c092:	6a3b      	ldr	r3, [r7, #32]
   1c094:	68db      	ldr	r3, [r3, #12]
   1c096:	2200      	movs	r2, #0
   1c098:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
		return;
   1c09c:	e054      	b.n	1c148 <endrx_isr+0x14a>
	rx_buf_release(dev, &data->async->rx_buf);
   1c09e:	6a3b      	ldr	r3, [r7, #32]
   1c0a0:	68db      	ldr	r3, [r3, #12]
   1c0a2:	3358      	adds	r3, #88	; 0x58
   1c0a4:	4619      	mov	r1, r3
   1c0a6:	6878      	ldr	r0, [r7, #4]
   1c0a8:	f7ff fd89 	bl	1bbbe <rx_buf_release>
	__asm__ volatile(
   1c0ac:	f04f 0320 	mov.w	r3, #32
   1c0b0:	f3ef 8211 	mrs	r2, BASEPRI
   1c0b4:	f383 8812 	msr	BASEPRI_MAX, r3
   1c0b8:	f3bf 8f6f 	isb	sy
   1c0bc:	613a      	str	r2, [r7, #16]
   1c0be:	60fb      	str	r3, [r7, #12]
	return key;
   1c0c0:	693b      	ldr	r3, [r7, #16]
	unsigned int key = irq_lock();
   1c0c2:	617b      	str	r3, [r7, #20]
	if (data->async->rx_next_buf) {
   1c0c4:	6a3b      	ldr	r3, [r7, #32]
   1c0c6:	68db      	ldr	r3, [r3, #12]
   1c0c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1c0ca:	2b00      	cmp	r3, #0
   1c0cc:	d02b      	beq.n	1c126 <endrx_isr+0x128>
		data->async->rx_buf = data->async->rx_next_buf;
   1c0ce:	6a3b      	ldr	r3, [r7, #32]
   1c0d0:	68da      	ldr	r2, [r3, #12]
   1c0d2:	6a3b      	ldr	r3, [r7, #32]
   1c0d4:	68db      	ldr	r3, [r3, #12]
   1c0d6:	6e52      	ldr	r2, [r2, #100]	; 0x64
   1c0d8:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1c0da:	6a3b      	ldr	r3, [r7, #32]
   1c0dc:	68da      	ldr	r2, [r3, #12]
   1c0de:	6a3b      	ldr	r3, [r7, #32]
   1c0e0:	68db      	ldr	r3, [r3, #12]
   1c0e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
   1c0e4:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1c0e6:	6a3b      	ldr	r3, [r7, #32]
   1c0e8:	68db      	ldr	r3, [r3, #12]
   1c0ea:	2200      	movs	r2, #0
   1c0ec:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1c0ee:	6a3b      	ldr	r3, [r7, #32]
   1c0f0:	68db      	ldr	r3, [r3, #12]
   1c0f2:	2200      	movs	r2, #0
   1c0f4:	669a      	str	r2, [r3, #104]	; 0x68
		data->async->rx_offset = 0;
   1c0f6:	6a3b      	ldr	r3, [r7, #32]
   1c0f8:	68db      	ldr	r3, [r3, #12]
   1c0fa:	2200      	movs	r2, #0
   1c0fc:	661a      	str	r2, [r3, #96]	; 0x60
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1c0fe:	f44f 71a6 	mov.w	r1, #332	; 0x14c
   1c102:	69f8      	ldr	r0, [r7, #28]
   1c104:	f7ff f8f8 	bl	1b2f8 <nrf_uarte_event_check>
   1c108:	4603      	mov	r3, r0
   1c10a:	f083 0301 	eor.w	r3, r3, #1
   1c10e:	b2db      	uxtb	r3, r3
   1c110:	2b00      	cmp	r3, #0
   1c112:	d003      	beq.n	1c11c <endrx_isr+0x11e>
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
   1c114:	2100      	movs	r1, #0
   1c116:	69f8      	ldr	r0, [r7, #28]
   1c118:	f7ff f98c 	bl	1b434 <nrf_uarte_task_trigger>
		nrf_uarte_shorts_disable(uarte, NRF_UARTE_SHORT_ENDRX_STARTRX);
   1c11c:	2120      	movs	r1, #32
   1c11e:	69f8      	ldr	r0, [r7, #28]
   1c120:	f7ff f91e 	bl	1b360 <nrf_uarte_shorts_disable>
   1c124:	e003      	b.n	1c12e <endrx_isr+0x130>
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPRX);
   1c126:	2104      	movs	r1, #4
   1c128:	69f8      	ldr	r0, [r7, #28]
   1c12a:	f7ff f983 	bl	1b434 <nrf_uarte_task_trigger>
   1c12e:	697b      	ldr	r3, [r7, #20]
   1c130:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   1c132:	68bb      	ldr	r3, [r7, #8]
   1c134:	f383 8811 	msr	BASEPRI, r3
   1c138:	f3bf 8f6f 	isb	sy
}
   1c13c:	bf00      	nop
	data->async->is_in_irq = false;
   1c13e:	6a3b      	ldr	r3, [r7, #32]
   1c140:	68db      	ldr	r3, [r3, #12]
   1c142:	2200      	movs	r2, #0
   1c144:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
}
   1c148:	3728      	adds	r7, #40	; 0x28
   1c14a:	46bd      	mov	sp, r7
   1c14c:	bd80      	pop	{r7, pc}

0001c14e <async_uart_release>:
{
   1c14e:	b590      	push	{r4, r7, lr}
   1c150:	b089      	sub	sp, #36	; 0x24
   1c152:	af00      	add	r7, sp, #0
   1c154:	6078      	str	r0, [r7, #4]
   1c156:	6039      	str	r1, [r7, #0]
	struct uarte_nrfx_data *data = dev->data;
   1c158:	687b      	ldr	r3, [r7, #4]
   1c15a:	691b      	ldr	r3, [r3, #16]
   1c15c:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1c15e:	f04f 0320 	mov.w	r3, #32
   1c162:	f3ef 8211 	mrs	r2, BASEPRI
   1c166:	f383 8812 	msr	BASEPRI_MAX, r3
   1c16a:	f3bf 8f6f 	isb	sy
   1c16e:	617a      	str	r2, [r7, #20]
   1c170:	613b      	str	r3, [r7, #16]
	return key;
   1c172:	697b      	ldr	r3, [r7, #20]
	unsigned int key = irq_lock();
   1c174:	61bb      	str	r3, [r7, #24]
	data->async->low_power_mask &= ~dir_mask;
   1c176:	69fb      	ldr	r3, [r7, #28]
   1c178:	68db      	ldr	r3, [r3, #12]
   1c17a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   1c17e:	461a      	mov	r2, r3
   1c180:	683b      	ldr	r3, [r7, #0]
   1c182:	43db      	mvns	r3, r3
   1c184:	401a      	ands	r2, r3
   1c186:	69fb      	ldr	r3, [r7, #28]
   1c188:	68db      	ldr	r3, [r3, #12]
   1c18a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   1c18e:	69fb      	ldr	r3, [r7, #28]
   1c190:	68db      	ldr	r3, [r3, #12]
   1c192:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   1c196:	2b00      	cmp	r3, #0
   1c198:	d112      	bne.n	1c1c0 <async_uart_release+0x72>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   1c19a:	683b      	ldr	r3, [r7, #0]
   1c19c:	2b02      	cmp	r3, #2
   1c19e:	d10c      	bne.n	1c1ba <async_uart_release+0x6c>
				rx_flush(dev, data->async->rx_flush_buffer,
   1c1a0:	69fb      	ldr	r3, [r7, #28]
   1c1a2:	68db      	ldr	r3, [r3, #12]
   1c1a4:	f103 01c4 	add.w	r1, r3, #196	; 0xc4
			data->async->rx_flush_cnt =
   1c1a8:	69fb      	ldr	r3, [r7, #28]
   1c1aa:	68dc      	ldr	r4, [r3, #12]
				rx_flush(dev, data->async->rx_flush_buffer,
   1c1ac:	2205      	movs	r2, #5
   1c1ae:	6878      	ldr	r0, [r7, #4]
   1c1b0:	f7f2 f87c 	bl	e2ac <rx_flush>
   1c1b4:	4603      	mov	r3, r0
			data->async->rx_flush_cnt =
   1c1b6:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		uart_disable(dev);
   1c1ba:	6878      	ldr	r0, [r7, #4]
   1c1bc:	f7ff fb89 	bl	1b8d2 <uart_disable>
   1c1c0:	69bb      	ldr	r3, [r7, #24]
   1c1c2:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   1c1c4:	68fb      	ldr	r3, [r7, #12]
   1c1c6:	f383 8811 	msr	BASEPRI, r3
   1c1ca:	f3bf 8f6f 	isb	sy
}
   1c1ce:	bf00      	nop
}
   1c1d0:	bf00      	nop
   1c1d2:	3724      	adds	r7, #36	; 0x24
   1c1d4:	46bd      	mov	sp, r7
   1c1d6:	bd90      	pop	{r4, r7, pc}

0001c1d8 <rxto_isr>:
{
   1c1d8:	b580      	push	{r7, lr}
   1c1da:	b084      	sub	sp, #16
   1c1dc:	af00      	add	r7, sp, #0
   1c1de:	6078      	str	r0, [r7, #4]
	const struct uarte_nrfx_config *config = dev->config;
   1c1e0:	687b      	ldr	r3, [r7, #4]
   1c1e2:	685b      	ldr	r3, [r3, #4]
   1c1e4:	60fb      	str	r3, [r7, #12]
	struct uarte_nrfx_data *data = dev->data;
   1c1e6:	687b      	ldr	r3, [r7, #4]
   1c1e8:	691b      	ldr	r3, [r3, #16]
   1c1ea:	60bb      	str	r3, [r7, #8]
	rx_buf_release(dev, &data->async->rx_buf);
   1c1ec:	68bb      	ldr	r3, [r7, #8]
   1c1ee:	68db      	ldr	r3, [r3, #12]
   1c1f0:	3358      	adds	r3, #88	; 0x58
   1c1f2:	4619      	mov	r1, r3
   1c1f4:	6878      	ldr	r0, [r7, #4]
   1c1f6:	f7ff fce2 	bl	1bbbe <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1c1fa:	68bb      	ldr	r3, [r7, #8]
   1c1fc:	68db      	ldr	r3, [r3, #12]
   1c1fe:	3364      	adds	r3, #100	; 0x64
   1c200:	4619      	mov	r1, r3
   1c202:	6878      	ldr	r0, [r7, #4]
   1c204:	f7ff fcdb 	bl	1bbbe <rx_buf_release>
	data->async->rx_enabled = false;
   1c208:	68bb      	ldr	r3, [r7, #8]
   1c20a:	68db      	ldr	r3, [r3, #12]
   1c20c:	2200      	movs	r2, #0
   1c20e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (data->async->discard_rx_fifo) {
   1c212:	68bb      	ldr	r3, [r7, #8]
   1c214:	68db      	ldr	r3, [r3, #12]
   1c216:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
   1c21a:	b2db      	uxtb	r3, r3
   1c21c:	2b00      	cmp	r3, #0
   1c21e:	d009      	beq.n	1c234 <rxto_isr+0x5c>
		data->async->discard_rx_fifo = false;
   1c220:	68bb      	ldr	r3, [r7, #8]
   1c222:	68db      	ldr	r3, [r3, #12]
   1c224:	2200      	movs	r2, #0
   1c226:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		(void)rx_flush(dev, NULL, 0);
   1c22a:	2200      	movs	r2, #0
   1c22c:	2100      	movs	r1, #0
   1c22e:	6878      	ldr	r0, [r7, #4]
   1c230:	f7f2 f83c 	bl	e2ac <rx_flush>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c234:	68fb      	ldr	r3, [r7, #12]
   1c236:	685b      	ldr	r3, [r3, #4]
   1c238:	f003 0310 	and.w	r3, r3, #16
   1c23c:	2b00      	cmp	r3, #0
   1c23e:	d003      	beq.n	1c248 <rxto_isr+0x70>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1c240:	2102      	movs	r1, #2
   1c242:	6878      	ldr	r0, [r7, #4]
   1c244:	f7ff ff83 	bl	1c14e <async_uart_release>
	notify_rx_disable(dev);
   1c248:	6878      	ldr	r0, [r7, #4]
   1c24a:	f7ff fcdb 	bl	1bc04 <notify_rx_disable>
}
   1c24e:	bf00      	nop
   1c250:	3710      	adds	r7, #16
   1c252:	46bd      	mov	sp, r7
   1c254:	bd80      	pop	{r7, pc}

0001c256 <txstopped_isr>:
{
   1c256:	b580      	push	{r7, lr}
   1c258:	b096      	sub	sp, #88	; 0x58
   1c25a:	af00      	add	r7, sp, #0
   1c25c:	6078      	str	r0, [r7, #4]
	const struct uarte_nrfx_config *config = dev->config;
   1c25e:	687b      	ldr	r3, [r7, #4]
   1c260:	685b      	ldr	r3, [r3, #4]
   1c262:	653b      	str	r3, [r7, #80]	; 0x50
	struct uarte_nrfx_data *data = dev->data;
   1c264:	687b      	ldr	r3, [r7, #4]
   1c266:	691b      	ldr	r3, [r3, #16]
   1c268:	64fb      	str	r3, [r7, #76]	; 0x4c
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1c26a:	6878      	ldr	r0, [r7, #4]
   1c26c:	f7ff f996 	bl	1b59c <get_uarte_instance>
   1c270:	64b8      	str	r0, [r7, #72]	; 0x48
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1c274:	685b      	ldr	r3, [r3, #4]
   1c276:	f003 0310 	and.w	r3, r3, #16
   1c27a:	2b00      	cmp	r3, #0
   1c27c:	d00e      	beq.n	1c29c <txstopped_isr+0x46>
		nrf_uarte_int_disable(uarte, NRF_UARTE_INT_TXSTOPPED_MASK);
   1c27e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1c282:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1c284:	f7ff f89c 	bl	1b3c0 <nrf_uarte_int_disable>
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1c288:	2101      	movs	r1, #1
   1c28a:	6878      	ldr	r0, [r7, #4]
   1c28c:	f7ff ff5f 	bl	1c14e <async_uart_release>
		if (!data->async->tx_size) {
   1c290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c292:	68db      	ldr	r3, [r3, #12]
   1c294:	68db      	ldr	r3, [r3, #12]
   1c296:	2b00      	cmp	r3, #0
   1c298:	f000 80bc 	beq.w	1c414 <txstopped_isr+0x1be>
	if (!data->async->tx_buf) {
   1c29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c29e:	68db      	ldr	r3, [r3, #12]
   1c2a0:	689b      	ldr	r3, [r3, #8]
   1c2a2:	2b00      	cmp	r3, #0
   1c2a4:	f000 80b8 	beq.w	1c418 <txstopped_isr+0x1c2>
	__asm__ volatile(
   1c2a8:	f04f 0320 	mov.w	r3, #32
   1c2ac:	f3ef 8211 	mrs	r2, BASEPRI
   1c2b0:	f383 8812 	msr	BASEPRI_MAX, r3
   1c2b4:	f3bf 8f6f 	isb	sy
   1c2b8:	643a      	str	r2, [r7, #64]	; 0x40
   1c2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	return key;
   1c2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	key = irq_lock();
   1c2be:	647b      	str	r3, [r7, #68]	; 0x44
	size_t amount = (data->async->tx_amount >= 0) ?
   1c2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c2c2:	68db      	ldr	r3, [r3, #12]
   1c2c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1c2c8:	2b00      	cmp	r3, #0
   1c2ca:	db04      	blt.n	1c2d6 <txstopped_isr+0x80>
   1c2cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c2ce:	68db      	ldr	r3, [r3, #12]
   1c2d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   1c2d4:	e003      	b.n	1c2de <txstopped_isr+0x88>
   1c2d6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1c2d8:	f7ff f903 	bl	1b4e2 <nrf_uarte_tx_amount_get>
   1c2dc:	4603      	mov	r3, r0
	size_t amount = (data->async->tx_amount >= 0) ?
   1c2de:	657b      	str	r3, [r7, #84]	; 0x54
   1c2e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1c2e2:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   1c2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c2e6:	f383 8811 	msr	BASEPRI, r3
   1c2ea:	f3bf 8f6f 	isb	sy
}
   1c2ee:	bf00      	nop
	if (data->async->pending_tx) {
   1c2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c2f2:	68db      	ldr	r3, [r3, #12]
   1c2f4:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   1c2f8:	2b00      	cmp	r3, #0
   1c2fa:	d018      	beq.n	1c32e <txstopped_isr+0xd8>
	__asm__ volatile(
   1c2fc:	f04f 0320 	mov.w	r3, #32
   1c300:	f3ef 8211 	mrs	r2, BASEPRI
   1c304:	f383 8812 	msr	BASEPRI_MAX, r3
   1c308:	f3bf 8f6f 	isb	sy
   1c30c:	633a      	str	r2, [r7, #48]	; 0x30
   1c30e:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
   1c310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		key = irq_lock();
   1c312:	647b      	str	r3, [r7, #68]	; 0x44
		start_tx_locked(dev, data);
   1c314:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1c316:	6878      	ldr	r0, [r7, #4]
   1c318:	f7ff fb07 	bl	1b92a <start_tx_locked>
   1c31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1c31e:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   1c320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c322:	f383 8811 	msr	BASEPRI, r3
   1c326:	f3bf 8f6f 	isb	sy
}
   1c32a:	bf00      	nop
		return;
   1c32c:	e075      	b.n	1c41a <txstopped_isr+0x1c4>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1c32e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c330:	68db      	ldr	r3, [r3, #12]
   1c332:	689a      	ldr	r2, [r3, #8]
   1c334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c336:	68db      	ldr	r3, [r3, #12]
   1c338:	691b      	ldr	r3, [r3, #16]
   1c33a:	429a      	cmp	r2, r3
   1c33c:	d037      	beq.n	1c3ae <txstopped_isr+0x158>
		if (amount == data->async->xfer_len) {
   1c33e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c340:	68db      	ldr	r3, [r3, #12]
   1c342:	695b      	ldr	r3, [r3, #20]
   1c344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1c346:	429a      	cmp	r2, r3
   1c348:	d12b      	bne.n	1c3a2 <txstopped_isr+0x14c>
			data->async->tx_cache_offset += amount;
   1c34a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c34c:	68db      	ldr	r3, [r3, #12]
   1c34e:	69d9      	ldr	r1, [r3, #28]
   1c350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c352:	68db      	ldr	r3, [r3, #12]
   1c354:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1c356:	440a      	add	r2, r1
   1c358:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1c35a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1c35c:	f7ff fb12 	bl	1b984 <setup_tx_cache>
   1c360:	4603      	mov	r3, r0
   1c362:	2b00      	cmp	r3, #0
   1c364:	d018      	beq.n	1c398 <txstopped_isr+0x142>
	__asm__ volatile(
   1c366:	f04f 0320 	mov.w	r3, #32
   1c36a:	f3ef 8211 	mrs	r2, BASEPRI
   1c36e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c372:	f3bf 8f6f 	isb	sy
   1c376:	627a      	str	r2, [r7, #36]	; 0x24
   1c378:	623b      	str	r3, [r7, #32]
	return key;
   1c37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				key = irq_lock();
   1c37c:	647b      	str	r3, [r7, #68]	; 0x44
				start_tx_locked(dev, data);
   1c37e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1c380:	6878      	ldr	r0, [r7, #4]
   1c382:	f7ff fad2 	bl	1b92a <start_tx_locked>
   1c386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1c388:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
   1c38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c38c:	f383 8811 	msr	BASEPRI, r3
   1c390:	f3bf 8f6f 	isb	sy
}
   1c394:	bf00      	nop
				return;
   1c396:	e040      	b.n	1c41a <txstopped_isr+0x1c4>
			amount = data->async->tx_cache_offset;
   1c398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c39a:	68db      	ldr	r3, [r3, #12]
   1c39c:	69db      	ldr	r3, [r3, #28]
   1c39e:	657b      	str	r3, [r7, #84]	; 0x54
   1c3a0:	e005      	b.n	1c3ae <txstopped_isr+0x158>
			amount += data->async->tx_cache_offset;
   1c3a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c3a4:	68db      	ldr	r3, [r3, #12]
   1c3a6:	69db      	ldr	r3, [r3, #28]
   1c3a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1c3aa:	4413      	add	r3, r2
   1c3ac:	657b      	str	r3, [r7, #84]	; 0x54
	k_timer_stop(&data->async->tx_timeout_timer);
   1c3ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c3b0:	68db      	ldr	r3, [r3, #12]
   1c3b2:	3320      	adds	r3, #32
   1c3b4:	4618      	mov	r0, r3
   1c3b6:	f7fe ff66 	bl	1b286 <k_timer_stop>
	struct uart_event evt = {
   1c3ba:	f107 030c 	add.w	r3, r7, #12
   1c3be:	2200      	movs	r2, #0
   1c3c0:	601a      	str	r2, [r3, #0]
   1c3c2:	605a      	str	r2, [r3, #4]
   1c3c4:	609a      	str	r2, [r3, #8]
   1c3c6:	60da      	str	r2, [r3, #12]
   1c3c8:	611a      	str	r2, [r3, #16]
		.data.tx.buf = data->async->tx_buf,
   1c3ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c3cc:	68db      	ldr	r3, [r3, #12]
   1c3ce:	689b      	ldr	r3, [r3, #8]
	struct uart_event evt = {
   1c3d0:	613b      	str	r3, [r7, #16]
   1c3d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1c3d4:	617b      	str	r3, [r7, #20]
	if (amount == data->async->tx_size) {
   1c3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c3d8:	68db      	ldr	r3, [r3, #12]
   1c3da:	68db      	ldr	r3, [r3, #12]
   1c3dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1c3de:	429a      	cmp	r2, r3
   1c3e0:	d102      	bne.n	1c3e8 <txstopped_isr+0x192>
		evt.type = UART_TX_DONE;
   1c3e2:	2300      	movs	r3, #0
   1c3e4:	733b      	strb	r3, [r7, #12]
   1c3e6:	e001      	b.n	1c3ec <txstopped_isr+0x196>
		evt.type = UART_TX_ABORTED;
   1c3e8:	2301      	movs	r3, #1
   1c3ea:	733b      	strb	r3, [r7, #12]
	nrf_uarte_int_disable(uarte, NRF_UARTE_INT_TXSTOPPED_MASK);
   1c3ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1c3f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1c3f2:	f7fe ffe5 	bl	1b3c0 <nrf_uarte_int_disable>
	data->async->tx_buf = NULL;
   1c3f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c3f8:	68db      	ldr	r3, [r3, #12]
   1c3fa:	2200      	movs	r2, #0
   1c3fc:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   1c3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c400:	68db      	ldr	r3, [r3, #12]
   1c402:	2200      	movs	r2, #0
   1c404:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   1c406:	f107 030c 	add.w	r3, r7, #12
   1c40a:	4619      	mov	r1, r3
   1c40c:	6878      	ldr	r0, [r7, #4]
   1c40e:	f7ff fb96 	bl	1bb3e <user_callback>
   1c412:	e002      	b.n	1c41a <txstopped_isr+0x1c4>
			return;
   1c414:	bf00      	nop
   1c416:	e000      	b.n	1c41a <txstopped_isr+0x1c4>
		return;
   1c418:	bf00      	nop
}
   1c41a:	3758      	adds	r7, #88	; 0x58
   1c41c:	46bd      	mov	sp, r7
   1c41e:	bd80      	pop	{r7, pc}

0001c420 <uarte_nrfx_isr_async>:
{
   1c420:	b580      	push	{r7, lr}
   1c422:	b084      	sub	sp, #16
   1c424:	af00      	add	r7, sp, #0
   1c426:	6078      	str	r0, [r7, #4]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1c428:	6878      	ldr	r0, [r7, #4]
   1c42a:	f7ff f8b7 	bl	1b59c <get_uarte_instance>
   1c42e:	60f8      	str	r0, [r7, #12]
	struct uarte_nrfx_data *data = dev->data;
   1c430:	687b      	ldr	r3, [r7, #4]
   1c432:	691b      	ldr	r3, [r3, #16]
   1c434:	60bb      	str	r3, [r7, #8]
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   1c436:	f44f 7184 	mov.w	r1, #264	; 0x108
   1c43a:	68f8      	ldr	r0, [r7, #12]
   1c43c:	f7fe ff5c 	bl	1b2f8 <nrf_uarte_event_check>
   1c440:	4603      	mov	r3, r0
	if (!HW_RX_COUNTING_ENABLED(data)
   1c442:	2b00      	cmp	r3, #0
   1c444:	d00c      	beq.n	1c460 <uarte_nrfx_isr_async+0x40>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXDRDY);
   1c446:	f44f 7184 	mov.w	r1, #264	; 0x108
   1c44a:	68f8      	ldr	r0, [r7, #12]
   1c44c:	f7fe ff3f 	bl	1b2ce <nrf_uarte_event_clear>
		data->async->rx_cnt.cnt++;
   1c450:	68bb      	ldr	r3, [r7, #8]
   1c452:	68db      	ldr	r3, [r3, #12]
   1c454:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   1c458:	3201      	adds	r2, #1
   1c45a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		return;
   1c45e:	e082      	b.n	1c566 <uarte_nrfx_isr_async+0x146>
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1c460:	f44f 7192 	mov.w	r1, #292	; 0x124
   1c464:	68f8      	ldr	r0, [r7, #12]
   1c466:	f7fe ff47 	bl	1b2f8 <nrf_uarte_event_check>
   1c46a:	4603      	mov	r3, r0
   1c46c:	2b00      	cmp	r3, #0
   1c46e:	d007      	beq.n	1c480 <uarte_nrfx_isr_async+0x60>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ERROR);
   1c470:	f44f 7192 	mov.w	r1, #292	; 0x124
   1c474:	68f8      	ldr	r0, [r7, #12]
   1c476:	f7fe ff2a 	bl	1b2ce <nrf_uarte_event_clear>
		error_isr(dev);
   1c47a:	6878      	ldr	r0, [r7, #4]
   1c47c:	f7ff fd2f 	bl	1bede <error_isr>
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1c480:	f44f 7188 	mov.w	r1, #272	; 0x110
   1c484:	68f8      	ldr	r0, [r7, #12]
   1c486:	f7fe ff37 	bl	1b2f8 <nrf_uarte_event_check>
   1c48a:	4603      	mov	r3, r0
   1c48c:	2b00      	cmp	r3, #0
   1c48e:	d00e      	beq.n	1c4ae <uarte_nrfx_isr_async+0x8e>
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1c490:	2110      	movs	r1, #16
   1c492:	68f8      	ldr	r0, [r7, #12]
   1c494:	f7fe ff85 	bl	1b3a2 <nrf_uarte_int_enable_check>
   1c498:	4603      	mov	r3, r0
   1c49a:	2b00      	cmp	r3, #0
   1c49c:	d007      	beq.n	1c4ae <uarte_nrfx_isr_async+0x8e>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   1c49e:	f44f 7188 	mov.w	r1, #272	; 0x110
   1c4a2:	68f8      	ldr	r0, [r7, #12]
   1c4a4:	f7fe ff13 	bl	1b2ce <nrf_uarte_event_clear>
		endrx_isr(dev);
   1c4a8:	6878      	ldr	r0, [r7, #4]
   1c4aa:	f7ff fda8 	bl	1bffe <endrx_isr>
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1c4ae:	f44f 71a6 	mov.w	r1, #332	; 0x14c
   1c4b2:	68f8      	ldr	r0, [r7, #12]
   1c4b4:	f7fe ff20 	bl	1b2f8 <nrf_uarte_event_check>
   1c4b8:	4603      	mov	r3, r0
   1c4ba:	2b00      	cmp	r3, #0
   1c4bc:	d012      	beq.n	1c4e4 <uarte_nrfx_isr_async+0xc4>
	    !nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c4be:	f44f 7188 	mov.w	r1, #272	; 0x110
   1c4c2:	68f8      	ldr	r0, [r7, #12]
   1c4c4:	f7fe ff18 	bl	1b2f8 <nrf_uarte_event_check>
   1c4c8:	4603      	mov	r3, r0
   1c4ca:	f083 0301 	eor.w	r3, r3, #1
   1c4ce:	b2db      	uxtb	r3, r3
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1c4d0:	2b00      	cmp	r3, #0
   1c4d2:	d007      	beq.n	1c4e4 <uarte_nrfx_isr_async+0xc4>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXSTARTED);
   1c4d4:	f44f 71a6 	mov.w	r1, #332	; 0x14c
   1c4d8:	68f8      	ldr	r0, [r7, #12]
   1c4da:	f7fe fef8 	bl	1b2ce <nrf_uarte_event_clear>
		rxstarted_isr(dev);
   1c4de:	6878      	ldr	r0, [r7, #4]
   1c4e0:	f7ff fd3b 	bl	1bf5a <rxstarted_isr>
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1c4e4:	f44f 71a2 	mov.w	r1, #324	; 0x144
   1c4e8:	68f8      	ldr	r0, [r7, #12]
   1c4ea:	f7fe ff05 	bl	1b2f8 <nrf_uarte_event_check>
   1c4ee:	4603      	mov	r3, r0
   1c4f0:	2b00      	cmp	r3, #0
   1c4f2:	d012      	beq.n	1c51a <uarte_nrfx_isr_async+0xfa>
	    !nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c4f4:	f44f 7188 	mov.w	r1, #272	; 0x110
   1c4f8:	68f8      	ldr	r0, [r7, #12]
   1c4fa:	f7fe fefd 	bl	1b2f8 <nrf_uarte_event_check>
   1c4fe:	4603      	mov	r3, r0
   1c500:	f083 0301 	eor.w	r3, r3, #1
   1c504:	b2db      	uxtb	r3, r3
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1c506:	2b00      	cmp	r3, #0
   1c508:	d007      	beq.n	1c51a <uarte_nrfx_isr_async+0xfa>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXTO);
   1c50a:	f44f 71a2 	mov.w	r1, #324	; 0x144
   1c50e:	68f8      	ldr	r0, [r7, #12]
   1c510:	f7fe fedd 	bl	1b2ce <nrf_uarte_event_clear>
		rxto_isr(dev);
   1c514:	6878      	ldr	r0, [r7, #4]
   1c516:	f7ff fe5f 	bl	1c1d8 <rxto_isr>
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1c51a:	f44f 7190 	mov.w	r1, #288	; 0x120
   1c51e:	68f8      	ldr	r0, [r7, #12]
   1c520:	f7fe feea 	bl	1b2f8 <nrf_uarte_event_check>
   1c524:	4603      	mov	r3, r0
   1c526:	2b00      	cmp	r3, #0
   1c528:	d00a      	beq.n	1c540 <uarte_nrfx_isr_async+0x120>
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1c52a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1c52e:	68f8      	ldr	r0, [r7, #12]
   1c530:	f7fe ff37 	bl	1b3a2 <nrf_uarte_int_enable_check>
   1c534:	4603      	mov	r3, r0
   1c536:	2b00      	cmp	r3, #0
   1c538:	d002      	beq.n	1c540 <uarte_nrfx_isr_async+0x120>
		endtx_isr(dev);
   1c53a:	6878      	ldr	r0, [r7, #4]
   1c53c:	f7ff f83c 	bl	1b5b8 <endtx_isr>
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1c540:	f44f 71ac 	mov.w	r1, #344	; 0x158
   1c544:	68f8      	ldr	r0, [r7, #12]
   1c546:	f7fe fed7 	bl	1b2f8 <nrf_uarte_event_check>
   1c54a:	4603      	mov	r3, r0
   1c54c:	2b00      	cmp	r3, #0
   1c54e:	d00a      	beq.n	1c566 <uarte_nrfx_isr_async+0x146>
	    && nrf_uarte_int_enable_check(uarte,
   1c550:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1c554:	68f8      	ldr	r0, [r7, #12]
   1c556:	f7fe ff24 	bl	1b3a2 <nrf_uarte_int_enable_check>
   1c55a:	4603      	mov	r3, r0
   1c55c:	2b00      	cmp	r3, #0
   1c55e:	d002      	beq.n	1c566 <uarte_nrfx_isr_async+0x146>
		txstopped_isr(dev);
   1c560:	6878      	ldr	r0, [r7, #4]
   1c562:	f7ff fe78 	bl	1c256 <txstopped_isr>
}
   1c566:	3710      	adds	r7, #16
   1c568:	46bd      	mov	sp, r7
   1c56a:	bd80      	pop	{r7, pc}

0001c56c <uarte_nrfx_poll_in>:
{
   1c56c:	b580      	push	{r7, lr}
   1c56e:	b084      	sub	sp, #16
   1c570:	af00      	add	r7, sp, #0
   1c572:	6078      	str	r0, [r7, #4]
   1c574:	6039      	str	r1, [r7, #0]
	const struct uarte_nrfx_data *data = dev->data;
   1c576:	687b      	ldr	r3, [r7, #4]
   1c578:	691b      	ldr	r3, [r3, #16]
   1c57a:	60fb      	str	r3, [r7, #12]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1c57c:	6878      	ldr	r0, [r7, #4]
   1c57e:	f7ff f80d 	bl	1b59c <get_uarte_instance>
   1c582:	60b8      	str	r0, [r7, #8]
	if (data->async) {
   1c584:	68fb      	ldr	r3, [r7, #12]
   1c586:	68db      	ldr	r3, [r3, #12]
   1c588:	2b00      	cmp	r3, #0
   1c58a:	d002      	beq.n	1c592 <uarte_nrfx_poll_in+0x26>
		return -ENOTSUP;
   1c58c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1c590:	e01c      	b.n	1c5cc <uarte_nrfx_poll_in+0x60>
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c592:	f44f 7188 	mov.w	r1, #272	; 0x110
   1c596:	68b8      	ldr	r0, [r7, #8]
   1c598:	f7fe feae 	bl	1b2f8 <nrf_uarte_event_check>
   1c59c:	4603      	mov	r3, r0
   1c59e:	f083 0301 	eor.w	r3, r3, #1
   1c5a2:	b2db      	uxtb	r3, r3
   1c5a4:	2b00      	cmp	r3, #0
   1c5a6:	d002      	beq.n	1c5ae <uarte_nrfx_poll_in+0x42>
		return -1;
   1c5a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c5ac:	e00e      	b.n	1c5cc <uarte_nrfx_poll_in+0x60>
	*c = *data->rx_data;
   1c5ae:	68fb      	ldr	r3, [r7, #12]
   1c5b0:	699b      	ldr	r3, [r3, #24]
   1c5b2:	781a      	ldrb	r2, [r3, #0]
   1c5b4:	683b      	ldr	r3, [r7, #0]
   1c5b6:	701a      	strb	r2, [r3, #0]
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   1c5b8:	f44f 7188 	mov.w	r1, #272	; 0x110
   1c5bc:	68b8      	ldr	r0, [r7, #8]
   1c5be:	f7fe fe86 	bl	1b2ce <nrf_uarte_event_clear>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
   1c5c2:	2100      	movs	r1, #0
   1c5c4:	68b8      	ldr	r0, [r7, #8]
   1c5c6:	f7fe ff35 	bl	1b434 <nrf_uarte_task_trigger>
	return 0;
   1c5ca:	2300      	movs	r3, #0
}
   1c5cc:	4618      	mov	r0, r3
   1c5ce:	3710      	adds	r7, #16
   1c5d0:	46bd      	mov	sp, r7
   1c5d2:	bd80      	pop	{r7, pc}

0001c5d4 <uarte_nrfx_poll_out>:
{
   1c5d4:	b580      	push	{r7, lr}
   1c5d6:	b08a      	sub	sp, #40	; 0x28
   1c5d8:	af00      	add	r7, sp, #0
   1c5da:	6078      	str	r0, [r7, #4]
   1c5dc:	460b      	mov	r3, r1
   1c5de:	70fb      	strb	r3, [r7, #3]
	struct uarte_nrfx_data *data = dev->data;
   1c5e0:	687b      	ldr	r3, [r7, #4]
   1c5e2:	691b      	ldr	r3, [r3, #16]
   1c5e4:	623b      	str	r3, [r7, #32]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c5e6:	f002 f847 	bl	1e678 <k_is_in_isr>
   1c5ea:	4603      	mov	r3, r0
   1c5ec:	2b00      	cmp	r3, #0
   1c5ee:	d104      	bne.n	1c5fa <uarte_nrfx_poll_out+0x26>
   1c5f0:	f7f1 fb9e 	bl	dd30 <k_is_pre_kernel>
   1c5f4:	4603      	mov	r3, r0
   1c5f6:	2b00      	cmp	r3, #0
   1c5f8:	d001      	beq.n	1c5fe <uarte_nrfx_poll_out+0x2a>
   1c5fa:	2301      	movs	r3, #1
   1c5fc:	e000      	b.n	1c600 <uarte_nrfx_poll_out+0x2c>
   1c5fe:	2300      	movs	r3, #0
   1c600:	77fb      	strb	r3, [r7, #31]
   1c602:	7ffb      	ldrb	r3, [r7, #31]
   1c604:	f003 0301 	and.w	r3, r3, #1
   1c608:	77fb      	strb	r3, [r7, #31]
	if (isr_mode) {
   1c60a:	7ffb      	ldrb	r3, [r7, #31]
   1c60c:	2b00      	cmp	r3, #0
   1c60e:	d036      	beq.n	1c67e <_flash_used+0x6a>
	__asm__ volatile(
   1c610:	f04f 0320 	mov.w	r3, #32
   1c614:	f3ef 8211 	mrs	r2, BASEPRI
   1c618:	f383 8812 	msr	BASEPRI_MAX, r3
   1c61c:	f3bf 8f6f 	isb	sy
   1c620:	61ba      	str	r2, [r7, #24]
   1c622:	617b      	str	r3, [r7, #20]
	return key;
   1c624:	69bb      	ldr	r3, [r7, #24]
			key = irq_lock();
   1c626:	627b      	str	r3, [r7, #36]	; 0x24
			if (is_tx_ready(dev)) {
   1c628:	6878      	ldr	r0, [r7, #4]
   1c62a:	f7ff f87c 	bl	1b726 <is_tx_ready>
   1c62e:	4603      	mov	r3, r0
   1c630:	2b00      	cmp	r3, #0
   1c632:	d01b      	beq.n	1c66c <_flash_used+0x58>
				if (data->async && data->async->tx_size &&
   1c634:	6a3b      	ldr	r3, [r7, #32]
   1c636:	68db      	ldr	r3, [r3, #12]
   1c638:	2b00      	cmp	r3, #0
   1c63a:	d026      	beq.n	1c68a <_flash_used+0x76>
   1c63c:	6a3b      	ldr	r3, [r7, #32]
   1c63e:	68db      	ldr	r3, [r3, #12]
   1c640:	68db      	ldr	r3, [r3, #12]
   1c642:	2b00      	cmp	r3, #0
   1c644:	d021      	beq.n	1c68a <_flash_used+0x76>
					data->async->tx_amount < 0) {
   1c646:	6a3b      	ldr	r3, [r7, #32]
   1c648:	68db      	ldr	r3, [r3, #12]
   1c64a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1c64e:	2b00      	cmp	r3, #0
   1c650:	da1b      	bge.n	1c68a <_flash_used+0x76>
						      get_uarte_instance(dev));
   1c652:	6878      	ldr	r0, [r7, #4]
   1c654:	f7fe ffa2 	bl	1b59c <get_uarte_instance>
   1c658:	4603      	mov	r3, r0
						nrf_uarte_tx_amount_get(
   1c65a:	4618      	mov	r0, r3
   1c65c:	f7fe ff41 	bl	1b4e2 <nrf_uarte_tx_amount_get>
   1c660:	4602      	mov	r2, r0
					data->async->tx_amount =
   1c662:	6a3b      	ldr	r3, [r7, #32]
   1c664:	68db      	ldr	r3, [r3, #12]
   1c666:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				break;
   1c66a:	e00e      	b.n	1c68a <_flash_used+0x76>
   1c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c66e:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   1c670:	693b      	ldr	r3, [r7, #16]
   1c672:	f383 8811 	msr	BASEPRI, r3
   1c676:	f3bf 8f6f 	isb	sy
}
   1c67a:	bf00      	nop
			key = irq_lock();
   1c67c:	e7c8      	b.n	1c610 <uarte_nrfx_poll_out+0x3c>
		key = wait_tx_ready(dev);
   1c67e:	6878      	ldr	r0, [r7, #4]
   1c680:	f7ff f885 	bl	1b78e <wait_tx_ready>
   1c684:	4603      	mov	r3, r0
   1c686:	627b      	str	r3, [r7, #36]	; 0x24
   1c688:	e000      	b.n	1c68c <_flash_used+0x78>
				break;
   1c68a:	bf00      	nop
	*data->char_out = c;
   1c68c:	6a3b      	ldr	r3, [r7, #32]
   1c68e:	695b      	ldr	r3, [r3, #20]
   1c690:	78fa      	ldrb	r2, [r7, #3]
   1c692:	701a      	strb	r2, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1c694:	6a3b      	ldr	r3, [r7, #32]
   1c696:	695b      	ldr	r3, [r3, #20]
   1c698:	2201      	movs	r2, #1
   1c69a:	4619      	mov	r1, r3
   1c69c:	6878      	ldr	r0, [r7, #4]
   1c69e:	f7ff f8e5 	bl	1b86c <tx_start>
   1c6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6a4:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   1c6a6:	68fb      	ldr	r3, [r7, #12]
   1c6a8:	f383 8811 	msr	BASEPRI, r3
   1c6ac:	f3bf 8f6f 	isb	sy
}
   1c6b0:	bf00      	nop
}
   1c6b2:	bf00      	nop
   1c6b4:	3728      	adds	r7, #40	; 0x28
   1c6b6:	46bd      	mov	sp, r7
   1c6b8:	bd80      	pop	{r7, pc}

0001c6ba <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   1c6ba:	b580      	push	{r7, lr}
   1c6bc:	b086      	sub	sp, #24
   1c6be:	af00      	add	r7, sp, #0
   1c6c0:	6078      	str	r0, [r7, #4]
   1c6c2:	460b      	mov	r3, r1
   1c6c4:	70fb      	strb	r3, [r7, #3]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1c6c6:	6878      	ldr	r0, [r7, #4]
   1c6c8:	f7fe ff68 	bl	1b59c <get_uarte_instance>
   1c6cc:	6178      	str	r0, [r7, #20]
	struct uarte_nrfx_data *data = dev->data;
   1c6ce:	687b      	ldr	r3, [r7, #4]
   1c6d0:	691b      	ldr	r3, [r3, #16]
   1c6d2:	613b      	str	r3, [r7, #16]
	const struct uarte_nrfx_config *cfg = dev->config;
   1c6d4:	687b      	ldr	r3, [r7, #4]
   1c6d6:	685b      	ldr	r3, [r3, #4]
   1c6d8:	60fb      	str	r3, [r7, #12]

	nrf_uarte_disable(uarte);
   1c6da:	6978      	ldr	r0, [r7, #20]
   1c6dc:	f7fe fe9d 	bl	1b41a <nrf_uarte_disable>

	data->dev = dev;
   1c6e0:	693b      	ldr	r3, [r7, #16]
   1c6e2:	687a      	ldr	r2, [r7, #4]
   1c6e4:	601a      	str	r2, [r3, #0]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1c6e6:	68fb      	ldr	r3, [r7, #12]
   1c6e8:	68db      	ldr	r3, [r3, #12]
   1c6ea:	2100      	movs	r1, #0
   1c6ec:	4618      	mov	r0, r3
   1c6ee:	f7fe ff38 	bl	1b562 <pinctrl_apply_state>
   1c6f2:	60b8      	str	r0, [r7, #8]
	if (err < 0) {
   1c6f4:	68bb      	ldr	r3, [r7, #8]
   1c6f6:	2b00      	cmp	r3, #0
   1c6f8:	da01      	bge.n	1c6fe <uarte_instance_init+0x44>
		return err;
   1c6fa:	68bb      	ldr	r3, [r7, #8]
   1c6fc:	e068      	b.n	1c7d0 <uarte_instance_init+0x116>
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1c6fe:	693b      	ldr	r3, [r7, #16]
   1c700:	3304      	adds	r3, #4
   1c702:	4619      	mov	r1, r3
   1c704:	6878      	ldr	r0, [r7, #4]
   1c706:	f7fe ff88 	bl	1b61a <uarte_nrfx_configure>
   1c70a:	60b8      	str	r0, [r7, #8]
	if (err) {
   1c70c:	68bb      	ldr	r3, [r7, #8]
   1c70e:	2b00      	cmp	r3, #0
   1c710:	d001      	beq.n	1c716 <uarte_instance_init+0x5c>
		return err;
   1c712:	68bb      	ldr	r3, [r7, #8]
   1c714:	e05c      	b.n	1c7d0 <uarte_instance_init+0x116>
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1c716:	68fb      	ldr	r3, [r7, #12]
   1c718:	685b      	ldr	r3, [r3, #4]
   1c71a:	f003 0302 	and.w	r3, r3, #2
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1c71e:	2b00      	cmp	r3, #0
   1c720:	d009      	beq.n	1c736 <uarte_instance_init+0x7c>
		err = endtx_stoptx_ppi_init(uarte, data);
   1c722:	6939      	ldr	r1, [r7, #16]
   1c724:	6978      	ldr	r0, [r7, #20]
   1c726:	f7f1 fe41 	bl	e3ac <endtx_stoptx_ppi_init>
   1c72a:	60b8      	str	r0, [r7, #8]
		if (err < 0) {
   1c72c:	68bb      	ldr	r3, [r7, #8]
   1c72e:	2b00      	cmp	r3, #0
   1c730:	da01      	bge.n	1c736 <uarte_instance_init+0x7c>
			return err;
   1c732:	68bb      	ldr	r3, [r7, #8]
   1c734:	e04c      	b.n	1c7d0 <uarte_instance_init+0x116>
		}
	}


#ifdef UARTE_ANY_ASYNC
	if (data->async) {
   1c736:	693b      	ldr	r3, [r7, #16]
   1c738:	68db      	ldr	r3, [r3, #12]
   1c73a:	2b00      	cmp	r3, #0
   1c73c:	d008      	beq.n	1c750 <uarte_instance_init+0x96>
		err = uarte_nrfx_init(dev);
   1c73e:	6878      	ldr	r0, [r7, #4]
   1c740:	f7f1 fc50 	bl	dfe4 <uarte_nrfx_init>
   1c744:	60b8      	str	r0, [r7, #8]
		if (err < 0) {
   1c746:	68bb      	ldr	r3, [r7, #8]
   1c748:	2b00      	cmp	r3, #0
   1c74a:	da1b      	bge.n	1c784 <uarte_instance_init+0xca>
			return err;
   1c74c:	68bb      	ldr	r3, [r7, #8]
   1c74e:	e03f      	b.n	1c7d0 <uarte_instance_init+0x116>
		}
	} else
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);
   1c750:	6978      	ldr	r0, [r7, #20]
   1c752:	f7fe fe55 	bl	1b400 <nrf_uarte_enable>

		if (!cfg->disable_rx) {
   1c756:	68fb      	ldr	r3, [r7, #12]
   1c758:	7a1b      	ldrb	r3, [r3, #8]
   1c75a:	f083 0301 	eor.w	r3, r3, #1
   1c75e:	b2db      	uxtb	r3, r3
   1c760:	2b00      	cmp	r3, #0
   1c762:	d00f      	beq.n	1c784 <uarte_instance_init+0xca>
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   1c764:	f44f 7188 	mov.w	r1, #272	; 0x110
   1c768:	6978      	ldr	r0, [r7, #20]
   1c76a:	f7fe fdb0 	bl	1b2ce <nrf_uarte_event_clear>

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   1c76e:	693b      	ldr	r3, [r7, #16]
   1c770:	699b      	ldr	r3, [r3, #24]
   1c772:	2201      	movs	r2, #1
   1c774:	4619      	mov	r1, r3
   1c776:	6978      	ldr	r0, [r7, #20]
   1c778:	f7fe febf 	bl	1b4fa <nrf_uarte_rx_buffer_set>
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
   1c77c:	2100      	movs	r1, #0
   1c77e:	6978      	ldr	r0, [r7, #20]
   1c780:	f7fe fe58 	bl	1b434 <nrf_uarte_task_trigger>
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1c784:	68fb      	ldr	r3, [r7, #12]
   1c786:	685b      	ldr	r3, [r3, #4]
   1c788:	f003 0302 	and.w	r3, r3, #2
   1c78c:	2b00      	cmp	r3, #0
   1c78e:	d104      	bne.n	1c79a <uarte_instance_init+0xe0>
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
   1c790:	f44f 7180 	mov.w	r1, #256	; 0x100
   1c794:	6978      	ldr	r0, [r7, #20]
   1c796:	f7fe fdf6 	bl	1b386 <nrf_uarte_int_enable>
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c79a:	68fb      	ldr	r3, [r7, #12]
   1c79c:	685b      	ldr	r3, [r3, #4]
   1c79e:	f003 0310 	and.w	r3, r3, #16
   1c7a2:	2b00      	cmp	r3, #0
   1c7a4:	d004      	beq.n	1c7b0 <uarte_instance_init+0xf6>
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_TXSTOPPED_MASK);
   1c7a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1c7aa:	6978      	ldr	r0, [r7, #20]
   1c7ac:	f7fe fdeb 	bl	1b386 <nrf_uarte_int_enable>

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   1c7b0:	693b      	ldr	r3, [r7, #16]
   1c7b2:	695b      	ldr	r3, [r3, #20]
   1c7b4:	2200      	movs	r2, #0
   1c7b6:	4619      	mov	r1, r3
   1c7b8:	6978      	ldr	r0, [r7, #20]
   1c7ba:	f7fe fe7f 	bl	1b4bc <nrf_uarte_tx_buffer_set>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTTX);
   1c7be:	2108      	movs	r1, #8
   1c7c0:	6978      	ldr	r0, [r7, #20]
   1c7c2:	f7fe fe37 	bl	1b434 <nrf_uarte_task_trigger>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
   1c7c6:	210c      	movs	r1, #12
   1c7c8:	6978      	ldr	r0, [r7, #20]
   1c7ca:	f7fe fe33 	bl	1b434 <nrf_uarte_task_trigger>

	return 0;
   1c7ce:	2300      	movs	r3, #0
}
   1c7d0:	4618      	mov	r0, r3
   1c7d2:	3718      	adds	r7, #24
   1c7d4:	46bd      	mov	sp, r7
   1c7d6:	bd80      	pop	{r7, pc}

0001c7d8 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_HAS_HW_NRF_UARTE0
UART_NRF_UARTE_DEVICE(0);
   1c7d8:	b580      	push	{r7, lr}
   1c7da:	b082      	sub	sp, #8
   1c7dc:	af00      	add	r7, sp, #0
   1c7de:	6078      	str	r0, [r7, #4]
   1c7e0:	2200      	movs	r2, #0
   1c7e2:	2101      	movs	r1, #1
   1c7e4:	2008      	movs	r0, #8
   1c7e6:	f7ed fe25 	bl	a434 <z_arm_irq_priority_set>
   1c7ea:	2008      	movs	r0, #8
   1c7ec:	f7fd fc3a 	bl	1a064 <arch_irq_enable>
   1c7f0:	2100      	movs	r1, #0
   1c7f2:	6878      	ldr	r0, [r7, #4]
   1c7f4:	f7ff ff61 	bl	1c6ba <uarte_instance_init>
   1c7f8:	4603      	mov	r3, r0
   1c7fa:	4618      	mov	r0, r3
   1c7fc:	3708      	adds	r7, #8
   1c7fe:	46bd      	mov	sp, r7
   1c800:	bd80      	pop	{r7, pc}

0001c802 <sys_clock_hw_cycles_per_sec>:
{
   1c802:	b480      	push	{r7}
   1c804:	af00      	add	r7, sp, #0
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
   1c806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
   1c80a:	4618      	mov	r0, r3
   1c80c:	46bd      	mov	sp, r7
   1c80e:	bc80      	pop	{r7}
   1c810:	4770      	bx	lr

0001c812 <atomic_get>:
{
   1c812:	b480      	push	{r7}
   1c814:	b083      	sub	sp, #12
   1c816:	af00      	add	r7, sp, #0
   1c818:	6078      	str	r0, [r7, #4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c81a:	687b      	ldr	r3, [r7, #4]
   1c81c:	e8d3 3faf 	lda	r3, [r3]
}
   1c820:	4618      	mov	r0, r3
   1c822:	370c      	adds	r7, #12
   1c824:	46bd      	mov	sp, r7
   1c826:	bc80      	pop	{r7}
   1c828:	4770      	bx	lr

0001c82a <atomic_or>:
 * @param value Value to OR.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
   1c82a:	b490      	push	{r4, r7}
   1c82c:	b082      	sub	sp, #8
   1c82e:	af00      	add	r7, sp, #0
   1c830:	6078      	str	r0, [r7, #4]
   1c832:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c834:	683a      	ldr	r2, [r7, #0]
   1c836:	687b      	ldr	r3, [r7, #4]
   1c838:	e8d3 1fef 	ldaex	r1, [r3]
   1c83c:	ea41 0002 	orr.w	r0, r1, r2
   1c840:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1c844:	2c00      	cmp	r4, #0
   1c846:	d1f7      	bne.n	1c838 <atomic_or+0xe>
   1c848:	460b      	mov	r3, r1
}
   1c84a:	4618      	mov	r0, r3
   1c84c:	3708      	adds	r7, #8
   1c84e:	46bd      	mov	sp, r7
   1c850:	bc90      	pop	{r4, r7}
   1c852:	4770      	bx	lr

0001c854 <atomic_and>:
 * @param value Value to AND.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
   1c854:	b490      	push	{r4, r7}
   1c856:	b082      	sub	sp, #8
   1c858:	af00      	add	r7, sp, #0
   1c85a:	6078      	str	r0, [r7, #4]
   1c85c:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c85e:	683a      	ldr	r2, [r7, #0]
   1c860:	687b      	ldr	r3, [r7, #4]
   1c862:	e8d3 1fef 	ldaex	r1, [r3]
   1c866:	ea01 0002 	and.w	r0, r1, r2
   1c86a:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1c86e:	2c00      	cmp	r4, #0
   1c870:	d1f7      	bne.n	1c862 <atomic_and+0xe>
   1c872:	460b      	mov	r3, r1
}
   1c874:	4618      	mov	r0, r3
   1c876:	3708      	adds	r7, #8
   1c878:	46bd      	mov	sp, r7
   1c87a:	bc90      	pop	{r4, r7}
   1c87c:	4770      	bx	lr

0001c87e <nrf_event_readback>:
{
   1c87e:	b480      	push	{r7}
   1c880:	b083      	sub	sp, #12
   1c882:	af00      	add	r7, sp, #0
   1c884:	6078      	str	r0, [r7, #4]
    (void)*((volatile uint32_t *)(p_event_reg));
   1c886:	687b      	ldr	r3, [r7, #4]
   1c888:	681b      	ldr	r3, [r3, #0]
}
   1c88a:	bf00      	nop
   1c88c:	370c      	adds	r7, #12
   1c88e:	46bd      	mov	sp, r7
   1c890:	bc80      	pop	{r7}
   1c892:	4770      	bx	lr

0001c894 <nrf_rtc_cc_set>:
{
   1c894:	b480      	push	{r7}
   1c896:	b085      	sub	sp, #20
   1c898:	af00      	add	r7, sp, #0
   1c89a:	60f8      	str	r0, [r7, #12]
   1c89c:	60b9      	str	r1, [r7, #8]
   1c89e:	607a      	str	r2, [r7, #4]
    p_reg->CC[ch] = cc_val;
   1c8a0:	68fb      	ldr	r3, [r7, #12]
   1c8a2:	68ba      	ldr	r2, [r7, #8]
   1c8a4:	f502 72a8 	add.w	r2, r2, #336	; 0x150
   1c8a8:	6879      	ldr	r1, [r7, #4]
   1c8aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1c8ae:	bf00      	nop
   1c8b0:	3714      	adds	r7, #20
   1c8b2:	46bd      	mov	sp, r7
   1c8b4:	bc80      	pop	{r7}
   1c8b6:	4770      	bx	lr

0001c8b8 <nrf_rtc_int_enable>:
{
   1c8b8:	b480      	push	{r7}
   1c8ba:	b083      	sub	sp, #12
   1c8bc:	af00      	add	r7, sp, #0
   1c8be:	6078      	str	r0, [r7, #4]
   1c8c0:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   1c8c2:	687b      	ldr	r3, [r7, #4]
   1c8c4:	683a      	ldr	r2, [r7, #0]
   1c8c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c8ca:	bf00      	nop
   1c8cc:	370c      	adds	r7, #12
   1c8ce:	46bd      	mov	sp, r7
   1c8d0:	bc80      	pop	{r7}
   1c8d2:	4770      	bx	lr

0001c8d4 <nrf_rtc_int_disable>:
{
   1c8d4:	b480      	push	{r7}
   1c8d6:	b083      	sub	sp, #12
   1c8d8:	af00      	add	r7, sp, #0
   1c8da:	6078      	str	r0, [r7, #4]
   1c8dc:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   1c8de:	687b      	ldr	r3, [r7, #4]
   1c8e0:	683a      	ldr	r2, [r7, #0]
   1c8e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1c8e6:	bf00      	nop
   1c8e8:	370c      	adds	r7, #12
   1c8ea:	46bd      	mov	sp, r7
   1c8ec:	bc80      	pop	{r7}
   1c8ee:	4770      	bx	lr

0001c8f0 <nrf_rtc_int_enable_check>:
{
   1c8f0:	b480      	push	{r7}
   1c8f2:	b083      	sub	sp, #12
   1c8f4:	af00      	add	r7, sp, #0
   1c8f6:	6078      	str	r0, [r7, #4]
   1c8f8:	6039      	str	r1, [r7, #0]
    return p_reg->INTENSET & mask;
   1c8fa:	687b      	ldr	r3, [r7, #4]
   1c8fc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   1c900:	683b      	ldr	r3, [r7, #0]
   1c902:	4013      	ands	r3, r2
}
   1c904:	4618      	mov	r0, r3
   1c906:	370c      	adds	r7, #12
   1c908:	46bd      	mov	sp, r7
   1c90a:	bc80      	pop	{r7}
   1c90c:	4770      	bx	lr

0001c90e <nrf_rtc_event_check>:
{
   1c90e:	b480      	push	{r7}
   1c910:	b083      	sub	sp, #12
   1c912:	af00      	add	r7, sp, #0
   1c914:	6078      	str	r0, [r7, #4]
   1c916:	460b      	mov	r3, r1
   1c918:	807b      	strh	r3, [r7, #2]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c91a:	887b      	ldrh	r3, [r7, #2]
   1c91c:	687a      	ldr	r2, [r7, #4]
   1c91e:	4413      	add	r3, r2
   1c920:	681b      	ldr	r3, [r3, #0]
   1c922:	2b00      	cmp	r3, #0
   1c924:	bf14      	ite	ne
   1c926:	2301      	movne	r3, #1
   1c928:	2300      	moveq	r3, #0
   1c92a:	b2db      	uxtb	r3, r3
}
   1c92c:	4618      	mov	r0, r3
   1c92e:	370c      	adds	r7, #12
   1c930:	46bd      	mov	sp, r7
   1c932:	bc80      	pop	{r7}
   1c934:	4770      	bx	lr

0001c936 <nrf_rtc_event_clear>:
{
   1c936:	b580      	push	{r7, lr}
   1c938:	b082      	sub	sp, #8
   1c93a:	af00      	add	r7, sp, #0
   1c93c:	6078      	str	r0, [r7, #4]
   1c93e:	460b      	mov	r3, r1
   1c940:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c942:	887b      	ldrh	r3, [r7, #2]
   1c944:	687a      	ldr	r2, [r7, #4]
   1c946:	4413      	add	r3, r2
   1c948:	2200      	movs	r2, #0
   1c94a:	601a      	str	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
   1c94c:	887b      	ldrh	r3, [r7, #2]
   1c94e:	687a      	ldr	r2, [r7, #4]
   1c950:	4413      	add	r3, r2
   1c952:	4618      	mov	r0, r3
   1c954:	f7ff ff93 	bl	1c87e <nrf_event_readback>
}
   1c958:	bf00      	nop
   1c95a:	3708      	adds	r7, #8
   1c95c:	46bd      	mov	sp, r7
   1c95e:	bd80      	pop	{r7, pc}

0001c960 <nrf_rtc_counter_get>:
{
   1c960:	b480      	push	{r7}
   1c962:	b083      	sub	sp, #12
   1c964:	af00      	add	r7, sp, #0
   1c966:	6078      	str	r0, [r7, #4]
     return p_reg->COUNTER;
   1c968:	687b      	ldr	r3, [r7, #4]
   1c96a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
}
   1c96e:	4618      	mov	r0, r3
   1c970:	370c      	adds	r7, #12
   1c972:	46bd      	mov	sp, r7
   1c974:	bc80      	pop	{r7}
   1c976:	4770      	bx	lr

0001c978 <nrf_rtc_task_trigger>:
    return (nrf_rtc_task_t)NRFX_OFFSETOF(NRF_RTC_Type, TASKS_CAPTURE[index]);
}
#endif

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
   1c978:	b480      	push	{r7}
   1c97a:	b083      	sub	sp, #12
   1c97c:	af00      	add	r7, sp, #0
   1c97e:	6078      	str	r0, [r7, #4]
   1c980:	460b      	mov	r3, r1
   1c982:	70fb      	strb	r3, [r7, #3]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1c984:	78fa      	ldrb	r2, [r7, #3]
   1c986:	687b      	ldr	r3, [r7, #4]
   1c988:	4413      	add	r3, r2
   1c98a:	461a      	mov	r2, r3
   1c98c:	2301      	movs	r3, #1
   1c98e:	6013      	str	r3, [r2, #0]
}
   1c990:	bf00      	nop
   1c992:	370c      	adds	r7, #12
   1c994:	46bd      	mov	sp, r7
   1c996:	bc80      	pop	{r7}
   1c998:	4770      	bx	lr

0001c99a <nrf_rtc_event_enable>:

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
   1c99a:	b480      	push	{r7}
   1c99c:	b083      	sub	sp, #12
   1c99e:	af00      	add	r7, sp, #0
   1c9a0:	6078      	str	r0, [r7, #4]
   1c9a2:	6039      	str	r1, [r7, #0]
    p_reg->EVTENSET = mask;
   1c9a4:	687b      	ldr	r3, [r7, #4]
   1c9a6:	683a      	ldr	r2, [r7, #0]
   1c9a8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
}
   1c9ac:	bf00      	nop
   1c9ae:	370c      	adds	r7, #12
   1c9b0:	46bd      	mov	sp, r7
   1c9b2:	bc80      	pop	{r7}
   1c9b4:	4770      	bx	lr

0001c9b6 <nrf_rtc_event_disable>:

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
   1c9b6:	b480      	push	{r7}
   1c9b8:	b083      	sub	sp, #12
   1c9ba:	af00      	add	r7, sp, #0
   1c9bc:	6078      	str	r0, [r7, #4]
   1c9be:	6039      	str	r1, [r7, #0]
    p_reg->EVTENCLR = mask;
   1c9c0:	687b      	ldr	r3, [r7, #4]
   1c9c2:	683a      	ldr	r2, [r7, #0]
   1c9c4:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
}
   1c9c8:	bf00      	nop
   1c9ca:	370c      	adds	r7, #12
   1c9cc:	46bd      	mov	sp, r7
   1c9ce:	bc80      	pop	{r7}
   1c9d0:	4770      	bx	lr

0001c9d2 <counter_sub>:
{
   1c9d2:	b480      	push	{r7}
   1c9d4:	b083      	sub	sp, #12
   1c9d6:	af00      	add	r7, sp, #0
   1c9d8:	6078      	str	r0, [r7, #4]
   1c9da:	6039      	str	r1, [r7, #0]
	return (a - b) & COUNTER_MAX;
   1c9dc:	687a      	ldr	r2, [r7, #4]
   1c9de:	683b      	ldr	r3, [r7, #0]
   1c9e0:	1ad3      	subs	r3, r2, r3
   1c9e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
   1c9e6:	4618      	mov	r0, r3
   1c9e8:	370c      	adds	r7, #12
   1c9ea:	46bd      	mov	sp, r7
   1c9ec:	bc80      	pop	{r7}
   1c9ee:	4770      	bx	lr

0001c9f0 <absolute_time_to_cc>:
{
   1c9f0:	b480      	push	{r7}
   1c9f2:	b083      	sub	sp, #12
   1c9f4:	af00      	add	r7, sp, #0
   1c9f6:	e9c7 0100 	strd	r0, r1, [r7]
	return absolute_time & COUNTER_MAX;
   1c9fa:	683b      	ldr	r3, [r7, #0]
   1c9fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
   1ca00:	4618      	mov	r0, r3
   1ca02:	370c      	adds	r7, #12
   1ca04:	46bd      	mov	sp, r7
   1ca06:	bc80      	pop	{r7}
   1ca08:	4770      	bx	lr

0001ca0a <full_int_lock>:
{
   1ca0a:	b480      	push	{r7}
   1ca0c:	b085      	sub	sp, #20
   1ca0e:	af00      	add	r7, sp, #0
	__asm__ volatile(
   1ca10:	f04f 0320 	mov.w	r3, #32
   1ca14:	f3ef 8211 	mrs	r2, BASEPRI
   1ca18:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca1c:	f3bf 8f6f 	isb	sy
   1ca20:	60ba      	str	r2, [r7, #8]
   1ca22:	607b      	str	r3, [r7, #4]
	return key;
   1ca24:	68bb      	ldr	r3, [r7, #8]
		mcu_critical_state = irq_lock();
   1ca26:	60fb      	str	r3, [r7, #12]
	return mcu_critical_state;
   1ca28:	68fb      	ldr	r3, [r7, #12]
}
   1ca2a:	4618      	mov	r0, r3
   1ca2c:	3714      	adds	r7, #20
   1ca2e:	46bd      	mov	sp, r7
   1ca30:	bc80      	pop	{r7}
   1ca32:	4770      	bx	lr

0001ca34 <full_int_unlock>:
{
   1ca34:	b480      	push	{r7}
   1ca36:	b085      	sub	sp, #20
   1ca38:	af00      	add	r7, sp, #0
   1ca3a:	6078      	str	r0, [r7, #4]
   1ca3c:	687b      	ldr	r3, [r7, #4]
   1ca3e:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   1ca40:	68fb      	ldr	r3, [r7, #12]
   1ca42:	f383 8811 	msr	BASEPRI, r3
   1ca46:	f3bf 8f6f 	isb	sy
}
   1ca4a:	bf00      	nop
}
   1ca4c:	bf00      	nop
   1ca4e:	3714      	adds	r7, #20
   1ca50:	46bd      	mov	sp, r7
   1ca52:	bc80      	pop	{r7}
   1ca54:	4770      	bx	lr

0001ca56 <compare_set>:
{
   1ca56:	b580      	push	{r7, lr}
   1ca58:	b08a      	sub	sp, #40	; 0x28
   1ca5a:	af04      	add	r7, sp, #16
   1ca5c:	60f8      	str	r0, [r7, #12]
   1ca5e:	e9c7 2300 	strd	r2, r3, [r7]
	key = compare_int_lock(chan);
   1ca62:	68f8      	ldr	r0, [r7, #12]
   1ca64:	f7f1 fdb2 	bl	e5cc <compare_int_lock>
   1ca68:	4603      	mov	r3, r0
   1ca6a:	75fb      	strb	r3, [r7, #23]
	int ret = compare_set_nolocks(chan, target_time, handler, user_data, exact);
   1ca6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   1ca70:	9302      	str	r3, [sp, #8]
   1ca72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ca74:	9301      	str	r3, [sp, #4]
   1ca76:	6a3b      	ldr	r3, [r7, #32]
   1ca78:	9300      	str	r3, [sp, #0]
   1ca7a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1ca7e:	68f8      	ldr	r0, [r7, #12]
   1ca80:	f7f1 fe68 	bl	e754 <compare_set_nolocks>
   1ca84:	6138      	str	r0, [r7, #16]
	compare_int_unlock(chan, key);
   1ca86:	7dfb      	ldrb	r3, [r7, #23]
   1ca88:	4619      	mov	r1, r3
   1ca8a:	68f8      	ldr	r0, [r7, #12]
   1ca8c:	f7f1 fdd2 	bl	e634 <compare_int_unlock>
	return ret;
   1ca90:	693b      	ldr	r3, [r7, #16]
}
   1ca92:	4618      	mov	r0, r3
   1ca94:	3718      	adds	r7, #24
   1ca96:	46bd      	mov	sp, r7
   1ca98:	bd80      	pop	{r7, pc}

0001ca9a <in_anchor_range>:
{
   1ca9a:	b480      	push	{r7}
   1ca9c:	b083      	sub	sp, #12
   1ca9e:	af00      	add	r7, sp, #0
   1caa0:	6078      	str	r0, [r7, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1caa2:	687b      	ldr	r3, [r7, #4]
   1caa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   1caa8:	d305      	bcc.n	1cab6 <in_anchor_range+0x1c>
   1caaa:	687b      	ldr	r3, [r7, #4]
   1caac:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
   1cab0:	d201      	bcs.n	1cab6 <in_anchor_range+0x1c>
   1cab2:	2301      	movs	r3, #1
   1cab4:	e000      	b.n	1cab8 <in_anchor_range+0x1e>
   1cab6:	2300      	movs	r3, #0
   1cab8:	f003 0301 	and.w	r3, r3, #1
   1cabc:	b2db      	uxtb	r3, r3
}
   1cabe:	4618      	mov	r0, r3
   1cac0:	370c      	adds	r7, #12
   1cac2:	46bd      	mov	sp, r7
   1cac4:	bc80      	pop	{r7}
   1cac6:	4770      	bx	lr

0001cac8 <atomic_add>:
{
   1cac8:	b490      	push	{r4, r7}
   1caca:	b082      	sub	sp, #8
   1cacc:	af00      	add	r7, sp, #0
   1cace:	6078      	str	r0, [r7, #4]
   1cad0:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1cad2:	683a      	ldr	r2, [r7, #0]
   1cad4:	687b      	ldr	r3, [r7, #4]
   1cad6:	e8d3 1fef 	ldaex	r1, [r3]
   1cada:	eb01 0002 	add.w	r0, r1, r2
   1cade:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1cae2:	2c00      	cmp	r4, #0
   1cae4:	d1f7      	bne.n	1cad6 <atomic_add+0xe>
   1cae6:	460b      	mov	r3, r1
}
   1cae8:	4618      	mov	r0, r3
   1caea:	3708      	adds	r7, #8
   1caec:	46bd      	mov	sp, r7
   1caee:	bc90      	pop	{r4, r7}
   1caf0:	4770      	bx	lr

0001caf2 <atomic_inc>:
{
   1caf2:	b580      	push	{r7, lr}
   1caf4:	b082      	sub	sp, #8
   1caf6:	af00      	add	r7, sp, #0
   1caf8:	6078      	str	r0, [r7, #4]
	return atomic_add(target, 1);
   1cafa:	2101      	movs	r1, #1
   1cafc:	6878      	ldr	r0, [r7, #4]
   1cafe:	f7ff ffe3 	bl	1cac8 <atomic_add>
   1cb02:	4603      	mov	r3, r0
}
   1cb04:	4618      	mov	r0, r3
   1cb06:	3708      	adds	r7, #8
   1cb08:	46bd      	mov	sp, r7
   1cb0a:	bd80      	pop	{r7, pc}

0001cb0c <atomic_set>:
{
   1cb0c:	b480      	push	{r7}
   1cb0e:	b083      	sub	sp, #12
   1cb10:	af00      	add	r7, sp, #0
   1cb12:	6078      	str	r0, [r7, #4]
   1cb14:	6039      	str	r1, [r7, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1cb16:	683a      	ldr	r2, [r7, #0]
   1cb18:	687b      	ldr	r3, [r7, #4]
   1cb1a:	e8d3 1fef 	ldaex	r1, [r3]
   1cb1e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1cb22:	2800      	cmp	r0, #0
   1cb24:	d1f9      	bne.n	1cb1a <atomic_set+0xe>
   1cb26:	460b      	mov	r3, r1
}
   1cb28:	4618      	mov	r0, r3
   1cb2a:	370c      	adds	r7, #12
   1cb2c:	46bd      	mov	sp, r7
   1cb2e:	bc80      	pop	{r7}
   1cb30:	4770      	bx	lr

0001cb32 <atomic_clear>:
{
   1cb32:	b580      	push	{r7, lr}
   1cb34:	b082      	sub	sp, #8
   1cb36:	af00      	add	r7, sp, #0
   1cb38:	6078      	str	r0, [r7, #4]
	return atomic_set(target, 0);
   1cb3a:	2100      	movs	r1, #0
   1cb3c:	6878      	ldr	r0, [r7, #4]
   1cb3e:	f7ff ffe5 	bl	1cb0c <atomic_set>
   1cb42:	4603      	mov	r3, r0
}
   1cb44:	4618      	mov	r0, r3
   1cb46:	3708      	adds	r7, #8
   1cb48:	46bd      	mov	sp, r7
   1cb4a:	bd80      	pop	{r7, pc}

0001cb4c <sys_slist_init>:
{
   1cb4c:	b480      	push	{r7}
   1cb4e:	b083      	sub	sp, #12
   1cb50:	af00      	add	r7, sp, #0
   1cb52:	6078      	str	r0, [r7, #4]
	list->head = NULL;
   1cb54:	687b      	ldr	r3, [r7, #4]
   1cb56:	2200      	movs	r2, #0
   1cb58:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1cb5a:	687b      	ldr	r3, [r7, #4]
   1cb5c:	2200      	movs	r2, #0
   1cb5e:	605a      	str	r2, [r3, #4]
}
   1cb60:	bf00      	nop
   1cb62:	370c      	adds	r7, #12
   1cb64:	46bd      	mov	sp, r7
   1cb66:	bc80      	pop	{r7}
   1cb68:	4770      	bx	lr

0001cb6a <z_snode_next_peek>:
{
   1cb6a:	b480      	push	{r7}
   1cb6c:	b083      	sub	sp, #12
   1cb6e:	af00      	add	r7, sp, #0
   1cb70:	6078      	str	r0, [r7, #4]
	return node->next;
   1cb72:	687b      	ldr	r3, [r7, #4]
   1cb74:	681b      	ldr	r3, [r3, #0]
}
   1cb76:	4618      	mov	r0, r3
   1cb78:	370c      	adds	r7, #12
   1cb7a:	46bd      	mov	sp, r7
   1cb7c:	bc80      	pop	{r7}
   1cb7e:	4770      	bx	lr

0001cb80 <z_snode_next_set>:
{
   1cb80:	b480      	push	{r7}
   1cb82:	b083      	sub	sp, #12
   1cb84:	af00      	add	r7, sp, #0
   1cb86:	6078      	str	r0, [r7, #4]
   1cb88:	6039      	str	r1, [r7, #0]
	parent->next = child;
   1cb8a:	687b      	ldr	r3, [r7, #4]
   1cb8c:	683a      	ldr	r2, [r7, #0]
   1cb8e:	601a      	str	r2, [r3, #0]
}
   1cb90:	bf00      	nop
   1cb92:	370c      	adds	r7, #12
   1cb94:	46bd      	mov	sp, r7
   1cb96:	bc80      	pop	{r7}
   1cb98:	4770      	bx	lr

0001cb9a <z_slist_head_set>:
{
   1cb9a:	b480      	push	{r7}
   1cb9c:	b083      	sub	sp, #12
   1cb9e:	af00      	add	r7, sp, #0
   1cba0:	6078      	str	r0, [r7, #4]
   1cba2:	6039      	str	r1, [r7, #0]
	list->head = node;
   1cba4:	687b      	ldr	r3, [r7, #4]
   1cba6:	683a      	ldr	r2, [r7, #0]
   1cba8:	601a      	str	r2, [r3, #0]
}
   1cbaa:	bf00      	nop
   1cbac:	370c      	adds	r7, #12
   1cbae:	46bd      	mov	sp, r7
   1cbb0:	bc80      	pop	{r7}
   1cbb2:	4770      	bx	lr

0001cbb4 <z_slist_tail_set>:
{
   1cbb4:	b480      	push	{r7}
   1cbb6:	b083      	sub	sp, #12
   1cbb8:	af00      	add	r7, sp, #0
   1cbba:	6078      	str	r0, [r7, #4]
   1cbbc:	6039      	str	r1, [r7, #0]
	list->tail = node;
   1cbbe:	687b      	ldr	r3, [r7, #4]
   1cbc0:	683a      	ldr	r2, [r7, #0]
   1cbc2:	605a      	str	r2, [r3, #4]
}
   1cbc4:	bf00      	nop
   1cbc6:	370c      	adds	r7, #12
   1cbc8:	46bd      	mov	sp, r7
   1cbca:	bc80      	pop	{r7}
   1cbcc:	4770      	bx	lr

0001cbce <sys_slist_peek_head>:
{
   1cbce:	b480      	push	{r7}
   1cbd0:	b083      	sub	sp, #12
   1cbd2:	af00      	add	r7, sp, #0
   1cbd4:	6078      	str	r0, [r7, #4]
	return list->head;
   1cbd6:	687b      	ldr	r3, [r7, #4]
   1cbd8:	681b      	ldr	r3, [r3, #0]
}
   1cbda:	4618      	mov	r0, r3
   1cbdc:	370c      	adds	r7, #12
   1cbde:	46bd      	mov	sp, r7
   1cbe0:	bc80      	pop	{r7}
   1cbe2:	4770      	bx	lr

0001cbe4 <sys_slist_peek_tail>:
{
   1cbe4:	b480      	push	{r7}
   1cbe6:	b083      	sub	sp, #12
   1cbe8:	af00      	add	r7, sp, #0
   1cbea:	6078      	str	r0, [r7, #4]
	return list->tail;
   1cbec:	687b      	ldr	r3, [r7, #4]
   1cbee:	685b      	ldr	r3, [r3, #4]
}
   1cbf0:	4618      	mov	r0, r3
   1cbf2:	370c      	adds	r7, #12
   1cbf4:	46bd      	mov	sp, r7
   1cbf6:	bc80      	pop	{r7}
   1cbf8:	4770      	bx	lr

0001cbfa <sys_slist_peek_next_no_check>:
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cbfa:	b580      	push	{r7, lr}
   1cbfc:	b082      	sub	sp, #8
   1cbfe:	af00      	add	r7, sp, #0
   1cc00:	6078      	str	r0, [r7, #4]
   1cc02:	6878      	ldr	r0, [r7, #4]
   1cc04:	f7ff ffb1 	bl	1cb6a <z_snode_next_peek>
   1cc08:	4603      	mov	r3, r0
   1cc0a:	4618      	mov	r0, r3
   1cc0c:	3708      	adds	r7, #8
   1cc0e:	46bd      	mov	sp, r7
   1cc10:	bd80      	pop	{r7, pc}

0001cc12 <sys_slist_peek_next>:
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cc12:	b580      	push	{r7, lr}
   1cc14:	b082      	sub	sp, #8
   1cc16:	af00      	add	r7, sp, #0
   1cc18:	6078      	str	r0, [r7, #4]
   1cc1a:	687b      	ldr	r3, [r7, #4]
   1cc1c:	2b00      	cmp	r3, #0
   1cc1e:	d004      	beq.n	1cc2a <sys_slist_peek_next+0x18>
   1cc20:	6878      	ldr	r0, [r7, #4]
   1cc22:	f7ff ffea 	bl	1cbfa <sys_slist_peek_next_no_check>
   1cc26:	4603      	mov	r3, r0
   1cc28:	e000      	b.n	1cc2c <sys_slist_peek_next+0x1a>
   1cc2a:	2300      	movs	r3, #0
   1cc2c:	4618      	mov	r0, r3
   1cc2e:	3708      	adds	r7, #8
   1cc30:	46bd      	mov	sp, r7
   1cc32:	bd80      	pop	{r7, pc}

0001cc34 <sys_slist_append>:
Z_GENLIST_APPEND(slist, snode)
   1cc34:	b580      	push	{r7, lr}
   1cc36:	b082      	sub	sp, #8
   1cc38:	af00      	add	r7, sp, #0
   1cc3a:	6078      	str	r0, [r7, #4]
   1cc3c:	6039      	str	r1, [r7, #0]
   1cc3e:	2100      	movs	r1, #0
   1cc40:	6838      	ldr	r0, [r7, #0]
   1cc42:	f7ff ff9d 	bl	1cb80 <z_snode_next_set>
   1cc46:	6878      	ldr	r0, [r7, #4]
   1cc48:	f7ff ffcc 	bl	1cbe4 <sys_slist_peek_tail>
   1cc4c:	4603      	mov	r3, r0
   1cc4e:	2b00      	cmp	r3, #0
   1cc50:	d108      	bne.n	1cc64 <sys_slist_append+0x30>
   1cc52:	6839      	ldr	r1, [r7, #0]
   1cc54:	6878      	ldr	r0, [r7, #4]
   1cc56:	f7ff ffad 	bl	1cbb4 <z_slist_tail_set>
   1cc5a:	6839      	ldr	r1, [r7, #0]
   1cc5c:	6878      	ldr	r0, [r7, #4]
   1cc5e:	f7ff ff9c 	bl	1cb9a <z_slist_head_set>
   1cc62:	e00b      	b.n	1cc7c <sys_slist_append+0x48>
   1cc64:	6878      	ldr	r0, [r7, #4]
   1cc66:	f7ff ffbd 	bl	1cbe4 <sys_slist_peek_tail>
   1cc6a:	4603      	mov	r3, r0
   1cc6c:	6839      	ldr	r1, [r7, #0]
   1cc6e:	4618      	mov	r0, r3
   1cc70:	f7ff ff86 	bl	1cb80 <z_snode_next_set>
   1cc74:	6839      	ldr	r1, [r7, #0]
   1cc76:	6878      	ldr	r0, [r7, #4]
   1cc78:	f7ff ff9c 	bl	1cbb4 <z_slist_tail_set>
   1cc7c:	3708      	adds	r7, #8
   1cc7e:	46bd      	mov	sp, r7
   1cc80:	bd80      	pop	{r7, pc}

0001cc82 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   1cc82:	b580      	push	{r7, lr}
   1cc84:	b084      	sub	sp, #16
   1cc86:	af00      	add	r7, sp, #0
   1cc88:	60f8      	str	r0, [r7, #12]
   1cc8a:	60b9      	str	r1, [r7, #8]
   1cc8c:	607a      	str	r2, [r7, #4]
   1cc8e:	68bb      	ldr	r3, [r7, #8]
   1cc90:	2b00      	cmp	r3, #0
   1cc92:	d117      	bne.n	1ccc4 <sys_slist_remove+0x42>
   1cc94:	6878      	ldr	r0, [r7, #4]
   1cc96:	f7ff ff68 	bl	1cb6a <z_snode_next_peek>
   1cc9a:	4603      	mov	r3, r0
   1cc9c:	4619      	mov	r1, r3
   1cc9e:	68f8      	ldr	r0, [r7, #12]
   1cca0:	f7ff ff7b 	bl	1cb9a <z_slist_head_set>
   1cca4:	68f8      	ldr	r0, [r7, #12]
   1cca6:	f7ff ff9d 	bl	1cbe4 <sys_slist_peek_tail>
   1ccaa:	4602      	mov	r2, r0
   1ccac:	687b      	ldr	r3, [r7, #4]
   1ccae:	4293      	cmp	r3, r2
   1ccb0:	d11b      	bne.n	1ccea <sys_slist_remove+0x68>
   1ccb2:	68f8      	ldr	r0, [r7, #12]
   1ccb4:	f7ff ff8b 	bl	1cbce <sys_slist_peek_head>
   1ccb8:	4603      	mov	r3, r0
   1ccba:	4619      	mov	r1, r3
   1ccbc:	68f8      	ldr	r0, [r7, #12]
   1ccbe:	f7ff ff79 	bl	1cbb4 <z_slist_tail_set>
   1ccc2:	e012      	b.n	1ccea <sys_slist_remove+0x68>
   1ccc4:	6878      	ldr	r0, [r7, #4]
   1ccc6:	f7ff ff50 	bl	1cb6a <z_snode_next_peek>
   1ccca:	4603      	mov	r3, r0
   1cccc:	4619      	mov	r1, r3
   1ccce:	68b8      	ldr	r0, [r7, #8]
   1ccd0:	f7ff ff56 	bl	1cb80 <z_snode_next_set>
   1ccd4:	68f8      	ldr	r0, [r7, #12]
   1ccd6:	f7ff ff85 	bl	1cbe4 <sys_slist_peek_tail>
   1ccda:	4602      	mov	r2, r0
   1ccdc:	687b      	ldr	r3, [r7, #4]
   1ccde:	4293      	cmp	r3, r2
   1cce0:	d103      	bne.n	1ccea <sys_slist_remove+0x68>
   1cce2:	68b9      	ldr	r1, [r7, #8]
   1cce4:	68f8      	ldr	r0, [r7, #12]
   1cce6:	f7ff ff65 	bl	1cbb4 <z_slist_tail_set>
   1ccea:	2100      	movs	r1, #0
   1ccec:	6878      	ldr	r0, [r7, #4]
   1ccee:	f7ff ff47 	bl	1cb80 <z_snode_next_set>
   1ccf2:	3710      	adds	r7, #16
   1ccf4:	46bd      	mov	sp, r7
   1ccf6:	bd80      	pop	{r7, pc}

0001ccf8 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ccf8:	b580      	push	{r7, lr}
   1ccfa:	b084      	sub	sp, #16
   1ccfc:	af00      	add	r7, sp, #0
   1ccfe:	6078      	str	r0, [r7, #4]
   1cd00:	6039      	str	r1, [r7, #0]
   1cd02:	2300      	movs	r3, #0
   1cd04:	60fb      	str	r3, [r7, #12]
   1cd06:	6878      	ldr	r0, [r7, #4]
   1cd08:	f7ff ff61 	bl	1cbce <sys_slist_peek_head>
   1cd0c:	60b8      	str	r0, [r7, #8]
   1cd0e:	e010      	b.n	1cd32 <sys_slist_find_and_remove+0x3a>
   1cd10:	68ba      	ldr	r2, [r7, #8]
   1cd12:	683b      	ldr	r3, [r7, #0]
   1cd14:	429a      	cmp	r2, r3
   1cd16:	d106      	bne.n	1cd26 <sys_slist_find_and_remove+0x2e>
   1cd18:	683a      	ldr	r2, [r7, #0]
   1cd1a:	68f9      	ldr	r1, [r7, #12]
   1cd1c:	6878      	ldr	r0, [r7, #4]
   1cd1e:	f7ff ffb0 	bl	1cc82 <sys_slist_remove>
   1cd22:	2301      	movs	r3, #1
   1cd24:	e009      	b.n	1cd3a <sys_slist_find_and_remove+0x42>
   1cd26:	68bb      	ldr	r3, [r7, #8]
   1cd28:	60fb      	str	r3, [r7, #12]
   1cd2a:	68b8      	ldr	r0, [r7, #8]
   1cd2c:	f7ff ff71 	bl	1cc12 <sys_slist_peek_next>
   1cd30:	60b8      	str	r0, [r7, #8]
   1cd32:	68bb      	ldr	r3, [r7, #8]
   1cd34:	2b00      	cmp	r3, #0
   1cd36:	d1eb      	bne.n	1cd10 <sys_slist_find_and_remove+0x18>
   1cd38:	2300      	movs	r3, #0
   1cd3a:	4618      	mov	r0, r3
   1cd3c:	3710      	adds	r7, #16
   1cd3e:	46bd      	mov	sp, r7
   1cd40:	bd80      	pop	{r7, pc}

0001cd42 <k_uptime_get>:
{
   1cd42:	b580      	push	{r7, lr}
   1cd44:	af00      	add	r7, sp, #0
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   1cd46:	f000 f83a 	bl	1cdbe <k_uptime_ticks>
   1cd4a:	4602      	mov	r2, r0
   1cd4c:	460b      	mov	r3, r1
   1cd4e:	4610      	mov	r0, r2
   1cd50:	4619      	mov	r1, r3
   1cd52:	f7f2 fb2d 	bl	f3b0 <k_ticks_to_ms_floor64>
   1cd56:	4602      	mov	r2, r0
   1cd58:	460b      	mov	r3, r1
}
   1cd5a:	4610      	mov	r0, r2
   1cd5c:	4619      	mov	r1, r3
   1cd5e:	bd80      	pop	{r7, pc}

0001cd60 <k_uptime_delta>:
{
   1cd60:	b5b0      	push	{r4, r5, r7, lr}
   1cd62:	b086      	sub	sp, #24
   1cd64:	af00      	add	r7, sp, #0
   1cd66:	6078      	str	r0, [r7, #4]
	uptime = k_uptime_get();
   1cd68:	f7ff ffeb 	bl	1cd42 <k_uptime_get>
   1cd6c:	e9c7 0104 	strd	r0, r1, [r7, #16]
	delta = uptime - *reftime;
   1cd70:	687b      	ldr	r3, [r7, #4]
   1cd72:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cd76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1cd7a:	1a84      	subs	r4, r0, r2
   1cd7c:	eb61 0503 	sbc.w	r5, r1, r3
   1cd80:	e9c7 4502 	strd	r4, r5, [r7, #8]
	*reftime = uptime;
   1cd84:	6879      	ldr	r1, [r7, #4]
   1cd86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1cd8a:	e9c1 2300 	strd	r2, r3, [r1]
	return delta;
   1cd8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
   1cd92:	4610      	mov	r0, r2
   1cd94:	4619      	mov	r1, r3
   1cd96:	3718      	adds	r7, #24
   1cd98:	46bd      	mov	sp, r7
   1cd9a:	bdb0      	pop	{r4, r5, r7, pc}

0001cd9c <k_busy_wait>:
{
   1cd9c:	b580      	push	{r7, lr}
   1cd9e:	b082      	sub	sp, #8
   1cda0:	af00      	add	r7, sp, #0
   1cda2:	6078      	str	r0, [r7, #4]
	z_impl_k_busy_wait(usec_to_wait);
   1cda4:	6878      	ldr	r0, [r7, #4]
   1cda6:	f001 faf9 	bl	1e39c <z_impl_k_busy_wait>
}
   1cdaa:	bf00      	nop
   1cdac:	3708      	adds	r7, #8
   1cdae:	46bd      	mov	sp, r7
   1cdb0:	bd80      	pop	{r7, pc}

0001cdb2 <k_yield>:
{
   1cdb2:	b580      	push	{r7, lr}
   1cdb4:	af00      	add	r7, sp, #0
	z_impl_k_yield();
   1cdb6:	f7f9 fb29 	bl	1640c <z_impl_k_yield>
}
   1cdba:	bf00      	nop
   1cdbc:	bd80      	pop	{r7, pc}

0001cdbe <k_uptime_ticks>:
{
   1cdbe:	b580      	push	{r7, lr}
   1cdc0:	af00      	add	r7, sp, #0
	return z_impl_k_uptime_ticks();
   1cdc2:	f002 fa91 	bl	1f2e8 <z_impl_k_uptime_ticks>
   1cdc6:	4602      	mov	r2, r0
   1cdc8:	460b      	mov	r3, r1
}
   1cdca:	4610      	mov	r0, r2
   1cdcc:	4619      	mov	r1, r3
   1cdce:	bd80      	pop	{r7, pc}

0001cdd0 <k_sem_init>:
{
   1cdd0:	b580      	push	{r7, lr}
   1cdd2:	b084      	sub	sp, #16
   1cdd4:	af00      	add	r7, sp, #0
   1cdd6:	60f8      	str	r0, [r7, #12]
   1cdd8:	60b9      	str	r1, [r7, #8]
   1cdda:	607a      	str	r2, [r7, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cddc:	687a      	ldr	r2, [r7, #4]
   1cdde:	68b9      	ldr	r1, [r7, #8]
   1cde0:	68f8      	ldr	r0, [r7, #12]
   1cde2:	f001 fdd6 	bl	1e992 <z_impl_k_sem_init>
   1cde6:	4603      	mov	r3, r0
}
   1cde8:	4618      	mov	r0, r3
   1cdea:	3710      	adds	r7, #16
   1cdec:	46bd      	mov	sp, r7
   1cdee:	bd80      	pop	{r7, pc}

0001cdf0 <k_sem_take>:
{
   1cdf0:	b580      	push	{r7, lr}
   1cdf2:	b084      	sub	sp, #16
   1cdf4:	af00      	add	r7, sp, #0
   1cdf6:	60f8      	str	r0, [r7, #12]
   1cdf8:	e9c7 2300 	strd	r2, r3, [r7]
	return z_impl_k_sem_take(sem, timeout);
   1cdfc:	e9d7 2300 	ldrd	r2, r3, [r7]
   1ce00:	68f8      	ldr	r0, [r7, #12]
   1ce02:	f7f7 fa43 	bl	1428c <z_impl_k_sem_take>
   1ce06:	4603      	mov	r3, r0
}
   1ce08:	4618      	mov	r0, r3
   1ce0a:	3710      	adds	r7, #16
   1ce0c:	46bd      	mov	sp, r7
   1ce0e:	bd80      	pop	{r7, pc}

0001ce10 <k_sem_give>:
{
   1ce10:	b580      	push	{r7, lr}
   1ce12:	b082      	sub	sp, #8
   1ce14:	af00      	add	r7, sp, #0
   1ce16:	6078      	str	r0, [r7, #4]
	z_impl_k_sem_give(sem);
   1ce18:	6878      	ldr	r0, [r7, #4]
   1ce1a:	f7f7 f997 	bl	1414c <z_impl_k_sem_give>
}
   1ce1e:	bf00      	nop
   1ce20:	3708      	adds	r7, #8
   1ce22:	46bd      	mov	sp, r7
   1ce24:	bd80      	pop	{r7, pc}

0001ce26 <sleeping_thread_init>:
{
   1ce26:	b580      	push	{r7, lr}
   1ce28:	b082      	sub	sp, #8
   1ce2a:	af00      	add	r7, sp, #0
   1ce2c:	6078      	str	r0, [r7, #4]
   1ce2e:	6039      	str	r1, [r7, #0]
	k_sem_init(&thread->sem, 0, 1);
   1ce30:	687b      	ldr	r3, [r7, #4]
   1ce32:	3304      	adds	r3, #4
   1ce34:	2201      	movs	r2, #1
   1ce36:	2100      	movs	r1, #0
   1ce38:	4618      	mov	r0, r3
   1ce3a:	f7ff ffc9 	bl	1cdd0 <k_sem_init>
	thread->context = context;
   1ce3e:	687b      	ldr	r3, [r7, #4]
   1ce40:	683a      	ldr	r2, [r7, #0]
   1ce42:	615a      	str	r2, [r3, #20]
}
   1ce44:	bf00      	nop
   1ce46:	3708      	adds	r7, #8
   1ce48:	46bd      	mov	sp, r7
   1ce4a:	bd80      	pop	{r7, pc}

0001ce4c <nrf_modem_os_busywait>:
{
   1ce4c:	b580      	push	{r7, lr}
   1ce4e:	b082      	sub	sp, #8
   1ce50:	af00      	add	r7, sp, #0
   1ce52:	6078      	str	r0, [r7, #4]
	k_busy_wait(usec);
   1ce54:	687b      	ldr	r3, [r7, #4]
   1ce56:	4618      	mov	r0, r3
   1ce58:	f7ff ffa0 	bl	1cd9c <k_busy_wait>
}
   1ce5c:	bf00      	nop
   1ce5e:	3708      	adds	r7, #8
   1ce60:	46bd      	mov	sp, r7
   1ce62:	bd80      	pop	{r7, pc}

0001ce64 <nrf_modem_os_timedwait>:
{
   1ce64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   1ce68:	b08c      	sub	sp, #48	; 0x30
   1ce6a:	af00      	add	r7, sp, #0
   1ce6c:	6078      	str	r0, [r7, #4]
   1ce6e:	6039      	str	r1, [r7, #0]
	if (!nrf_modem_is_initialized()) {
   1ce70:	f001 fa92 	bl	1e398 <nrf_modem_is_initialized>
   1ce74:	4603      	mov	r3, r0
   1ce76:	f083 0301 	eor.w	r3, r3, #1
   1ce7a:	b2db      	uxtb	r3, r3
   1ce7c:	2b00      	cmp	r3, #0
   1ce7e:	d002      	beq.n	1ce86 <nrf_modem_os_timedwait+0x22>
		return -NRF_ESHUTDOWN;
   1ce80:	f06f 036d 	mvn.w	r3, #109	; 0x6d
   1ce84:	e081      	b.n	1cf8a <nrf_modem_os_timedwait+0x126>
	start = k_uptime_get();
   1ce86:	f7ff ff5c 	bl	1cd42 <k_uptime_get>
   1ce8a:	4602      	mov	r2, r0
   1ce8c:	460b      	mov	r3, r1
   1ce8e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (*timeout == 0) {
   1ce92:	683b      	ldr	r3, [r7, #0]
   1ce94:	681b      	ldr	r3, [r3, #0]
   1ce96:	2b00      	cmp	r3, #0
   1ce98:	d104      	bne.n	1cea4 <nrf_modem_os_timedwait+0x40>
		k_yield();
   1ce9a:	f7ff ff8a 	bl	1cdb2 <k_yield>
		return -NRF_EAGAIN;
   1ce9e:	f06f 030a 	mvn.w	r3, #10
   1cea2:	e072      	b.n	1cf8a <nrf_modem_os_timedwait+0x126>
	if (*timeout < 0) {
   1cea4:	683b      	ldr	r3, [r7, #0]
   1cea6:	681b      	ldr	r3, [r3, #0]
   1cea8:	2b00      	cmp	r3, #0
   1ceaa:	da03      	bge.n	1ceb4 <nrf_modem_os_timedwait+0x50>
		*timeout = SYS_FOREVER_MS;
   1ceac:	683b      	ldr	r3, [r7, #0]
   1ceae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ceb2:	601a      	str	r2, [r3, #0]
	sleeping_thread_init(&thread, context);
   1ceb4:	f107 0310 	add.w	r3, r7, #16
   1ceb8:	6879      	ldr	r1, [r7, #4]
   1ceba:	4618      	mov	r0, r3
   1cebc:	f7ff ffb3 	bl	1ce26 <sleeping_thread_init>
	if (!sleeping_thread_add(&thread)) {
   1cec0:	f107 0310 	add.w	r3, r7, #16
   1cec4:	4618      	mov	r0, r3
   1cec6:	f7f2 fd4d 	bl	f964 <sleeping_thread_add>
   1ceca:	4603      	mov	r3, r0
   1cecc:	f083 0301 	eor.w	r3, r3, #1
   1ced0:	b2db      	uxtb	r3, r3
   1ced2:	2b00      	cmp	r3, #0
   1ced4:	d001      	beq.n	1ceda <nrf_modem_os_timedwait+0x76>
		return 0;
   1ced6:	2300      	movs	r3, #0
   1ced8:	e057      	b.n	1cf8a <nrf_modem_os_timedwait+0x126>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1ceda:	683b      	ldr	r3, [r7, #0]
   1cedc:	681b      	ldr	r3, [r3, #0]
   1cede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1cee2:	d104      	bne.n	1ceee <nrf_modem_os_timedwait+0x8a>
   1cee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ceec:	e00c      	b.n	1cf08 <nrf_modem_os_timedwait+0xa4>
   1ceee:	683b      	ldr	r3, [r7, #0]
   1cef0:	681b      	ldr	r3, [r3, #0]
   1cef2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1cef6:	17da      	asrs	r2, r3, #31
   1cef8:	469a      	mov	sl, r3
   1cefa:	4693      	mov	fp, r2
   1cefc:	4650      	mov	r0, sl
   1cefe:	4659      	mov	r1, fp
   1cf00:	f7f1 fffa 	bl	eef8 <k_ms_to_ticks_ceil64>
   1cf04:	4602      	mov	r2, r0
   1cf06:	460b      	mov	r3, r1
   1cf08:	f107 0110 	add.w	r1, r7, #16
   1cf0c:	3104      	adds	r1, #4
   1cf0e:	4608      	mov	r0, r1
   1cf10:	f7ff ff6e 	bl	1cdf0 <k_sem_take>
	sleeping_thread_remove(&thread);
   1cf14:	f107 0310 	add.w	r3, r7, #16
   1cf18:	4618      	mov	r0, r3
   1cf1a:	f7f2 fd59 	bl	f9d0 <sleeping_thread_remove>
	if (!nrf_modem_is_initialized()) {
   1cf1e:	f001 fa3b 	bl	1e398 <nrf_modem_is_initialized>
   1cf22:	4603      	mov	r3, r0
   1cf24:	f083 0301 	eor.w	r3, r3, #1
   1cf28:	b2db      	uxtb	r3, r3
   1cf2a:	2b00      	cmp	r3, #0
   1cf2c:	d002      	beq.n	1cf34 <nrf_modem_os_timedwait+0xd0>
		return -NRF_ESHUTDOWN;
   1cf2e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
   1cf32:	e02a      	b.n	1cf8a <nrf_modem_os_timedwait+0x126>
	if (*timeout == SYS_FOREVER_MS) {
   1cf34:	683b      	ldr	r3, [r7, #0]
   1cf36:	681b      	ldr	r3, [r3, #0]
   1cf38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1cf3c:	d101      	bne.n	1cf42 <nrf_modem_os_timedwait+0xde>
		return 0;
   1cf3e:	2300      	movs	r3, #0
   1cf40:	e023      	b.n	1cf8a <nrf_modem_os_timedwait+0x126>
	remaining = *timeout - k_uptime_delta(&start);
   1cf42:	683b      	ldr	r3, [r7, #0]
   1cf44:	681b      	ldr	r3, [r3, #0]
   1cf46:	17da      	asrs	r2, r3, #31
   1cf48:	461c      	mov	r4, r3
   1cf4a:	4615      	mov	r5, r2
   1cf4c:	f107 0308 	add.w	r3, r7, #8
   1cf50:	4618      	mov	r0, r3
   1cf52:	f7ff ff05 	bl	1cd60 <k_uptime_delta>
   1cf56:	4602      	mov	r2, r0
   1cf58:	460b      	mov	r3, r1
   1cf5a:	ebb4 0802 	subs.w	r8, r4, r2
   1cf5e:	eb65 0903 	sbc.w	r9, r5, r3
   1cf62:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	*timeout = remaining > 0 ? remaining : 0;
   1cf66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   1cf6a:	2b00      	cmp	r3, #0
   1cf6c:	da03      	bge.n	1cf76 <nrf_modem_os_timedwait+0x112>
   1cf6e:	f04f 0200 	mov.w	r2, #0
   1cf72:	f04f 0300 	mov.w	r3, #0
   1cf76:	683b      	ldr	r3, [r7, #0]
   1cf78:	601a      	str	r2, [r3, #0]
	if (*timeout == 0) {
   1cf7a:	683b      	ldr	r3, [r7, #0]
   1cf7c:	681b      	ldr	r3, [r3, #0]
   1cf7e:	2b00      	cmp	r3, #0
   1cf80:	d102      	bne.n	1cf88 <nrf_modem_os_timedwait+0x124>
		return -NRF_EAGAIN;
   1cf82:	f06f 030a 	mvn.w	r3, #10
   1cf86:	e000      	b.n	1cf8a <nrf_modem_os_timedwait+0x126>
	return 0;
   1cf88:	2300      	movs	r3, #0
}
   1cf8a:	4618      	mov	r0, r3
   1cf8c:	3730      	adds	r7, #48	; 0x30
   1cf8e:	46bd      	mov	sp, r7
   1cf90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0001cf94 <nrf_modem_os_is_in_isr>:
{
   1cf94:	b580      	push	{r7, lr}
   1cf96:	af00      	add	r7, sp, #0
	return k_is_in_isr();
   1cf98:	f001 fb6e 	bl	1e678 <k_is_in_isr>
   1cf9c:	4603      	mov	r3, r0
}
   1cf9e:	4618      	mov	r0, r3
   1cfa0:	bd80      	pop	{r7, pc}

0001cfa2 <k_mutex_lock>:
{
   1cfa2:	b580      	push	{r7, lr}
   1cfa4:	b084      	sub	sp, #16
   1cfa6:	af00      	add	r7, sp, #0
   1cfa8:	60f8      	str	r0, [r7, #12]
   1cfaa:	e9c7 2300 	strd	r2, r3, [r7]
	return z_impl_k_mutex_lock(mutex, timeout);
   1cfae:	e9d7 2300 	ldrd	r2, r3, [r7]
   1cfb2:	68f8      	ldr	r0, [r7, #12]
   1cfb4:	f7f6 fd8a 	bl	13acc <z_impl_k_mutex_lock>
   1cfb8:	4603      	mov	r3, r0
}
   1cfba:	4618      	mov	r0, r3
   1cfbc:	3710      	adds	r7, #16
   1cfbe:	46bd      	mov	sp, r7
   1cfc0:	bd80      	pop	{r7, pc}

0001cfc2 <k_mutex_unlock>:
{
   1cfc2:	b580      	push	{r7, lr}
   1cfc4:	b082      	sub	sp, #8
   1cfc6:	af00      	add	r7, sp, #0
   1cfc8:	6078      	str	r0, [r7, #4]
	return z_impl_k_mutex_unlock(mutex);
   1cfca:	6878      	ldr	r0, [r7, #4]
   1cfcc:	f7f6 ffb4 	bl	13f38 <z_impl_k_mutex_unlock>
   1cfd0:	4603      	mov	r3, r0
}
   1cfd2:	4618      	mov	r0, r3
   1cfd4:	3708      	adds	r7, #8
   1cfd6:	46bd      	mov	sp, r7
   1cfd8:	bd80      	pop	{r7, pc}

0001cfda <tfm_ns_interface_init>:
{
   1cfda:	b480      	push	{r7}
   1cfdc:	af00      	add	r7, sp, #0
	return TFM_SUCCESS;
   1cfde:	2300      	movs	r3, #0
}
   1cfe0:	4618      	mov	r0, r3
   1cfe2:	46bd      	mov	sp, r7
   1cfe4:	bc80      	pop	{r7}
   1cfe6:	4770      	bx	lr

0001cfe8 <psa_crypto_init>:
{
   1cfe8:	b480      	push	{r7}
   1cfea:	af00      	add	r7, sp, #0
    return PSA_SUCCESS;
   1cfec:	2300      	movs	r3, #0
}
   1cfee:	4618      	mov	r0, r3
   1cff0:	46bd      	mov	sp, r7
   1cff2:	bc80      	pop	{r7}
   1cff4:	4770      	bx	lr

0001cff6 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   1cff6:	b480      	push	{r7}
   1cff8:	af00      	add	r7, sp, #0
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20ul) | (3UL << 22ul);
        __DSB();
        __ISB();
    #endif
}
   1cffa:	bf00      	nop
   1cffc:	46bd      	mov	sp, r7
   1cffe:	bc80      	pop	{r7}
   1d000:	4770      	bx	lr

0001d002 <k_busy_wait>:
{
   1d002:	b580      	push	{r7, lr}
   1d004:	b082      	sub	sp, #8
   1d006:	af00      	add	r7, sp, #0
   1d008:	6078      	str	r0, [r7, #4]
	z_impl_k_busy_wait(usec_to_wait);
   1d00a:	6878      	ldr	r0, [r7, #4]
   1d00c:	f001 f9c6 	bl	1e39c <z_impl_k_busy_wait>
}
   1d010:	bf00      	nop
   1d012:	3708      	adds	r7, #8
   1d014:	46bd      	mov	sp, r7
   1d016:	bd80      	pop	{r7, pc}

0001d018 <nrfx_isr>:
{
   1d018:	b580      	push	{r7, lr}
   1d01a:	b082      	sub	sp, #8
   1d01c:	af00      	add	r7, sp, #0
   1d01e:	6078      	str	r0, [r7, #4]
	((nrfx_irq_handler_t)irq_handler)();
   1d020:	687b      	ldr	r3, [r7, #4]
   1d022:	4798      	blx	r3
}
   1d024:	bf00      	nop
   1d026:	3708      	adds	r7, #8
   1d028:	46bd      	mov	sp, r7
   1d02a:	bd80      	pop	{r7, pc}

0001d02c <nrfx_busy_wait>:
{
   1d02c:	b580      	push	{r7, lr}
   1d02e:	b082      	sub	sp, #8
   1d030:	af00      	add	r7, sp, #0
   1d032:	6078      	str	r0, [r7, #4]
		k_busy_wait(usec_to_wait);
   1d034:	6878      	ldr	r0, [r7, #4]
   1d036:	f7ff ffe4 	bl	1d002 <k_busy_wait>
}
   1d03a:	bf00      	nop
   1d03c:	3708      	adds	r7, #8
   1d03e:	46bd      	mov	sp, r7
   1d040:	bd80      	pop	{r7, pc}

0001d042 <atomic_cas>:
{
   1d042:	b490      	push	{r4, r7}
   1d044:	b084      	sub	sp, #16
   1d046:	af00      	add	r7, sp, #0
   1d048:	60f8      	str	r0, [r7, #12]
   1d04a:	60b9      	str	r1, [r7, #8]
   1d04c:	607a      	str	r2, [r7, #4]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d04e:	687c      	ldr	r4, [r7, #4]
   1d050:	68fa      	ldr	r2, [r7, #12]
   1d052:	f107 0308 	add.w	r3, r7, #8
   1d056:	6818      	ldr	r0, [r3, #0]
   1d058:	e8d2 1fef 	ldaex	r1, [r2]
   1d05c:	4281      	cmp	r1, r0
   1d05e:	d106      	bne.n	1d06e <atomic_cas+0x2c>
   1d060:	e8c2 4fec 	stlex	ip, r4, [r2]
   1d064:	f1bc 0f00 	cmp.w	ip, #0
   1d068:	f1bc 0f00 	cmp.w	ip, #0
   1d06c:	d1f4      	bne.n	1d058 <atomic_cas+0x16>
   1d06e:	bf0c      	ite	eq
   1d070:	2201      	moveq	r2, #1
   1d072:	2200      	movne	r2, #0
   1d074:	2a00      	cmp	r2, #0
   1d076:	d100      	bne.n	1d07a <atomic_cas+0x38>
   1d078:	6019      	str	r1, [r3, #0]
   1d07a:	4613      	mov	r3, r2
}
   1d07c:	4618      	mov	r0, r3
   1d07e:	3710      	adds	r7, #16
   1d080:	46bd      	mov	sp, r7
   1d082:	bc90      	pop	{r4, r7}
   1d084:	4770      	bx	lr

0001d086 <nrf_barrier_w>:

NRF_STATIC_INLINE void nrf_barrier_w(void)
{
   1d086:	b480      	push	{r7}
   1d088:	af00      	add	r7, sp, #0
#if defined(ISA_RISCV)
    RISCV_FENCE(ow, ow);
#endif
}
   1d08a:	bf00      	nop
   1d08c:	46bd      	mov	sp, r7
   1d08e:	bc80      	pop	{r7}
   1d090:	4770      	bx	lr

0001d092 <nrf_dppi_channels_enable>:
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
   1d092:	b480      	push	{r7}
   1d094:	b083      	sub	sp, #12
   1d096:	af00      	add	r7, sp, #0
   1d098:	6078      	str	r0, [r7, #4]
   1d09a:	6039      	str	r1, [r7, #0]
    p_reg->CHENSET = mask;
   1d09c:	687b      	ldr	r3, [r7, #4]
   1d09e:	683a      	ldr	r2, [r7, #0]
   1d0a0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1d0a4:	bf00      	nop
   1d0a6:	370c      	adds	r7, #12
   1d0a8:	46bd      	mov	sp, r7
   1d0aa:	bc80      	pop	{r7}
   1d0ac:	4770      	bx	lr

0001d0ae <nrfy_dppi_channels_enable>:
    return check;
}

/** @refhal{nrf_dppi_channels_enable} */
NRFY_STATIC_INLINE void nrfy_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
   1d0ae:	b580      	push	{r7, lr}
   1d0b0:	b082      	sub	sp, #8
   1d0b2:	af00      	add	r7, sp, #0
   1d0b4:	6078      	str	r0, [r7, #4]
   1d0b6:	6039      	str	r1, [r7, #0]
    nrf_dppi_channels_enable(p_reg, mask);
   1d0b8:	6839      	ldr	r1, [r7, #0]
   1d0ba:	6878      	ldr	r0, [r7, #4]
   1d0bc:	f7ff ffe9 	bl	1d092 <nrf_dppi_channels_enable>
    nrf_barrier_w();
   1d0c0:	f7ff ffe1 	bl	1d086 <nrf_barrier_w>
}
   1d0c4:	bf00      	nop
   1d0c6:	3708      	adds	r7, #8
   1d0c8:	46bd      	mov	sp, r7
   1d0ca:	bd80      	pop	{r7, pc}

0001d0cc <nrfx_gppi_channel_endpoints_setup>:

void nrfx_gppi_channel_endpoints_setup(uint8_t  channel, uint32_t eep, uint32_t tep)
{
   1d0cc:	b580      	push	{r7, lr}
   1d0ce:	b084      	sub	sp, #16
   1d0d0:	af00      	add	r7, sp, #0
   1d0d2:	4603      	mov	r3, r0
   1d0d4:	60b9      	str	r1, [r7, #8]
   1d0d6:	607a      	str	r2, [r7, #4]
   1d0d8:	73fb      	strb	r3, [r7, #15]
    nrfx_gppi_event_endpoint_setup(channel, eep);
   1d0da:	7bfb      	ldrb	r3, [r7, #15]
   1d0dc:	68b9      	ldr	r1, [r7, #8]
   1d0de:	4618      	mov	r0, r3
   1d0e0:	f7f3 f89c 	bl	1021c <nrfx_gppi_event_endpoint_setup>
    nrfx_gppi_task_endpoint_setup(channel, tep);
   1d0e4:	7bfb      	ldrb	r3, [r7, #15]
   1d0e6:	6879      	ldr	r1, [r7, #4]
   1d0e8:	4618      	mov	r0, r3
   1d0ea:	f7f3 f8bb 	bl	10264 <nrfx_gppi_task_endpoint_setup>
}
   1d0ee:	bf00      	nop
   1d0f0:	3710      	adds	r7, #16
   1d0f2:	46bd      	mov	sp, r7
   1d0f4:	bd80      	pop	{r7, pc}

0001d0f6 <nrfx_get_irq_number>:
{
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
   1d0f6:	b480      	push	{r7}
   1d0f8:	b083      	sub	sp, #12
   1d0fa:	af00      	add	r7, sp, #0
   1d0fc:	6078      	str	r0, [r7, #4]
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1d0fe:	687b      	ldr	r3, [r7, #4]
   1d100:	0b1b      	lsrs	r3, r3, #12
   1d102:	b25b      	sxtb	r3, r3
}
   1d104:	4618      	mov	r0, r3
   1d106:	370c      	adds	r7, #12
   1d108:	46bd      	mov	sp, r7
   1d10a:	bc80      	pop	{r7}
   1d10c:	4770      	bx	lr

0001d10e <nrf_event_readback>:
{
   1d10e:	b480      	push	{r7}
   1d110:	b083      	sub	sp, #12
   1d112:	af00      	add	r7, sp, #0
   1d114:	6078      	str	r0, [r7, #4]
    (void)*((volatile uint32_t *)(p_event_reg));
   1d116:	687b      	ldr	r3, [r7, #4]
   1d118:	681b      	ldr	r3, [r3, #0]
}
   1d11a:	bf00      	nop
   1d11c:	370c      	adds	r7, #12
   1d11e:	46bd      	mov	sp, r7
   1d120:	bc80      	pop	{r7}
   1d122:	4770      	bx	lr

0001d124 <nrf_clock_int_enable>:
{
   1d124:	b480      	push	{r7}
   1d126:	b083      	sub	sp, #12
   1d128:	af00      	add	r7, sp, #0
   1d12a:	6078      	str	r0, [r7, #4]
   1d12c:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   1d12e:	687b      	ldr	r3, [r7, #4]
   1d130:	683a      	ldr	r2, [r7, #0]
   1d132:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d136:	bf00      	nop
   1d138:	370c      	adds	r7, #12
   1d13a:	46bd      	mov	sp, r7
   1d13c:	bc80      	pop	{r7}
   1d13e:	4770      	bx	lr

0001d140 <nrf_clock_int_disable>:
{
   1d140:	b480      	push	{r7}
   1d142:	b083      	sub	sp, #12
   1d144:	af00      	add	r7, sp, #0
   1d146:	6078      	str	r0, [r7, #4]
   1d148:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   1d14a:	687b      	ldr	r3, [r7, #4]
   1d14c:	683a      	ldr	r2, [r7, #0]
   1d14e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d152:	bf00      	nop
   1d154:	370c      	adds	r7, #12
   1d156:	46bd      	mov	sp, r7
   1d158:	bc80      	pop	{r7}
   1d15a:	4770      	bx	lr

0001d15c <nrf_clock_task_trigger>:
{
   1d15c:	b480      	push	{r7}
   1d15e:	b083      	sub	sp, #12
   1d160:	af00      	add	r7, sp, #0
   1d162:	6078      	str	r0, [r7, #4]
   1d164:	460b      	mov	r3, r1
   1d166:	70fb      	strb	r3, [r7, #3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d168:	78fb      	ldrb	r3, [r7, #3]
   1d16a:	687a      	ldr	r2, [r7, #4]
   1d16c:	4413      	add	r3, r2
   1d16e:	2201      	movs	r2, #1
   1d170:	601a      	str	r2, [r3, #0]
}
   1d172:	bf00      	nop
   1d174:	370c      	adds	r7, #12
   1d176:	46bd      	mov	sp, r7
   1d178:	bc80      	pop	{r7}
   1d17a:	4770      	bx	lr

0001d17c <nrf_clock_event_clear>:
{
   1d17c:	b580      	push	{r7, lr}
   1d17e:	b082      	sub	sp, #8
   1d180:	af00      	add	r7, sp, #0
   1d182:	6078      	str	r0, [r7, #4]
   1d184:	460b      	mov	r3, r1
   1d186:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d188:	887b      	ldrh	r3, [r7, #2]
   1d18a:	687a      	ldr	r2, [r7, #4]
   1d18c:	4413      	add	r3, r2
   1d18e:	2200      	movs	r2, #0
   1d190:	601a      	str	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
   1d192:	887b      	ldrh	r3, [r7, #2]
   1d194:	687a      	ldr	r2, [r7, #4]
   1d196:	4413      	add	r3, r2
   1d198:	4618      	mov	r0, r3
   1d19a:	f7ff ffb8 	bl	1d10e <nrf_event_readback>
}
   1d19e:	bf00      	nop
   1d1a0:	3708      	adds	r7, #8
   1d1a2:	46bd      	mov	sp, r7
   1d1a4:	bd80      	pop	{r7, pc}

0001d1a6 <nrf_clock_event_check>:
{
   1d1a6:	b480      	push	{r7}
   1d1a8:	b083      	sub	sp, #12
   1d1aa:	af00      	add	r7, sp, #0
   1d1ac:	6078      	str	r0, [r7, #4]
   1d1ae:	460b      	mov	r3, r1
   1d1b0:	807b      	strh	r3, [r7, #2]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d1b2:	887b      	ldrh	r3, [r7, #2]
   1d1b4:	687a      	ldr	r2, [r7, #4]
   1d1b6:	4413      	add	r3, r2
   1d1b8:	681b      	ldr	r3, [r3, #0]
   1d1ba:	2b00      	cmp	r3, #0
   1d1bc:	bf14      	ite	ne
   1d1be:	2301      	movne	r3, #1
   1d1c0:	2300      	moveq	r3, #0
   1d1c2:	b2db      	uxtb	r3, r3
}
   1d1c4:	4618      	mov	r0, r3
   1d1c6:	370c      	adds	r7, #12
   1d1c8:	46bd      	mov	sp, r7
   1d1ca:	bc80      	pop	{r7}
   1d1cc:	4770      	bx	lr

0001d1ce <nrf_clock_lf_src_set>:
{
   1d1ce:	b480      	push	{r7}
   1d1d0:	b083      	sub	sp, #12
   1d1d2:	af00      	add	r7, sp, #0
   1d1d4:	6078      	str	r0, [r7, #4]
   1d1d6:	460b      	mov	r3, r1
   1d1d8:	70fb      	strb	r3, [r7, #3]
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   1d1da:	78fa      	ldrb	r2, [r7, #3]
   1d1dc:	687b      	ldr	r3, [r7, #4]
   1d1de:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1d1e2:	bf00      	nop
   1d1e4:	370c      	adds	r7, #12
   1d1e6:	46bd      	mov	sp, r7
   1d1e8:	bc80      	pop	{r7}
   1d1ea:	4770      	bx	lr

0001d1ec <nrf_clock_lf_srccopy_get>:
{
   1d1ec:	b480      	push	{r7}
   1d1ee:	b083      	sub	sp, #12
   1d1f0:	af00      	add	r7, sp, #0
   1d1f2:	6078      	str	r0, [r7, #4]
    return (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSRCCOPY & NRF_CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1d1f4:	687b      	ldr	r3, [r7, #4]
   1d1f6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1d1fa:	b2db      	uxtb	r3, r3
   1d1fc:	f003 0303 	and.w	r3, r3, #3
   1d200:	b2db      	uxtb	r3, r3
}
   1d202:	4618      	mov	r0, r3
   1d204:	370c      	adds	r7, #12
   1d206:	46bd      	mov	sp, r7
   1d208:	bc80      	pop	{r7}
   1d20a:	4770      	bx	lr

0001d20c <clock_initial_lfclksrc_get>:
{
   1d20c:	b480      	push	{r7}
   1d20e:	af00      	add	r7, sp, #0
    return NRF_CLOCK_LFCLK_RC;
   1d210:	2301      	movs	r3, #1
}
   1d212:	4618      	mov	r0, r3
   1d214:	46bd      	mov	sp, r7
   1d216:	bc80      	pop	{r7}
   1d218:	4770      	bx	lr

0001d21a <clock_lfclksrc_tweak>:
{
   1d21a:	b580      	push	{r7, lr}
   1d21c:	b084      	sub	sp, #16
   1d21e:	af00      	add	r7, sp, #0
   1d220:	6078      	str	r0, [r7, #4]
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   1d222:	687b      	ldr	r3, [r7, #4]
   1d224:	781b      	ldrb	r3, [r3, #0]
   1d226:	2b02      	cmp	r3, #2
   1d228:	bf0c      	ite	eq
   1d22a:	2301      	moveq	r3, #1
   1d22c:	2300      	movne	r3, #0
   1d22e:	73fb      	strb	r3, [r7, #15]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1d230:	7bfb      	ldrb	r3, [r7, #15]
   1d232:	2b00      	cmp	r3, #0
   1d234:	d103      	bne.n	1d23e <clock_lfclksrc_tweak+0x24>
   1d236:	687b      	ldr	r3, [r7, #4]
   1d238:	781b      	ldrb	r3, [r3, #0]
   1d23a:	2b01      	cmp	r3, #1
   1d23c:	d101      	bne.n	1d242 <clock_lfclksrc_tweak+0x28>
   1d23e:	2301      	movs	r3, #1
   1d240:	e000      	b.n	1d244 <clock_lfclksrc_tweak+0x2a>
   1d242:	2300      	movs	r3, #0
   1d244:	73fb      	strb	r3, [r7, #15]
   1d246:	7bfb      	ldrb	r3, [r7, #15]
   1d248:	f003 0301 	and.w	r3, r3, #1
   1d24c:	73fb      	strb	r3, [r7, #15]
    if (!is_correct_clk)
   1d24e:	7bfb      	ldrb	r3, [r7, #15]
   1d250:	f083 0301 	eor.w	r3, r3, #1
   1d254:	b2db      	uxtb	r3, r3
   1d256:	2b00      	cmp	r3, #0
   1d258:	d008      	beq.n	1d26c <clock_lfclksrc_tweak+0x52>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1d25a:	2000      	movs	r0, #0
   1d25c:	f7f3 f906 	bl	1046c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1d260:	f7ff ffd4 	bl	1d20c <clock_initial_lfclksrc_get>
   1d264:	4603      	mov	r3, r0
   1d266:	461a      	mov	r2, r3
   1d268:	687b      	ldr	r3, [r7, #4]
   1d26a:	701a      	strb	r2, [r3, #0]
    return is_correct_clk;
   1d26c:	7bfb      	ldrb	r3, [r7, #15]
}
   1d26e:	4618      	mov	r0, r3
   1d270:	3710      	adds	r7, #16
   1d272:	46bd      	mov	sp, r7
   1d274:	bd80      	pop	{r7, pc}

0001d276 <nrfx_get_irq_number>:
{
   1d276:	b480      	push	{r7}
   1d278:	b083      	sub	sp, #12
   1d27a:	af00      	add	r7, sp, #0
   1d27c:	6078      	str	r0, [r7, #4]
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1d27e:	687b      	ldr	r3, [r7, #4]
   1d280:	0b1b      	lsrs	r3, r3, #12
   1d282:	b25b      	sxtb	r3, r3
}
   1d284:	4618      	mov	r0, r3
   1d286:	370c      	adds	r7, #12
   1d288:	46bd      	mov	sp, r7
   1d28a:	bc80      	pop	{r7}
   1d28c:	4770      	bx	lr

0001d28e <nrf_event_readback>:
{
   1d28e:	b480      	push	{r7}
   1d290:	b083      	sub	sp, #12
   1d292:	af00      	add	r7, sp, #0
   1d294:	6078      	str	r0, [r7, #4]
    (void)*((volatile uint32_t *)(p_event_reg));
   1d296:	687b      	ldr	r3, [r7, #4]
   1d298:	681b      	ldr	r3, [r3, #0]
}
   1d29a:	bf00      	nop
   1d29c:	370c      	adds	r7, #12
   1d29e:	46bd      	mov	sp, r7
   1d2a0:	bc80      	pop	{r7}
   1d2a2:	4770      	bx	lr

0001d2a4 <nrf_barrier_w>:
{
   1d2a4:	b480      	push	{r7}
   1d2a6:	af00      	add	r7, sp, #0
}
   1d2a8:	bf00      	nop
   1d2aa:	46bd      	mov	sp, r7
   1d2ac:	bc80      	pop	{r7}
   1d2ae:	4770      	bx	lr

0001d2b0 <nrf_barrier_r>:

NRF_STATIC_INLINE void nrf_barrier_r(void)
{
   1d2b0:	b480      	push	{r7}
   1d2b2:	af00      	add	r7, sp, #0
#if defined(ISA_RISCV)
    RISCV_FENCE(ir, ir);
#endif
}
   1d2b4:	bf00      	nop
   1d2b6:	46bd      	mov	sp, r7
   1d2b8:	bc80      	pop	{r7}
   1d2ba:	4770      	bx	lr

0001d2bc <nrf_barrier_rw>:

NRF_STATIC_INLINE void nrf_barrier_rw(void)
{
   1d2bc:	b480      	push	{r7}
   1d2be:	af00      	add	r7, sp, #0
#if defined(ISA_RISCV)
    RISCV_FENCE(iorw, iorw);
#endif
}
   1d2c0:	bf00      	nop
   1d2c2:	46bd      	mov	sp, r7
   1d2c4:	bc80      	pop	{r7}
   1d2c6:	4770      	bx	lr

0001d2c8 <nrf_gpiote_event_check>:
{
   1d2c8:	b480      	push	{r7}
   1d2ca:	b083      	sub	sp, #12
   1d2cc:	af00      	add	r7, sp, #0
   1d2ce:	6078      	str	r0, [r7, #4]
   1d2d0:	460b      	mov	r3, r1
   1d2d2:	807b      	strh	r3, [r7, #2]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d2d4:	887b      	ldrh	r3, [r7, #2]
   1d2d6:	687a      	ldr	r2, [r7, #4]
   1d2d8:	4413      	add	r3, r2
   1d2da:	681b      	ldr	r3, [r3, #0]
   1d2dc:	2b00      	cmp	r3, #0
   1d2de:	bf14      	ite	ne
   1d2e0:	2301      	movne	r3, #1
   1d2e2:	2300      	moveq	r3, #0
   1d2e4:	b2db      	uxtb	r3, r3
}
   1d2e6:	4618      	mov	r0, r3
   1d2e8:	370c      	adds	r7, #12
   1d2ea:	46bd      	mov	sp, r7
   1d2ec:	bc80      	pop	{r7}
   1d2ee:	4770      	bx	lr

0001d2f0 <nrf_gpiote_event_clear>:
{
   1d2f0:	b580      	push	{r7, lr}
   1d2f2:	b082      	sub	sp, #8
   1d2f4:	af00      	add	r7, sp, #0
   1d2f6:	6078      	str	r0, [r7, #4]
   1d2f8:	460b      	mov	r3, r1
   1d2fa:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d2fc:	887b      	ldrh	r3, [r7, #2]
   1d2fe:	4619      	mov	r1, r3
   1d300:	6878      	ldr	r0, [r7, #4]
   1d302:	f000 f811 	bl	1d328 <nrf_gpiote_event_address_get>
   1d306:	4603      	mov	r3, r0
   1d308:	461a      	mov	r2, r3
   1d30a:	2300      	movs	r3, #0
   1d30c:	6013      	str	r3, [r2, #0]
    nrf_event_readback((void *)nrf_gpiote_event_address_get(p_reg, event));
   1d30e:	887b      	ldrh	r3, [r7, #2]
   1d310:	4619      	mov	r1, r3
   1d312:	6878      	ldr	r0, [r7, #4]
   1d314:	f000 f808 	bl	1d328 <nrf_gpiote_event_address_get>
   1d318:	4603      	mov	r3, r0
   1d31a:	4618      	mov	r0, r3
   1d31c:	f7ff ffb7 	bl	1d28e <nrf_event_readback>
}
   1d320:	bf00      	nop
   1d322:	3708      	adds	r7, #8
   1d324:	46bd      	mov	sp, r7
   1d326:	bd80      	pop	{r7, pc}

0001d328 <nrf_gpiote_event_address_get>:
{
   1d328:	b480      	push	{r7}
   1d32a:	b083      	sub	sp, #12
   1d32c:	af00      	add	r7, sp, #0
   1d32e:	6078      	str	r0, [r7, #4]
   1d330:	460b      	mov	r3, r1
   1d332:	807b      	strh	r3, [r7, #2]
    return ((uint32_t)p_reg + event);
   1d334:	887a      	ldrh	r2, [r7, #2]
   1d336:	687b      	ldr	r3, [r7, #4]
   1d338:	4413      	add	r3, r2
}
   1d33a:	4618      	mov	r0, r3
   1d33c:	370c      	adds	r7, #12
   1d33e:	46bd      	mov	sp, r7
   1d340:	bc80      	pop	{r7}
   1d342:	4770      	bx	lr

0001d344 <nrf_gpiote_int_enable>:
{
   1d344:	b480      	push	{r7}
   1d346:	b083      	sub	sp, #12
   1d348:	af00      	add	r7, sp, #0
   1d34a:	6078      	str	r0, [r7, #4]
   1d34c:	6039      	str	r1, [r7, #0]
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
   1d34e:	687b      	ldr	r3, [r7, #4]
   1d350:	683a      	ldr	r2, [r7, #0]
   1d352:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d356:	bf00      	nop
   1d358:	370c      	adds	r7, #12
   1d35a:	46bd      	mov	sp, r7
   1d35c:	bc80      	pop	{r7}
   1d35e:	4770      	bx	lr

0001d360 <nrf_gpiote_int_disable>:
{
   1d360:	b480      	push	{r7}
   1d362:	b083      	sub	sp, #12
   1d364:	af00      	add	r7, sp, #0
   1d366:	6078      	str	r0, [r7, #4]
   1d368:	6039      	str	r1, [r7, #0]
    p_reg->NRFX_CONCAT_2(INTENCLR, NRF_GPIOTE_IRQ_GROUP) = mask;
   1d36a:	687b      	ldr	r3, [r7, #4]
   1d36c:	683a      	ldr	r2, [r7, #0]
   1d36e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d372:	bf00      	nop
   1d374:	370c      	adds	r7, #12
   1d376:	46bd      	mov	sp, r7
   1d378:	bc80      	pop	{r7}
   1d37a:	4770      	bx	lr

0001d37c <nrf_gpiote_int_enable_check>:
{
   1d37c:	b480      	push	{r7}
   1d37e:	b083      	sub	sp, #12
   1d380:	af00      	add	r7, sp, #0
   1d382:	6078      	str	r0, [r7, #4]
   1d384:	6039      	str	r1, [r7, #0]
    return p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) & mask;
   1d386:	687b      	ldr	r3, [r7, #4]
   1d388:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   1d38c:	683b      	ldr	r3, [r7, #0]
   1d38e:	4013      	ands	r3, r2
}
   1d390:	4618      	mov	r0, r3
   1d392:	370c      	adds	r7, #12
   1d394:	46bd      	mov	sp, r7
   1d396:	bc80      	pop	{r7}
   1d398:	4770      	bx	lr

0001d39a <nrf_gpiote_event_enable>:
{
   1d39a:	b480      	push	{r7}
   1d39c:	b083      	sub	sp, #12
   1d39e:	af00      	add	r7, sp, #0
   1d3a0:	6078      	str	r0, [r7, #4]
   1d3a2:	6039      	str	r1, [r7, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1d3a4:	687b      	ldr	r3, [r7, #4]
   1d3a6:	683a      	ldr	r2, [r7, #0]
   1d3a8:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1d3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d3b0:	f043 0101 	orr.w	r1, r3, #1
   1d3b4:	687b      	ldr	r3, [r7, #4]
   1d3b6:	683a      	ldr	r2, [r7, #0]
   1d3b8:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1d3bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1d3c0:	bf00      	nop
   1d3c2:	370c      	adds	r7, #12
   1d3c4:	46bd      	mov	sp, r7
   1d3c6:	bc80      	pop	{r7}
   1d3c8:	4770      	bx	lr

0001d3ca <nrf_gpiote_event_disable>:
{
   1d3ca:	b480      	push	{r7}
   1d3cc:	b083      	sub	sp, #12
   1d3ce:	af00      	add	r7, sp, #0
   1d3d0:	6078      	str	r0, [r7, #4]
   1d3d2:	6039      	str	r1, [r7, #0]
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1d3d4:	687b      	ldr	r3, [r7, #4]
   1d3d6:	683a      	ldr	r2, [r7, #0]
   1d3d8:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1d3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d3e0:	f023 0103 	bic.w	r1, r3, #3
   1d3e4:	687b      	ldr	r3, [r7, #4]
   1d3e6:	683a      	ldr	r2, [r7, #0]
   1d3e8:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1d3ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1d3f0:	bf00      	nop
   1d3f2:	370c      	adds	r7, #12
   1d3f4:	46bd      	mov	sp, r7
   1d3f6:	bc80      	pop	{r7}
   1d3f8:	4770      	bx	lr

0001d3fa <nrf_gpiote_event_configure>:
{
   1d3fa:	b480      	push	{r7}
   1d3fc:	b085      	sub	sp, #20
   1d3fe:	af00      	add	r7, sp, #0
   1d400:	60f8      	str	r0, [r7, #12]
   1d402:	60b9      	str	r1, [r7, #8]
   1d404:	607a      	str	r2, [r7, #4]
   1d406:	70fb      	strb	r3, [r7, #3]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d408:	68fb      	ldr	r3, [r7, #12]
   1d40a:	68ba      	ldr	r2, [r7, #8]
   1d40c:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1d410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d414:	f423 3347 	bic.w	r3, r3, #203776	; 0x31c00
   1d418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1d41c:	68fa      	ldr	r2, [r7, #12]
   1d41e:	68b9      	ldr	r1, [r7, #8]
   1d420:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   1d424:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d428:	68fb      	ldr	r3, [r7, #12]
   1d42a:	68ba      	ldr	r2, [r7, #8]
   1d42c:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1d430:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1d434:	687b      	ldr	r3, [r7, #4]
   1d436:	021b      	lsls	r3, r3, #8
   1d438:	f403 51f8 	and.w	r1, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1d43c:	78fb      	ldrb	r3, [r7, #3]
   1d43e:	041b      	lsls	r3, r3, #16
   1d440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d444:	430b      	orrs	r3, r1
   1d446:	ea42 0103 	orr.w	r1, r2, r3
   1d44a:	68fb      	ldr	r3, [r7, #12]
   1d44c:	68ba      	ldr	r2, [r7, #8]
   1d44e:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1d452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1d456:	bf00      	nop
   1d458:	3714      	adds	r7, #20
   1d45a:	46bd      	mov	sp, r7
   1d45c:	bc80      	pop	{r7}
   1d45e:	4770      	bx	lr

0001d460 <nrf_gpiote_event_pin_get>:
{
   1d460:	b480      	push	{r7}
   1d462:	b083      	sub	sp, #12
   1d464:	af00      	add	r7, sp, #0
   1d466:	6078      	str	r0, [r7, #4]
   1d468:	6039      	str	r1, [r7, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d46a:	687b      	ldr	r3, [r7, #4]
   1d46c:	683a      	ldr	r2, [r7, #0]
   1d46e:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1d472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d476:	0a1b      	lsrs	r3, r3, #8
   1d478:	f003 031f 	and.w	r3, r3, #31
}
   1d47c:	4618      	mov	r0, r3
   1d47e:	370c      	adds	r7, #12
   1d480:	46bd      	mov	sp, r7
   1d482:	bc80      	pop	{r7}
   1d484:	4770      	bx	lr

0001d486 <nrf_gpiote_event_polarity_get>:
{
   1d486:	b480      	push	{r7}
   1d488:	b083      	sub	sp, #12
   1d48a:	af00      	add	r7, sp, #0
   1d48c:	6078      	str	r0, [r7, #4]
   1d48e:	6039      	str	r1, [r7, #0]
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1d490:	687b      	ldr	r3, [r7, #4]
   1d492:	683a      	ldr	r2, [r7, #0]
   1d494:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1d498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d49c:	0c1b      	lsrs	r3, r3, #16
   1d49e:	f003 0303 	and.w	r3, r3, #3
   1d4a2:	b2db      	uxtb	r3, r3
}
   1d4a4:	4618      	mov	r0, r3
   1d4a6:	370c      	adds	r7, #12
   1d4a8:	46bd      	mov	sp, r7
   1d4aa:	bc80      	pop	{r7}
   1d4ac:	4770      	bx	lr

0001d4ae <nrf_gpiote_task_configure>:
{
   1d4ae:	b480      	push	{r7}
   1d4b0:	b085      	sub	sp, #20
   1d4b2:	af00      	add	r7, sp, #0
   1d4b4:	60f8      	str	r0, [r7, #12]
   1d4b6:	60b9      	str	r1, [r7, #8]
   1d4b8:	607a      	str	r2, [r7, #4]
   1d4ba:	70fb      	strb	r3, [r7, #3]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1d4bc:	68fb      	ldr	r3, [r7, #12]
   1d4be:	68ba      	ldr	r2, [r7, #8]
   1d4c0:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1d4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d4c8:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1d4cc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1d4d0:	68fa      	ldr	r2, [r7, #12]
   1d4d2:	68b9      	ldr	r1, [r7, #8]
   1d4d4:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   1d4d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d4dc:	68fb      	ldr	r3, [r7, #12]
   1d4de:	68ba      	ldr	r2, [r7, #8]
   1d4e0:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1d4e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1d4e8:	687b      	ldr	r3, [r7, #4]
   1d4ea:	021b      	lsls	r3, r3, #8
   1d4ec:	f403 51f8 	and.w	r1, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1d4f0:	78fb      	ldrb	r3, [r7, #3]
   1d4f2:	041b      	lsls	r3, r3, #16
   1d4f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d4f8:	4319      	orrs	r1, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1d4fa:	7e3b      	ldrb	r3, [r7, #24]
   1d4fc:	051b      	lsls	r3, r3, #20
   1d4fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1d502:	430b      	orrs	r3, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d504:	ea42 0103 	orr.w	r1, r2, r3
   1d508:	68fb      	ldr	r3, [r7, #12]
   1d50a:	68ba      	ldr	r2, [r7, #8]
   1d50c:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1d510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1d514:	bf00      	nop
   1d516:	3714      	adds	r7, #20
   1d518:	46bd      	mov	sp, r7
   1d51a:	bc80      	pop	{r7}
   1d51c:	4770      	bx	lr

0001d51e <nrf_gpiote_te_default>:
{
   1d51e:	b480      	push	{r7}
   1d520:	b083      	sub	sp, #12
   1d522:	af00      	add	r7, sp, #0
   1d524:	6078      	str	r0, [r7, #4]
   1d526:	6039      	str	r1, [r7, #0]
    p_reg->CONFIG[idx] = 0;
   1d528:	687b      	ldr	r3, [r7, #4]
   1d52a:	683a      	ldr	r2, [r7, #0]
   1d52c:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1d530:	2100      	movs	r1, #0
   1d532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
   1d536:	687b      	ldr	r3, [r7, #4]
   1d538:	683a      	ldr	r2, [r7, #0]
   1d53a:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1d53e:	2100      	movs	r1, #0
   1d540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1d544:	bf00      	nop
   1d546:	370c      	adds	r7, #12
   1d548:	46bd      	mov	sp, r7
   1d54a:	bc80      	pop	{r7}
   1d54c:	4770      	bx	lr

0001d54e <nrfy_gpiote_int_init>:
 */
NRFY_STATIC_INLINE void nrfy_gpiote_int_init(NRF_GPIOTE_Type * p_reg,
                                             uint32_t          mask,
                                             uint8_t           irq_priority,
                                             bool              enable)
{
   1d54e:	b580      	push	{r7, lr}
   1d550:	b086      	sub	sp, #24
   1d552:	af00      	add	r7, sp, #0
   1d554:	60f8      	str	r0, [r7, #12]
   1d556:	60b9      	str	r1, [r7, #8]
   1d558:	4611      	mov	r1, r2
   1d55a:	461a      	mov	r2, r3
   1d55c:	460b      	mov	r3, r1
   1d55e:	71fb      	strb	r3, [r7, #7]
   1d560:	4613      	mov	r3, r2
   1d562:	71bb      	strb	r3, [r7, #6]
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
   1d564:	2300      	movs	r3, #0
   1d566:	75fb      	strb	r3, [r7, #23]
   1d568:	e00c      	b.n	1d584 <nrfy_gpiote_int_init+0x36>
    {
        __nrfy_internal_gpiote_event_enabled_clear(p_reg, mask, nrf_gpiote_in_event_get(i));
   1d56a:	7dfb      	ldrb	r3, [r7, #23]
   1d56c:	4618      	mov	r0, r3
   1d56e:	f7f3 f99d 	bl	108ac <nrf_gpiote_in_event_get>
   1d572:	4603      	mov	r3, r0
   1d574:	461a      	mov	r2, r3
   1d576:	68b9      	ldr	r1, [r7, #8]
   1d578:	68f8      	ldr	r0, [r7, #12]
   1d57a:	f000 f8e0 	bl	1d73e <__nrfy_internal_gpiote_event_enabled_clear>
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
   1d57e:	7dfb      	ldrb	r3, [r7, #23]
   1d580:	3301      	adds	r3, #1
   1d582:	75fb      	strb	r3, [r7, #23]
   1d584:	7dfb      	ldrb	r3, [r7, #23]
   1d586:	2b07      	cmp	r3, #7
   1d588:	d9ef      	bls.n	1d56a <nrfy_gpiote_int_init+0x1c>
    }

    __nrfy_internal_gpiote_event_enabled_clear(p_reg, mask, NRF_GPIOTE_EVENT_PORT);
   1d58a:	f44f 72be 	mov.w	r2, #380	; 0x17c
   1d58e:	68b9      	ldr	r1, [r7, #8]
   1d590:	68f8      	ldr	r0, [r7, #12]
   1d592:	f000 f8d4 	bl	1d73e <__nrfy_internal_gpiote_event_enabled_clear>

#if defined(NRF_GPIOTE_IRQn_EXT)
    IRQn_Type irqn = NRF_GPIOTE_IRQn_EXT;
#else
    IRQn_Type irqn = nrfx_get_irq_number(p_reg);
   1d596:	68f8      	ldr	r0, [r7, #12]
   1d598:	f7ff fe6d 	bl	1d276 <nrfx_get_irq_number>
   1d59c:	4603      	mov	r3, r0
   1d59e:	75bb      	strb	r3, [r7, #22]
#endif
    NRFX_IRQ_PRIORITY_SET(irqn, irq_priority);
    NRFX_IRQ_ENABLE(irqn);
   1d5a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
   1d5a4:	4618      	mov	r0, r3
   1d5a6:	f7fc fd5d 	bl	1a064 <arch_irq_enable>
    if (enable)
   1d5aa:	79bb      	ldrb	r3, [r7, #6]
   1d5ac:	2b00      	cmp	r3, #0
   1d5ae:	d003      	beq.n	1d5b8 <nrfy_gpiote_int_init+0x6a>
    {
        nrf_gpiote_int_enable(p_reg, mask);
   1d5b0:	68b9      	ldr	r1, [r7, #8]
   1d5b2:	68f8      	ldr	r0, [r7, #12]
   1d5b4:	f7ff fec6 	bl	1d344 <nrf_gpiote_int_enable>
    }
    nrf_barrier_w();
   1d5b8:	f7ff fe74 	bl	1d2a4 <nrf_barrier_w>
}
   1d5bc:	bf00      	nop
   1d5be:	3718      	adds	r7, #24
   1d5c0:	46bd      	mov	sp, r7
   1d5c2:	bd80      	pop	{r7, pc}

0001d5c4 <nrfy_gpiote_events_process>:
 * @return Mask of events that were generated and processed.
 *         To be checked against the result of @ref NRFY_EVENT_TO_INT_BITMASK().
 */
NRFY_STATIC_INLINE uint32_t nrfy_gpiote_events_process(NRF_GPIOTE_Type * p_reg,
                                                       uint32_t          mask)
{
   1d5c4:	b580      	push	{r7, lr}
   1d5c6:	b084      	sub	sp, #16
   1d5c8:	af00      	add	r7, sp, #0
   1d5ca:	6078      	str	r0, [r7, #4]
   1d5cc:	6039      	str	r1, [r7, #0]
    uint32_t evt_mask = __nrfy_internal_gpiote_events_process(p_reg, mask);
   1d5ce:	6839      	ldr	r1, [r7, #0]
   1d5d0:	6878      	ldr	r0, [r7, #4]
   1d5d2:	f000 f907 	bl	1d7e4 <__nrfy_internal_gpiote_events_process>
   1d5d6:	60f8      	str	r0, [r7, #12]
    nrf_barrier_w();
   1d5d8:	f7ff fe64 	bl	1d2a4 <nrf_barrier_w>
    return evt_mask;
   1d5dc:	68fb      	ldr	r3, [r7, #12]
}
   1d5de:	4618      	mov	r0, r3
   1d5e0:	3710      	adds	r7, #16
   1d5e2:	46bd      	mov	sp, r7
   1d5e4:	bd80      	pop	{r7, pc}

0001d5e6 <nrfy_gpiote_event_clear>:
    return evt;
}

/** @refhal{nrf_gpiote_event_clear} */
NRFY_STATIC_INLINE void nrfy_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
   1d5e6:	b580      	push	{r7, lr}
   1d5e8:	b082      	sub	sp, #8
   1d5ea:	af00      	add	r7, sp, #0
   1d5ec:	6078      	str	r0, [r7, #4]
   1d5ee:	460b      	mov	r3, r1
   1d5f0:	807b      	strh	r3, [r7, #2]
    nrf_gpiote_event_clear(p_reg, event);
   1d5f2:	887b      	ldrh	r3, [r7, #2]
   1d5f4:	4619      	mov	r1, r3
   1d5f6:	6878      	ldr	r0, [r7, #4]
   1d5f8:	f7ff fe7a 	bl	1d2f0 <nrf_gpiote_event_clear>
    nrf_barrier_w();
   1d5fc:	f7ff fe52 	bl	1d2a4 <nrf_barrier_w>
}
   1d600:	bf00      	nop
   1d602:	3708      	adds	r7, #8
   1d604:	46bd      	mov	sp, r7
   1d606:	bd80      	pop	{r7, pc}

0001d608 <nrfy_gpiote_int_enable>:
    return nrf_gpiote_event_address_get(p_reg, event);
}

/** @refhal{nrf_gpiote_int_enable} */
NRFY_STATIC_INLINE void nrfy_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
   1d608:	b580      	push	{r7, lr}
   1d60a:	b082      	sub	sp, #8
   1d60c:	af00      	add	r7, sp, #0
   1d60e:	6078      	str	r0, [r7, #4]
   1d610:	6039      	str	r1, [r7, #0]
    nrf_gpiote_int_enable(p_reg, mask);
   1d612:	6839      	ldr	r1, [r7, #0]
   1d614:	6878      	ldr	r0, [r7, #4]
   1d616:	f7ff fe95 	bl	1d344 <nrf_gpiote_int_enable>
    nrf_barrier_w();
   1d61a:	f7ff fe43 	bl	1d2a4 <nrf_barrier_w>
}
   1d61e:	bf00      	nop
   1d620:	3708      	adds	r7, #8
   1d622:	46bd      	mov	sp, r7
   1d624:	bd80      	pop	{r7, pc}

0001d626 <nrfy_gpiote_int_disable>:

/** @refhal{nrf_gpiote_int_disable} */
NRFY_STATIC_INLINE void nrfy_gpiote_int_disable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
   1d626:	b580      	push	{r7, lr}
   1d628:	b082      	sub	sp, #8
   1d62a:	af00      	add	r7, sp, #0
   1d62c:	6078      	str	r0, [r7, #4]
   1d62e:	6039      	str	r1, [r7, #0]
    nrf_gpiote_int_disable(p_reg, mask);
   1d630:	6839      	ldr	r1, [r7, #0]
   1d632:	6878      	ldr	r0, [r7, #4]
   1d634:	f7ff fe94 	bl	1d360 <nrf_gpiote_int_disable>
    nrf_barrier_w();
   1d638:	f7ff fe34 	bl	1d2a4 <nrf_barrier_w>
}
   1d63c:	bf00      	nop
   1d63e:	3708      	adds	r7, #8
   1d640:	46bd      	mov	sp, r7
   1d642:	bd80      	pop	{r7, pc}

0001d644 <nrfy_gpiote_event_enable>:
}
#endif

/** @refhal{nrf_gpiote_event_enable} */
NRFY_STATIC_INLINE void nrfy_gpiote_event_enable(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
   1d644:	b580      	push	{r7, lr}
   1d646:	b082      	sub	sp, #8
   1d648:	af00      	add	r7, sp, #0
   1d64a:	6078      	str	r0, [r7, #4]
   1d64c:	6039      	str	r1, [r7, #0]
    nrf_gpiote_event_enable(p_reg, idx);
   1d64e:	6839      	ldr	r1, [r7, #0]
   1d650:	6878      	ldr	r0, [r7, #4]
   1d652:	f7ff fea2 	bl	1d39a <nrf_gpiote_event_enable>
    nrf_barrier_w();
   1d656:	f7ff fe25 	bl	1d2a4 <nrf_barrier_w>
}
   1d65a:	bf00      	nop
   1d65c:	3708      	adds	r7, #8
   1d65e:	46bd      	mov	sp, r7
   1d660:	bd80      	pop	{r7, pc}

0001d662 <nrfy_gpiote_event_disable>:

/** @refhal{nrf_gpiote_event_disable} */
NRFY_STATIC_INLINE void nrfy_gpiote_event_disable(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
   1d662:	b580      	push	{r7, lr}
   1d664:	b082      	sub	sp, #8
   1d666:	af00      	add	r7, sp, #0
   1d668:	6078      	str	r0, [r7, #4]
   1d66a:	6039      	str	r1, [r7, #0]
    nrf_gpiote_event_disable(p_reg, idx);
   1d66c:	6839      	ldr	r1, [r7, #0]
   1d66e:	6878      	ldr	r0, [r7, #4]
   1d670:	f7ff feab 	bl	1d3ca <nrf_gpiote_event_disable>
    nrf_barrier_w();
   1d674:	f7ff fe16 	bl	1d2a4 <nrf_barrier_w>
}
   1d678:	bf00      	nop
   1d67a:	3708      	adds	r7, #8
   1d67c:	46bd      	mov	sp, r7
   1d67e:	bd80      	pop	{r7, pc}

0001d680 <nrfy_gpiote_event_configure>:
/** @refhal{nrf_gpiote_event_configure} */
NRFY_STATIC_INLINE void nrfy_gpiote_event_configure(NRF_GPIOTE_Type *     p_reg,
                                                    uint32_t              idx,
                                                    uint32_t              pin,
                                                    nrf_gpiote_polarity_t polarity)
{
   1d680:	b580      	push	{r7, lr}
   1d682:	b084      	sub	sp, #16
   1d684:	af00      	add	r7, sp, #0
   1d686:	60f8      	str	r0, [r7, #12]
   1d688:	60b9      	str	r1, [r7, #8]
   1d68a:	607a      	str	r2, [r7, #4]
   1d68c:	70fb      	strb	r3, [r7, #3]
    nrf_gpiote_event_configure(p_reg, idx, pin, polarity);
   1d68e:	78fb      	ldrb	r3, [r7, #3]
   1d690:	687a      	ldr	r2, [r7, #4]
   1d692:	68b9      	ldr	r1, [r7, #8]
   1d694:	68f8      	ldr	r0, [r7, #12]
   1d696:	f7ff feb0 	bl	1d3fa <nrf_gpiote_event_configure>
    nrf_barrier_w();
   1d69a:	f7ff fe03 	bl	1d2a4 <nrf_barrier_w>
}
   1d69e:	bf00      	nop
   1d6a0:	3710      	adds	r7, #16
   1d6a2:	46bd      	mov	sp, r7
   1d6a4:	bd80      	pop	{r7, pc}

0001d6a6 <nrfy_gpiote_event_pin_get>:

/** @refhal{nrf_gpiote_event_pin_get} */
NRFY_STATIC_INLINE uint32_t nrfy_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
   1d6a6:	b580      	push	{r7, lr}
   1d6a8:	b084      	sub	sp, #16
   1d6aa:	af00      	add	r7, sp, #0
   1d6ac:	6078      	str	r0, [r7, #4]
   1d6ae:	6039      	str	r1, [r7, #0]
    nrf_barrier_rw();
   1d6b0:	f7ff fe04 	bl	1d2bc <nrf_barrier_rw>
    uint32_t pin = nrf_gpiote_event_pin_get(p_reg, idx);
   1d6b4:	6839      	ldr	r1, [r7, #0]
   1d6b6:	6878      	ldr	r0, [r7, #4]
   1d6b8:	f7ff fed2 	bl	1d460 <nrf_gpiote_event_pin_get>
   1d6bc:	60f8      	str	r0, [r7, #12]
    nrf_barrier_r();
   1d6be:	f7ff fdf7 	bl	1d2b0 <nrf_barrier_r>
    return pin;
   1d6c2:	68fb      	ldr	r3, [r7, #12]
}
   1d6c4:	4618      	mov	r0, r3
   1d6c6:	3710      	adds	r7, #16
   1d6c8:	46bd      	mov	sp, r7
   1d6ca:	bd80      	pop	{r7, pc}

0001d6cc <nrfy_gpiote_event_polarity_get>:

/** @refhal{nrf_gpiote_event_polarity_get} */
NRFY_STATIC_INLINE
nrf_gpiote_polarity_t nrfy_gpiote_event_polarity_get(NRF_GPIOTE_Type const * p_reg,
                                                     uint32_t                idx)
{
   1d6cc:	b580      	push	{r7, lr}
   1d6ce:	b084      	sub	sp, #16
   1d6d0:	af00      	add	r7, sp, #0
   1d6d2:	6078      	str	r0, [r7, #4]
   1d6d4:	6039      	str	r1, [r7, #0]
    nrf_barrier_rw();
   1d6d6:	f7ff fdf1 	bl	1d2bc <nrf_barrier_rw>
    nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(p_reg, idx);
   1d6da:	6839      	ldr	r1, [r7, #0]
   1d6dc:	6878      	ldr	r0, [r7, #4]
   1d6de:	f7ff fed2 	bl	1d486 <nrf_gpiote_event_polarity_get>
   1d6e2:	4603      	mov	r3, r0
   1d6e4:	73fb      	strb	r3, [r7, #15]
    nrf_barrier_r();
   1d6e6:	f7ff fde3 	bl	1d2b0 <nrf_barrier_r>
    return polarity;
   1d6ea:	7bfb      	ldrb	r3, [r7, #15]
}
   1d6ec:	4618      	mov	r0, r3
   1d6ee:	3710      	adds	r7, #16
   1d6f0:	46bd      	mov	sp, r7
   1d6f2:	bd80      	pop	{r7, pc}

0001d6f4 <nrfy_gpiote_task_configure>:
NRFY_STATIC_INLINE void nrfy_gpiote_task_configure(NRF_GPIOTE_Type *     p_reg,
                                                   uint32_t              idx,
                                                   uint32_t              pin,
                                                   nrf_gpiote_polarity_t polarity,
                                                   nrf_gpiote_outinit_t  init_val)
{
   1d6f4:	b580      	push	{r7, lr}
   1d6f6:	b086      	sub	sp, #24
   1d6f8:	af02      	add	r7, sp, #8
   1d6fa:	60f8      	str	r0, [r7, #12]
   1d6fc:	60b9      	str	r1, [r7, #8]
   1d6fe:	607a      	str	r2, [r7, #4]
   1d700:	70fb      	strb	r3, [r7, #3]
    nrf_gpiote_task_configure(p_reg, idx, pin, polarity, init_val);
   1d702:	78fa      	ldrb	r2, [r7, #3]
   1d704:	7e3b      	ldrb	r3, [r7, #24]
   1d706:	9300      	str	r3, [sp, #0]
   1d708:	4613      	mov	r3, r2
   1d70a:	687a      	ldr	r2, [r7, #4]
   1d70c:	68b9      	ldr	r1, [r7, #8]
   1d70e:	68f8      	ldr	r0, [r7, #12]
   1d710:	f7ff fecd 	bl	1d4ae <nrf_gpiote_task_configure>
    nrf_barrier_w();
   1d714:	f7ff fdc6 	bl	1d2a4 <nrf_barrier_w>
}
   1d718:	bf00      	nop
   1d71a:	3710      	adds	r7, #16
   1d71c:	46bd      	mov	sp, r7
   1d71e:	bd80      	pop	{r7, pc}

0001d720 <nrfy_gpiote_te_default>:
    nrf_barrier_w();
}

/** @refhal{nrf_gpiote_te_default} */
NRFY_STATIC_INLINE void nrfy_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
   1d720:	b580      	push	{r7, lr}
   1d722:	b082      	sub	sp, #8
   1d724:	af00      	add	r7, sp, #0
   1d726:	6078      	str	r0, [r7, #4]
   1d728:	6039      	str	r1, [r7, #0]
    nrf_gpiote_te_default(p_reg, idx);
   1d72a:	6839      	ldr	r1, [r7, #0]
   1d72c:	6878      	ldr	r0, [r7, #4]
   1d72e:	f7ff fef6 	bl	1d51e <nrf_gpiote_te_default>
    nrf_barrier_w();
   1d732:	f7ff fdb7 	bl	1d2a4 <nrf_barrier_w>
}
   1d736:	bf00      	nop
   1d738:	3708      	adds	r7, #8
   1d73a:	46bd      	mov	sp, r7
   1d73c:	bd80      	pop	{r7, pc}

0001d73e <__nrfy_internal_gpiote_event_enabled_clear>:
/** @} */

NRFY_STATIC_INLINE void __nrfy_internal_gpiote_event_enabled_clear(NRF_GPIOTE_Type *  p_reg,
                                                                   uint32_t           mask,
                                                                   nrf_gpiote_event_t event)
{
   1d73e:	b580      	push	{r7, lr}
   1d740:	b084      	sub	sp, #16
   1d742:	af00      	add	r7, sp, #0
   1d744:	60f8      	str	r0, [r7, #12]
   1d746:	60b9      	str	r1, [r7, #8]
   1d748:	4613      	mov	r3, r2
   1d74a:	80fb      	strh	r3, [r7, #6]
    if (mask & NRFY_EVENT_TO_INT_BITMASK(event))
   1d74c:	88fb      	ldrh	r3, [r7, #6]
   1d74e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
   1d752:	089b      	lsrs	r3, r3, #2
   1d754:	2201      	movs	r2, #1
   1d756:	fa02 f303 	lsl.w	r3, r2, r3
   1d75a:	461a      	mov	r2, r3
   1d75c:	68bb      	ldr	r3, [r7, #8]
   1d75e:	4013      	ands	r3, r2
   1d760:	2b00      	cmp	r3, #0
   1d762:	d004      	beq.n	1d76e <__nrfy_internal_gpiote_event_enabled_clear+0x30>
    {
        nrf_gpiote_event_clear(p_reg, event);
   1d764:	88fb      	ldrh	r3, [r7, #6]
   1d766:	4619      	mov	r1, r3
   1d768:	68f8      	ldr	r0, [r7, #12]
   1d76a:	f7ff fdc1 	bl	1d2f0 <nrf_gpiote_event_clear>
    }
}
   1d76e:	bf00      	nop
   1d770:	3710      	adds	r7, #16
   1d772:	46bd      	mov	sp, r7
   1d774:	bd80      	pop	{r7, pc}

0001d776 <__nrfy_internal_gpiote_event_handle>:

NRFY_STATIC_INLINE bool __nrfy_internal_gpiote_event_handle(NRF_GPIOTE_Type *  p_reg,
                                                            uint32_t           mask,
                                                            nrf_gpiote_event_t event,
                                                            uint32_t *         p_evt_mask)
{
   1d776:	b580      	push	{r7, lr}
   1d778:	b084      	sub	sp, #16
   1d77a:	af00      	add	r7, sp, #0
   1d77c:	60f8      	str	r0, [r7, #12]
   1d77e:	60b9      	str	r1, [r7, #8]
   1d780:	603b      	str	r3, [r7, #0]
   1d782:	4613      	mov	r3, r2
   1d784:	80fb      	strh	r3, [r7, #6]
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
   1d786:	88fb      	ldrh	r3, [r7, #6]
   1d788:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
   1d78c:	089b      	lsrs	r3, r3, #2
   1d78e:	2201      	movs	r2, #1
   1d790:	fa02 f303 	lsl.w	r3, r2, r3
   1d794:	461a      	mov	r2, r3
   1d796:	68bb      	ldr	r3, [r7, #8]
   1d798:	4013      	ands	r3, r2
   1d79a:	2b00      	cmp	r3, #0
   1d79c:	d01d      	beq.n	1d7da <__nrfy_internal_gpiote_event_handle+0x64>
   1d79e:	88fb      	ldrh	r3, [r7, #6]
   1d7a0:	4619      	mov	r1, r3
   1d7a2:	68f8      	ldr	r0, [r7, #12]
   1d7a4:	f7ff fd90 	bl	1d2c8 <nrf_gpiote_event_check>
   1d7a8:	4603      	mov	r3, r0
   1d7aa:	2b00      	cmp	r3, #0
   1d7ac:	d015      	beq.n	1d7da <__nrfy_internal_gpiote_event_handle+0x64>
    {
        nrf_gpiote_event_clear(p_reg, event);
   1d7ae:	88fb      	ldrh	r3, [r7, #6]
   1d7b0:	4619      	mov	r1, r3
   1d7b2:	68f8      	ldr	r0, [r7, #12]
   1d7b4:	f7ff fd9c 	bl	1d2f0 <nrf_gpiote_event_clear>
        if (p_evt_mask)
   1d7b8:	683b      	ldr	r3, [r7, #0]
   1d7ba:	2b00      	cmp	r3, #0
   1d7bc:	d00b      	beq.n	1d7d6 <__nrfy_internal_gpiote_event_handle+0x60>
        {
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
   1d7be:	683b      	ldr	r3, [r7, #0]
   1d7c0:	681b      	ldr	r3, [r3, #0]
   1d7c2:	88fa      	ldrh	r2, [r7, #6]
   1d7c4:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
   1d7c8:	0892      	lsrs	r2, r2, #2
   1d7ca:	2101      	movs	r1, #1
   1d7cc:	fa01 f202 	lsl.w	r2, r1, r2
   1d7d0:	431a      	orrs	r2, r3
   1d7d2:	683b      	ldr	r3, [r7, #0]
   1d7d4:	601a      	str	r2, [r3, #0]
        }
        return true;
   1d7d6:	2301      	movs	r3, #1
   1d7d8:	e000      	b.n	1d7dc <__nrfy_internal_gpiote_event_handle+0x66>
    }
    return false;
   1d7da:	2300      	movs	r3, #0
}
   1d7dc:	4618      	mov	r0, r3
   1d7de:	3710      	adds	r7, #16
   1d7e0:	46bd      	mov	sp, r7
   1d7e2:	bd80      	pop	{r7, pc}

0001d7e4 <__nrfy_internal_gpiote_events_process>:

NRFY_STATIC_INLINE uint32_t __nrfy_internal_gpiote_events_process(NRF_GPIOTE_Type * p_reg,
                                                                  uint32_t          mask)
{
   1d7e4:	b580      	push	{r7, lr}
   1d7e6:	b084      	sub	sp, #16
   1d7e8:	af00      	add	r7, sp, #0
   1d7ea:	6078      	str	r0, [r7, #4]
   1d7ec:	6039      	str	r1, [r7, #0]
    uint32_t event_mask = 0;
   1d7ee:	2300      	movs	r3, #0
   1d7f0:	60bb      	str	r3, [r7, #8]

    nrf_barrier_r();
   1d7f2:	f7ff fd5d 	bl	1d2b0 <nrf_barrier_r>
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
   1d7f6:	2300      	movs	r3, #0
   1d7f8:	73fb      	strb	r3, [r7, #15]
   1d7fa:	e00e      	b.n	1d81a <__nrfy_internal_gpiote_events_process+0x36>
    {
        (void)__nrfy_internal_gpiote_event_handle(p_reg,
   1d7fc:	7bfb      	ldrb	r3, [r7, #15]
   1d7fe:	4618      	mov	r0, r3
   1d800:	f7f3 f854 	bl	108ac <nrf_gpiote_in_event_get>
   1d804:	4603      	mov	r3, r0
   1d806:	461a      	mov	r2, r3
   1d808:	f107 0308 	add.w	r3, r7, #8
   1d80c:	6839      	ldr	r1, [r7, #0]
   1d80e:	6878      	ldr	r0, [r7, #4]
   1d810:	f7ff ffb1 	bl	1d776 <__nrfy_internal_gpiote_event_handle>
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
   1d814:	7bfb      	ldrb	r3, [r7, #15]
   1d816:	3301      	adds	r3, #1
   1d818:	73fb      	strb	r3, [r7, #15]
   1d81a:	7bfb      	ldrb	r3, [r7, #15]
   1d81c:	2b07      	cmp	r3, #7
   1d81e:	d9ed      	bls.n	1d7fc <__nrfy_internal_gpiote_events_process+0x18>
                                                  mask,
                                                  nrf_gpiote_in_event_get(i),
                                                  &event_mask);
    }

    (void)__nrfy_internal_gpiote_event_handle(p_reg, mask, NRF_GPIOTE_EVENT_PORT, &event_mask);
   1d820:	f107 0308 	add.w	r3, r7, #8
   1d824:	f44f 72be 	mov.w	r2, #380	; 0x17c
   1d828:	6839      	ldr	r1, [r7, #0]
   1d82a:	6878      	ldr	r0, [r7, #4]
   1d82c:	f7ff ffa3 	bl	1d776 <__nrfy_internal_gpiote_event_handle>

    return event_mask;
   1d830:	68bb      	ldr	r3, [r7, #8]
}
   1d832:	4618      	mov	r0, r3
   1d834:	3710      	adds	r7, #16
   1d836:	46bd      	mov	sp, r7
   1d838:	bd80      	pop	{r7, pc}

0001d83a <nrf_gpio_reconfigure>:
{
   1d83a:	b580      	push	{r7, lr}
   1d83c:	b088      	sub	sp, #32
   1d83e:	af00      	add	r7, sp, #0
   1d840:	60f8      	str	r0, [r7, #12]
   1d842:	60b9      	str	r1, [r7, #8]
   1d844:	607a      	str	r2, [r7, #4]
   1d846:	603b      	str	r3, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d848:	f107 030c 	add.w	r3, r7, #12
   1d84c:	4618      	mov	r0, r3
   1d84e:	f7f3 f851 	bl	108f4 <nrf_gpio_pin_port_decode>
   1d852:	61f8      	str	r0, [r7, #28]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1d854:	68fa      	ldr	r2, [r7, #12]
   1d856:	69fb      	ldr	r3, [r7, #28]
   1d858:	3280      	adds	r2, #128	; 0x80
   1d85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d85e:	61bb      	str	r3, [r7, #24]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   1d860:	68bb      	ldr	r3, [r7, #8]
   1d862:	2b00      	cmp	r3, #0
   1d864:	d001      	beq.n	1d86a <nrf_gpio_reconfigure+0x30>
   1d866:	2201      	movs	r2, #1
   1d868:	e000      	b.n	1d86c <nrf_gpio_reconfigure+0x32>
   1d86a:	2200      	movs	r2, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
   1d86c:	687b      	ldr	r3, [r7, #4]
   1d86e:	2b00      	cmp	r3, #0
   1d870:	d001      	beq.n	1d876 <nrf_gpio_reconfigure+0x3c>
   1d872:	2302      	movs	r3, #2
   1d874:	e000      	b.n	1d878 <nrf_gpio_reconfigure+0x3e>
   1d876:	2300      	movs	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   1d878:	4313      	orrs	r3, r2
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
   1d87a:	683a      	ldr	r2, [r7, #0]
   1d87c:	2a00      	cmp	r2, #0
   1d87e:	d001      	beq.n	1d884 <nrf_gpio_reconfigure+0x4a>
   1d880:	220c      	movs	r2, #12
   1d882:	e000      	b.n	1d886 <nrf_gpio_reconfigure+0x4c>
   1d884:	2200      	movs	r2, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
   1d886:	4313      	orrs	r3, r2
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
   1d888:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1d88a:	2a00      	cmp	r2, #0
   1d88c:	d002      	beq.n	1d894 <nrf_gpio_reconfigure+0x5a>
   1d88e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   1d892:	e000      	b.n	1d896 <nrf_gpio_reconfigure+0x5c>
   1d894:	2200      	movs	r2, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
   1d896:	4313      	orrs	r3, r2
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
   1d898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1d89a:	2a00      	cmp	r2, #0
   1d89c:	d002      	beq.n	1d8a4 <nrf_gpio_reconfigure+0x6a>
   1d89e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   1d8a2:	e000      	b.n	1d8a6 <nrf_gpio_reconfigure+0x6c>
   1d8a4:	2200      	movs	r2, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   1d8a6:	4313      	orrs	r3, r2
   1d8a8:	617b      	str	r3, [r7, #20]
    cnf &= ~to_update;
   1d8aa:	697b      	ldr	r3, [r7, #20]
   1d8ac:	43db      	mvns	r3, r3
   1d8ae:	69ba      	ldr	r2, [r7, #24]
   1d8b0:	4013      	ands	r3, r2
   1d8b2:	61bb      	str	r3, [r7, #24]
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
   1d8b4:	68bb      	ldr	r3, [r7, #8]
   1d8b6:	2b00      	cmp	r3, #0
   1d8b8:	d003      	beq.n	1d8c2 <nrf_gpio_reconfigure+0x88>
   1d8ba:	68bb      	ldr	r3, [r7, #8]
   1d8bc:	781b      	ldrb	r3, [r3, #0]
   1d8be:	461a      	mov	r2, r3
   1d8c0:	e000      	b.n	1d8c4 <nrf_gpio_reconfigure+0x8a>
   1d8c2:	2200      	movs	r2, #0
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos)  |
   1d8c4:	687b      	ldr	r3, [r7, #4]
   1d8c6:	2b00      	cmp	r3, #0
   1d8c8:	d003      	beq.n	1d8d2 <nrf_gpio_reconfigure+0x98>
   1d8ca:	687b      	ldr	r3, [r7, #4]
   1d8cc:	781b      	ldrb	r3, [r3, #0]
   1d8ce:	005b      	lsls	r3, r3, #1
   1d8d0:	e000      	b.n	1d8d4 <nrf_gpio_reconfigure+0x9a>
   1d8d2:	2300      	movs	r3, #0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
   1d8d4:	431a      	orrs	r2, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)   |
   1d8d6:	683b      	ldr	r3, [r7, #0]
   1d8d8:	2b00      	cmp	r3, #0
   1d8da:	d003      	beq.n	1d8e4 <nrf_gpio_reconfigure+0xaa>
   1d8dc:	683b      	ldr	r3, [r7, #0]
   1d8de:	781b      	ldrb	r3, [r3, #0]
   1d8e0:	009b      	lsls	r3, r3, #2
   1d8e2:	e000      	b.n	1d8e6 <nrf_gpio_reconfigure+0xac>
   1d8e4:	2300      	movs	r3, #0
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos)  |
   1d8e6:	431a      	orrs	r2, r3
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos)  |
   1d8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d8ea:	2b00      	cmp	r3, #0
   1d8ec:	d003      	beq.n	1d8f6 <nrf_gpio_reconfigure+0xbc>
   1d8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d8f0:	781b      	ldrb	r3, [r3, #0]
   1d8f2:	021b      	lsls	r3, r3, #8
   1d8f4:	e000      	b.n	1d8f8 <nrf_gpio_reconfigure+0xbe>
   1d8f6:	2300      	movs	r3, #0
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)   |
   1d8f8:	431a      	orrs	r2, r3
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1d8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d8fc:	2b00      	cmp	r3, #0
   1d8fe:	d003      	beq.n	1d908 <nrf_gpio_reconfigure+0xce>
   1d900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d902:	781b      	ldrb	r3, [r3, #0]
   1d904:	041b      	lsls	r3, r3, #16
   1d906:	e000      	b.n	1d90a <nrf_gpio_reconfigure+0xd0>
   1d908:	2300      	movs	r3, #0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos)  |
   1d90a:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
   1d90c:	69ba      	ldr	r2, [r7, #24]
   1d90e:	4313      	orrs	r3, r2
   1d910:	61bb      	str	r3, [r7, #24]
    reg->PIN_CNF[pin_number] = cnf;
   1d912:	68fa      	ldr	r2, [r7, #12]
   1d914:	69fb      	ldr	r3, [r7, #28]
   1d916:	3280      	adds	r2, #128	; 0x80
   1d918:	69b9      	ldr	r1, [r7, #24]
   1d91a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1d91e:	bf00      	nop
   1d920:	3720      	adds	r7, #32
   1d922:	46bd      	mov	sp, r7
   1d924:	bd80      	pop	{r7, pc}

0001d926 <nrf_gpio_cfg_default>:
{
   1d926:	b580      	push	{r7, lr}
   1d928:	b084      	sub	sp, #16
   1d92a:	af02      	add	r7, sp, #8
   1d92c:	6078      	str	r0, [r7, #4]
    nrf_gpio_cfg(
   1d92e:	2300      	movs	r3, #0
   1d930:	9301      	str	r3, [sp, #4]
   1d932:	2300      	movs	r3, #0
   1d934:	9300      	str	r3, [sp, #0]
   1d936:	2300      	movs	r3, #0
   1d938:	2201      	movs	r2, #1
   1d93a:	2100      	movs	r1, #0
   1d93c:	6878      	ldr	r0, [r7, #4]
   1d93e:	f7f3 f81b 	bl	10978 <nrf_gpio_cfg>
}
   1d942:	bf00      	nop
   1d944:	3708      	adds	r7, #8
   1d946:	46bd      	mov	sp, r7
   1d948:	bd80      	pop	{r7, pc}

0001d94a <nrf_gpio_cfg_sense_set>:
{
   1d94a:	b580      	push	{r7, lr}
   1d94c:	b084      	sub	sp, #16
   1d94e:	af02      	add	r7, sp, #8
   1d950:	6078      	str	r0, [r7, #4]
   1d952:	460b      	mov	r3, r1
   1d954:	70fb      	strb	r3, [r7, #3]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1d956:	1cfb      	adds	r3, r7, #3
   1d958:	9301      	str	r3, [sp, #4]
   1d95a:	2300      	movs	r3, #0
   1d95c:	9300      	str	r3, [sp, #0]
   1d95e:	2300      	movs	r3, #0
   1d960:	2200      	movs	r2, #0
   1d962:	2100      	movs	r1, #0
   1d964:	6878      	ldr	r0, [r7, #4]
   1d966:	f7ff ff68 	bl	1d83a <nrf_gpio_reconfigure>
}
   1d96a:	bf00      	nop
   1d96c:	3708      	adds	r7, #8
   1d96e:	46bd      	mov	sp, r7
   1d970:	bd80      	pop	{r7, pc}

0001d972 <nrf_gpio_pin_read>:
{
   1d972:	b580      	push	{r7, lr}
   1d974:	b084      	sub	sp, #16
   1d976:	af00      	add	r7, sp, #0
   1d978:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d97a:	1d3b      	adds	r3, r7, #4
   1d97c:	4618      	mov	r0, r3
   1d97e:	f7f2 ffb9 	bl	108f4 <nrf_gpio_pin_port_decode>
   1d982:	60f8      	str	r0, [r7, #12]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1d984:	68f8      	ldr	r0, [r7, #12]
   1d986:	f000 f820 	bl	1d9ca <nrf_gpio_port_in_read>
   1d98a:	4602      	mov	r2, r0
   1d98c:	687b      	ldr	r3, [r7, #4]
   1d98e:	fa22 f303 	lsr.w	r3, r2, r3
   1d992:	f003 0301 	and.w	r3, r3, #1
}
   1d996:	4618      	mov	r0, r3
   1d998:	3710      	adds	r7, #16
   1d99a:	46bd      	mov	sp, r7
   1d99c:	bd80      	pop	{r7, pc}

0001d99e <nrf_gpio_pin_sense_get>:
{
   1d99e:	b580      	push	{r7, lr}
   1d9a0:	b084      	sub	sp, #16
   1d9a2:	af00      	add	r7, sp, #0
   1d9a4:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d9a6:	1d3b      	adds	r3, r7, #4
   1d9a8:	4618      	mov	r0, r3
   1d9aa:	f7f2 ffa3 	bl	108f4 <nrf_gpio_pin_port_decode>
   1d9ae:	60f8      	str	r0, [r7, #12]
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d9b0:	687a      	ldr	r2, [r7, #4]
   1d9b2:	68fb      	ldr	r3, [r7, #12]
   1d9b4:	3280      	adds	r2, #128	; 0x80
   1d9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1d9ba:	0c1b      	lsrs	r3, r3, #16
   1d9bc:	f003 0303 	and.w	r3, r3, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d9c0:	b2db      	uxtb	r3, r3
}
   1d9c2:	4618      	mov	r0, r3
   1d9c4:	3710      	adds	r7, #16
   1d9c6:	46bd      	mov	sp, r7
   1d9c8:	bd80      	pop	{r7, pc}

0001d9ca <nrf_gpio_port_in_read>:
{
   1d9ca:	b480      	push	{r7}
   1d9cc:	b083      	sub	sp, #12
   1d9ce:	af00      	add	r7, sp, #0
   1d9d0:	6078      	str	r0, [r7, #4]
    return p_reg->IN;
   1d9d2:	687b      	ldr	r3, [r7, #4]
   1d9d4:	691b      	ldr	r3, [r3, #16]
}
   1d9d6:	4618      	mov	r0, r3
   1d9d8:	370c      	adds	r7, #12
   1d9da:	46bd      	mov	sp, r7
   1d9dc:	bc80      	pop	{r7}
   1d9de:	4770      	bx	lr

0001d9e0 <nrf_gpio_pin_latch_clear>:
{
   1d9e0:	b580      	push	{r7, lr}
   1d9e2:	b084      	sub	sp, #16
   1d9e4:	af00      	add	r7, sp, #0
   1d9e6:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d9e8:	1d3b      	adds	r3, r7, #4
   1d9ea:	4618      	mov	r0, r3
   1d9ec:	f7f2 ff82 	bl	108f4 <nrf_gpio_pin_port_decode>
   1d9f0:	60f8      	str	r0, [r7, #12]
    reg->LATCH = (1 << pin_number);
   1d9f2:	687b      	ldr	r3, [r7, #4]
   1d9f4:	2201      	movs	r2, #1
   1d9f6:	fa02 f303 	lsl.w	r3, r2, r3
   1d9fa:	461a      	mov	r2, r3
   1d9fc:	68fb      	ldr	r3, [r7, #12]
   1d9fe:	621a      	str	r2, [r3, #32]
}
   1da00:	bf00      	nop
   1da02:	3710      	adds	r7, #16
   1da04:	46bd      	mov	sp, r7
   1da06:	bd80      	pop	{r7, pc}

0001da08 <nrf_gpio_pin_present_check>:
{
   1da08:	b480      	push	{r7}
   1da0a:	b085      	sub	sp, #20
   1da0c:	af00      	add	r7, sp, #0
   1da0e:	6078      	str	r0, [r7, #4]
    uint32_t port = pin_number >> 5;
   1da10:	687b      	ldr	r3, [r7, #4]
   1da12:	095b      	lsrs	r3, r3, #5
   1da14:	60fb      	str	r3, [r7, #12]
    uint32_t mask = 0;
   1da16:	2300      	movs	r3, #0
   1da18:	60bb      	str	r3, [r7, #8]
    switch (port)
   1da1a:	68fb      	ldr	r3, [r7, #12]
   1da1c:	2b00      	cmp	r3, #0
   1da1e:	d112      	bne.n	1da46 <nrf_gpio_pin_present_check+0x3e>
        NRF_INTERNAL_GPIO_PORT_MASK_SET(mask);
   1da20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1da24:	60bb      	str	r3, [r7, #8]
    pin_number &= 0x1F;
   1da26:	687b      	ldr	r3, [r7, #4]
   1da28:	f003 031f 	and.w	r3, r3, #31
   1da2c:	607b      	str	r3, [r7, #4]
    return (mask & (1UL << pin_number)) ? true : false;
   1da2e:	68ba      	ldr	r2, [r7, #8]
   1da30:	687b      	ldr	r3, [r7, #4]
   1da32:	fa22 f303 	lsr.w	r3, r2, r3
   1da36:	f003 0301 	and.w	r3, r3, #1
   1da3a:	2b00      	cmp	r3, #0
   1da3c:	bf14      	ite	ne
   1da3e:	2301      	movne	r3, #1
   1da40:	2300      	moveq	r3, #0
   1da42:	b2db      	uxtb	r3, r3
   1da44:	e000      	b.n	1da48 <nrf_gpio_pin_present_check+0x40>
            return false;
   1da46:	2300      	movs	r3, #0
}
   1da48:	4618      	mov	r0, r3
   1da4a:	3714      	adds	r7, #20
   1da4c:	46bd      	mov	sp, r7
   1da4e:	bc80      	pop	{r7}
   1da50:	4770      	bx	lr

0001da52 <nrf_gpio_pin_port_number_extract>:
{
   1da52:	b480      	push	{r7}
   1da54:	b085      	sub	sp, #20
   1da56:	af00      	add	r7, sp, #0
   1da58:	6078      	str	r0, [r7, #4]
    uint32_t pin_number = *p_pin;
   1da5a:	687b      	ldr	r3, [r7, #4]
   1da5c:	681b      	ldr	r3, [r3, #0]
   1da5e:	60fb      	str	r3, [r7, #12]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   1da60:	68fb      	ldr	r3, [r7, #12]
   1da62:	f003 021f 	and.w	r2, r3, #31
   1da66:	687b      	ldr	r3, [r7, #4]
   1da68:	601a      	str	r2, [r3, #0]
    return NRF_PIN_NUMBER_TO_PORT(pin_number);
   1da6a:	68fb      	ldr	r3, [r7, #12]
   1da6c:	095b      	lsrs	r3, r3, #5
}
   1da6e:	4618      	mov	r0, r3
   1da70:	3714      	adds	r7, #20
   1da72:	46bd      	mov	sp, r7
   1da74:	bc80      	pop	{r7}
   1da76:	4770      	bx	lr

0001da78 <nrfy_gpio_reconfigure>:
                                              const nrf_gpio_pin_dir_t *   p_dir,
                                              const nrf_gpio_pin_input_t * p_input,
                                              const nrf_gpio_pin_pull_t *  p_pull,
                                              const nrf_gpio_pin_drive_t * p_drive,
                                              const nrf_gpio_pin_sense_t * p_sense)
{
   1da78:	b580      	push	{r7, lr}
   1da7a:	b086      	sub	sp, #24
   1da7c:	af02      	add	r7, sp, #8
   1da7e:	60f8      	str	r0, [r7, #12]
   1da80:	60b9      	str	r1, [r7, #8]
   1da82:	607a      	str	r2, [r7, #4]
   1da84:	603b      	str	r3, [r7, #0]
    nrf_gpio_reconfigure(pin_number, p_dir, p_input, p_pull, p_drive, p_sense);
   1da86:	69fb      	ldr	r3, [r7, #28]
   1da88:	9301      	str	r3, [sp, #4]
   1da8a:	69bb      	ldr	r3, [r7, #24]
   1da8c:	9300      	str	r3, [sp, #0]
   1da8e:	683b      	ldr	r3, [r7, #0]
   1da90:	687a      	ldr	r2, [r7, #4]
   1da92:	68b9      	ldr	r1, [r7, #8]
   1da94:	68f8      	ldr	r0, [r7, #12]
   1da96:	f7ff fed0 	bl	1d83a <nrf_gpio_reconfigure>
    nrf_barrier_w();
   1da9a:	f7ff fc03 	bl	1d2a4 <nrf_barrier_w>
}
   1da9e:	bf00      	nop
   1daa0:	3710      	adds	r7, #16
   1daa2:	46bd      	mov	sp, r7
   1daa4:	bd80      	pop	{r7, pc}

0001daa6 <nrfy_gpio_cfg_default>:
    nrf_barrier_w();
}

/** @refhal{nrf_gpio_cfg_default} */
NRFY_STATIC_INLINE void nrfy_gpio_cfg_default(uint32_t pin_number)
{
   1daa6:	b580      	push	{r7, lr}
   1daa8:	b082      	sub	sp, #8
   1daaa:	af00      	add	r7, sp, #0
   1daac:	6078      	str	r0, [r7, #4]
    nrf_gpio_cfg_default(pin_number);
   1daae:	6878      	ldr	r0, [r7, #4]
   1dab0:	f7ff ff39 	bl	1d926 <nrf_gpio_cfg_default>
    nrf_barrier_w();
   1dab4:	f7ff fbf6 	bl	1d2a4 <nrf_barrier_w>
}
   1dab8:	bf00      	nop
   1daba:	3708      	adds	r7, #8
   1dabc:	46bd      	mov	sp, r7
   1dabe:	bd80      	pop	{r7, pc}

0001dac0 <nrfy_gpio_cfg_sense_set>:
}

/** @refhal{nrf_gpio_cfg_sense_set} */
NRFY_STATIC_INLINE void nrfy_gpio_cfg_sense_set(uint32_t             pin_number,
                                                nrf_gpio_pin_sense_t sense_config)
{
   1dac0:	b580      	push	{r7, lr}
   1dac2:	b082      	sub	sp, #8
   1dac4:	af00      	add	r7, sp, #0
   1dac6:	6078      	str	r0, [r7, #4]
   1dac8:	460b      	mov	r3, r1
   1daca:	70fb      	strb	r3, [r7, #3]
    nrf_barrier_r();
   1dacc:	f7ff fbf0 	bl	1d2b0 <nrf_barrier_r>
    nrf_gpio_cfg_sense_set(pin_number, sense_config);
   1dad0:	78fb      	ldrb	r3, [r7, #3]
   1dad2:	4619      	mov	r1, r3
   1dad4:	6878      	ldr	r0, [r7, #4]
   1dad6:	f7ff ff38 	bl	1d94a <nrf_gpio_cfg_sense_set>
    nrf_barrier_rw();
   1dada:	f7ff fbef 	bl	1d2bc <nrf_barrier_rw>
}
   1dade:	bf00      	nop
   1dae0:	3708      	adds	r7, #8
   1dae2:	46bd      	mov	sp, r7
   1dae4:	bd80      	pop	{r7, pc}

0001dae6 <nrfy_gpio_pin_read>:
    nrf_barrier_w();
}

/** @refhal{nrf_gpio_pin_read} */
NRFY_STATIC_INLINE uint32_t nrfy_gpio_pin_read(uint32_t pin_number)
{
   1dae6:	b580      	push	{r7, lr}
   1dae8:	b084      	sub	sp, #16
   1daea:	af00      	add	r7, sp, #0
   1daec:	6078      	str	r0, [r7, #4]
    nrf_barrier_r();
   1daee:	f7ff fbdf 	bl	1d2b0 <nrf_barrier_r>
    uint32_t pin = nrf_gpio_pin_read(pin_number);
   1daf2:	6878      	ldr	r0, [r7, #4]
   1daf4:	f7ff ff3d 	bl	1d972 <nrf_gpio_pin_read>
   1daf8:	60f8      	str	r0, [r7, #12]
    nrf_barrier_r();
   1dafa:	f7ff fbd9 	bl	1d2b0 <nrf_barrier_r>
    return pin;
   1dafe:	68fb      	ldr	r3, [r7, #12]
}
   1db00:	4618      	mov	r0, r3
   1db02:	3710      	adds	r7, #16
   1db04:	46bd      	mov	sp, r7
   1db06:	bd80      	pop	{r7, pc}

0001db08 <nrfy_gpio_pin_sense_get>:
    return pin;
}

/** @refhal{nrf_gpio_pin_sense_get} */
NRFY_STATIC_INLINE nrf_gpio_pin_sense_t nrfy_gpio_pin_sense_get(uint32_t pin_number)
{
   1db08:	b580      	push	{r7, lr}
   1db0a:	b084      	sub	sp, #16
   1db0c:	af00      	add	r7, sp, #0
   1db0e:	6078      	str	r0, [r7, #4]
    nrf_barrier_rw();
   1db10:	f7ff fbd4 	bl	1d2bc <nrf_barrier_rw>
    nrf_gpio_pin_sense_t pin_sense = nrf_gpio_pin_sense_get(pin_number);
   1db14:	6878      	ldr	r0, [r7, #4]
   1db16:	f7ff ff42 	bl	1d99e <nrf_gpio_pin_sense_get>
   1db1a:	4603      	mov	r3, r0
   1db1c:	73fb      	strb	r3, [r7, #15]
    nrf_barrier_r();
   1db1e:	f7ff fbc7 	bl	1d2b0 <nrf_barrier_r>
    return pin_sense;
   1db22:	7bfb      	ldrb	r3, [r7, #15]
}
   1db24:	4618      	mov	r0, r3
   1db26:	3710      	adds	r7, #16
   1db28:	46bd      	mov	sp, r7
   1db2a:	bd80      	pop	{r7, pc}

0001db2c <nrfy_gpio_latches_read_and_clear>:

/** @refhal{nrf_gpio_latches_read_and_clear} */
NRFY_STATIC_INLINE void nrfy_gpio_latches_read_and_clear(uint32_t   start_port,
                                                         uint32_t   length,
                                                         uint32_t * p_masks)
{
   1db2c:	b580      	push	{r7, lr}
   1db2e:	b084      	sub	sp, #16
   1db30:	af00      	add	r7, sp, #0
   1db32:	60f8      	str	r0, [r7, #12]
   1db34:	60b9      	str	r1, [r7, #8]
   1db36:	607a      	str	r2, [r7, #4]
    nrf_barrier_r();
   1db38:	f7ff fbba 	bl	1d2b0 <nrf_barrier_r>
    nrf_gpio_latches_read_and_clear(start_port, length, p_masks);
   1db3c:	687a      	ldr	r2, [r7, #4]
   1db3e:	68b9      	ldr	r1, [r7, #8]
   1db40:	68f8      	ldr	r0, [r7, #12]
   1db42:	f7f2 ff57 	bl	109f4 <nrf_gpio_latches_read_and_clear>
    nrf_barrier_rw();
   1db46:	f7ff fbb9 	bl	1d2bc <nrf_barrier_rw>
}
   1db4a:	bf00      	nop
   1db4c:	3710      	adds	r7, #16
   1db4e:	46bd      	mov	sp, r7
   1db50:	bd80      	pop	{r7, pc}

0001db52 <nrfy_gpio_pin_latch_clear>:
    return pin_latch;
}

/** @refhal{nrf_gpio_pin_latch_clear} */
NRFY_STATIC_INLINE void nrfy_gpio_pin_latch_clear(uint32_t pin_number)
{
   1db52:	b580      	push	{r7, lr}
   1db54:	b082      	sub	sp, #8
   1db56:	af00      	add	r7, sp, #0
   1db58:	6078      	str	r0, [r7, #4]
    nrf_gpio_pin_latch_clear(pin_number);
   1db5a:	6878      	ldr	r0, [r7, #4]
   1db5c:	f7ff ff40 	bl	1d9e0 <nrf_gpio_pin_latch_clear>
    nrf_barrier_w();
   1db60:	f7ff fba0 	bl	1d2a4 <nrf_barrier_w>
}
   1db64:	bf00      	nop
   1db66:	3708      	adds	r7, #8
   1db68:	46bd      	mov	sp, r7
   1db6a:	bd80      	pop	{r7, pc}

0001db6c <nrf_bitmask_bit_clear>:
 *
 * @param[in]     bit    Bit index.
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
   1db6c:	b480      	push	{r7}
   1db6e:	b085      	sub	sp, #20
   1db70:	af00      	add	r7, sp, #0
   1db72:	6078      	str	r0, [r7, #4]
   1db74:	6039      	str	r1, [r7, #0]
    uint8_t * p_mask8 = (uint8_t *)p_mask;
   1db76:	683b      	ldr	r3, [r7, #0]
   1db78:	60fb      	str	r3, [r7, #12]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1db7a:	687b      	ldr	r3, [r7, #4]
   1db7c:	08db      	lsrs	r3, r3, #3
   1db7e:	60bb      	str	r3, [r7, #8]
    bit = BITMASK_RELBIT_GET(bit);
   1db80:	687b      	ldr	r3, [r7, #4]
   1db82:	f003 0307 	and.w	r3, r3, #7
   1db86:	607b      	str	r3, [r7, #4]
    p_mask8[byte_idx] &= ~(1 << bit);
   1db88:	68fa      	ldr	r2, [r7, #12]
   1db8a:	68bb      	ldr	r3, [r7, #8]
   1db8c:	4413      	add	r3, r2
   1db8e:	781b      	ldrb	r3, [r3, #0]
   1db90:	b25a      	sxtb	r2, r3
   1db92:	2101      	movs	r1, #1
   1db94:	687b      	ldr	r3, [r7, #4]
   1db96:	fa01 f303 	lsl.w	r3, r1, r3
   1db9a:	b25b      	sxtb	r3, r3
   1db9c:	43db      	mvns	r3, r3
   1db9e:	b25b      	sxtb	r3, r3
   1dba0:	4013      	ands	r3, r2
   1dba2:	b259      	sxtb	r1, r3
   1dba4:	68fa      	ldr	r2, [r7, #12]
   1dba6:	68bb      	ldr	r3, [r7, #8]
   1dba8:	4413      	add	r3, r2
   1dbaa:	b2ca      	uxtb	r2, r1
   1dbac:	701a      	strb	r2, [r3, #0]
}
   1dbae:	bf00      	nop
   1dbb0:	3714      	adds	r7, #20
   1dbb2:	46bd      	mov	sp, r7
   1dbb4:	bc80      	pop	{r7}
   1dbb6:	4770      	bx	lr

0001dbb8 <get_pin_idx>:
{
   1dbb8:	b480      	push	{r7}
   1dbba:	b083      	sub	sp, #12
   1dbbc:	af00      	add	r7, sp, #0
   1dbbe:	6078      	str	r0, [r7, #4]
    return pin;
   1dbc0:	687b      	ldr	r3, [r7, #4]
   1dbc2:	b2db      	uxtb	r3, r3
}
   1dbc4:	4618      	mov	r0, r3
   1dbc6:	370c      	adds	r7, #12
   1dbc8:	46bd      	mov	sp, r7
   1dbca:	bc80      	pop	{r7}
   1dbcc:	4770      	bx	lr

0001dbce <pin_is_task_output>:
{
   1dbce:	b580      	push	{r7, lr}
   1dbd0:	b082      	sub	sp, #8
   1dbd2:	af00      	add	r7, sp, #0
   1dbd4:	6078      	str	r0, [r7, #4]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1dbd6:	6878      	ldr	r0, [r7, #4]
   1dbd8:	f7f2 ffb0 	bl	10b3c <pin_is_output>
   1dbdc:	4603      	mov	r3, r0
   1dbde:	2b00      	cmp	r3, #0
   1dbe0:	d007      	beq.n	1dbf2 <pin_is_task_output+0x24>
   1dbe2:	6878      	ldr	r0, [r7, #4]
   1dbe4:	f7f2 ff74 	bl	10ad0 <pin_in_use_by_te>
   1dbe8:	4603      	mov	r3, r0
   1dbea:	2b00      	cmp	r3, #0
   1dbec:	d001      	beq.n	1dbf2 <pin_is_task_output+0x24>
   1dbee:	2301      	movs	r3, #1
   1dbf0:	e000      	b.n	1dbf4 <pin_is_task_output+0x26>
   1dbf2:	2300      	movs	r3, #0
   1dbf4:	f003 0301 	and.w	r3, r3, #1
   1dbf8:	b2db      	uxtb	r3, r3
}
   1dbfa:	4618      	mov	r0, r3
   1dbfc:	3708      	adds	r7, #8
   1dbfe:	46bd      	mov	sp, r7
   1dc00:	bd80      	pop	{r7, pc}

0001dc02 <pin_is_input>:
{
   1dc02:	b580      	push	{r7, lr}
   1dc04:	b082      	sub	sp, #8
   1dc06:	af00      	add	r7, sp, #0
   1dc08:	6078      	str	r0, [r7, #4]
    return !pin_is_output(pin);
   1dc0a:	6878      	ldr	r0, [r7, #4]
   1dc0c:	f7f2 ff96 	bl	10b3c <pin_is_output>
   1dc10:	4603      	mov	r3, r0
   1dc12:	2b00      	cmp	r3, #0
   1dc14:	bf14      	ite	ne
   1dc16:	2301      	movne	r3, #1
   1dc18:	2300      	moveq	r3, #0
   1dc1a:	b2db      	uxtb	r3, r3
   1dc1c:	f083 0301 	eor.w	r3, r3, #1
   1dc20:	b2db      	uxtb	r3, r3
   1dc22:	f003 0301 	and.w	r3, r3, #1
   1dc26:	b2db      	uxtb	r3, r3
}
   1dc28:	4618      	mov	r0, r3
   1dc2a:	3708      	adds	r7, #8
   1dc2c:	46bd      	mov	sp, r7
   1dc2e:	bd80      	pop	{r7, pc}

0001dc30 <gpiote_polarity_to_trigger>:
{
   1dc30:	b480      	push	{r7}
   1dc32:	b083      	sub	sp, #12
   1dc34:	af00      	add	r7, sp, #0
   1dc36:	4603      	mov	r3, r0
   1dc38:	71fb      	strb	r3, [r7, #7]
   return (nrfx_gpiote_trigger_t)polarity;
   1dc3a:	79fb      	ldrb	r3, [r7, #7]
}
   1dc3c:	4618      	mov	r0, r3
   1dc3e:	370c      	adds	r7, #12
   1dc40:	46bd      	mov	sp, r7
   1dc42:	bc80      	pop	{r7}
   1dc44:	4770      	bx	lr

0001dc46 <gpiote_trigger_to_polarity>:
{
   1dc46:	b480      	push	{r7}
   1dc48:	b083      	sub	sp, #12
   1dc4a:	af00      	add	r7, sp, #0
   1dc4c:	4603      	mov	r3, r0
   1dc4e:	71fb      	strb	r3, [r7, #7]
    return (nrf_gpiote_polarity_t)trigger;
   1dc50:	79fb      	ldrb	r3, [r7, #7]
}
   1dc52:	4618      	mov	r0, r3
   1dc54:	370c      	adds	r7, #12
   1dc56:	46bd      	mov	sp, r7
   1dc58:	bc80      	pop	{r7}
   1dc5a:	4770      	bx	lr

0001dc5c <is_level>:
{
   1dc5c:	b480      	push	{r7}
   1dc5e:	b083      	sub	sp, #12
   1dc60:	af00      	add	r7, sp, #0
   1dc62:	4603      	mov	r3, r0
   1dc64:	71fb      	strb	r3, [r7, #7]
    return trigger >= NRFX_GPIOTE_TRIGGER_LOW;
   1dc66:	79fb      	ldrb	r3, [r7, #7]
   1dc68:	2b03      	cmp	r3, #3
   1dc6a:	bf8c      	ite	hi
   1dc6c:	2301      	movhi	r3, #1
   1dc6e:	2300      	movls	r3, #0
   1dc70:	b2db      	uxtb	r3, r3
}
   1dc72:	4618      	mov	r0, r3
   1dc74:	370c      	adds	r7, #12
   1dc76:	46bd      	mov	sp, r7
   1dc78:	bc80      	pop	{r7}
   1dc7a:	4770      	bx	lr

0001dc7c <next_sense_cond_call_handler>:
{
   1dc7c:	b580      	push	{r7, lr}
   1dc7e:	b084      	sub	sp, #16
   1dc80:	af00      	add	r7, sp, #0
   1dc82:	6078      	str	r0, [r7, #4]
   1dc84:	460b      	mov	r3, r1
   1dc86:	70fb      	strb	r3, [r7, #3]
   1dc88:	4613      	mov	r3, r2
   1dc8a:	70bb      	strb	r3, [r7, #2]
    if (is_level(trigger))
   1dc8c:	78fb      	ldrb	r3, [r7, #3]
   1dc8e:	4618      	mov	r0, r3
   1dc90:	f7ff ffe4 	bl	1dc5c <is_level>
   1dc94:	4603      	mov	r3, r0
   1dc96:	2b00      	cmp	r3, #0
   1dc98:	d016      	beq.n	1dcc8 <next_sense_cond_call_handler+0x4c>
        call_handler(pin, trigger);
   1dc9a:	78fb      	ldrb	r3, [r7, #3]
   1dc9c:	4619      	mov	r1, r3
   1dc9e:	6878      	ldr	r0, [r7, #4]
   1dca0:	f7f3 fc24 	bl	114ec <call_handler>
        if (nrfy_gpio_pin_sense_get(pin) == sense)
   1dca4:	6878      	ldr	r0, [r7, #4]
   1dca6:	f7ff ff2f 	bl	1db08 <nrfy_gpio_pin_sense_get>
   1dcaa:	4603      	mov	r3, r0
   1dcac:	461a      	mov	r2, r3
   1dcae:	78bb      	ldrb	r3, [r7, #2]
   1dcb0:	4293      	cmp	r3, r2
   1dcb2:	d129      	bne.n	1dd08 <next_sense_cond_call_handler+0x8c>
            nrfy_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1dcb4:	2100      	movs	r1, #0
   1dcb6:	6878      	ldr	r0, [r7, #4]
   1dcb8:	f7ff ff02 	bl	1dac0 <nrfy_gpio_cfg_sense_set>
            nrfy_gpio_cfg_sense_set(pin, sense);
   1dcbc:	78bb      	ldrb	r3, [r7, #2]
   1dcbe:	4619      	mov	r1, r3
   1dcc0:	6878      	ldr	r0, [r7, #4]
   1dcc2:	f7ff fefd 	bl	1dac0 <nrfy_gpio_cfg_sense_set>
}
   1dcc6:	e01f      	b.n	1dd08 <next_sense_cond_call_handler+0x8c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1dcc8:	78bb      	ldrb	r3, [r7, #2]
   1dcca:	2b02      	cmp	r3, #2
   1dccc:	d101      	bne.n	1dcd2 <next_sense_cond_call_handler+0x56>
   1dcce:	2303      	movs	r3, #3
   1dcd0:	e000      	b.n	1dcd4 <next_sense_cond_call_handler+0x58>
   1dcd2:	2302      	movs	r3, #2
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
   1dcd4:	73fb      	strb	r3, [r7, #15]
        nrfy_gpio_cfg_sense_set(pin, next_sense);
   1dcd6:	7bfb      	ldrb	r3, [r7, #15]
   1dcd8:	4619      	mov	r1, r3
   1dcda:	6878      	ldr	r0, [r7, #4]
   1dcdc:	f7ff fef0 	bl	1dac0 <nrfy_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1dce0:	78fb      	ldrb	r3, [r7, #3]
   1dce2:	2b03      	cmp	r3, #3
   1dce4:	d00b      	beq.n	1dcfe <next_sense_cond_call_handler+0x82>
   1dce6:	78bb      	ldrb	r3, [r7, #2]
   1dce8:	2b02      	cmp	r3, #2
   1dcea:	d102      	bne.n	1dcf2 <next_sense_cond_call_handler+0x76>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1dcec:	78fb      	ldrb	r3, [r7, #3]
   1dcee:	2b01      	cmp	r3, #1
   1dcf0:	d005      	beq.n	1dcfe <next_sense_cond_call_handler+0x82>
   1dcf2:	78bb      	ldrb	r3, [r7, #2]
   1dcf4:	2b03      	cmp	r3, #3
   1dcf6:	d107      	bne.n	1dd08 <next_sense_cond_call_handler+0x8c>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1dcf8:	78fb      	ldrb	r3, [r7, #3]
   1dcfa:	2b02      	cmp	r3, #2
   1dcfc:	d104      	bne.n	1dd08 <next_sense_cond_call_handler+0x8c>
            call_handler(pin, trigger);
   1dcfe:	78fb      	ldrb	r3, [r7, #3]
   1dd00:	4619      	mov	r1, r3
   1dd02:	6878      	ldr	r0, [r7, #4]
   1dd04:	f7f3 fbf2 	bl	114ec <call_handler>
}
   1dd08:	bf00      	nop
   1dd0a:	3710      	adds	r7, #16
   1dd0c:	46bd      	mov	sp, r7
   1dd0e:	bd80      	pop	{r7, pc}

0001dd10 <latch_pending_read_and_check>:
{
   1dd10:	b580      	push	{r7, lr}
   1dd12:	b084      	sub	sp, #16
   1dd14:	af00      	add	r7, sp, #0
   1dd16:	6078      	str	r0, [r7, #4]
    nrfy_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   1dd18:	687a      	ldr	r2, [r7, #4]
   1dd1a:	2101      	movs	r1, #1
   1dd1c:	2000      	movs	r0, #0
   1dd1e:	f7ff ff05 	bl	1db2c <nrfy_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1dd22:	2300      	movs	r3, #0
   1dd24:	60fb      	str	r3, [r7, #12]
   1dd26:	e00b      	b.n	1dd40 <latch_pending_read_and_check+0x30>
        if (latch[port_idx])
   1dd28:	68fb      	ldr	r3, [r7, #12]
   1dd2a:	009b      	lsls	r3, r3, #2
   1dd2c:	687a      	ldr	r2, [r7, #4]
   1dd2e:	4413      	add	r3, r2
   1dd30:	681b      	ldr	r3, [r3, #0]
   1dd32:	2b00      	cmp	r3, #0
   1dd34:	d001      	beq.n	1dd3a <latch_pending_read_and_check+0x2a>
            return true;
   1dd36:	2301      	movs	r3, #1
   1dd38:	e006      	b.n	1dd48 <latch_pending_read_and_check+0x38>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1dd3a:	68fb      	ldr	r3, [r7, #12]
   1dd3c:	3301      	adds	r3, #1
   1dd3e:	60fb      	str	r3, [r7, #12]
   1dd40:	68fb      	ldr	r3, [r7, #12]
   1dd42:	2b00      	cmp	r3, #0
   1dd44:	d0f0      	beq.n	1dd28 <latch_pending_read_and_check+0x18>
    return false;
   1dd46:	2300      	movs	r3, #0
}
   1dd48:	4618      	mov	r0, r3
   1dd4a:	3710      	adds	r7, #16
   1dd4c:	46bd      	mov	sp, r7
   1dd4e:	bd80      	pop	{r7, pc}

0001dd50 <nrf_ipc_event_clear>:
{
   1dd50:	b480      	push	{r7}
   1dd52:	b083      	sub	sp, #12
   1dd54:	af00      	add	r7, sp, #0
   1dd56:	6078      	str	r0, [r7, #4]
   1dd58:	460b      	mov	r3, r1
   1dd5a:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dd5c:	887b      	ldrh	r3, [r7, #2]
   1dd5e:	687a      	ldr	r2, [r7, #4]
   1dd60:	4413      	add	r3, r2
   1dd62:	2200      	movs	r2, #0
   1dd64:	601a      	str	r2, [r3, #0]
}
   1dd66:	bf00      	nop
   1dd68:	370c      	adds	r7, #12
   1dd6a:	46bd      	mov	sp, r7
   1dd6c:	bc80      	pop	{r7}
   1dd6e:	4770      	bx	lr

0001dd70 <nrf_ipc_int_enable>:
{
   1dd70:	b480      	push	{r7}
   1dd72:	b083      	sub	sp, #12
   1dd74:	af00      	add	r7, sp, #0
   1dd76:	6078      	str	r0, [r7, #4]
   1dd78:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   1dd7a:	687b      	ldr	r3, [r7, #4]
   1dd7c:	683a      	ldr	r2, [r7, #0]
   1dd7e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dd82:	bf00      	nop
   1dd84:	370c      	adds	r7, #12
   1dd86:	46bd      	mov	sp, r7
   1dd88:	bc80      	pop	{r7}
   1dd8a:	4770      	bx	lr

0001dd8c <nrf_ipc_int_disable>:
{
   1dd8c:	b480      	push	{r7}
   1dd8e:	b083      	sub	sp, #12
   1dd90:	af00      	add	r7, sp, #0
   1dd92:	6078      	str	r0, [r7, #4]
   1dd94:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   1dd96:	687b      	ldr	r3, [r7, #4]
   1dd98:	683a      	ldr	r2, [r7, #0]
   1dd9a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1dd9e:	bf00      	nop
   1dda0:	370c      	adds	r7, #12
   1dda2:	46bd      	mov	sp, r7
   1dda4:	bc80      	pop	{r7}
   1dda6:	4770      	bx	lr

0001dda8 <nrf_ipc_int_pending_get>:
{
   1dda8:	b480      	push	{r7}
   1ddaa:	b083      	sub	sp, #12
   1ddac:	af00      	add	r7, sp, #0
   1ddae:	6078      	str	r0, [r7, #4]
    return p_reg->INTPEND;
   1ddb0:	687b      	ldr	r3, [r7, #4]
   1ddb2:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
}
   1ddb6:	4618      	mov	r0, r3
   1ddb8:	370c      	adds	r7, #12
   1ddba:	46bd      	mov	sp, r7
   1ddbc:	bc80      	pop	{r7}
   1ddbe:	4770      	bx	lr

0001ddc0 <nrf_ipc_send_config_set>:
{
   1ddc0:	b480      	push	{r7}
   1ddc2:	b085      	sub	sp, #20
   1ddc4:	af00      	add	r7, sp, #0
   1ddc6:	60f8      	str	r0, [r7, #12]
   1ddc8:	460b      	mov	r3, r1
   1ddca:	607a      	str	r2, [r7, #4]
   1ddcc:	72fb      	strb	r3, [r7, #11]
    p_reg->SEND_CNF[index] = channels_mask;
   1ddce:	7afa      	ldrb	r2, [r7, #11]
   1ddd0:	68fb      	ldr	r3, [r7, #12]
   1ddd2:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1ddd6:	6879      	ldr	r1, [r7, #4]
   1ddd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1dddc:	bf00      	nop
   1ddde:	3714      	adds	r7, #20
   1dde0:	46bd      	mov	sp, r7
   1dde2:	bc80      	pop	{r7}
   1dde4:	4770      	bx	lr

0001dde6 <nrf_ipc_receive_config_set>:
{
   1dde6:	b480      	push	{r7}
   1dde8:	b085      	sub	sp, #20
   1ddea:	af00      	add	r7, sp, #0
   1ddec:	60f8      	str	r0, [r7, #12]
   1ddee:	460b      	mov	r3, r1
   1ddf0:	607a      	str	r2, [r7, #4]
   1ddf2:	72fb      	strb	r3, [r7, #11]
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1ddf4:	7afa      	ldrb	r2, [r7, #11]
   1ddf6:	68fb      	ldr	r3, [r7, #12]
   1ddf8:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   1ddfc:	6879      	ldr	r1, [r7, #4]
   1ddfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1de02:	bf00      	nop
   1de04:	3714      	adds	r7, #20
   1de06:	46bd      	mov	sp, r7
   1de08:	bc80      	pop	{r7}
   1de0a:	4770      	bx	lr

0001de0c <rpc_handle_ctrl_message>:
   1de0c:	2902      	cmp	r1, #2
   1de0e:	b510      	push	{r4, lr}
   1de10:	4604      	mov	r4, r0
   1de12:	d005      	beq.n	1de20 <rpc_handle_ctrl_message+0x14>
   1de14:	2904      	cmp	r1, #4
   1de16:	d001      	beq.n	1de1c <rpc_handle_ctrl_message+0x10>
   1de18:	2901      	cmp	r1, #1
   1de1a:	d107      	bne.n	1de2c <rpc_handle_ctrl_message+0x20>
   1de1c:	2000      	movs	r0, #0
   1de1e:	bd10      	pop	{r4, pc}
   1de20:	6880      	ldr	r0, [r0, #8]
   1de22:	2800      	cmp	r0, #0
   1de24:	d0fa      	beq.n	1de1c <rpc_handle_ctrl_message+0x10>
   1de26:	f7f1 ff75 	bl	fd14 <nrf_modem_os_shm_tx_free>
   1de2a:	e7f7      	b.n	1de1c <rpc_handle_ctrl_message+0x10>
   1de2c:	6880      	ldr	r0, [r0, #8]
   1de2e:	b108      	cbz	r0, 1de34 <rpc_handle_ctrl_message+0x28>
   1de30:	f7f1 ff70 	bl	fd14 <nrf_modem_os_shm_tx_free>
   1de34:	4620      	mov	r0, r4
   1de36:	f7f3 fde5 	bl	11a04 <rpc_transport_msg_rx_free>
   1de3a:	e7ef      	b.n	1de1c <rpc_handle_ctrl_message+0x10>

0001de3c <rpc_list_preambles_init>:
   1de3c:	2200      	movs	r2, #0
   1de3e:	b510      	push	{r4, lr}
   1de40:	6804      	ldr	r4, [r0, #0]
   1de42:	4294      	cmp	r4, r2
   1de44:	d100      	bne.n	1de48 <rpc_list_preambles_init+0xc>
   1de46:	bd10      	pop	{r4, pc}
   1de48:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1de4c:	684b      	ldr	r3, [r1, #4]
   1de4e:	3201      	adds	r2, #1
   1de50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1de54:	f043 0303 	orr.w	r3, r3, #3
   1de58:	604b      	str	r3, [r1, #4]
   1de5a:	e7f2      	b.n	1de42 <rpc_list_preambles_init+0x6>

0001de5c <rpc_transport_ipc_data_rx_resume>:
   1de5c:	2004      	movs	r0, #4
   1de5e:	f7f3 bd23 	b.w	118a8 <nrfx_ipc_receive_event_enable>

0001de62 <rpc_transport_ipc_data_rx_suspend>:
   1de62:	2004      	movs	r0, #4
   1de64:	f7f3 bd4a 	b.w	118fc <nrfx_ipc_receive_event_disable>

0001de68 <rpc_transport_ipc_shutdown>:
   1de68:	f7f3 bcd6 	b.w	11818 <nrfx_ipc_uninit>

0001de6c <rpc_transport_ipc_msg_alloc>:
   1de6c:	b538      	push	{r3, r4, r5, lr}
   1de6e:	4604      	mov	r4, r0
   1de70:	2500      	movs	r5, #0
   1de72:	1d03      	adds	r3, r0, #4
   1de74:	6822      	ldr	r2, [r4, #0]
   1de76:	42aa      	cmp	r2, r5
   1de78:	d801      	bhi.n	1de7e <rpc_transport_ipc_msg_alloc+0x12>
   1de7a:	2300      	movs	r3, #0
   1de7c:	e019      	b.n	1deb2 <rpc_transport_ipc_msg_alloc+0x46>
   1de7e:	f04f 0200 	mov.w	r2, #0
   1de82:	e8d3 0fcf 	ldaexb	r0, [r3]
   1de86:	2803      	cmp	r0, #3
   1de88:	d104      	bne.n	1de94 <rpc_transport_ipc_msg_alloc+0x28>
   1de8a:	e8c3 2fcc 	stlexb	ip, r2, [r3]
   1de8e:	f1bc 0f00 	cmp.w	ip, #0
   1de92:	d1f6      	bne.n	1de82 <rpc_transport_ipc_msg_alloc+0x16>
   1de94:	d002      	beq.n	1de9c <rpc_transport_ipc_msg_alloc+0x30>
   1de96:	3308      	adds	r3, #8
   1de98:	3501      	adds	r5, #1
   1de9a:	e7eb      	b.n	1de74 <rpc_transport_ipc_msg_alloc+0x8>
   1de9c:	eb01 1385 	add.w	r3, r1, r5, lsl #6
   1dea0:	4618      	mov	r0, r3
   1dea2:	2240      	movs	r2, #64	; 0x40
   1dea4:	2100      	movs	r1, #0
   1dea6:	f001 fd1f 	bl	1f8e8 <memset>
   1deaa:	4603      	mov	r3, r0
   1deac:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1deb0:	60a0      	str	r0, [r4, #8]
   1deb2:	4618      	mov	r0, r3
   1deb4:	bd38      	pop	{r3, r4, r5, pc}

0001deb6 <rpc_client_msg_from_rpc_msg_get>:
   1deb6:	3008      	adds	r0, #8
   1deb8:	4770      	bx	lr

0001deba <rpc_client_msg_alloc>:
   1deba:	b538      	push	{r3, r4, r5, lr}
   1debc:	4605      	mov	r5, r0
   1debe:	b920      	cbnz	r0, 1deca <rpc_client_msg_alloc+0x10>
   1dec0:	f7f3 fd9a 	bl	119f8 <rpc_transport_msg_alloc>
   1dec4:	b980      	cbnz	r0, 1dee8 <rpc_client_msg_alloc+0x2e>
   1dec6:	2000      	movs	r0, #0
   1dec8:	bd38      	pop	{r3, r4, r5, pc}
   1deca:	f7f1 ff0d 	bl	fce8 <nrf_modem_os_shm_tx_alloc>
   1dece:	4604      	mov	r4, r0
   1ded0:	2800      	cmp	r0, #0
   1ded2:	d0f8      	beq.n	1dec6 <rpc_client_msg_alloc+0xc>
   1ded4:	f7f3 fd90 	bl	119f8 <rpc_transport_msg_alloc>
   1ded8:	b938      	cbnz	r0, 1deea <rpc_client_msg_alloc+0x30>
   1deda:	4620      	mov	r0, r4
   1dedc:	f7f1 ff1a 	bl	fd14 <nrf_modem_os_shm_tx_free>
   1dee0:	2001      	movs	r0, #1
   1dee2:	f7f1 fe9b 	bl	fc1c <nrf_modem_os_event_notify>
   1dee6:	e7ee      	b.n	1dec6 <rpc_client_msg_alloc+0xc>
   1dee8:	462c      	mov	r4, r5
   1deea:	60c5      	str	r5, [r0, #12]
   1deec:	f840 4f08 	str.w	r4, [r0, #8]!
   1def0:	e7ea      	b.n	1dec8 <rpc_client_msg_alloc+0xe>

0001def2 <rpc_client_msg_send>:
   1def2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1def6:	4610      	mov	r0, r2
   1def8:	f840 1d08 	str.w	r1, [r0, #-8]!
   1defc:	f7f3 bd8e 	b.w	11a1c <rpc_transport_msg_send>

0001df00 <rpc_client_msg_rx_free>:
   1df00:	3808      	subs	r0, #8
   1df02:	f7f3 bd7f 	b.w	11a04 <rpc_transport_msg_rx_free>

0001df06 <rpc_client_msg_data_rx_free>:
   1df06:	f7f3 bd83 	b.w	11a10 <rpc_transport_msg_data_rx_free>

0001df0a <rpc_client_msg_data_tx_alloc>:
   1df0a:	f7f1 beed 	b.w	fce8 <nrf_modem_os_shm_tx_alloc>

0001df0e <rpc_client_msg_data_tx_free>:
   1df0e:	b508      	push	{r3, lr}
   1df10:	f7f1 ff00 	bl	fd14 <nrf_modem_os_shm_tx_free>
   1df14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1df18:	2001      	movs	r0, #1
   1df1a:	f7f1 be7f 	b.w	fc1c <nrf_modem_os_event_notify>

0001df1e <sockaddr_init>:
   1df1e:	2904      	cmp	r1, #4
   1df20:	b570      	push	{r4, r5, r6, lr}
   1df22:	4605      	mov	r5, r0
   1df24:	4616      	mov	r6, r2
   1df26:	d003      	beq.n	1df30 <sockaddr_init+0x12>
   1df28:	2910      	cmp	r1, #16
   1df2a:	d012      	beq.n	1df52 <sockaddr_init+0x34>
   1df2c:	2400      	movs	r4, #0
   1df2e:	e00e      	b.n	1df4e <sockaddr_init+0x30>
   1df30:	200c      	movs	r0, #12
   1df32:	f7f1 feb5 	bl	fca0 <nrf_modem_os_alloc>
   1df36:	4604      	mov	r4, r0
   1df38:	2800      	cmp	r0, #0
   1df3a:	d0f7      	beq.n	1df2c <sockaddr_init+0xe>
   1df3c:	2200      	movs	r2, #0
   1df3e:	2301      	movs	r3, #1
   1df40:	f8c0 2006 	str.w	r2, [r0, #6]
   1df44:	8142      	strh	r2, [r0, #10]
   1df46:	6003      	str	r3, [r0, #0]
   1df48:	8086      	strh	r6, [r0, #4]
   1df4a:	682b      	ldr	r3, [r5, #0]
   1df4c:	6083      	str	r3, [r0, #8]
   1df4e:	4620      	mov	r0, r4
   1df50:	bd70      	pop	{r4, r5, r6, pc}
   1df52:	2020      	movs	r0, #32
   1df54:	f7f1 fea4 	bl	fca0 <nrf_modem_os_alloc>
   1df58:	4604      	mov	r4, r0
   1df5a:	2800      	cmp	r0, #0
   1df5c:	d0e6      	beq.n	1df2c <sockaddr_init+0xe>
   1df5e:	221a      	movs	r2, #26
   1df60:	2100      	movs	r1, #0
   1df62:	3006      	adds	r0, #6
   1df64:	f001 fcc0 	bl	1f8e8 <memset>
   1df68:	2302      	movs	r3, #2
   1df6a:	4628      	mov	r0, r5
   1df6c:	6023      	str	r3, [r4, #0]
   1df6e:	80a6      	strh	r6, [r4, #4]
   1df70:	f104 030c 	add.w	r3, r4, #12
   1df74:	f105 0210 	add.w	r2, r5, #16
   1df78:	f850 1b04 	ldr.w	r1, [r0], #4
   1df7c:	4290      	cmp	r0, r2
   1df7e:	f843 1b04 	str.w	r1, [r3], #4
   1df82:	d1f9      	bne.n	1df78 <sockaddr_init+0x5a>
   1df84:	e7e3      	b.n	1df4e <sockaddr_init+0x30>

0001df86 <sock_pollcb>:
   1df86:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1df88:	2500      	movs	r5, #0
   1df8a:	6803      	ldr	r3, [r0, #0]
   1df8c:	4604      	mov	r4, r0
   1df8e:	9300      	str	r3, [sp, #0]
   1df90:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   1df92:	4668      	mov	r0, sp
   1df94:	f8ad 5006 	strh.w	r5, [sp, #6]
   1df98:	f8ad 3004 	strh.w	r3, [sp, #4]
   1df9c:	f000 f9a2 	bl	1e2e4 <nrf_poll_one>
   1dfa0:	b138      	cbz	r0, 1dfb2 <sock_pollcb+0x2c>
   1dfa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1dfa4:	4668      	mov	r0, sp
   1dfa6:	4798      	blx	r3
   1dfa8:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1dfac:	b10b      	cbz	r3, 1dfb2 <sock_pollcb+0x2c>
   1dfae:	6365      	str	r5, [r4, #52]	; 0x34
   1dfb0:	63a5      	str	r5, [r4, #56]	; 0x38
   1dfb2:	b003      	add	sp, #12
   1dfb4:	bd30      	pop	{r4, r5, pc}

0001dfb6 <sock_pkt_append>:
   1dfb6:	2300      	movs	r3, #0
   1dfb8:	600b      	str	r3, [r1, #0]
   1dfba:	6883      	ldr	r3, [r0, #8]
   1dfbc:	b913      	cbnz	r3, 1dfc4 <sock_pkt_append+0xe>
   1dfbe:	e9c0 1101 	strd	r1, r1, [r0, #4]
   1dfc2:	4770      	bx	lr
   1dfc4:	6019      	str	r1, [r3, #0]
   1dfc6:	6081      	str	r1, [r0, #8]
   1dfc8:	4770      	bx	lr

0001dfca <sock_is_stream>:
   1dfca:	6900      	ldr	r0, [r0, #16]
   1dfcc:	1e43      	subs	r3, r0, #1
   1dfce:	4258      	negs	r0, r3
   1dfd0:	4158      	adcs	r0, r3
   1dfd2:	4770      	bx	lr

0001dfd4 <sock_is_datagram>:
   1dfd4:	6900      	ldr	r0, [r0, #16]
   1dfd6:	1e83      	subs	r3, r0, #2
   1dfd8:	4258      	negs	r0, r3
   1dfda:	4158      	adcs	r0, r3
   1dfdc:	4770      	bx	lr

0001dfde <sock_proto_is_secure>:
   1dfde:	6940      	ldr	r0, [r0, #20]
   1dfe0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1dfe4:	d005      	beq.n	1dff2 <sock_proto_is_secure+0x14>
   1dfe6:	f240 1311 	movw	r3, #273	; 0x111
   1dfea:	1ac3      	subs	r3, r0, r3
   1dfec:	4258      	negs	r0, r3
   1dfee:	4158      	adcs	r0, r3
   1dff0:	4770      	bx	lr
   1dff2:	2001      	movs	r0, #1
   1dff4:	4770      	bx	lr

0001dff6 <sock_is_attaching>:
   1dff6:	7f00      	ldrb	r0, [r0, #28]
   1dff8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1dffc:	4770      	bx	lr

0001dffe <sock_is_nonblock>:
   1dffe:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1e000:	f000 0001 	and.w	r0, r0, #1
   1e004:	4770      	bx	lr

0001e006 <sock_is_local_closed>:
   1e006:	7f00      	ldrb	r0, [r0, #28]
   1e008:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1e00c:	4770      	bx	lr

0001e00e <sock_is_eof>:
   1e00e:	6903      	ldr	r3, [r0, #16]
   1e010:	2b01      	cmp	r3, #1
   1e012:	d105      	bne.n	1e020 <sock_is_eof+0x12>
   1e014:	6980      	ldr	r0, [r0, #24]
   1e016:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   1e01a:	4258      	negs	r0, r3
   1e01c:	4158      	adcs	r0, r3
   1e01e:	4770      	bx	lr
   1e020:	2000      	movs	r0, #0
   1e022:	4770      	bx	lr

0001e024 <sock_has_stream_error>:
   1e024:	7f40      	ldrb	r0, [r0, #29]
   1e026:	f000 0001 	and.w	r0, r0, #1
   1e02a:	4770      	bx	lr

0001e02c <sock_has_error>:
   1e02c:	6983      	ldr	r3, [r0, #24]
   1e02e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   1e032:	bf14      	ite	ne
   1e034:	2001      	movne	r0, #1
   1e036:	2000      	moveq	r0, #0
   1e038:	4770      	bx	lr

0001e03a <sock_has_pollcb>:
   1e03a:	6b40      	ldr	r0, [r0, #52]	; 0x34
   1e03c:	3800      	subs	r0, #0
   1e03e:	bf18      	it	ne
   1e040:	2001      	movne	r0, #1
   1e042:	4770      	bx	lr

0001e044 <sock_can_read>:
   1e044:	6840      	ldr	r0, [r0, #4]
   1e046:	3800      	subs	r0, #0
   1e048:	bf18      	it	ne
   1e04a:	2001      	movne	r0, #1
   1e04c:	4770      	bx	lr

0001e04e <sock_can_accept>:
   1e04e:	7f80      	ldrb	r0, [r0, #30]
   1e050:	3800      	subs	r0, #0
   1e052:	bf18      	it	ne
   1e054:	2001      	movne	r0, #1
   1e056:	4770      	bx	lr

0001e058 <sock_can_send>:
   1e058:	b510      	push	{r4, lr}
   1e05a:	4602      	mov	r2, r0
   1e05c:	6904      	ldr	r4, [r0, #16]
   1e05e:	f7ff ffbe 	bl	1dfde <sock_proto_is_secure>
   1e062:	2c01      	cmp	r4, #1
   1e064:	4601      	mov	r1, r0
   1e066:	7f13      	ldrb	r3, [r2, #28]
   1e068:	d103      	bne.n	1e072 <sock_can_send+0x1a>
   1e06a:	071c      	lsls	r4, r3, #28
   1e06c:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1e070:	d50b      	bpl.n	1e08a <sock_can_send+0x32>
   1e072:	b931      	cbnz	r1, 1e082 <sock_can_send+0x2a>
   1e074:	07d9      	lsls	r1, r3, #31
   1e076:	d40b      	bmi.n	1e090 <sock_can_send+0x38>
   1e078:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1e07c:	f1c3 0001 	rsb	r0, r3, #1
   1e080:	e003      	b.n	1e08a <sock_can_send+0x32>
   1e082:	069a      	lsls	r2, r3, #26
   1e084:	f3c3 1040 	ubfx	r0, r3, #5, #1
   1e088:	d4f4      	bmi.n	1e074 <sock_can_send+0x1c>
   1e08a:	f000 0001 	and.w	r0, r0, #1
   1e08e:	bd10      	pop	{r4, pc}
   1e090:	2000      	movs	r0, #0
   1e092:	e7fa      	b.n	1e08a <sock_can_send+0x32>

0001e094 <on_conf_dnssrv_res>:
   1e094:	f000 b971 	b.w	1e37a <res_forward>

0001e098 <on_getifaddrs_res>:
   1e098:	f000 b96f 	b.w	1e37a <res_forward>

0001e09c <rpc_ip_event_handler>:
   1e09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e09e:	f248 030f 	movw	r3, #32783	; 0x800f
   1e0a2:	4299      	cmp	r1, r3
   1e0a4:	4606      	mov	r6, r0
   1e0a6:	460d      	mov	r5, r1
   1e0a8:	d03b      	beq.n	1e122 <rpc_ip_event_handler+0x86>
   1e0aa:	d822      	bhi.n	1e0f2 <rpc_ip_event_handler+0x56>
   1e0ac:	f248 030d 	movw	r3, #32781	; 0x800d
   1e0b0:	4299      	cmp	r1, r3
   1e0b2:	d02f      	beq.n	1e114 <rpc_ip_event_handler+0x78>
   1e0b4:	f248 030e 	movw	r3, #32782	; 0x800e
   1e0b8:	4299      	cmp	r1, r3
   1e0ba:	d02f      	beq.n	1e11c <rpc_ip_event_handler+0x80>
   1e0bc:	6900      	ldr	r0, [r0, #16]
   1e0be:	f7f4 f893 	bl	121e8 <sock_find>
   1e0c2:	4604      	mov	r4, r0
   1e0c4:	b308      	cbz	r0, 1e10a <rpc_ip_event_handler+0x6e>
   1e0c6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1e0ca:	d91e      	bls.n	1e10a <rpc_ip_event_handler+0x6e>
   1e0cc:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
   1e0d0:	3d01      	subs	r5, #1
   1e0d2:	2d0b      	cmp	r5, #11
   1e0d4:	d819      	bhi.n	1e10a <rpc_ip_event_handler+0x6e>
   1e0d6:	e8df f015 	tbh	[pc, r5, lsl #1]
   1e0da:	0097      	.short	0x0097
   1e0dc:	009b00ba 	.word	0x009b00ba
   1e0e0:	009b009b 	.word	0x009b009b
   1e0e4:	00f500f5 	.word	0x00f500f5
   1e0e8:	00a0009b 	.word	0x00a0009b
   1e0ec:	00180018 	.word	0x00180018
   1e0f0:	00d9      	.short	0x00d9
   1e0f2:	f249 0304 	movw	r3, #36868	; 0x9004
   1e0f6:	4299      	cmp	r1, r3
   1e0f8:	d016      	beq.n	1e128 <rpc_ip_event_handler+0x8c>
   1e0fa:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   1e0fe:	d929      	bls.n	1e154 <rpc_ip_event_handler+0xb8>
   1e100:	68c0      	ldr	r0, [r0, #12]
   1e102:	f7f4 f871 	bl	121e8 <sock_find>
   1e106:	4604      	mov	r4, r0
   1e108:	bb98      	cbnz	r0, 1e172 <rpc_ip_event_handler+0xd6>
   1e10a:	6830      	ldr	r0, [r6, #0]
   1e10c:	b1b8      	cbz	r0, 1e13e <rpc_ip_event_handler+0xa2>
   1e10e:	f7ff fefa 	bl	1df06 <rpc_client_msg_data_rx_free>
   1e112:	e014      	b.n	1e13e <rpc_ip_event_handler+0xa2>
   1e114:	f7f4 f8b8 	bl	12288 <on_getaddrinfo_res>
   1e118:	b2c0      	uxtb	r0, r0
   1e11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e11c:	f7ff ffbc 	bl	1e098 <on_getifaddrs_res>
   1e120:	e7fa      	b.n	1e118 <rpc_ip_event_handler+0x7c>
   1e122:	f7ff ffb7 	bl	1e094 <on_conf_dnssrv_res>
   1e126:	e7f7      	b.n	1e118 <rpc_ip_event_handler+0x7c>
   1e128:	6903      	ldr	r3, [r0, #16]
   1e12a:	2b04      	cmp	r3, #4
   1e12c:	d807      	bhi.n	1e13e <rpc_ip_event_handler+0xa2>
   1e12e:	e8df f003 	tbb	[pc, r3]
   1e132:	0f0a      	.short	0x0f0a
   1e134:	0803      	.short	0x0803
   1e136:	0f          	.byte	0x0f
   1e137:	00          	.byte	0x00
   1e138:	2000      	movs	r0, #0
   1e13a:	f7f4 f867 	bl	1220c <sock_rpc_flow_control_set>
   1e13e:	2000      	movs	r0, #0
   1e140:	e7eb      	b.n	1e11a <rpc_ip_event_handler+0x7e>
   1e142:	2001      	movs	r0, #1
   1e144:	e7f9      	b.n	1e13a <rpc_ip_event_handler+0x9e>
   1e146:	2100      	movs	r1, #0
   1e148:	68f0      	ldr	r0, [r6, #12]
   1e14a:	f7f4 f889 	bl	12260 <sock_apn_rate_control_set>
   1e14e:	e7f6      	b.n	1e13e <rpc_ip_event_handler+0xa2>
   1e150:	2101      	movs	r1, #1
   1e152:	e7f9      	b.n	1e148 <rpc_ip_event_handler+0xac>
   1e154:	6900      	ldr	r0, [r0, #16]
   1e156:	f7f4 f847 	bl	121e8 <sock_find>
   1e15a:	4604      	mov	r4, r0
   1e15c:	2800      	cmp	r0, #0
   1e15e:	d0d4      	beq.n	1e10a <rpc_ip_event_handler+0x6e>
   1e160:	f248 0381 	movw	r3, #32897	; 0x8081
   1e164:	429d      	cmp	r5, r3
   1e166:	d1d0      	bne.n	1e10a <rpc_ip_event_handler+0x6e>
   1e168:	4601      	mov	r1, r0
   1e16a:	4630      	mov	r0, r6
   1e16c:	f7f4 f898 	bl	122a0 <on_tls_attach_res>
   1e170:	e051      	b.n	1e216 <rpc_ip_event_handler+0x17a>
   1e172:	f249 0302 	movw	r3, #36866	; 0x9002
   1e176:	429d      	cmp	r5, r3
   1e178:	f000 80a0 	beq.w	1e2bc <rpc_ip_event_handler+0x220>
   1e17c:	d837      	bhi.n	1e1ee <rpc_ip_event_handler+0x152>
   1e17e:	f7ff ff51 	bl	1e024 <sock_has_stream_error>
   1e182:	4607      	mov	r7, r0
   1e184:	b9e0      	cbnz	r0, 1e1c0 <rpc_ip_event_handler+0x124>
   1e186:	2010      	movs	r0, #16
   1e188:	f7f1 fd8a 	bl	fca0 <nrf_modem_os_alloc>
   1e18c:	4605      	mov	r5, r0
   1e18e:	b1b8      	cbz	r0, 1e1c0 <rpc_ip_event_handler+0x124>
   1e190:	4639      	mov	r1, r7
   1e192:	2210      	movs	r2, #16
   1e194:	f001 fba8 	bl	1f8e8 <memset>
   1e198:	6833      	ldr	r3, [r6, #0]
   1e19a:	606b      	str	r3, [r5, #4]
   1e19c:	6873      	ldr	r3, [r6, #4]
   1e19e:	812b      	strh	r3, [r5, #8]
   1e1a0:	8a71      	ldrh	r1, [r6, #18]
   1e1a2:	2900      	cmp	r1, #0
   1e1a4:	f000 8099 	beq.w	1e2da <rpc_ip_event_handler+0x23e>
   1e1a8:	8a32      	ldrh	r2, [r6, #16]
   1e1aa:	f106 0014 	add.w	r0, r6, #20
   1e1ae:	f7ff feb6 	bl	1df1e <sockaddr_init>
   1e1b2:	60e8      	str	r0, [r5, #12]
   1e1b4:	2800      	cmp	r0, #0
   1e1b6:	f040 8090 	bne.w	1e2da <rpc_ip_event_handler+0x23e>
   1e1ba:	4628      	mov	r0, r5
   1e1bc:	f7f1 fd86 	bl	fccc <nrf_modem_os_free>
   1e1c0:	6830      	ldr	r0, [r6, #0]
   1e1c2:	f7ff fea0 	bl	1df06 <rpc_client_msg_data_rx_free>
   1e1c6:	4620      	mov	r0, r4
   1e1c8:	f7ff feff 	bl	1dfca <sock_is_stream>
   1e1cc:	b158      	cbz	r0, 1e1e6 <rpc_ip_event_handler+0x14a>
   1e1ce:	4620      	mov	r0, r4
   1e1d0:	f7ff ff28 	bl	1e024 <sock_has_stream_error>
   1e1d4:	b938      	cbnz	r0, 1e1e6 <rpc_ip_event_handler+0x14a>
   1e1d6:	230c      	movs	r3, #12
   1e1d8:	61a3      	str	r3, [r4, #24]
   1e1da:	8ba3      	ldrh	r3, [r4, #28]
   1e1dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1e1e0:	f043 0301 	orr.w	r3, r3, #1
   1e1e4:	83a3      	strh	r3, [r4, #28]
   1e1e6:	4620      	mov	r0, r4
   1e1e8:	f7ff fef4 	bl	1dfd4 <sock_is_datagram>
   1e1ec:	e025      	b.n	1e23a <rpc_ip_event_handler+0x19e>
   1e1ee:	f249 0303 	movw	r3, #36867	; 0x9003
   1e1f2:	429d      	cmp	r5, r3
   1e1f4:	d018      	beq.n	1e228 <rpc_ip_event_handler+0x18c>
   1e1f6:	f249 0382 	movw	r3, #36994	; 0x9082
   1e1fa:	429d      	cmp	r5, r3
   1e1fc:	d185      	bne.n	1e10a <rpc_ip_event_handler+0x6e>
   1e1fe:	4601      	mov	r1, r0
   1e200:	4630      	mov	r0, r6
   1e202:	f7f4 f861 	bl	122c8 <on_tls_handshake_ntf>
   1e206:	e006      	b.n	1e216 <rpc_ip_event_handler+0x17a>
   1e208:	6973      	ldr	r3, [r6, #20]
   1e20a:	b90b      	cbnz	r3, 1e210 <rpc_ip_event_handler+0x174>
   1e20c:	69b3      	ldr	r3, [r6, #24]
   1e20e:	6003      	str	r3, [r0, #0]
   1e210:	4630      	mov	r0, r6
   1e212:	f000 f8b2 	bl	1e37a <res_forward>
   1e216:	4605      	mov	r5, r0
   1e218:	e010      	b.n	1e23c <rpc_ip_event_handler+0x1a0>
   1e21a:	7f03      	ldrb	r3, [r0, #28]
   1e21c:	f023 0303 	bic.w	r3, r3, #3
   1e220:	f043 0303 	orr.w	r3, r3, #3
   1e224:	7703      	strb	r3, [r0, #28]
   1e226:	e7f3      	b.n	1e210 <rpc_ip_event_handler+0x174>
   1e228:	7f03      	ldrb	r3, [r0, #28]
   1e22a:	f043 0301 	orr.w	r3, r3, #1
   1e22e:	7703      	strb	r3, [r0, #28]
   1e230:	6930      	ldr	r0, [r6, #16]
   1e232:	2869      	cmp	r0, #105	; 0x69
   1e234:	d112      	bne.n	1e25c <rpc_ip_event_handler+0x1c0>
   1e236:	2368      	movs	r3, #104	; 0x68
   1e238:	61a3      	str	r3, [r4, #24]
   1e23a:	2500      	movs	r5, #0
   1e23c:	4620      	mov	r0, r4
   1e23e:	f7ff fefc 	bl	1e03a <sock_has_pollcb>
   1e242:	b110      	cbz	r0, 1e24a <rpc_ip_event_handler+0x1ae>
   1e244:	4620      	mov	r0, r4
   1e246:	f7ff fe9e 	bl	1df86 <sock_pollcb>
   1e24a:	b2e8      	uxtb	r0, r5
   1e24c:	e765      	b.n	1e11a <rpc_ip_event_handler+0x7e>
   1e24e:	7f03      	ldrb	r3, [r0, #28]
   1e250:	68f5      	ldr	r5, [r6, #12]
   1e252:	f36f 0382 	bfc	r3, #2, #1
   1e256:	7703      	strb	r3, [r0, #28]
   1e258:	6970      	ldr	r0, [r6, #20]
   1e25a:	b118      	cbz	r0, 1e264 <rpc_ip_event_handler+0x1c8>
   1e25c:	f7f4 f8c6 	bl	123ec <rpc_error_to_nrf_errno>
   1e260:	61a0      	str	r0, [r4, #24]
   1e262:	e7ea      	b.n	1e23a <rpc_ip_event_handler+0x19e>
   1e264:	4620      	mov	r0, r4
   1e266:	f7ff feba 	bl	1dfde <sock_proto_is_secure>
   1e26a:	b918      	cbnz	r0, 1e274 <rpc_ip_event_handler+0x1d8>
   1e26c:	7f23      	ldrb	r3, [r4, #28]
   1e26e:	f043 0308 	orr.w	r3, r3, #8
   1e272:	7723      	strb	r3, [r4, #28]
   1e274:	4620      	mov	r0, r4
   1e276:	f7ff feb2 	bl	1dfde <sock_proto_is_secure>
   1e27a:	2800      	cmp	r0, #0
   1e27c:	d0cb      	beq.n	1e216 <rpc_ip_event_handler+0x17a>
   1e27e:	2d00      	cmp	r5, #0
   1e280:	d0dc      	beq.n	1e23c <rpc_ip_event_handler+0x1a0>
   1e282:	2100      	movs	r1, #0
   1e284:	4620      	mov	r0, r4
   1e286:	f7f4 f839 	bl	122fc <tls_attach>
   1e28a:	e7d6      	b.n	1e23a <rpc_ip_event_handler+0x19e>
   1e28c:	7f83      	ldrb	r3, [r0, #30]
   1e28e:	3b01      	subs	r3, #1
   1e290:	7783      	strb	r3, [r0, #30]
   1e292:	6973      	ldr	r3, [r6, #20]
   1e294:	2b00      	cmp	r3, #0
   1e296:	d1bb      	bne.n	1e210 <rpc_ip_event_handler+0x174>
   1e298:	4630      	mov	r0, r6
   1e29a:	f000 f86c 	bl	1e376 <res_cookie_get>
   1e29e:	69b2      	ldr	r2, [r6, #24]
   1e2a0:	6843      	ldr	r3, [r0, #4]
   1e2a2:	601a      	str	r2, [r3, #0]
   1e2a4:	6842      	ldr	r2, [r0, #4]
   1e2a6:	7f13      	ldrb	r3, [r2, #28]
   1e2a8:	f043 0308 	orr.w	r3, r3, #8
   1e2ac:	7713      	strb	r3, [r2, #28]
   1e2ae:	6843      	ldr	r3, [r0, #4]
   1e2b0:	6922      	ldr	r2, [r4, #16]
   1e2b2:	611a      	str	r2, [r3, #16]
   1e2b4:	6843      	ldr	r3, [r0, #4]
   1e2b6:	6962      	ldr	r2, [r4, #20]
   1e2b8:	615a      	str	r2, [r3, #20]
   1e2ba:	e7a9      	b.n	1e210 <rpc_ip_event_handler+0x174>
   1e2bc:	7f83      	ldrb	r3, [r0, #30]
   1e2be:	3301      	adds	r3, #1
   1e2c0:	7783      	strb	r3, [r0, #30]
   1e2c2:	e7ba      	b.n	1e23a <rpc_ip_event_handler+0x19e>
   1e2c4:	4630      	mov	r0, r6
   1e2c6:	f000 f856 	bl	1e376 <res_cookie_get>
   1e2ca:	6973      	ldr	r3, [r6, #20]
   1e2cc:	b913      	cbnz	r3, 1e2d4 <rpc_ip_event_handler+0x238>
   1e2ce:	69b3      	ldr	r3, [r6, #24]
   1e2d0:	6043      	str	r3, [r0, #4]
   1e2d2:	e79d      	b.n	1e210 <rpc_ip_event_handler+0x174>
   1e2d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e2d8:	e7fa      	b.n	1e2d0 <rpc_ip_event_handler+0x234>
   1e2da:	4629      	mov	r1, r5
   1e2dc:	4620      	mov	r0, r4
   1e2de:	f7ff fe6a 	bl	1dfb6 <sock_pkt_append>
   1e2e2:	e7aa      	b.n	1e23a <rpc_ip_event_handler+0x19e>

0001e2e4 <nrf_poll_one>:
   1e2e4:	b538      	push	{r3, r4, r5, lr}
   1e2e6:	4604      	mov	r4, r0
   1e2e8:	6800      	ldr	r0, [r0, #0]
   1e2ea:	f7f3 ff7d 	bl	121e8 <sock_find>
   1e2ee:	4605      	mov	r5, r0
   1e2f0:	b928      	cbnz	r0, 1e2fe <nrf_poll_one+0x1a>
   1e2f2:	2001      	movs	r0, #1
   1e2f4:	88e3      	ldrh	r3, [r4, #6]
   1e2f6:	f043 0320 	orr.w	r3, r3, #32
   1e2fa:	80e3      	strh	r3, [r4, #6]
   1e2fc:	bd38      	pop	{r3, r4, r5, pc}
   1e2fe:	f7ff fe82 	bl	1e006 <sock_is_local_closed>
   1e302:	2800      	cmp	r0, #0
   1e304:	d1f5      	bne.n	1e2f2 <nrf_poll_one+0xe>
   1e306:	4628      	mov	r0, r5
   1e308:	f7ff fe90 	bl	1e02c <sock_has_error>
   1e30c:	b1f8      	cbz	r0, 1e34e <nrf_poll_one+0x6a>
   1e30e:	88e3      	ldrh	r3, [r4, #6]
   1e310:	f043 0308 	orr.w	r3, r3, #8
   1e314:	80e3      	strh	r3, [r4, #6]
   1e316:	88a3      	ldrh	r3, [r4, #4]
   1e318:	07da      	lsls	r2, r3, #31
   1e31a:	d507      	bpl.n	1e32c <nrf_poll_one+0x48>
   1e31c:	4628      	mov	r0, r5
   1e31e:	f7ff fe91 	bl	1e044 <sock_can_read>
   1e322:	b1e8      	cbz	r0, 1e360 <nrf_poll_one+0x7c>
   1e324:	88e3      	ldrh	r3, [r4, #6]
   1e326:	f043 0301 	orr.w	r3, r3, #1
   1e32a:	80e3      	strh	r3, [r4, #6]
   1e32c:	88a3      	ldrh	r3, [r4, #4]
   1e32e:	075b      	lsls	r3, r3, #29
   1e330:	d507      	bpl.n	1e342 <nrf_poll_one+0x5e>
   1e332:	4628      	mov	r0, r5
   1e334:	f7ff fe90 	bl	1e058 <sock_can_send>
   1e338:	b118      	cbz	r0, 1e342 <nrf_poll_one+0x5e>
   1e33a:	88e3      	ldrh	r3, [r4, #6]
   1e33c:	f043 0304 	orr.w	r3, r3, #4
   1e340:	80e3      	strh	r3, [r4, #6]
   1e342:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   1e346:	3800      	subs	r0, #0
   1e348:	bf18      	it	ne
   1e34a:	2001      	movne	r0, #1
   1e34c:	e7d6      	b.n	1e2fc <nrf_poll_one+0x18>
   1e34e:	4628      	mov	r0, r5
   1e350:	f7ff fe5d 	bl	1e00e <sock_is_eof>
   1e354:	2800      	cmp	r0, #0
   1e356:	d0de      	beq.n	1e316 <nrf_poll_one+0x32>
   1e358:	88e3      	ldrh	r3, [r4, #6]
   1e35a:	f043 0310 	orr.w	r3, r3, #16
   1e35e:	e7d9      	b.n	1e314 <nrf_poll_one+0x30>
   1e360:	4628      	mov	r0, r5
   1e362:	f7ff fe74 	bl	1e04e <sock_can_accept>
   1e366:	2800      	cmp	r0, #0
   1e368:	d1dc      	bne.n	1e324 <nrf_poll_one+0x40>
   1e36a:	4628      	mov	r0, r5
   1e36c:	f7ff fe4f 	bl	1e00e <sock_is_eof>
   1e370:	2800      	cmp	r0, #0
   1e372:	d1d7      	bne.n	1e324 <nrf_poll_one+0x40>
   1e374:	e7da      	b.n	1e32c <nrf_poll_one+0x48>

0001e376 <res_cookie_get>:
   1e376:	68c0      	ldr	r0, [r0, #12]
   1e378:	4770      	bx	lr

0001e37a <res_forward>:
   1e37a:	68c3      	ldr	r3, [r0, #12]
   1e37c:	6018      	str	r0, [r3, #0]
   1e37e:	2001      	movs	r0, #1
   1e380:	4770      	bx	lr

0001e382 <rpc_dfu_event_handler>:
   1e382:	b510      	push	{r4, lr}
   1e384:	4604      	mov	r4, r0
   1e386:	6800      	ldr	r0, [r0, #0]
   1e388:	b108      	cbz	r0, 1e38e <rpc_dfu_event_handler+0xc>
   1e38a:	f7ff fdbc 	bl	1df06 <rpc_client_msg_data_rx_free>
   1e38e:	68e0      	ldr	r0, [r4, #12]
   1e390:	b108      	cbz	r0, 1e396 <rpc_dfu_event_handler+0x14>
   1e392:	6004      	str	r4, [r0, #0]
   1e394:	2001      	movs	r0, #1
   1e396:	bd10      	pop	{r4, pc}

0001e398 <nrf_modem_is_initialized>:
   1e398:	f7f4 b8f0 	b.w	1257c <nrf_modem_state_is_initialized>

0001e39c <z_impl_k_busy_wait>:
#include <zephyr/drivers/timer/system_timer.h>
#include <zephyr/sys_clock.h>
#include <kernel_arch_interface.h>

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
   1e39c:	b580      	push	{r7, lr}
   1e39e:	b082      	sub	sp, #8
   1e3a0:	af00      	add	r7, sp, #0
   1e3a2:	6078      	str	r0, [r7, #4]
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1e3a4:	687b      	ldr	r3, [r7, #4]
   1e3a6:	2b00      	cmp	r3, #0
   1e3a8:	d003      	beq.n	1e3b2 <z_impl_k_busy_wait+0x16>
		SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
		return;
	}

#if defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	arch_busy_wait(usec_to_wait);
   1e3aa:	6878      	ldr	r0, [r7, #4]
   1e3ac:	f7fb fe1a 	bl	19fe4 <arch_busy_wait>
   1e3b0:	e000      	b.n	1e3b4 <z_impl_k_busy_wait+0x18>
		return;
   1e3b2:	bf00      	nop
		arch_nop();
	}
#endif

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1e3b4:	3708      	adds	r7, #8
   1e3b6:	46bd      	mov	sp, r7
   1e3b8:	bd80      	pop	{r7, pc}

0001e3ba <z_object_init>:

/**
 * @internal
 */
static inline void z_object_init(const void *obj)
{
   1e3ba:	b480      	push	{r7}
   1e3bc:	b083      	sub	sp, #12
   1e3be:	af00      	add	r7, sp, #0
   1e3c0:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(obj);
}
   1e3c2:	bf00      	nop
   1e3c4:	370c      	adds	r7, #12
   1e3c6:	46bd      	mov	sp, r7
   1e3c8:	bc80      	pop	{r7}
   1e3ca:	4770      	bx	lr

0001e3cc <z_device_is_ready>:

	return cnt;
}

bool z_device_is_ready(const struct device *dev)
{
   1e3cc:	b480      	push	{r7}
   1e3ce:	b083      	sub	sp, #12
   1e3d0:	af00      	add	r7, sp, #0
   1e3d2:	6078      	str	r0, [r7, #4]
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1e3d4:	687b      	ldr	r3, [r7, #4]
   1e3d6:	2b00      	cmp	r3, #0
   1e3d8:	d101      	bne.n	1e3de <z_device_is_ready+0x12>
		return false;
   1e3da:	2300      	movs	r3, #0
   1e3dc:	e012      	b.n	1e404 <z_device_is_ready+0x38>
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1e3de:	687b      	ldr	r3, [r7, #4]
   1e3e0:	68db      	ldr	r3, [r3, #12]
   1e3e2:	785b      	ldrb	r3, [r3, #1]
   1e3e4:	f003 0301 	and.w	r3, r3, #1
   1e3e8:	b2db      	uxtb	r3, r3
   1e3ea:	2b00      	cmp	r3, #0
   1e3ec:	d006      	beq.n	1e3fc <z_device_is_ready+0x30>
   1e3ee:	687b      	ldr	r3, [r7, #4]
   1e3f0:	68db      	ldr	r3, [r3, #12]
   1e3f2:	781b      	ldrb	r3, [r3, #0]
   1e3f4:	2b00      	cmp	r3, #0
   1e3f6:	d101      	bne.n	1e3fc <z_device_is_ready+0x30>
   1e3f8:	2301      	movs	r3, #1
   1e3fa:	e000      	b.n	1e3fe <z_device_is_ready+0x32>
   1e3fc:	2300      	movs	r3, #0
   1e3fe:	f003 0301 	and.w	r3, r3, #1
   1e402:	b2db      	uxtb	r3, r3
}
   1e404:	4618      	mov	r0, r3
   1e406:	370c      	adds	r7, #12
   1e408:	46bd      	mov	sp, r7
   1e40a:	bc80      	pop	{r7}
   1e40c:	4770      	bx	lr

0001e40e <k_thread_abort>:
{
   1e40e:	b580      	push	{r7, lr}
   1e410:	b082      	sub	sp, #8
   1e412:	af00      	add	r7, sp, #0
   1e414:	6078      	str	r0, [r7, #4]
	z_impl_k_thread_abort(thread);
   1e416:	6878      	ldr	r0, [r7, #4]
   1e418:	f7ec ff8a 	bl	b330 <z_impl_k_thread_abort>
}
   1e41c:	bf00      	nop
   1e41e:	3708      	adds	r7, #8
   1e420:	46bd      	mov	sp, r7
   1e422:	bd80      	pop	{r7, pc}

0001e424 <coredump>:

#else

void coredump(unsigned int reason, const z_arch_esf_t *esf,
	      struct k_thread *thread)
{
   1e424:	b480      	push	{r7}
   1e426:	b085      	sub	sp, #20
   1e428:	af00      	add	r7, sp, #0
   1e42a:	60f8      	str	r0, [r7, #12]
   1e42c:	60b9      	str	r1, [r7, #8]
   1e42e:	607a      	str	r2, [r7, #4]
	ARG_UNUSED(reason);
	ARG_UNUSED(esf);
	ARG_UNUSED(thread);
}
   1e430:	bf00      	nop
   1e432:	3714      	adds	r7, #20
   1e434:	46bd      	mov	sp, r7
   1e436:	bc80      	pop	{r7}
   1e438:	4770      	bx	lr

0001e43a <arch_system_halt>:
{
   1e43a:	b480      	push	{r7}
   1e43c:	b085      	sub	sp, #20
   1e43e:	af00      	add	r7, sp, #0
   1e440:	6078      	str	r0, [r7, #4]
	__asm__ volatile(
   1e442:	f04f 0320 	mov.w	r3, #32
   1e446:	f3ef 8211 	mrs	r2, BASEPRI
   1e44a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e44e:	f3bf 8f6f 	isb	sy
   1e452:	60fa      	str	r2, [r7, #12]
   1e454:	60bb      	str	r3, [r7, #8]
	for (;;) {
   1e456:	bf00      	nop
   1e458:	e7fd      	b.n	1e456 <arch_system_halt+0x1c>

0001e45a <get_cpu>:
{
   1e45a:	b480      	push	{r7}
   1e45c:	af00      	add	r7, sp, #0
	return 0;
   1e45e:	2300      	movs	r3, #0
}
   1e460:	4618      	mov	r0, r3
   1e462:	46bd      	mov	sp, r7
   1e464:	bc80      	pop	{r7}
   1e466:	4770      	bx	lr

0001e468 <atomic_add>:
{
   1e468:	b490      	push	{r4, r7}
   1e46a:	b082      	sub	sp, #8
   1e46c:	af00      	add	r7, sp, #0
   1e46e:	6078      	str	r0, [r7, #4]
   1e470:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1e472:	683a      	ldr	r2, [r7, #0]
   1e474:	687b      	ldr	r3, [r7, #4]
   1e476:	e8d3 1fef 	ldaex	r1, [r3]
   1e47a:	eb01 0002 	add.w	r0, r1, r2
   1e47e:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1e482:	2c00      	cmp	r4, #0
   1e484:	d1f7      	bne.n	1e476 <atomic_add+0xe>
   1e486:	460b      	mov	r3, r1
}
   1e488:	4618      	mov	r0, r3
   1e48a:	3708      	adds	r7, #8
   1e48c:	46bd      	mov	sp, r7
   1e48e:	bc90      	pop	{r4, r7}
   1e490:	4770      	bx	lr

0001e492 <atomic_inc>:
{
   1e492:	b580      	push	{r7, lr}
   1e494:	b082      	sub	sp, #8
   1e496:	af00      	add	r7, sp, #0
   1e498:	6078      	str	r0, [r7, #4]
	return atomic_add(target, 1);
   1e49a:	2101      	movs	r1, #1
   1e49c:	6878      	ldr	r0, [r7, #4]
   1e49e:	f7ff ffe3 	bl	1e468 <atomic_add>
   1e4a2:	4603      	mov	r3, r0
}
   1e4a4:	4618      	mov	r0, r3
   1e4a6:	3708      	adds	r7, #8
   1e4a8:	46bd      	mov	sp, r7
   1e4aa:	bd80      	pop	{r7, pc}

0001e4ac <Z_KERNEL_STACK_BUFFER>:
#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
   1e4ac:	b480      	push	{r7}
   1e4ae:	b083      	sub	sp, #12
   1e4b0:	af00      	add	r7, sp, #0
   1e4b2:	6078      	str	r0, [r7, #4]
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1e4b4:	687b      	ldr	r3, [r7, #4]
}
   1e4b6:	4618      	mov	r0, r3
   1e4b8:	370c      	adds	r7, #12
   1e4ba:	46bd      	mov	sp, r7
   1e4bc:	bc80      	pop	{r7}
   1e4be:	4770      	bx	lr

0001e4c0 <z_mark_thread_as_started>:
{
   1e4c0:	b480      	push	{r7}
   1e4c2:	b083      	sub	sp, #12
   1e4c4:	af00      	add	r7, sp, #0
   1e4c6:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e4c8:	687b      	ldr	r3, [r7, #4]
   1e4ca:	7b5b      	ldrb	r3, [r3, #13]
   1e4cc:	f023 0304 	bic.w	r3, r3, #4
   1e4d0:	b2da      	uxtb	r2, r3
   1e4d2:	687b      	ldr	r3, [r7, #4]
   1e4d4:	735a      	strb	r2, [r3, #13]
}
   1e4d6:	bf00      	nop
   1e4d8:	370c      	adds	r7, #12
   1e4da:	46bd      	mov	sp, r7
   1e4dc:	bc80      	pop	{r7}
   1e4de:	4770      	bx	lr

0001e4e0 <gcov_static_init>:
#ifdef CONFIG_COVERAGE_GCOV
void gcov_coverage_dump(void);
void gcov_static_init(void);
#else
static inline void gcov_coverage_dump(void) { }
static inline void gcov_static_init(void) { }
   1e4e0:	b480      	push	{r7}
   1e4e2:	af00      	add	r7, sp, #0
   1e4e4:	bf00      	nop
   1e4e6:	46bd      	mov	sp, r7
   1e4e8:	bc80      	pop	{r7}
   1e4ea:	4770      	bx	lr

0001e4ec <pm_device_runtime_auto_enable>:
{
   1e4ec:	b480      	push	{r7}
   1e4ee:	b083      	sub	sp, #12
   1e4f0:	af00      	add	r7, sp, #0
   1e4f2:	6078      	str	r0, [r7, #4]
	return 0;
   1e4f4:	2300      	movs	r3, #0
}
   1e4f6:	4618      	mov	r0, r3
   1e4f8:	370c      	adds	r7, #12
   1e4fa:	46bd      	mov	sp, r7
   1e4fc:	bc80      	pop	{r7}
   1e4fe:	4770      	bx	lr

0001e500 <z_early_memset>:
{
   1e500:	b580      	push	{r7, lr}
   1e502:	b084      	sub	sp, #16
   1e504:	af00      	add	r7, sp, #0
   1e506:	60f8      	str	r0, [r7, #12]
   1e508:	60b9      	str	r1, [r7, #8]
   1e50a:	607a      	str	r2, [r7, #4]
	(void) memset(dst, c, n);
   1e50c:	687a      	ldr	r2, [r7, #4]
   1e50e:	68b9      	ldr	r1, [r7, #8]
   1e510:	68f8      	ldr	r0, [r7, #12]
   1e512:	f001 f9e9 	bl	1f8e8 <memset>
}
   1e516:	bf00      	nop
   1e518:	3710      	adds	r7, #16
   1e51a:	46bd      	mov	sp, r7
   1e51c:	bd80      	pop	{r7, pc}

0001e51e <z_early_memcpy>:
{
   1e51e:	b580      	push	{r7, lr}
   1e520:	b084      	sub	sp, #16
   1e522:	af00      	add	r7, sp, #0
   1e524:	60f8      	str	r0, [r7, #12]
   1e526:	60b9      	str	r1, [r7, #8]
   1e528:	607a      	str	r2, [r7, #4]
	(void) memcpy(dst, src, n);
   1e52a:	687a      	ldr	r2, [r7, #4]
   1e52c:	68b9      	ldr	r1, [r7, #8]
   1e52e:	68f8      	ldr	r0, [r7, #12]
   1e530:	f001 f9cd 	bl	1f8ce <__aeabi_memcpy>
}
   1e534:	bf00      	nop
   1e536:	3710      	adds	r7, #16
   1e538:	46bd      	mov	sp, r7
   1e53a:	bd80      	pop	{r7, pc}

0001e53c <sys_dlist_init>:
 *
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
   1e53c:	b480      	push	{r7}
   1e53e:	b083      	sub	sp, #12
   1e540:	af00      	add	r7, sp, #0
   1e542:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   1e544:	687b      	ldr	r3, [r7, #4]
   1e546:	687a      	ldr	r2, [r7, #4]
   1e548:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1e54a:	687b      	ldr	r3, [r7, #4]
   1e54c:	687a      	ldr	r2, [r7, #4]
   1e54e:	605a      	str	r2, [r3, #4]
}
   1e550:	bf00      	nop
   1e552:	370c      	adds	r7, #12
   1e554:	46bd      	mov	sp, r7
   1e556:	bc80      	pop	{r7}
   1e558:	4770      	bx	lr

0001e55a <z_waitq_init>:
#define _WAIT_Q_FOR_EACH(wq, thread_ptr) \
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
   1e55a:	b580      	push	{r7, lr}
   1e55c:	b082      	sub	sp, #8
   1e55e:	af00      	add	r7, sp, #0
   1e560:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   1e562:	687b      	ldr	r3, [r7, #4]
   1e564:	4618      	mov	r0, r3
   1e566:	f7ff ffe9 	bl	1e53c <sys_dlist_init>
}
   1e56a:	bf00      	nop
   1e56c:	3708      	adds	r7, #8
   1e56e:	46bd      	mov	sp, r7
   1e570:	bd80      	pop	{r7, pc}

0001e572 <k_heap_init>:
{
   1e572:	b580      	push	{r7, lr}
   1e574:	b084      	sub	sp, #16
   1e576:	af00      	add	r7, sp, #0
   1e578:	60f8      	str	r0, [r7, #12]
   1e57a:	60b9      	str	r1, [r7, #8]
   1e57c:	607a      	str	r2, [r7, #4]
	z_waitq_init(&h->wait_q);
   1e57e:	68fb      	ldr	r3, [r7, #12]
   1e580:	330c      	adds	r3, #12
   1e582:	4618      	mov	r0, r3
   1e584:	f7ff ffe9 	bl	1e55a <z_waitq_init>
	sys_heap_init(&h->heap, mem, bytes);
   1e588:	68fb      	ldr	r3, [r7, #12]
   1e58a:	687a      	ldr	r2, [r7, #4]
   1e58c:	68b9      	ldr	r1, [r7, #8]
   1e58e:	4618      	mov	r0, r3
   1e590:	f7eb f8e2 	bl	9758 <sys_heap_init>
}
   1e594:	bf00      	nop
   1e596:	3710      	adds	r7, #16
   1e598:	46bd      	mov	sp, r7
   1e59a:	bd80      	pop	{r7, pc}

0001e59c <k_heap_alloc>:
{
   1e59c:	b580      	push	{r7, lr}
   1e59e:	b088      	sub	sp, #32
   1e5a0:	af02      	add	r7, sp, #8
   1e5a2:	60f8      	str	r0, [r7, #12]
   1e5a4:	60b9      	str	r1, [r7, #8]
   1e5a6:	e9c7 2300 	strd	r2, r3, [r7]
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   1e5aa:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e5ae:	e9cd 2300 	strd	r2, r3, [sp]
   1e5b2:	68ba      	ldr	r2, [r7, #8]
   1e5b4:	2104      	movs	r1, #4
   1e5b6:	68f8      	ldr	r0, [r7, #12]
   1e5b8:	f7f4 fc10 	bl	12ddc <k_heap_aligned_alloc>
   1e5bc:	6178      	str	r0, [r7, #20]
	return ret;
   1e5be:	697b      	ldr	r3, [r7, #20]
}
   1e5c0:	4618      	mov	r0, r3
   1e5c2:	3718      	adds	r7, #24
   1e5c4:	46bd      	mov	sp, r7
   1e5c6:	bd80      	pop	{r7, pc}

0001e5c8 <sys_dlist_init>:
{
   1e5c8:	b480      	push	{r7}
   1e5ca:	b083      	sub	sp, #12
   1e5cc:	af00      	add	r7, sp, #0
   1e5ce:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   1e5d0:	687b      	ldr	r3, [r7, #4]
   1e5d2:	687a      	ldr	r2, [r7, #4]
   1e5d4:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1e5d6:	687b      	ldr	r3, [r7, #4]
   1e5d8:	687a      	ldr	r2, [r7, #4]
   1e5da:	605a      	str	r2, [r3, #4]
}
   1e5dc:	bf00      	nop
   1e5de:	370c      	adds	r7, #12
   1e5e0:	46bd      	mov	sp, r7
   1e5e2:	bc80      	pop	{r7}
   1e5e4:	4770      	bx	lr

0001e5e6 <sys_dnode_init>:
 *
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
   1e5e6:	b480      	push	{r7}
   1e5e8:	b083      	sub	sp, #12
   1e5ea:	af00      	add	r7, sp, #0
   1e5ec:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   1e5ee:	687b      	ldr	r3, [r7, #4]
   1e5f0:	2200      	movs	r2, #0
   1e5f2:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   1e5f4:	687b      	ldr	r3, [r7, #4]
   1e5f6:	2200      	movs	r2, #0
   1e5f8:	605a      	str	r2, [r3, #4]
}
   1e5fa:	bf00      	nop
   1e5fc:	370c      	adds	r7, #12
   1e5fe:	46bd      	mov	sp, r7
   1e600:	bc80      	pop	{r7}
   1e602:	4770      	bx	lr

0001e604 <Z_KERNEL_STACK_BUFFER>:
{
   1e604:	b480      	push	{r7}
   1e606:	b083      	sub	sp, #12
   1e608:	af00      	add	r7, sp, #0
   1e60a:	6078      	str	r0, [r7, #4]
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1e60c:	687b      	ldr	r3, [r7, #4]
}
   1e60e:	4618      	mov	r0, r3
   1e610:	370c      	adds	r7, #12
   1e612:	46bd      	mov	sp, r7
   1e614:	bc80      	pop	{r7}
   1e616:	4770      	bx	lr

0001e618 <k_thread_start>:
{
   1e618:	b580      	push	{r7, lr}
   1e61a:	b082      	sub	sp, #8
   1e61c:	af00      	add	r7, sp, #0
   1e61e:	6078      	str	r0, [r7, #4]
	z_impl_k_thread_start(thread);
   1e620:	6878      	ldr	r0, [r7, #4]
   1e622:	f000 f845 	bl	1e6b0 <z_impl_k_thread_start>
}
   1e626:	bf00      	nop
   1e628:	3708      	adds	r7, #8
   1e62a:	46bd      	mov	sp, r7
   1e62c:	bd80      	pop	{r7, pc}

0001e62e <z_init_timeout>:
{
   1e62e:	b580      	push	{r7, lr}
   1e630:	b082      	sub	sp, #8
   1e632:	af00      	add	r7, sp, #0
   1e634:	6078      	str	r0, [r7, #4]
	sys_dnode_init(&to->node);
   1e636:	687b      	ldr	r3, [r7, #4]
   1e638:	4618      	mov	r0, r3
   1e63a:	f7ff ffd4 	bl	1e5e6 <sys_dnode_init>
}
   1e63e:	bf00      	nop
   1e640:	3708      	adds	r7, #8
   1e642:	46bd      	mov	sp, r7
   1e644:	bd80      	pop	{r7, pc}

0001e646 <z_init_thread_timeout>:
{
   1e646:	b580      	push	{r7, lr}
   1e648:	b082      	sub	sp, #8
   1e64a:	af00      	add	r7, sp, #0
   1e64c:	6078      	str	r0, [r7, #4]
	z_init_timeout(&thread_base->timeout);
   1e64e:	687b      	ldr	r3, [r7, #4]
   1e650:	3318      	adds	r3, #24
   1e652:	4618      	mov	r0, r3
   1e654:	f7ff ffeb 	bl	1e62e <z_init_timeout>
}
   1e658:	bf00      	nop
   1e65a:	3708      	adds	r7, #8
   1e65c:	46bd      	mov	sp, r7
   1e65e:	bd80      	pop	{r7, pc}

0001e660 <z_waitq_init>:
{
   1e660:	b580      	push	{r7, lr}
   1e662:	b082      	sub	sp, #8
   1e664:	af00      	add	r7, sp, #0
   1e666:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   1e668:	687b      	ldr	r3, [r7, #4]
   1e66a:	4618      	mov	r0, r3
   1e66c:	f7ff ffac 	bl	1e5c8 <sys_dlist_init>
}
   1e670:	bf00      	nop
   1e672:	3708      	adds	r7, #8
   1e674:	46bd      	mov	sp, r7
   1e676:	bd80      	pop	{r7, pc}

0001e678 <k_is_in_isr>:
{
   1e678:	b480      	push	{r7}
   1e67a:	b083      	sub	sp, #12
   1e67c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e67e:	f3ef 8305 	mrs	r3, IPSR
   1e682:	607b      	str	r3, [r7, #4]
  return(result);
   1e684:	687b      	ldr	r3, [r7, #4]
   1e686:	2b00      	cmp	r3, #0
   1e688:	bf14      	ite	ne
   1e68a:	2301      	movne	r3, #1
   1e68c:	2300      	moveq	r3, #0
   1e68e:	b2db      	uxtb	r3, r3
}
   1e690:	4618      	mov	r0, r3
   1e692:	370c      	adds	r7, #12
   1e694:	46bd      	mov	sp, r7
   1e696:	bc80      	pop	{r7}
   1e698:	4770      	bx	lr

0001e69a <k_thread_name_get>:
{
   1e69a:	b480      	push	{r7}
   1e69c:	b083      	sub	sp, #12
   1e69e:	af00      	add	r7, sp, #0
   1e6a0:	6078      	str	r0, [r7, #4]
	return (const char *)thread->name;
   1e6a2:	687b      	ldr	r3, [r7, #4]
   1e6a4:	3360      	adds	r3, #96	; 0x60
}
   1e6a6:	4618      	mov	r0, r3
   1e6a8:	370c      	adds	r7, #12
   1e6aa:	46bd      	mov	sp, r7
   1e6ac:	bc80      	pop	{r7}
   1e6ae:	4770      	bx	lr

0001e6b0 <z_impl_k_thread_start>:
{
   1e6b0:	b580      	push	{r7, lr}
   1e6b2:	b082      	sub	sp, #8
   1e6b4:	af00      	add	r7, sp, #0
   1e6b6:	6078      	str	r0, [r7, #4]
	z_sched_start(thread);
   1e6b8:	6878      	ldr	r0, [r7, #4]
   1e6ba:	f7f6 fd81 	bl	151c0 <z_sched_start>
}
   1e6be:	bf00      	nop
   1e6c0:	3708      	adds	r7, #8
   1e6c2:	46bd      	mov	sp, r7
   1e6c4:	bd80      	pop	{r7, pc}

0001e6c6 <schedule_new_thread>:
{
   1e6c6:	b580      	push	{r7, lr}
   1e6c8:	b084      	sub	sp, #16
   1e6ca:	af00      	add	r7, sp, #0
   1e6cc:	60f8      	str	r0, [r7, #12]
   1e6ce:	e9c7 2300 	strd	r2, r3, [r7]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e6d2:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e6d6:	f04f 0000 	mov.w	r0, #0
   1e6da:	f04f 0100 	mov.w	r1, #0
   1e6de:	428b      	cmp	r3, r1
   1e6e0:	bf08      	it	eq
   1e6e2:	4282      	cmpeq	r2, r0
   1e6e4:	d103      	bne.n	1e6ee <schedule_new_thread+0x28>
		k_thread_start(thread);
   1e6e6:	68f8      	ldr	r0, [r7, #12]
   1e6e8:	f7ff ff96 	bl	1e618 <k_thread_start>
   1e6ec:	e004      	b.n	1e6f8 <schedule_new_thread+0x32>
		z_add_thread_timeout(thread, delay);
   1e6ee:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e6f2:	68f8      	ldr	r0, [r7, #12]
   1e6f4:	f7f4 ff58 	bl	135a8 <z_add_thread_timeout>
}
   1e6f8:	bf00      	nop
   1e6fa:	3710      	adds	r7, #16
   1e6fc:	46bd      	mov	sp, r7
   1e6fe:	bd80      	pop	{r7, pc}

0001e700 <z_init_thread_base>:
{
   1e700:	b580      	push	{r7, lr}
   1e702:	b084      	sub	sp, #16
   1e704:	af00      	add	r7, sp, #0
   1e706:	60f8      	str	r0, [r7, #12]
   1e708:	60b9      	str	r1, [r7, #8]
   1e70a:	607a      	str	r2, [r7, #4]
   1e70c:	603b      	str	r3, [r7, #0]
	thread_base->pended_on = NULL;
   1e70e:	68fb      	ldr	r3, [r7, #12]
   1e710:	2200      	movs	r2, #0
   1e712:	609a      	str	r2, [r3, #8]
	thread_base->user_options = (uint8_t)options;
   1e714:	683b      	ldr	r3, [r7, #0]
   1e716:	b2da      	uxtb	r2, r3
   1e718:	68fb      	ldr	r3, [r7, #12]
   1e71a:	731a      	strb	r2, [r3, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1e71c:	687b      	ldr	r3, [r7, #4]
   1e71e:	b2da      	uxtb	r2, r3
   1e720:	68fb      	ldr	r3, [r7, #12]
   1e722:	735a      	strb	r2, [r3, #13]
	thread_base->prio = priority;
   1e724:	68bb      	ldr	r3, [r7, #8]
   1e726:	b25a      	sxtb	r2, r3
   1e728:	68fb      	ldr	r3, [r7, #12]
   1e72a:	739a      	strb	r2, [r3, #14]
	thread_base->sched_locked = 0U;
   1e72c:	68fb      	ldr	r3, [r7, #12]
   1e72e:	2200      	movs	r2, #0
   1e730:	73da      	strb	r2, [r3, #15]
	z_init_thread_timeout(thread_base);
   1e732:	68f8      	ldr	r0, [r7, #12]
   1e734:	f7ff ff87 	bl	1e646 <z_init_thread_timeout>
}
   1e738:	bf00      	nop
   1e73a:	3710      	adds	r7, #16
   1e73c:	46bd      	mov	sp, r7
   1e73e:	bd80      	pop	{r7, pc}

0001e740 <k_cpu_idle>:
{
   1e740:	b580      	push	{r7, lr}
   1e742:	af00      	add	r7, sp, #0
	arch_cpu_idle();
   1e744:	f7eb fd88 	bl	a258 <arch_cpu_idle>
}
   1e748:	bf00      	nop
   1e74a:	bd80      	pop	{r7, pc}

0001e74c <sys_dnode_is_linked>:
 *
 * @return true if node is linked into a list, false if it is not
 */

static inline bool sys_dnode_is_linked(const sys_dnode_t *node)
{
   1e74c:	b480      	push	{r7}
   1e74e:	b083      	sub	sp, #12
   1e750:	af00      	add	r7, sp, #0
   1e752:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   1e754:	687b      	ldr	r3, [r7, #4]
   1e756:	681b      	ldr	r3, [r3, #0]
   1e758:	2b00      	cmp	r3, #0
   1e75a:	bf14      	ite	ne
   1e75c:	2301      	movne	r3, #1
   1e75e:	2300      	moveq	r3, #0
   1e760:	b2db      	uxtb	r3, r3
}
   1e762:	4618      	mov	r0, r3
   1e764:	370c      	adds	r7, #12
   1e766:	46bd      	mov	sp, r7
   1e768:	bc80      	pop	{r7}
   1e76a:	4770      	bx	lr

0001e76c <sys_dlist_is_empty>:
 *
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
   1e76c:	b480      	push	{r7}
   1e76e:	b083      	sub	sp, #12
   1e770:	af00      	add	r7, sp, #0
   1e772:	6078      	str	r0, [r7, #4]
	return list->head == list;
   1e774:	687b      	ldr	r3, [r7, #4]
   1e776:	681b      	ldr	r3, [r3, #0]
   1e778:	687a      	ldr	r2, [r7, #4]
   1e77a:	429a      	cmp	r2, r3
   1e77c:	bf0c      	ite	eq
   1e77e:	2301      	moveq	r3, #1
   1e780:	2300      	movne	r3, #0
   1e782:	b2db      	uxtb	r3, r3
}
   1e784:	4618      	mov	r0, r3
   1e786:	370c      	adds	r7, #12
   1e788:	46bd      	mov	sp, r7
   1e78a:	bc80      	pop	{r7}
   1e78c:	4770      	bx	lr

0001e78e <sys_dlist_peek_head>:
 *
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
   1e78e:	b580      	push	{r7, lr}
   1e790:	b082      	sub	sp, #8
   1e792:	af00      	add	r7, sp, #0
   1e794:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e796:	6878      	ldr	r0, [r7, #4]
   1e798:	f7ff ffe8 	bl	1e76c <sys_dlist_is_empty>
   1e79c:	4603      	mov	r3, r0
   1e79e:	2b00      	cmp	r3, #0
   1e7a0:	d102      	bne.n	1e7a8 <sys_dlist_peek_head+0x1a>
   1e7a2:	687b      	ldr	r3, [r7, #4]
   1e7a4:	681b      	ldr	r3, [r3, #0]
   1e7a6:	e000      	b.n	1e7aa <sys_dlist_peek_head+0x1c>
   1e7a8:	2300      	movs	r3, #0
}
   1e7aa:	4618      	mov	r0, r3
   1e7ac:	3708      	adds	r7, #8
   1e7ae:	46bd      	mov	sp, r7
   1e7b0:	bd80      	pop	{r7, pc}

0001e7b2 <z_is_inactive_timeout>:
{
   1e7b2:	b580      	push	{r7, lr}
   1e7b4:	b082      	sub	sp, #8
   1e7b6:	af00      	add	r7, sp, #0
   1e7b8:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&to->node);
   1e7ba:	687b      	ldr	r3, [r7, #4]
   1e7bc:	4618      	mov	r0, r3
   1e7be:	f7ff ffc5 	bl	1e74c <sys_dnode_is_linked>
   1e7c2:	4603      	mov	r3, r0
   1e7c4:	2b00      	cmp	r3, #0
   1e7c6:	bf14      	ite	ne
   1e7c8:	2301      	movne	r3, #1
   1e7ca:	2300      	moveq	r3, #0
   1e7cc:	b2db      	uxtb	r3, r3
   1e7ce:	f083 0301 	eor.w	r3, r3, #1
   1e7d2:	b2db      	uxtb	r3, r3
   1e7d4:	f003 0301 	and.w	r3, r3, #1
   1e7d8:	b2db      	uxtb	r3, r3
}
   1e7da:	4618      	mov	r0, r3
   1e7dc:	3708      	adds	r7, #8
   1e7de:	46bd      	mov	sp, r7
   1e7e0:	bd80      	pop	{r7, pc}

0001e7e2 <z_is_thread_prevented_from_running>:
{
   1e7e2:	b480      	push	{r7}
   1e7e4:	b085      	sub	sp, #20
   1e7e6:	af00      	add	r7, sp, #0
   1e7e8:	6078      	str	r0, [r7, #4]
	uint8_t state = thread->base.thread_state;
   1e7ea:	687b      	ldr	r3, [r7, #4]
   1e7ec:	7b5b      	ldrb	r3, [r3, #13]
   1e7ee:	73fb      	strb	r3, [r7, #15]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   1e7f0:	7bfb      	ldrb	r3, [r7, #15]
   1e7f2:	f003 031f 	and.w	r3, r3, #31
			 _THREAD_DUMMY | _THREAD_SUSPENDED)) != 0U;
   1e7f6:	2b00      	cmp	r3, #0
   1e7f8:	bf14      	ite	ne
   1e7fa:	2301      	movne	r3, #1
   1e7fc:	2300      	moveq	r3, #0
   1e7fe:	b2db      	uxtb	r3, r3
}
   1e800:	4618      	mov	r0, r3
   1e802:	3714      	adds	r7, #20
   1e804:	46bd      	mov	sp, r7
   1e806:	bc80      	pop	{r7}
   1e808:	4770      	bx	lr

0001e80a <z_is_thread_timeout_active>:
{
   1e80a:	b580      	push	{r7, lr}
   1e80c:	b082      	sub	sp, #8
   1e80e:	af00      	add	r7, sp, #0
   1e810:	6078      	str	r0, [r7, #4]
	return !z_is_inactive_timeout(&thread->base.timeout);
   1e812:	687b      	ldr	r3, [r7, #4]
   1e814:	3318      	adds	r3, #24
   1e816:	4618      	mov	r0, r3
   1e818:	f7ff ffcb 	bl	1e7b2 <z_is_inactive_timeout>
   1e81c:	4603      	mov	r3, r0
   1e81e:	2b00      	cmp	r3, #0
   1e820:	bf14      	ite	ne
   1e822:	2301      	movne	r3, #1
   1e824:	2300      	moveq	r3, #0
   1e826:	b2db      	uxtb	r3, r3
   1e828:	f083 0301 	eor.w	r3, r3, #1
   1e82c:	b2db      	uxtb	r3, r3
   1e82e:	f003 0301 	and.w	r3, r3, #1
   1e832:	b2db      	uxtb	r3, r3
}
   1e834:	4618      	mov	r0, r3
   1e836:	3708      	adds	r7, #8
   1e838:	46bd      	mov	sp, r7
   1e83a:	bd80      	pop	{r7, pc}

0001e83c <z_is_thread_ready>:
{
   1e83c:	b580      	push	{r7, lr}
   1e83e:	b082      	sub	sp, #8
   1e840:	af00      	add	r7, sp, #0
   1e842:	6078      	str	r0, [r7, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e844:	6878      	ldr	r0, [r7, #4]
   1e846:	f7ff ffcc 	bl	1e7e2 <z_is_thread_prevented_from_running>
   1e84a:	4603      	mov	r3, r0
   1e84c:	f083 0301 	eor.w	r3, r3, #1
   1e850:	b2db      	uxtb	r3, r3
   1e852:	2b00      	cmp	r3, #0
   1e854:	d00a      	beq.n	1e86c <z_is_thread_ready+0x30>
		 z_is_thread_timeout_active(thread));
   1e856:	6878      	ldr	r0, [r7, #4]
   1e858:	f7ff ffd7 	bl	1e80a <z_is_thread_timeout_active>
   1e85c:	4603      	mov	r3, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e85e:	f083 0301 	eor.w	r3, r3, #1
   1e862:	b2db      	uxtb	r3, r3
   1e864:	2b00      	cmp	r3, #0
   1e866:	d001      	beq.n	1e86c <z_is_thread_ready+0x30>
   1e868:	2301      	movs	r3, #1
   1e86a:	e000      	b.n	1e86e <z_is_thread_ready+0x32>
   1e86c:	2300      	movs	r3, #0
   1e86e:	f003 0301 	and.w	r3, r3, #1
   1e872:	b2db      	uxtb	r3, r3
}
   1e874:	4618      	mov	r0, r3
   1e876:	3708      	adds	r7, #8
   1e878:	46bd      	mov	sp, r7
   1e87a:	bd80      	pop	{r7, pc}

0001e87c <z_is_under_prio_ceiling>:
{
   1e87c:	b480      	push	{r7}
   1e87e:	b083      	sub	sp, #12
   1e880:	af00      	add	r7, sp, #0
   1e882:	6078      	str	r0, [r7, #4]
	return prio >= CONFIG_PRIORITY_CEILING;
   1e884:	687b      	ldr	r3, [r7, #4]
   1e886:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
   1e88a:	bfac      	ite	ge
   1e88c:	2301      	movge	r3, #1
   1e88e:	2300      	movlt	r3, #0
   1e890:	b2db      	uxtb	r3, r3
}
   1e892:	4618      	mov	r0, r3
   1e894:	370c      	adds	r7, #12
   1e896:	46bd      	mov	sp, r7
   1e898:	bc80      	pop	{r7}
   1e89a:	4770      	bx	lr

0001e89c <z_get_new_prio_with_ceiling>:
{
   1e89c:	b580      	push	{r7, lr}
   1e89e:	b082      	sub	sp, #8
   1e8a0:	af00      	add	r7, sp, #0
   1e8a2:	6078      	str	r0, [r7, #4]
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1e8a4:	6878      	ldr	r0, [r7, #4]
   1e8a6:	f7ff ffe9 	bl	1e87c <z_is_under_prio_ceiling>
   1e8aa:	4603      	mov	r3, r0
   1e8ac:	2b00      	cmp	r3, #0
   1e8ae:	d001      	beq.n	1e8b4 <z_get_new_prio_with_ceiling+0x18>
   1e8b0:	687b      	ldr	r3, [r7, #4]
   1e8b2:	e001      	b.n	1e8b8 <z_get_new_prio_with_ceiling+0x1c>
   1e8b4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
}
   1e8b8:	4618      	mov	r0, r3
   1e8ba:	3708      	adds	r7, #8
   1e8bc:	46bd      	mov	sp, r7
   1e8be:	bd80      	pop	{r7, pc}

0001e8c0 <z_is_prio1_higher_than_prio2>:
{
   1e8c0:	b480      	push	{r7}
   1e8c2:	b083      	sub	sp, #12
   1e8c4:	af00      	add	r7, sp, #0
   1e8c6:	6078      	str	r0, [r7, #4]
   1e8c8:	6039      	str	r1, [r7, #0]
	return prio1 < prio2;
   1e8ca:	687a      	ldr	r2, [r7, #4]
   1e8cc:	683b      	ldr	r3, [r7, #0]
   1e8ce:	429a      	cmp	r2, r3
   1e8d0:	bfb4      	ite	lt
   1e8d2:	2301      	movlt	r3, #1
   1e8d4:	2300      	movge	r3, #0
   1e8d6:	b2db      	uxtb	r3, r3
}
   1e8d8:	4618      	mov	r0, r3
   1e8da:	370c      	adds	r7, #12
   1e8dc:	46bd      	mov	sp, r7
   1e8de:	bc80      	pop	{r7}
   1e8e0:	4770      	bx	lr

0001e8e2 <z_is_prio_higher>:
{
   1e8e2:	b580      	push	{r7, lr}
   1e8e4:	b082      	sub	sp, #8
   1e8e6:	af00      	add	r7, sp, #0
   1e8e8:	6078      	str	r0, [r7, #4]
   1e8ea:	6039      	str	r1, [r7, #0]
	return z_is_prio1_higher_than_prio2(prio, test_prio);
   1e8ec:	6839      	ldr	r1, [r7, #0]
   1e8ee:	6878      	ldr	r0, [r7, #4]
   1e8f0:	f7ff ffe6 	bl	1e8c0 <z_is_prio1_higher_than_prio2>
   1e8f4:	4603      	mov	r3, r0
}
   1e8f6:	4618      	mov	r0, r3
   1e8f8:	3708      	adds	r7, #8
   1e8fa:	46bd      	mov	sp, r7
   1e8fc:	bd80      	pop	{r7, pc}

0001e8fe <z_waitq_head>:

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
   1e8fe:	b580      	push	{r7, lr}
   1e900:	b082      	sub	sp, #8
   1e902:	af00      	add	r7, sp, #0
   1e904:	6078      	str	r0, [r7, #4]
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1e906:	687b      	ldr	r3, [r7, #4]
   1e908:	4618      	mov	r0, r3
   1e90a:	f7ff ff40 	bl	1e78e <sys_dlist_peek_head>
   1e90e:	4603      	mov	r3, r0
}
   1e910:	4618      	mov	r0, r3
   1e912:	3708      	adds	r7, #8
   1e914:	46bd      	mov	sp, r7
   1e916:	bd80      	pop	{r7, pc}

0001e918 <new_prio_for_inheritance>:
{
   1e918:	b580      	push	{r7, lr}
   1e91a:	b084      	sub	sp, #16
   1e91c:	af00      	add	r7, sp, #0
   1e91e:	6078      	str	r0, [r7, #4]
   1e920:	6039      	str	r1, [r7, #0]
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   1e922:	6839      	ldr	r1, [r7, #0]
   1e924:	6878      	ldr	r0, [r7, #4]
   1e926:	f7ff ffdc 	bl	1e8e2 <z_is_prio_higher>
   1e92a:	4603      	mov	r3, r0
   1e92c:	2b00      	cmp	r3, #0
   1e92e:	d001      	beq.n	1e934 <new_prio_for_inheritance+0x1c>
   1e930:	687b      	ldr	r3, [r7, #4]
   1e932:	e000      	b.n	1e936 <new_prio_for_inheritance+0x1e>
   1e934:	683b      	ldr	r3, [r7, #0]
   1e936:	60fb      	str	r3, [r7, #12]
	new_prio = z_get_new_prio_with_ceiling(new_prio);
   1e938:	68f8      	ldr	r0, [r7, #12]
   1e93a:	f7ff ffaf 	bl	1e89c <z_get_new_prio_with_ceiling>
   1e93e:	60f8      	str	r0, [r7, #12]
	return new_prio;
   1e940:	68fb      	ldr	r3, [r7, #12]
}
   1e942:	4618      	mov	r0, r3
   1e944:	3710      	adds	r7, #16
   1e946:	46bd      	mov	sp, r7
   1e948:	bd80      	pop	{r7, pc}

0001e94a <sys_dlist_init>:
{
   1e94a:	b480      	push	{r7}
   1e94c:	b083      	sub	sp, #12
   1e94e:	af00      	add	r7, sp, #0
   1e950:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   1e952:	687b      	ldr	r3, [r7, #4]
   1e954:	687a      	ldr	r2, [r7, #4]
   1e956:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1e958:	687b      	ldr	r3, [r7, #4]
   1e95a:	687a      	ldr	r2, [r7, #4]
   1e95c:	605a      	str	r2, [r3, #4]
}
   1e95e:	bf00      	nop
   1e960:	370c      	adds	r7, #12
   1e962:	46bd      	mov	sp, r7
   1e964:	bc80      	pop	{r7}
   1e966:	4770      	bx	lr

0001e968 <z_object_init>:
{
   1e968:	b480      	push	{r7}
   1e96a:	b083      	sub	sp, #12
   1e96c:	af00      	add	r7, sp, #0
   1e96e:	6078      	str	r0, [r7, #4]
}
   1e970:	bf00      	nop
   1e972:	370c      	adds	r7, #12
   1e974:	46bd      	mov	sp, r7
   1e976:	bc80      	pop	{r7}
   1e978:	4770      	bx	lr

0001e97a <z_waitq_init>:
{
   1e97a:	b580      	push	{r7, lr}
   1e97c:	b082      	sub	sp, #8
   1e97e:	af00      	add	r7, sp, #0
   1e980:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   1e982:	687b      	ldr	r3, [r7, #4]
   1e984:	4618      	mov	r0, r3
   1e986:	f7ff ffe0 	bl	1e94a <sys_dlist_init>
}
   1e98a:	bf00      	nop
   1e98c:	3708      	adds	r7, #8
   1e98e:	46bd      	mov	sp, r7
   1e990:	bd80      	pop	{r7, pc}

0001e992 <z_impl_k_sem_init>:
{
   1e992:	b580      	push	{r7, lr}
   1e994:	b084      	sub	sp, #16
   1e996:	af00      	add	r7, sp, #0
   1e998:	60f8      	str	r0, [r7, #12]
   1e99a:	60b9      	str	r1, [r7, #8]
   1e99c:	607a      	str	r2, [r7, #4]
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1e99e:	687b      	ldr	r3, [r7, #4]
   1e9a0:	2b00      	cmp	r3, #0
   1e9a2:	d003      	beq.n	1e9ac <z_impl_k_sem_init+0x1a>
   1e9a4:	68ba      	ldr	r2, [r7, #8]
   1e9a6:	687b      	ldr	r3, [r7, #4]
   1e9a8:	429a      	cmp	r2, r3
   1e9aa:	d902      	bls.n	1e9b2 <z_impl_k_sem_init+0x20>
		return -EINVAL;
   1e9ac:	f06f 0315 	mvn.w	r3, #21
   1e9b0:	e00d      	b.n	1e9ce <z_impl_k_sem_init+0x3c>
	sem->count = initial_count;
   1e9b2:	68fb      	ldr	r3, [r7, #12]
   1e9b4:	68ba      	ldr	r2, [r7, #8]
   1e9b6:	609a      	str	r2, [r3, #8]
	sem->limit = limit;
   1e9b8:	68fb      	ldr	r3, [r7, #12]
   1e9ba:	687a      	ldr	r2, [r7, #4]
   1e9bc:	60da      	str	r2, [r3, #12]
	z_waitq_init(&sem->wait_q);
   1e9be:	68fb      	ldr	r3, [r7, #12]
   1e9c0:	4618      	mov	r0, r3
   1e9c2:	f7ff ffda 	bl	1e97a <z_waitq_init>
	z_object_init(sem);
   1e9c6:	68f8      	ldr	r0, [r7, #12]
   1e9c8:	f7ff ffce 	bl	1e968 <z_object_init>
	return 0;
   1e9cc:	2300      	movs	r3, #0
}
   1e9ce:	4618      	mov	r0, r3
   1e9d0:	3710      	adds	r7, #16
   1e9d2:	46bd      	mov	sp, r7
   1e9d4:	bd80      	pop	{r7, pc}

0001e9d6 <handle_poll_events>:
{
   1e9d6:	b480      	push	{r7}
   1e9d8:	b083      	sub	sp, #12
   1e9da:	af00      	add	r7, sp, #0
   1e9dc:	6078      	str	r0, [r7, #4]
	return false;
   1e9de:	2300      	movs	r3, #0
}
   1e9e0:	4618      	mov	r0, r3
   1e9e2:	370c      	adds	r7, #12
   1e9e4:	46bd      	mov	sp, r7
   1e9e6:	bc80      	pop	{r7}
   1e9e8:	4770      	bx	lr

0001e9ea <sys_dlist_init>:
{
   1e9ea:	b480      	push	{r7}
   1e9ec:	b083      	sub	sp, #12
   1e9ee:	af00      	add	r7, sp, #0
   1e9f0:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   1e9f2:	687b      	ldr	r3, [r7, #4]
   1e9f4:	687a      	ldr	r2, [r7, #4]
   1e9f6:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1e9f8:	687b      	ldr	r3, [r7, #4]
   1e9fa:	687a      	ldr	r2, [r7, #4]
   1e9fc:	605a      	str	r2, [r3, #4]
}
   1e9fe:	bf00      	nop
   1ea00:	370c      	adds	r7, #12
   1ea02:	46bd      	mov	sp, r7
   1ea04:	bc80      	pop	{r7}
   1ea06:	4770      	bx	lr

0001ea08 <sys_dnode_init>:
{
   1ea08:	b480      	push	{r7}
   1ea0a:	b083      	sub	sp, #12
   1ea0c:	af00      	add	r7, sp, #0
   1ea0e:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   1ea10:	687b      	ldr	r3, [r7, #4]
   1ea12:	2200      	movs	r2, #0
   1ea14:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   1ea16:	687b      	ldr	r3, [r7, #4]
   1ea18:	2200      	movs	r2, #0
   1ea1a:	605a      	str	r2, [r3, #4]
}
   1ea1c:	bf00      	nop
   1ea1e:	370c      	adds	r7, #12
   1ea20:	46bd      	mov	sp, r7
   1ea22:	bc80      	pop	{r7}
   1ea24:	4770      	bx	lr

0001ea26 <sys_dnode_is_linked>:
{
   1ea26:	b480      	push	{r7}
   1ea28:	b083      	sub	sp, #12
   1ea2a:	af00      	add	r7, sp, #0
   1ea2c:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   1ea2e:	687b      	ldr	r3, [r7, #4]
   1ea30:	681b      	ldr	r3, [r3, #0]
   1ea32:	2b00      	cmp	r3, #0
   1ea34:	bf14      	ite	ne
   1ea36:	2301      	movne	r3, #1
   1ea38:	2300      	moveq	r3, #0
   1ea3a:	b2db      	uxtb	r3, r3
}
   1ea3c:	4618      	mov	r0, r3
   1ea3e:	370c      	adds	r7, #12
   1ea40:	46bd      	mov	sp, r7
   1ea42:	bc80      	pop	{r7}
   1ea44:	4770      	bx	lr

0001ea46 <sys_dlist_is_empty>:
{
   1ea46:	b480      	push	{r7}
   1ea48:	b083      	sub	sp, #12
   1ea4a:	af00      	add	r7, sp, #0
   1ea4c:	6078      	str	r0, [r7, #4]
	return list->head == list;
   1ea4e:	687b      	ldr	r3, [r7, #4]
   1ea50:	681b      	ldr	r3, [r3, #0]
   1ea52:	687a      	ldr	r2, [r7, #4]
   1ea54:	429a      	cmp	r2, r3
   1ea56:	bf0c      	ite	eq
   1ea58:	2301      	moveq	r3, #1
   1ea5a:	2300      	movne	r3, #0
   1ea5c:	b2db      	uxtb	r3, r3
}
   1ea5e:	4618      	mov	r0, r3
   1ea60:	370c      	adds	r7, #12
   1ea62:	46bd      	mov	sp, r7
   1ea64:	bc80      	pop	{r7}
   1ea66:	4770      	bx	lr

0001ea68 <sys_dlist_peek_head>:
{
   1ea68:	b580      	push	{r7, lr}
   1ea6a:	b082      	sub	sp, #8
   1ea6c:	af00      	add	r7, sp, #0
   1ea6e:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ea70:	6878      	ldr	r0, [r7, #4]
   1ea72:	f7ff ffe8 	bl	1ea46 <sys_dlist_is_empty>
   1ea76:	4603      	mov	r3, r0
   1ea78:	2b00      	cmp	r3, #0
   1ea7a:	d102      	bne.n	1ea82 <sys_dlist_peek_head+0x1a>
   1ea7c:	687b      	ldr	r3, [r7, #4]
   1ea7e:	681b      	ldr	r3, [r3, #0]
   1ea80:	e000      	b.n	1ea84 <sys_dlist_peek_head+0x1c>
   1ea82:	2300      	movs	r3, #0
}
   1ea84:	4618      	mov	r0, r3
   1ea86:	3708      	adds	r7, #8
   1ea88:	46bd      	mov	sp, r7
   1ea8a:	bd80      	pop	{r7, pc}

0001ea8c <sys_dlist_peek_next_no_check>:
 * @return a pointer to the next element from a node, NULL if node is the tail
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
   1ea8c:	b480      	push	{r7}
   1ea8e:	b083      	sub	sp, #12
   1ea90:	af00      	add	r7, sp, #0
   1ea92:	6078      	str	r0, [r7, #4]
   1ea94:	6039      	str	r1, [r7, #0]
	return (node == list->tail) ? NULL : node->next;
   1ea96:	687b      	ldr	r3, [r7, #4]
   1ea98:	685b      	ldr	r3, [r3, #4]
   1ea9a:	683a      	ldr	r2, [r7, #0]
   1ea9c:	429a      	cmp	r2, r3
   1ea9e:	d002      	beq.n	1eaa6 <sys_dlist_peek_next_no_check+0x1a>
   1eaa0:	683b      	ldr	r3, [r7, #0]
   1eaa2:	681b      	ldr	r3, [r3, #0]
   1eaa4:	e000      	b.n	1eaa8 <sys_dlist_peek_next_no_check+0x1c>
   1eaa6:	2300      	movs	r3, #0
}
   1eaa8:	4618      	mov	r0, r3
   1eaaa:	370c      	adds	r7, #12
   1eaac:	46bd      	mov	sp, r7
   1eaae:	bc80      	pop	{r7}
   1eab0:	4770      	bx	lr

0001eab2 <sys_dlist_peek_next>:
 * or NULL (when node comes from reading the head of an empty list).
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
   1eab2:	b580      	push	{r7, lr}
   1eab4:	b082      	sub	sp, #8
   1eab6:	af00      	add	r7, sp, #0
   1eab8:	6078      	str	r0, [r7, #4]
   1eaba:	6039      	str	r1, [r7, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1eabc:	683b      	ldr	r3, [r7, #0]
   1eabe:	2b00      	cmp	r3, #0
   1eac0:	d005      	beq.n	1eace <sys_dlist_peek_next+0x1c>
   1eac2:	6839      	ldr	r1, [r7, #0]
   1eac4:	6878      	ldr	r0, [r7, #4]
   1eac6:	f7ff ffe1 	bl	1ea8c <sys_dlist_peek_next_no_check>
   1eaca:	4603      	mov	r3, r0
   1eacc:	e000      	b.n	1ead0 <sys_dlist_peek_next+0x1e>
   1eace:	2300      	movs	r3, #0
}
   1ead0:	4618      	mov	r0, r3
   1ead2:	3708      	adds	r7, #8
   1ead4:	46bd      	mov	sp, r7
   1ead6:	bd80      	pop	{r7, pc}

0001ead8 <sys_dlist_append>:
 * @param list the doubly-linked list to operate on
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
   1ead8:	b480      	push	{r7}
   1eada:	b085      	sub	sp, #20
   1eadc:	af00      	add	r7, sp, #0
   1eade:	6078      	str	r0, [r7, #4]
   1eae0:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const tail = list->tail;
   1eae2:	687b      	ldr	r3, [r7, #4]
   1eae4:	685b      	ldr	r3, [r3, #4]
   1eae6:	60fb      	str	r3, [r7, #12]

	node->next = list;
   1eae8:	683b      	ldr	r3, [r7, #0]
   1eaea:	687a      	ldr	r2, [r7, #4]
   1eaec:	601a      	str	r2, [r3, #0]
	node->prev = tail;
   1eaee:	683b      	ldr	r3, [r7, #0]
   1eaf0:	68fa      	ldr	r2, [r7, #12]
   1eaf2:	605a      	str	r2, [r3, #4]

	tail->next = node;
   1eaf4:	68fb      	ldr	r3, [r7, #12]
   1eaf6:	683a      	ldr	r2, [r7, #0]
   1eaf8:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1eafa:	687b      	ldr	r3, [r7, #4]
   1eafc:	683a      	ldr	r2, [r7, #0]
   1eafe:	605a      	str	r2, [r3, #4]
}
   1eb00:	bf00      	nop
   1eb02:	3714      	adds	r7, #20
   1eb04:	46bd      	mov	sp, r7
   1eb06:	bc80      	pop	{r7}
   1eb08:	4770      	bx	lr

0001eb0a <sys_dlist_insert>:
 *
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
   1eb0a:	b480      	push	{r7}
   1eb0c:	b085      	sub	sp, #20
   1eb0e:	af00      	add	r7, sp, #0
   1eb10:	6078      	str	r0, [r7, #4]
   1eb12:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const prev = successor->prev;
   1eb14:	687b      	ldr	r3, [r7, #4]
   1eb16:	685b      	ldr	r3, [r3, #4]
   1eb18:	60fb      	str	r3, [r7, #12]

	node->prev = prev;
   1eb1a:	683b      	ldr	r3, [r7, #0]
   1eb1c:	68fa      	ldr	r2, [r7, #12]
   1eb1e:	605a      	str	r2, [r3, #4]
	node->next = successor;
   1eb20:	683b      	ldr	r3, [r7, #0]
   1eb22:	687a      	ldr	r2, [r7, #4]
   1eb24:	601a      	str	r2, [r3, #0]
	prev->next = node;
   1eb26:	68fb      	ldr	r3, [r7, #12]
   1eb28:	683a      	ldr	r2, [r7, #0]
   1eb2a:	601a      	str	r2, [r3, #0]
	successor->prev = node;
   1eb2c:	687b      	ldr	r3, [r7, #4]
   1eb2e:	683a      	ldr	r2, [r7, #0]
   1eb30:	605a      	str	r2, [r3, #4]
}
   1eb32:	bf00      	nop
   1eb34:	3714      	adds	r7, #20
   1eb36:	46bd      	mov	sp, r7
   1eb38:	bc80      	pop	{r7}
   1eb3a:	4770      	bx	lr

0001eb3c <sys_dlist_remove>:
 *
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
   1eb3c:	b580      	push	{r7, lr}
   1eb3e:	b084      	sub	sp, #16
   1eb40:	af00      	add	r7, sp, #0
   1eb42:	6078      	str	r0, [r7, #4]
	sys_dnode_t *const prev = node->prev;
   1eb44:	687b      	ldr	r3, [r7, #4]
   1eb46:	685b      	ldr	r3, [r3, #4]
   1eb48:	60fb      	str	r3, [r7, #12]
	sys_dnode_t *const next = node->next;
   1eb4a:	687b      	ldr	r3, [r7, #4]
   1eb4c:	681b      	ldr	r3, [r3, #0]
   1eb4e:	60bb      	str	r3, [r7, #8]

	prev->next = next;
   1eb50:	68fb      	ldr	r3, [r7, #12]
   1eb52:	68ba      	ldr	r2, [r7, #8]
   1eb54:	601a      	str	r2, [r3, #0]
	next->prev = prev;
   1eb56:	68bb      	ldr	r3, [r7, #8]
   1eb58:	68fa      	ldr	r2, [r7, #12]
   1eb5a:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
   1eb5c:	6878      	ldr	r0, [r7, #4]
   1eb5e:	f7ff ff53 	bl	1ea08 <sys_dnode_init>
}
   1eb62:	bf00      	nop
   1eb64:	3710      	adds	r7, #16
   1eb66:	46bd      	mov	sp, r7
   1eb68:	bd80      	pop	{r7, pc}

0001eb6a <k_yield>:
{
   1eb6a:	b580      	push	{r7, lr}
   1eb6c:	af00      	add	r7, sp, #0
	z_impl_k_yield();
   1eb6e:	f7f7 fc4d 	bl	1640c <z_impl_k_yield>
}
   1eb72:	bf00      	nop
   1eb74:	bd80      	pop	{r7, pc}

0001eb76 <k_thread_suspend>:
{
   1eb76:	b580      	push	{r7, lr}
   1eb78:	b082      	sub	sp, #8
   1eb7a:	af00      	add	r7, sp, #0
   1eb7c:	6078      	str	r0, [r7, #4]
	z_impl_k_thread_suspend(thread);
   1eb7e:	6878      	ldr	r0, [r7, #4]
   1eb80:	f7f6 fb98 	bl	152b4 <z_impl_k_thread_suspend>
}
   1eb84:	bf00      	nop
   1eb86:	3708      	adds	r7, #8
   1eb88:	46bd      	mov	sp, r7
   1eb8a:	bd80      	pop	{r7, pc}

0001eb8c <z_is_inactive_timeout>:
{
   1eb8c:	b580      	push	{r7, lr}
   1eb8e:	b082      	sub	sp, #8
   1eb90:	af00      	add	r7, sp, #0
   1eb92:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&to->node);
   1eb94:	687b      	ldr	r3, [r7, #4]
   1eb96:	4618      	mov	r0, r3
   1eb98:	f7ff ff45 	bl	1ea26 <sys_dnode_is_linked>
   1eb9c:	4603      	mov	r3, r0
   1eb9e:	2b00      	cmp	r3, #0
   1eba0:	bf14      	ite	ne
   1eba2:	2301      	movne	r3, #1
   1eba4:	2300      	moveq	r3, #0
   1eba6:	b2db      	uxtb	r3, r3
   1eba8:	f083 0301 	eor.w	r3, r3, #1
   1ebac:	b2db      	uxtb	r3, r3
   1ebae:	f003 0301 	and.w	r3, r3, #1
   1ebb2:	b2db      	uxtb	r3, r3
}
   1ebb4:	4618      	mov	r0, r3
   1ebb6:	3708      	adds	r7, #8
   1ebb8:	46bd      	mov	sp, r7
   1ebba:	bd80      	pop	{r7, pc}

0001ebbc <z_abort_thread_timeout>:

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
   1ebbc:	b580      	push	{r7, lr}
   1ebbe:	b082      	sub	sp, #8
   1ebc0:	af00      	add	r7, sp, #0
   1ebc2:	6078      	str	r0, [r7, #4]
	return z_abort_timeout(&thread->base.timeout);
   1ebc4:	687b      	ldr	r3, [r7, #4]
   1ebc6:	3318      	adds	r3, #24
   1ebc8:	4618      	mov	r0, r3
   1ebca:	f7f8 f9c3 	bl	16f54 <z_abort_timeout>
   1ebce:	4603      	mov	r3, r0
}
   1ebd0:	4618      	mov	r0, r3
   1ebd2:	3708      	adds	r7, #8
   1ebd4:	46bd      	mov	sp, r7
   1ebd6:	bd80      	pop	{r7, pc}

0001ebd8 <z_reschedule_unlocked>:
{
   1ebd8:	b580      	push	{r7, lr}
   1ebda:	b082      	sub	sp, #8
   1ebdc:	af00      	add	r7, sp, #0
   1ebde:	f04f 0320 	mov.w	r3, #32
   1ebe2:	f3ef 8211 	mrs	r2, BASEPRI
   1ebe6:	f383 8812 	msr	BASEPRI_MAX, r3
   1ebea:	f3bf 8f6f 	isb	sy
   1ebee:	607a      	str	r2, [r7, #4]
   1ebf0:	603b      	str	r3, [r7, #0]
	return key;
   1ebf2:	687b      	ldr	r3, [r7, #4]
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ebf4:	4618      	mov	r0, r3
   1ebf6:	f000 f9e4 	bl	1efc2 <z_reschedule_irqlock>
}
   1ebfa:	bf00      	nop
   1ebfc:	3708      	adds	r7, #8
   1ebfe:	46bd      	mov	sp, r7
   1ec00:	bd80      	pop	{r7, pc}

0001ec02 <z_is_thread_prevented_from_running>:
{
   1ec02:	b480      	push	{r7}
   1ec04:	b085      	sub	sp, #20
   1ec06:	af00      	add	r7, sp, #0
   1ec08:	6078      	str	r0, [r7, #4]
	uint8_t state = thread->base.thread_state;
   1ec0a:	687b      	ldr	r3, [r7, #4]
   1ec0c:	7b5b      	ldrb	r3, [r3, #13]
   1ec0e:	73fb      	strb	r3, [r7, #15]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   1ec10:	7bfb      	ldrb	r3, [r7, #15]
   1ec12:	f003 031f 	and.w	r3, r3, #31
			 _THREAD_DUMMY | _THREAD_SUSPENDED)) != 0U;
   1ec16:	2b00      	cmp	r3, #0
   1ec18:	bf14      	ite	ne
   1ec1a:	2301      	movne	r3, #1
   1ec1c:	2300      	moveq	r3, #0
   1ec1e:	b2db      	uxtb	r3, r3
}
   1ec20:	4618      	mov	r0, r3
   1ec22:	3714      	adds	r7, #20
   1ec24:	46bd      	mov	sp, r7
   1ec26:	bc80      	pop	{r7}
   1ec28:	4770      	bx	lr

0001ec2a <z_is_thread_timeout_active>:
{
   1ec2a:	b580      	push	{r7, lr}
   1ec2c:	b082      	sub	sp, #8
   1ec2e:	af00      	add	r7, sp, #0
   1ec30:	6078      	str	r0, [r7, #4]
	return !z_is_inactive_timeout(&thread->base.timeout);
   1ec32:	687b      	ldr	r3, [r7, #4]
   1ec34:	3318      	adds	r3, #24
   1ec36:	4618      	mov	r0, r3
   1ec38:	f7ff ffa8 	bl	1eb8c <z_is_inactive_timeout>
   1ec3c:	4603      	mov	r3, r0
   1ec3e:	2b00      	cmp	r3, #0
   1ec40:	bf14      	ite	ne
   1ec42:	2301      	movne	r3, #1
   1ec44:	2300      	moveq	r3, #0
   1ec46:	b2db      	uxtb	r3, r3
   1ec48:	f083 0301 	eor.w	r3, r3, #1
   1ec4c:	b2db      	uxtb	r3, r3
   1ec4e:	f003 0301 	and.w	r3, r3, #1
   1ec52:	b2db      	uxtb	r3, r3
}
   1ec54:	4618      	mov	r0, r3
   1ec56:	3708      	adds	r7, #8
   1ec58:	46bd      	mov	sp, r7
   1ec5a:	bd80      	pop	{r7, pc}

0001ec5c <z_is_thread_ready>:
{
   1ec5c:	b580      	push	{r7, lr}
   1ec5e:	b082      	sub	sp, #8
   1ec60:	af00      	add	r7, sp, #0
   1ec62:	6078      	str	r0, [r7, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ec64:	6878      	ldr	r0, [r7, #4]
   1ec66:	f7ff ffcc 	bl	1ec02 <z_is_thread_prevented_from_running>
   1ec6a:	4603      	mov	r3, r0
   1ec6c:	f083 0301 	eor.w	r3, r3, #1
   1ec70:	b2db      	uxtb	r3, r3
   1ec72:	2b00      	cmp	r3, #0
   1ec74:	d00a      	beq.n	1ec8c <z_is_thread_ready+0x30>
		 z_is_thread_timeout_active(thread));
   1ec76:	6878      	ldr	r0, [r7, #4]
   1ec78:	f7ff ffd7 	bl	1ec2a <z_is_thread_timeout_active>
   1ec7c:	4603      	mov	r3, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ec7e:	f083 0301 	eor.w	r3, r3, #1
   1ec82:	b2db      	uxtb	r3, r3
   1ec84:	2b00      	cmp	r3, #0
   1ec86:	d001      	beq.n	1ec8c <z_is_thread_ready+0x30>
   1ec88:	2301      	movs	r3, #1
   1ec8a:	e000      	b.n	1ec8e <z_is_thread_ready+0x32>
   1ec8c:	2300      	movs	r3, #0
   1ec8e:	f003 0301 	and.w	r3, r3, #1
   1ec92:	b2db      	uxtb	r3, r3
}
   1ec94:	4618      	mov	r0, r3
   1ec96:	3708      	adds	r7, #8
   1ec98:	46bd      	mov	sp, r7
   1ec9a:	bd80      	pop	{r7, pc}

0001ec9c <z_has_thread_started>:
{
   1ec9c:	b480      	push	{r7}
   1ec9e:	b083      	sub	sp, #12
   1eca0:	af00      	add	r7, sp, #0
   1eca2:	6078      	str	r0, [r7, #4]
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1eca4:	687b      	ldr	r3, [r7, #4]
   1eca6:	7b5b      	ldrb	r3, [r3, #13]
   1eca8:	f003 0304 	and.w	r3, r3, #4
   1ecac:	2b00      	cmp	r3, #0
   1ecae:	bf0c      	ite	eq
   1ecb0:	2301      	moveq	r3, #1
   1ecb2:	2300      	movne	r3, #0
   1ecb4:	b2db      	uxtb	r3, r3
}
   1ecb6:	4618      	mov	r0, r3
   1ecb8:	370c      	adds	r7, #12
   1ecba:	46bd      	mov	sp, r7
   1ecbc:	bc80      	pop	{r7}
   1ecbe:	4770      	bx	lr

0001ecc0 <z_is_thread_state_set>:
{
   1ecc0:	b480      	push	{r7}
   1ecc2:	b083      	sub	sp, #12
   1ecc4:	af00      	add	r7, sp, #0
   1ecc6:	6078      	str	r0, [r7, #4]
   1ecc8:	6039      	str	r1, [r7, #0]
	return (thread->base.thread_state & state) != 0U;
   1ecca:	687b      	ldr	r3, [r7, #4]
   1eccc:	7b5b      	ldrb	r3, [r3, #13]
   1ecce:	461a      	mov	r2, r3
   1ecd0:	683b      	ldr	r3, [r7, #0]
   1ecd2:	4013      	ands	r3, r2
   1ecd4:	2b00      	cmp	r3, #0
   1ecd6:	bf14      	ite	ne
   1ecd8:	2301      	movne	r3, #1
   1ecda:	2300      	moveq	r3, #0
   1ecdc:	b2db      	uxtb	r3, r3
}
   1ecde:	4618      	mov	r0, r3
   1ece0:	370c      	adds	r7, #12
   1ece2:	46bd      	mov	sp, r7
   1ece4:	bc80      	pop	{r7}
   1ece6:	4770      	bx	lr

0001ece8 <z_is_thread_queued>:
{
   1ece8:	b580      	push	{r7, lr}
   1ecea:	b082      	sub	sp, #8
   1ecec:	af00      	add	r7, sp, #0
   1ecee:	6078      	str	r0, [r7, #4]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1ecf0:	2180      	movs	r1, #128	; 0x80
   1ecf2:	6878      	ldr	r0, [r7, #4]
   1ecf4:	f7ff ffe4 	bl	1ecc0 <z_is_thread_state_set>
   1ecf8:	4603      	mov	r3, r0
}
   1ecfa:	4618      	mov	r0, r3
   1ecfc:	3708      	adds	r7, #8
   1ecfe:	46bd      	mov	sp, r7
   1ed00:	bd80      	pop	{r7, pc}

0001ed02 <z_mark_thread_as_suspended>:
{
   1ed02:	b480      	push	{r7}
   1ed04:	b083      	sub	sp, #12
   1ed06:	af00      	add	r7, sp, #0
   1ed08:	6078      	str	r0, [r7, #4]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1ed0a:	687b      	ldr	r3, [r7, #4]
   1ed0c:	7b5b      	ldrb	r3, [r3, #13]
   1ed0e:	f043 0310 	orr.w	r3, r3, #16
   1ed12:	b2da      	uxtb	r2, r3
   1ed14:	687b      	ldr	r3, [r7, #4]
   1ed16:	735a      	strb	r2, [r3, #13]
}
   1ed18:	bf00      	nop
   1ed1a:	370c      	adds	r7, #12
   1ed1c:	46bd      	mov	sp, r7
   1ed1e:	bc80      	pop	{r7}
   1ed20:	4770      	bx	lr

0001ed22 <z_mark_thread_as_not_suspended>:
{
   1ed22:	b480      	push	{r7}
   1ed24:	b083      	sub	sp, #12
   1ed26:	af00      	add	r7, sp, #0
   1ed28:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ed2a:	687b      	ldr	r3, [r7, #4]
   1ed2c:	7b5b      	ldrb	r3, [r3, #13]
   1ed2e:	f023 0310 	bic.w	r3, r3, #16
   1ed32:	b2da      	uxtb	r2, r3
   1ed34:	687b      	ldr	r3, [r7, #4]
   1ed36:	735a      	strb	r2, [r3, #13]
}
   1ed38:	bf00      	nop
   1ed3a:	370c      	adds	r7, #12
   1ed3c:	46bd      	mov	sp, r7
   1ed3e:	bc80      	pop	{r7}
   1ed40:	4770      	bx	lr

0001ed42 <z_mark_thread_as_started>:
{
   1ed42:	b480      	push	{r7}
   1ed44:	b083      	sub	sp, #12
   1ed46:	af00      	add	r7, sp, #0
   1ed48:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ed4a:	687b      	ldr	r3, [r7, #4]
   1ed4c:	7b5b      	ldrb	r3, [r3, #13]
   1ed4e:	f023 0304 	bic.w	r3, r3, #4
   1ed52:	b2da      	uxtb	r2, r3
   1ed54:	687b      	ldr	r3, [r7, #4]
   1ed56:	735a      	strb	r2, [r3, #13]
}
   1ed58:	bf00      	nop
   1ed5a:	370c      	adds	r7, #12
   1ed5c:	46bd      	mov	sp, r7
   1ed5e:	bc80      	pop	{r7}
   1ed60:	4770      	bx	lr

0001ed62 <z_mark_thread_as_pending>:
{
   1ed62:	b480      	push	{r7}
   1ed64:	b083      	sub	sp, #12
   1ed66:	af00      	add	r7, sp, #0
   1ed68:	6078      	str	r0, [r7, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   1ed6a:	687b      	ldr	r3, [r7, #4]
   1ed6c:	7b5b      	ldrb	r3, [r3, #13]
   1ed6e:	f043 0302 	orr.w	r3, r3, #2
   1ed72:	b2da      	uxtb	r2, r3
   1ed74:	687b      	ldr	r3, [r7, #4]
   1ed76:	735a      	strb	r2, [r3, #13]
}
   1ed78:	bf00      	nop
   1ed7a:	370c      	adds	r7, #12
   1ed7c:	46bd      	mov	sp, r7
   1ed7e:	bc80      	pop	{r7}
   1ed80:	4770      	bx	lr

0001ed82 <z_mark_thread_as_not_pending>:
{
   1ed82:	b480      	push	{r7}
   1ed84:	b083      	sub	sp, #12
   1ed86:	af00      	add	r7, sp, #0
   1ed88:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ed8a:	687b      	ldr	r3, [r7, #4]
   1ed8c:	7b5b      	ldrb	r3, [r3, #13]
   1ed8e:	f023 0302 	bic.w	r3, r3, #2
   1ed92:	b2da      	uxtb	r2, r3
   1ed94:	687b      	ldr	r3, [r7, #4]
   1ed96:	735a      	strb	r2, [r3, #13]
}
   1ed98:	bf00      	nop
   1ed9a:	370c      	adds	r7, #12
   1ed9c:	46bd      	mov	sp, r7
   1ed9e:	bc80      	pop	{r7}
   1eda0:	4770      	bx	lr

0001eda2 <z_is_prio1_higher_than_prio2>:
{
   1eda2:	b480      	push	{r7}
   1eda4:	b083      	sub	sp, #12
   1eda6:	af00      	add	r7, sp, #0
   1eda8:	6078      	str	r0, [r7, #4]
   1edaa:	6039      	str	r1, [r7, #0]
	return prio1 < prio2;
   1edac:	687a      	ldr	r2, [r7, #4]
   1edae:	683b      	ldr	r3, [r7, #0]
   1edb0:	429a      	cmp	r2, r3
   1edb2:	bfb4      	ite	lt
   1edb4:	2301      	movlt	r3, #1
   1edb6:	2300      	movge	r3, #0
   1edb8:	b2db      	uxtb	r3, r3
}
   1edba:	4618      	mov	r0, r3
   1edbc:	370c      	adds	r7, #12
   1edbe:	46bd      	mov	sp, r7
   1edc0:	bc80      	pop	{r7}
   1edc2:	4770      	bx	lr

0001edc4 <z_is_prio_higher>:
{
   1edc4:	b580      	push	{r7, lr}
   1edc6:	b082      	sub	sp, #8
   1edc8:	af00      	add	r7, sp, #0
   1edca:	6078      	str	r0, [r7, #4]
   1edcc:	6039      	str	r1, [r7, #0]
	return z_is_prio1_higher_than_prio2(prio, test_prio);
   1edce:	6839      	ldr	r1, [r7, #0]
   1edd0:	6878      	ldr	r0, [r7, #4]
   1edd2:	f7ff ffe6 	bl	1eda2 <z_is_prio1_higher_than_prio2>
   1edd6:	4603      	mov	r3, r0
}
   1edd8:	4618      	mov	r0, r3
   1edda:	3708      	adds	r7, #8
   1eddc:	46bd      	mov	sp, r7
   1edde:	bd80      	pop	{r7, pc}

0001ede0 <z_waitq_head>:
{
   1ede0:	b580      	push	{r7, lr}
   1ede2:	b082      	sub	sp, #8
   1ede4:	af00      	add	r7, sp, #0
   1ede6:	6078      	str	r0, [r7, #4]
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1ede8:	687b      	ldr	r3, [r7, #4]
   1edea:	4618      	mov	r0, r3
   1edec:	f7ff fe3c 	bl	1ea68 <sys_dlist_peek_head>
   1edf0:	4603      	mov	r3, r0
}
   1edf2:	4618      	mov	r0, r3
   1edf4:	3708      	adds	r7, #8
   1edf6:	46bd      	mov	sp, r7
   1edf8:	bd80      	pop	{r7, pc}

0001edfa <z_swap_irqlock>:
{
   1edfa:	b580      	push	{r7, lr}
   1edfc:	b084      	sub	sp, #16
   1edfe:	af00      	add	r7, sp, #0
   1ee00:	6078      	str	r0, [r7, #4]
	ret = arch_swap(key);
   1ee02:	6878      	ldr	r0, [r7, #4]
   1ee04:	f7eb fb74 	bl	a4f0 <arch_swap>
   1ee08:	60f8      	str	r0, [r7, #12]
	return ret;
   1ee0a:	68fb      	ldr	r3, [r7, #12]
}
   1ee0c:	4618      	mov	r0, r3
   1ee0e:	3710      	adds	r7, #16
   1ee10:	46bd      	mov	sp, r7
   1ee12:	bd80      	pop	{r7, pc}

0001ee14 <is_preempt>:
{
   1ee14:	b480      	push	{r7}
   1ee16:	b083      	sub	sp, #12
   1ee18:	af00      	add	r7, sp, #0
   1ee1a:	6078      	str	r0, [r7, #4]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1ee1c:	687b      	ldr	r3, [r7, #4]
   1ee1e:	89db      	ldrh	r3, [r3, #14]
   1ee20:	2b7f      	cmp	r3, #127	; 0x7f
   1ee22:	bf94      	ite	ls
   1ee24:	2301      	movls	r3, #1
   1ee26:	2300      	movhi	r3, #0
   1ee28:	b2db      	uxtb	r3, r3
}
   1ee2a:	4618      	mov	r0, r3
   1ee2c:	370c      	adds	r7, #12
   1ee2e:	46bd      	mov	sp, r7
   1ee30:	bc80      	pop	{r7}
   1ee32:	4770      	bx	lr

0001ee34 <is_metairq>:
{
   1ee34:	b480      	push	{r7}
   1ee36:	b083      	sub	sp, #12
   1ee38:	af00      	add	r7, sp, #0
   1ee3a:	6078      	str	r0, [r7, #4]
	return 0;
   1ee3c:	2300      	movs	r3, #0
}
   1ee3e:	4618      	mov	r0, r3
   1ee40:	370c      	adds	r7, #12
   1ee42:	46bd      	mov	sp, r7
   1ee44:	bc80      	pop	{r7}
   1ee46:	4770      	bx	lr

0001ee48 <z_sched_prio_cmp>:
{
   1ee48:	b480      	push	{r7}
   1ee4a:	b085      	sub	sp, #20
   1ee4c:	af00      	add	r7, sp, #0
   1ee4e:	6078      	str	r0, [r7, #4]
   1ee50:	6039      	str	r1, [r7, #0]
	int32_t b1 = thread_1->base.prio;
   1ee52:	687b      	ldr	r3, [r7, #4]
   1ee54:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1ee58:	60fb      	str	r3, [r7, #12]
	int32_t b2 = thread_2->base.prio;
   1ee5a:	683b      	ldr	r3, [r7, #0]
   1ee5c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1ee60:	60bb      	str	r3, [r7, #8]
	if (b1 != b2) {
   1ee62:	68fa      	ldr	r2, [r7, #12]
   1ee64:	68bb      	ldr	r3, [r7, #8]
   1ee66:	429a      	cmp	r2, r3
   1ee68:	d003      	beq.n	1ee72 <z_sched_prio_cmp+0x2a>
		return b2 - b1;
   1ee6a:	68ba      	ldr	r2, [r7, #8]
   1ee6c:	68fb      	ldr	r3, [r7, #12]
   1ee6e:	1ad3      	subs	r3, r2, r3
   1ee70:	e000      	b.n	1ee74 <z_sched_prio_cmp+0x2c>
	return 0;
   1ee72:	2300      	movs	r3, #0
}
   1ee74:	4618      	mov	r0, r3
   1ee76:	3714      	adds	r7, #20
   1ee78:	46bd      	mov	sp, r7
   1ee7a:	bc80      	pop	{r7}
   1ee7c:	4770      	bx	lr

0001ee7e <should_queue_thread>:
{
   1ee7e:	b480      	push	{r7}
   1ee80:	b083      	sub	sp, #12
   1ee82:	af00      	add	r7, sp, #0
   1ee84:	6078      	str	r0, [r7, #4]
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
   1ee86:	2301      	movs	r3, #1
}
   1ee88:	4618      	mov	r0, r3
   1ee8a:	370c      	adds	r7, #12
   1ee8c:	46bd      	mov	sp, r7
   1ee8e:	bc80      	pop	{r7}
   1ee90:	4770      	bx	lr

0001ee92 <signal_pending_ipi>:
{
   1ee92:	b480      	push	{r7}
   1ee94:	af00      	add	r7, sp, #0
}
   1ee96:	bf00      	nop
   1ee98:	46bd      	mov	sp, r7
   1ee9a:	bc80      	pop	{r7}
   1ee9c:	4770      	bx	lr

0001ee9e <flag_ipi>:
{
   1ee9e:	b480      	push	{r7}
   1eea0:	af00      	add	r7, sp, #0
}
   1eea2:	bf00      	nop
   1eea4:	46bd      	mov	sp, r7
   1eea6:	bc80      	pop	{r7}
   1eea8:	4770      	bx	lr

0001eeaa <update_metairq_preempt>:
{
   1eeaa:	b480      	push	{r7}
   1eeac:	b083      	sub	sp, #12
   1eeae:	af00      	add	r7, sp, #0
   1eeb0:	6078      	str	r0, [r7, #4]
}
   1eeb2:	bf00      	nop
   1eeb4:	370c      	adds	r7, #12
   1eeb6:	46bd      	mov	sp, r7
   1eeb8:	bc80      	pop	{r7}
   1eeba:	4770      	bx	lr

0001eebc <thread_active_elsewhere>:
{
   1eebc:	b480      	push	{r7}
   1eebe:	b083      	sub	sp, #12
   1eec0:	af00      	add	r7, sp, #0
   1eec2:	6078      	str	r0, [r7, #4]
	return false;
   1eec4:	2300      	movs	r3, #0
}
   1eec6:	4618      	mov	r0, r3
   1eec8:	370c      	adds	r7, #12
   1eeca:	46bd      	mov	sp, r7
   1eecc:	bc80      	pop	{r7}
   1eece:	4770      	bx	lr

0001eed0 <add_thread_timeout>:
{
   1eed0:	b580      	push	{r7, lr}
   1eed2:	b084      	sub	sp, #16
   1eed4:	af00      	add	r7, sp, #0
   1eed6:	60f8      	str	r0, [r7, #12]
   1eed8:	e9c7 2300 	strd	r2, r3, [r7]
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1eedc:	e9d7 2300 	ldrd	r2, r3, [r7]
   1eee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1eee4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1eee8:	428b      	cmp	r3, r1
   1eeea:	bf08      	it	eq
   1eeec:	4282      	cmpeq	r2, r0
   1eeee:	d004      	beq.n	1eefa <add_thread_timeout+0x2a>
		z_add_thread_timeout(thread, timeout);
   1eef0:	e9d7 2300 	ldrd	r2, r3, [r7]
   1eef4:	68f8      	ldr	r0, [r7, #12]
   1eef6:	f7f5 fd0b 	bl	14910 <z_add_thread_timeout>
}
   1eefa:	bf00      	nop
   1eefc:	3710      	adds	r7, #16
   1eefe:	46bd      	mov	sp, r7
   1ef00:	bd80      	pop	{r7, pc}

0001ef02 <pend_locked>:
{
   1ef02:	b580      	push	{r7, lr}
   1ef04:	b084      	sub	sp, #16
   1ef06:	af00      	add	r7, sp, #0
   1ef08:	60f8      	str	r0, [r7, #12]
   1ef0a:	60b9      	str	r1, [r7, #8]
   1ef0c:	e9c7 2300 	strd	r2, r3, [r7]
	add_to_waitq_locked(thread, wait_q);
   1ef10:	68b9      	ldr	r1, [r7, #8]
   1ef12:	68f8      	ldr	r0, [r7, #12]
   1ef14:	f7f6 faf0 	bl	154f8 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   1ef18:	e9d7 2300 	ldrd	r2, r3, [r7]
   1ef1c:	68f8      	ldr	r0, [r7, #12]
   1ef1e:	f7ff ffd7 	bl	1eed0 <add_thread_timeout>
}
   1ef22:	bf00      	nop
   1ef24:	3710      	adds	r7, #16
   1ef26:	46bd      	mov	sp, r7
   1ef28:	bd80      	pop	{r7, pc}

0001ef2a <unpend_thread_no_timeout>:
{
   1ef2a:	b580      	push	{r7, lr}
   1ef2c:	b082      	sub	sp, #8
   1ef2e:	af00      	add	r7, sp, #0
   1ef30:	6078      	str	r0, [r7, #4]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1ef32:	6878      	ldr	r0, [r7, #4]
   1ef34:	f7f6 fa88 	bl	15448 <pended_on_thread>
   1ef38:	4603      	mov	r3, r0
   1ef3a:	6879      	ldr	r1, [r7, #4]
   1ef3c:	4618      	mov	r0, r3
   1ef3e:	f7f7 fa35 	bl	163ac <z_priq_dumb_remove>
	z_mark_thread_as_not_pending(thread);
   1ef42:	6878      	ldr	r0, [r7, #4]
   1ef44:	f7ff ff1d 	bl	1ed82 <z_mark_thread_as_not_pending>
	thread->base.pended_on = NULL;
   1ef48:	687b      	ldr	r3, [r7, #4]
   1ef4a:	2200      	movs	r2, #0
   1ef4c:	609a      	str	r2, [r3, #8]
}
   1ef4e:	bf00      	nop
   1ef50:	3708      	adds	r7, #8
   1ef52:	46bd      	mov	sp, r7
   1ef54:	bd80      	pop	{r7, pc}

0001ef56 <z_thread_timeout>:
{
   1ef56:	b580      	push	{r7, lr}
   1ef58:	b084      	sub	sp, #16
   1ef5a:	af00      	add	r7, sp, #0
   1ef5c:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1ef5e:	687b      	ldr	r3, [r7, #4]
   1ef60:	3b18      	subs	r3, #24
   1ef62:	60fb      	str	r3, [r7, #12]
	z_sched_wake_thread(thread, true);
   1ef64:	2101      	movs	r1, #1
   1ef66:	68f8      	ldr	r0, [r7, #12]
   1ef68:	f7f6 fbc4 	bl	156f4 <z_sched_wake_thread>
}
   1ef6c:	bf00      	nop
   1ef6e:	3710      	adds	r7, #16
   1ef70:	46bd      	mov	sp, r7
   1ef72:	bd80      	pop	{r7, pc}

0001ef74 <resched>:
{
   1ef74:	b480      	push	{r7}
   1ef76:	b085      	sub	sp, #20
   1ef78:	af00      	add	r7, sp, #0
   1ef7a:	6078      	str	r0, [r7, #4]
   1ef7c:	687b      	ldr	r3, [r7, #4]
   1ef7e:	60fb      	str	r3, [r7, #12]

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	/* This convention works for both PRIMASK and BASEPRI */
	return key == 0U;
   1ef80:	68fb      	ldr	r3, [r7, #12]
   1ef82:	2b00      	cmp	r3, #0
   1ef84:	bf0c      	ite	eq
   1ef86:	2301      	moveq	r3, #1
   1ef88:	2300      	movne	r3, #0
   1ef8a:	b2db      	uxtb	r3, r3
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1ef8c:	2b00      	cmp	r3, #0
   1ef8e:	d00f      	beq.n	1efb0 <resched+0x3c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ef90:	f3ef 8305 	mrs	r3, IPSR
   1ef94:	60bb      	str	r3, [r7, #8]
  return(result);
   1ef96:	68bb      	ldr	r3, [r7, #8]
   1ef98:	2b00      	cmp	r3, #0
   1ef9a:	bf14      	ite	ne
   1ef9c:	2301      	movne	r3, #1
   1ef9e:	2300      	moveq	r3, #0
   1efa0:	b2db      	uxtb	r3, r3
   1efa2:	f083 0301 	eor.w	r3, r3, #1
   1efa6:	b2db      	uxtb	r3, r3
   1efa8:	2b00      	cmp	r3, #0
   1efaa:	d001      	beq.n	1efb0 <resched+0x3c>
   1efac:	2301      	movs	r3, #1
   1efae:	e000      	b.n	1efb2 <resched+0x3e>
   1efb0:	2300      	movs	r3, #0
   1efb2:	f003 0301 	and.w	r3, r3, #1
   1efb6:	b2db      	uxtb	r3, r3
}
   1efb8:	4618      	mov	r0, r3
   1efba:	3714      	adds	r7, #20
   1efbc:	46bd      	mov	sp, r7
   1efbe:	bc80      	pop	{r7}
   1efc0:	4770      	bx	lr

0001efc2 <z_reschedule_irqlock>:
{
   1efc2:	b580      	push	{r7, lr}
   1efc4:	b084      	sub	sp, #16
   1efc6:	af00      	add	r7, sp, #0
   1efc8:	6078      	str	r0, [r7, #4]
	if (resched(key)) {
   1efca:	6878      	ldr	r0, [r7, #4]
   1efcc:	f7ff ffd2 	bl	1ef74 <resched>
   1efd0:	4603      	mov	r3, r0
   1efd2:	2b00      	cmp	r3, #0
   1efd4:	d003      	beq.n	1efde <z_reschedule_irqlock+0x1c>
		z_swap_irqlock(key);
   1efd6:	6878      	ldr	r0, [r7, #4]
   1efd8:	f7ff ff0f 	bl	1edfa <z_swap_irqlock>
}
   1efdc:	e009      	b.n	1eff2 <z_reschedule_irqlock+0x30>
   1efde:	687b      	ldr	r3, [r7, #4]
   1efe0:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   1efe2:	68fb      	ldr	r3, [r7, #12]
   1efe4:	f383 8811 	msr	BASEPRI, r3
   1efe8:	f3bf 8f6f 	isb	sy
}
   1efec:	bf00      	nop
		signal_pending_ipi();
   1efee:	f7ff ff50 	bl	1ee92 <signal_pending_ipi>
}
   1eff2:	bf00      	nop
   1eff4:	3710      	adds	r7, #16
   1eff6:	46bd      	mov	sp, r7
   1eff8:	bd80      	pop	{r7, pc}

0001effa <z_priq_dumb_best>:
{
   1effa:	b580      	push	{r7, lr}
   1effc:	b084      	sub	sp, #16
   1effe:	af00      	add	r7, sp, #0
   1f000:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = NULL;
   1f002:	2300      	movs	r3, #0
   1f004:	60fb      	str	r3, [r7, #12]
	sys_dnode_t *n = sys_dlist_peek_head(pq);
   1f006:	6878      	ldr	r0, [r7, #4]
   1f008:	f7ff fd2e 	bl	1ea68 <sys_dlist_peek_head>
   1f00c:	60b8      	str	r0, [r7, #8]
	if (n != NULL) {
   1f00e:	68bb      	ldr	r3, [r7, #8]
   1f010:	2b00      	cmp	r3, #0
   1f012:	d001      	beq.n	1f018 <z_priq_dumb_best+0x1e>
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
   1f014:	68bb      	ldr	r3, [r7, #8]
   1f016:	60fb      	str	r3, [r7, #12]
	return thread;
   1f018:	68fb      	ldr	r3, [r7, #12]
}
   1f01a:	4618      	mov	r0, r3
   1f01c:	3710      	adds	r7, #16
   1f01e:	46bd      	mov	sp, r7
   1f020:	bd80      	pop	{r7, pc}

0001f022 <z_unpend_all>:
{
   1f022:	b580      	push	{r7, lr}
   1f024:	b084      	sub	sp, #16
   1f026:	af00      	add	r7, sp, #0
   1f028:	6078      	str	r0, [r7, #4]
	int need_sched = 0;
   1f02a:	2300      	movs	r3, #0
   1f02c:	60fb      	str	r3, [r7, #12]
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1f02e:	e007      	b.n	1f040 <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   1f030:	68b8      	ldr	r0, [r7, #8]
   1f032:	f7f6 fe03 	bl	15c3c <z_unpend_thread>
		z_ready_thread(thread);
   1f036:	68b8      	ldr	r0, [r7, #8]
   1f038:	f7f6 f828 	bl	1508c <z_ready_thread>
		need_sched = 1;
   1f03c:	2301      	movs	r3, #1
   1f03e:	60fb      	str	r3, [r7, #12]
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1f040:	6878      	ldr	r0, [r7, #4]
   1f042:	f7ff fecd 	bl	1ede0 <z_waitq_head>
   1f046:	60b8      	str	r0, [r7, #8]
   1f048:	68bb      	ldr	r3, [r7, #8]
   1f04a:	2b00      	cmp	r3, #0
   1f04c:	d1f0      	bne.n	1f030 <z_unpend_all+0xe>
	return need_sched;
   1f04e:	68fb      	ldr	r3, [r7, #12]
}
   1f050:	4618      	mov	r0, r3
   1f052:	3710      	adds	r7, #16
   1f054:	46bd      	mov	sp, r7
   1f056:	bd80      	pop	{r7, pc}

0001f058 <init_ready_q>:
{
   1f058:	b580      	push	{r7, lr}
   1f05a:	b082      	sub	sp, #8
   1f05c:	af00      	add	r7, sp, #0
   1f05e:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&rq->runq);
   1f060:	687b      	ldr	r3, [r7, #4]
   1f062:	3304      	adds	r3, #4
   1f064:	4618      	mov	r0, r3
   1f066:	f7ff fcc0 	bl	1e9ea <sys_dlist_init>
}
   1f06a:	bf00      	nop
   1f06c:	3708      	adds	r7, #8
   1f06e:	46bd      	mov	sp, r7
   1f070:	bd80      	pop	{r7, pc}

0001f072 <unpend_all>:
{
   1f072:	b580      	push	{r7, lr}
   1f074:	b086      	sub	sp, #24
   1f076:	af00      	add	r7, sp, #0
   1f078:	6078      	str	r0, [r7, #4]
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1f07a:	e011      	b.n	1f0a0 <unpend_all+0x2e>
		unpend_thread_no_timeout(thread);
   1f07c:	6978      	ldr	r0, [r7, #20]
   1f07e:	f7ff ff54 	bl	1ef2a <unpend_thread_no_timeout>
		(void)z_abort_thread_timeout(thread);
   1f082:	6978      	ldr	r0, [r7, #20]
   1f084:	f7ff fd9a 	bl	1ebbc <z_abort_thread_timeout>
   1f088:	697b      	ldr	r3, [r7, #20]
   1f08a:	613b      	str	r3, [r7, #16]
   1f08c:	2300      	movs	r3, #0
   1f08e:	60fb      	str	r3, [r7, #12]
	thread->arch.swap_return_value = value;
   1f090:	693b      	ldr	r3, [r7, #16]
   1f092:	68fa      	ldr	r2, [r7, #12]
   1f094:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
   1f098:	bf00      	nop
		ready_thread(thread);
   1f09a:	6978      	ldr	r0, [r7, #20]
   1f09c:	f7f5 ff6e 	bl	14f7c <ready_thread>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1f0a0:	6878      	ldr	r0, [r7, #4]
   1f0a2:	f7ff fe9d 	bl	1ede0 <z_waitq_head>
   1f0a6:	6178      	str	r0, [r7, #20]
   1f0a8:	697b      	ldr	r3, [r7, #20]
   1f0aa:	2b00      	cmp	r3, #0
   1f0ac:	d1e6      	bne.n	1f07c <unpend_all+0xa>
}
   1f0ae:	bf00      	nop
   1f0b0:	bf00      	nop
   1f0b2:	3718      	adds	r7, #24
   1f0b4:	46bd      	mov	sp, r7
   1f0b6:	bd80      	pop	{r7, pc}

0001f0b8 <sys_dnode_init>:
{
   1f0b8:	b480      	push	{r7}
   1f0ba:	b083      	sub	sp, #12
   1f0bc:	af00      	add	r7, sp, #0
   1f0be:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   1f0c0:	687b      	ldr	r3, [r7, #4]
   1f0c2:	2200      	movs	r2, #0
   1f0c4:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   1f0c6:	687b      	ldr	r3, [r7, #4]
   1f0c8:	2200      	movs	r2, #0
   1f0ca:	605a      	str	r2, [r3, #4]
}
   1f0cc:	bf00      	nop
   1f0ce:	370c      	adds	r7, #12
   1f0d0:	46bd      	mov	sp, r7
   1f0d2:	bc80      	pop	{r7}
   1f0d4:	4770      	bx	lr

0001f0d6 <sys_dnode_is_linked>:
{
   1f0d6:	b480      	push	{r7}
   1f0d8:	b083      	sub	sp, #12
   1f0da:	af00      	add	r7, sp, #0
   1f0dc:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   1f0de:	687b      	ldr	r3, [r7, #4]
   1f0e0:	681b      	ldr	r3, [r3, #0]
   1f0e2:	2b00      	cmp	r3, #0
   1f0e4:	bf14      	ite	ne
   1f0e6:	2301      	movne	r3, #1
   1f0e8:	2300      	moveq	r3, #0
   1f0ea:	b2db      	uxtb	r3, r3
}
   1f0ec:	4618      	mov	r0, r3
   1f0ee:	370c      	adds	r7, #12
   1f0f0:	46bd      	mov	sp, r7
   1f0f2:	bc80      	pop	{r7}
   1f0f4:	4770      	bx	lr

0001f0f6 <sys_dlist_is_empty>:
{
   1f0f6:	b480      	push	{r7}
   1f0f8:	b083      	sub	sp, #12
   1f0fa:	af00      	add	r7, sp, #0
   1f0fc:	6078      	str	r0, [r7, #4]
	return list->head == list;
   1f0fe:	687b      	ldr	r3, [r7, #4]
   1f100:	681b      	ldr	r3, [r3, #0]
   1f102:	687a      	ldr	r2, [r7, #4]
   1f104:	429a      	cmp	r2, r3
   1f106:	bf0c      	ite	eq
   1f108:	2301      	moveq	r3, #1
   1f10a:	2300      	movne	r3, #0
   1f10c:	b2db      	uxtb	r3, r3
}
   1f10e:	4618      	mov	r0, r3
   1f110:	370c      	adds	r7, #12
   1f112:	46bd      	mov	sp, r7
   1f114:	bc80      	pop	{r7}
   1f116:	4770      	bx	lr

0001f118 <sys_dlist_peek_head>:
{
   1f118:	b580      	push	{r7, lr}
   1f11a:	b082      	sub	sp, #8
   1f11c:	af00      	add	r7, sp, #0
   1f11e:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f120:	6878      	ldr	r0, [r7, #4]
   1f122:	f7ff ffe8 	bl	1f0f6 <sys_dlist_is_empty>
   1f126:	4603      	mov	r3, r0
   1f128:	2b00      	cmp	r3, #0
   1f12a:	d102      	bne.n	1f132 <sys_dlist_peek_head+0x1a>
   1f12c:	687b      	ldr	r3, [r7, #4]
   1f12e:	681b      	ldr	r3, [r3, #0]
   1f130:	e000      	b.n	1f134 <sys_dlist_peek_head+0x1c>
   1f132:	2300      	movs	r3, #0
}
   1f134:	4618      	mov	r0, r3
   1f136:	3708      	adds	r7, #8
   1f138:	46bd      	mov	sp, r7
   1f13a:	bd80      	pop	{r7, pc}

0001f13c <sys_dlist_peek_next_no_check>:
{
   1f13c:	b480      	push	{r7}
   1f13e:	b083      	sub	sp, #12
   1f140:	af00      	add	r7, sp, #0
   1f142:	6078      	str	r0, [r7, #4]
   1f144:	6039      	str	r1, [r7, #0]
	return (node == list->tail) ? NULL : node->next;
   1f146:	687b      	ldr	r3, [r7, #4]
   1f148:	685b      	ldr	r3, [r3, #4]
   1f14a:	683a      	ldr	r2, [r7, #0]
   1f14c:	429a      	cmp	r2, r3
   1f14e:	d002      	beq.n	1f156 <sys_dlist_peek_next_no_check+0x1a>
   1f150:	683b      	ldr	r3, [r7, #0]
   1f152:	681b      	ldr	r3, [r3, #0]
   1f154:	e000      	b.n	1f158 <sys_dlist_peek_next_no_check+0x1c>
   1f156:	2300      	movs	r3, #0
}
   1f158:	4618      	mov	r0, r3
   1f15a:	370c      	adds	r7, #12
   1f15c:	46bd      	mov	sp, r7
   1f15e:	bc80      	pop	{r7}
   1f160:	4770      	bx	lr

0001f162 <sys_dlist_peek_next>:
{
   1f162:	b580      	push	{r7, lr}
   1f164:	b082      	sub	sp, #8
   1f166:	af00      	add	r7, sp, #0
   1f168:	6078      	str	r0, [r7, #4]
   1f16a:	6039      	str	r1, [r7, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1f16c:	683b      	ldr	r3, [r7, #0]
   1f16e:	2b00      	cmp	r3, #0
   1f170:	d005      	beq.n	1f17e <sys_dlist_peek_next+0x1c>
   1f172:	6839      	ldr	r1, [r7, #0]
   1f174:	6878      	ldr	r0, [r7, #4]
   1f176:	f7ff ffe1 	bl	1f13c <sys_dlist_peek_next_no_check>
   1f17a:	4603      	mov	r3, r0
   1f17c:	e000      	b.n	1f180 <sys_dlist_peek_next+0x1e>
   1f17e:	2300      	movs	r3, #0
}
   1f180:	4618      	mov	r0, r3
   1f182:	3708      	adds	r7, #8
   1f184:	46bd      	mov	sp, r7
   1f186:	bd80      	pop	{r7, pc}

0001f188 <sys_dlist_append>:
{
   1f188:	b480      	push	{r7}
   1f18a:	b085      	sub	sp, #20
   1f18c:	af00      	add	r7, sp, #0
   1f18e:	6078      	str	r0, [r7, #4]
   1f190:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const tail = list->tail;
   1f192:	687b      	ldr	r3, [r7, #4]
   1f194:	685b      	ldr	r3, [r3, #4]
   1f196:	60fb      	str	r3, [r7, #12]
	node->next = list;
   1f198:	683b      	ldr	r3, [r7, #0]
   1f19a:	687a      	ldr	r2, [r7, #4]
   1f19c:	601a      	str	r2, [r3, #0]
	node->prev = tail;
   1f19e:	683b      	ldr	r3, [r7, #0]
   1f1a0:	68fa      	ldr	r2, [r7, #12]
   1f1a2:	605a      	str	r2, [r3, #4]
	tail->next = node;
   1f1a4:	68fb      	ldr	r3, [r7, #12]
   1f1a6:	683a      	ldr	r2, [r7, #0]
   1f1a8:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1f1aa:	687b      	ldr	r3, [r7, #4]
   1f1ac:	683a      	ldr	r2, [r7, #0]
   1f1ae:	605a      	str	r2, [r3, #4]
}
   1f1b0:	bf00      	nop
   1f1b2:	3714      	adds	r7, #20
   1f1b4:	46bd      	mov	sp, r7
   1f1b6:	bc80      	pop	{r7}
   1f1b8:	4770      	bx	lr

0001f1ba <sys_dlist_insert>:
{
   1f1ba:	b480      	push	{r7}
   1f1bc:	b085      	sub	sp, #20
   1f1be:	af00      	add	r7, sp, #0
   1f1c0:	6078      	str	r0, [r7, #4]
   1f1c2:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const prev = successor->prev;
   1f1c4:	687b      	ldr	r3, [r7, #4]
   1f1c6:	685b      	ldr	r3, [r3, #4]
   1f1c8:	60fb      	str	r3, [r7, #12]
	node->prev = prev;
   1f1ca:	683b      	ldr	r3, [r7, #0]
   1f1cc:	68fa      	ldr	r2, [r7, #12]
   1f1ce:	605a      	str	r2, [r3, #4]
	node->next = successor;
   1f1d0:	683b      	ldr	r3, [r7, #0]
   1f1d2:	687a      	ldr	r2, [r7, #4]
   1f1d4:	601a      	str	r2, [r3, #0]
	prev->next = node;
   1f1d6:	68fb      	ldr	r3, [r7, #12]
   1f1d8:	683a      	ldr	r2, [r7, #0]
   1f1da:	601a      	str	r2, [r3, #0]
	successor->prev = node;
   1f1dc:	687b      	ldr	r3, [r7, #4]
   1f1de:	683a      	ldr	r2, [r7, #0]
   1f1e0:	605a      	str	r2, [r3, #4]
}
   1f1e2:	bf00      	nop
   1f1e4:	3714      	adds	r7, #20
   1f1e6:	46bd      	mov	sp, r7
   1f1e8:	bc80      	pop	{r7}
   1f1ea:	4770      	bx	lr

0001f1ec <sys_dlist_remove>:
{
   1f1ec:	b580      	push	{r7, lr}
   1f1ee:	b084      	sub	sp, #16
   1f1f0:	af00      	add	r7, sp, #0
   1f1f2:	6078      	str	r0, [r7, #4]
	sys_dnode_t *const prev = node->prev;
   1f1f4:	687b      	ldr	r3, [r7, #4]
   1f1f6:	685b      	ldr	r3, [r3, #4]
   1f1f8:	60fb      	str	r3, [r7, #12]
	sys_dnode_t *const next = node->next;
   1f1fa:	687b      	ldr	r3, [r7, #4]
   1f1fc:	681b      	ldr	r3, [r3, #0]
   1f1fe:	60bb      	str	r3, [r7, #8]
	prev->next = next;
   1f200:	68fb      	ldr	r3, [r7, #12]
   1f202:	68ba      	ldr	r2, [r7, #8]
   1f204:	601a      	str	r2, [r3, #0]
	next->prev = prev;
   1f206:	68bb      	ldr	r3, [r7, #8]
   1f208:	68fa      	ldr	r2, [r7, #12]
   1f20a:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
   1f20c:	6878      	ldr	r0, [r7, #4]
   1f20e:	f7ff ff53 	bl	1f0b8 <sys_dnode_init>
}
   1f212:	bf00      	nop
   1f214:	3710      	adds	r7, #16
   1f216:	46bd      	mov	sp, r7
   1f218:	bd80      	pop	{r7, pc}

0001f21a <remove_timeout>:
{
   1f21a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f21c:	b083      	sub	sp, #12
   1f21e:	af00      	add	r7, sp, #0
   1f220:	6078      	str	r0, [r7, #4]
	if (next(t) != NULL) {
   1f222:	6878      	ldr	r0, [r7, #4]
   1f224:	f7f7 fd18 	bl	16c58 <next>
   1f228:	4603      	mov	r3, r0
   1f22a:	2b00      	cmp	r3, #0
   1f22c:	d00d      	beq.n	1f24a <remove_timeout+0x30>
		next(t)->dticks += t->dticks;
   1f22e:	6878      	ldr	r0, [r7, #4]
   1f230:	f7f7 fd12 	bl	16c58 <next>
   1f234:	4606      	mov	r6, r0
   1f236:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   1f23a:	687b      	ldr	r3, [r7, #4]
   1f23c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   1f240:	1884      	adds	r4, r0, r2
   1f242:	eb41 0503 	adc.w	r5, r1, r3
   1f246:	e9c6 4504 	strd	r4, r5, [r6, #16]
	sys_dlist_remove(&t->node);
   1f24a:	687b      	ldr	r3, [r7, #4]
   1f24c:	4618      	mov	r0, r3
   1f24e:	f7ff ffcd 	bl	1f1ec <sys_dlist_remove>
}
   1f252:	bf00      	nop
   1f254:	370c      	adds	r7, #12
   1f256:	46bd      	mov	sp, r7
   1f258:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f25a <next_timeout>:
{
   1f25a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   1f25e:	b086      	sub	sp, #24
   1f260:	af00      	add	r7, sp, #0
	struct _timeout *to = first();
   1f262:	f7f7 fceb 	bl	16c3c <first>
   1f266:	6138      	str	r0, [r7, #16]
	int32_t ticks_elapsed = elapsed();
   1f268:	f7f7 fd08 	bl	16c7c <elapsed>
   1f26c:	60f8      	str	r0, [r7, #12]
	if ((to == NULL) ||
   1f26e:	693b      	ldr	r3, [r7, #16]
   1f270:	2b00      	cmp	r3, #0
   1f272:	d00f      	beq.n	1f294 <next_timeout+0x3a>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1f274:	693b      	ldr	r3, [r7, #16]
   1f276:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   1f27a:	68f9      	ldr	r1, [r7, #12]
   1f27c:	17c8      	asrs	r0, r1, #31
   1f27e:	468a      	mov	sl, r1
   1f280:	4683      	mov	fp, r0
   1f282:	ebb2 040a 	subs.w	r4, r2, sl
   1f286:	eb63 050b 	sbc.w	r5, r3, fp
	if ((to == NULL) ||
   1f28a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   1f28e:	f175 0300 	sbcs.w	r3, r5, #0
   1f292:	db03      	blt.n	1f29c <next_timeout+0x42>
		ret = MAX_WAIT;
   1f294:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1f298:	617b      	str	r3, [r7, #20]
   1f29a:	e016      	b.n	1f2ca <next_timeout+0x70>
		ret = MAX(0, to->dticks - ticks_elapsed);
   1f29c:	693b      	ldr	r3, [r7, #16]
   1f29e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   1f2a2:	68f9      	ldr	r1, [r7, #12]
   1f2a4:	17c8      	asrs	r0, r1, #31
   1f2a6:	4688      	mov	r8, r1
   1f2a8:	4681      	mov	r9, r0
   1f2aa:	ebb2 0108 	subs.w	r1, r2, r8
   1f2ae:	6039      	str	r1, [r7, #0]
   1f2b0:	eb63 0309 	sbc.w	r3, r3, r9
   1f2b4:	607b      	str	r3, [r7, #4]
   1f2b6:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f2ba:	2b00      	cmp	r3, #0
   1f2bc:	da03      	bge.n	1f2c6 <next_timeout+0x6c>
   1f2be:	f04f 0200 	mov.w	r2, #0
   1f2c2:	f04f 0300 	mov.w	r3, #0
   1f2c6:	4613      	mov	r3, r2
   1f2c8:	617b      	str	r3, [r7, #20]
	return ret;
   1f2ca:	697b      	ldr	r3, [r7, #20]
}
   1f2cc:	4618      	mov	r0, r3
   1f2ce:	3718      	adds	r7, #24
   1f2d0:	46bd      	mov	sp, r7
   1f2d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0001f2d6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1f2d6:	b580      	push	{r7, lr}
   1f2d8:	af00      	add	r7, sp, #0
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1f2da:	f7f8 f817 	bl	1730c <sys_clock_tick_get>
   1f2de:	4602      	mov	r2, r0
   1f2e0:	460b      	mov	r3, r1
   1f2e2:	4613      	mov	r3, r2
#else
	return (uint32_t)curr_tick;
#endif
}
   1f2e4:	4618      	mov	r0, r3
   1f2e6:	bd80      	pop	{r7, pc}

0001f2e8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   1f2e8:	b580      	push	{r7, lr}
   1f2ea:	af00      	add	r7, sp, #0
	return sys_clock_tick_get();
   1f2ec:	f7f8 f80e 	bl	1730c <sys_clock_tick_get>
   1f2f0:	4602      	mov	r2, r0
   1f2f2:	460b      	mov	r3, r1
}
   1f2f4:	4610      	mov	r0, r2
   1f2f6:	4619      	mov	r1, r3
   1f2f8:	bd80      	pop	{r7, pc}

0001f2fa <sys_timepoint_calc>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

k_timepoint_t sys_timepoint_calc(k_timeout_t timeout)
{
   1f2fa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   1f2fe:	b088      	sub	sp, #32
   1f300:	af00      	add	r7, sp, #0
   1f302:	60f8      	str	r0, [r7, #12]
   1f304:	e9c7 2300 	strd	r2, r3, [r7]
	k_timepoint_t timepoint;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f308:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f30c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f310:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f314:	428b      	cmp	r3, r1
   1f316:	bf08      	it	eq
   1f318:	4282      	cmpeq	r2, r0
   1f31a:	d106      	bne.n	1f32a <sys_timepoint_calc+0x30>
		timepoint.tick = UINT64_MAX;
   1f31c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f324:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1f328:	e042      	b.n	1f3b0 <sys_timepoint_calc+0xb6>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f32a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f32e:	f04f 0000 	mov.w	r0, #0
   1f332:	f04f 0100 	mov.w	r1, #0
   1f336:	428b      	cmp	r3, r1
   1f338:	bf08      	it	eq
   1f33a:	4282      	cmpeq	r2, r0
   1f33c:	d106      	bne.n	1f34c <sys_timepoint_calc+0x52>
		timepoint.tick = 0;
   1f33e:	f04f 0200 	mov.w	r2, #0
   1f342:	f04f 0300 	mov.w	r3, #0
   1f346:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1f34a:	e031      	b.n	1f3b0 <sys_timepoint_calc+0xb6>
	} else {
		k_ticks_t dt = timeout.ticks;
   1f34c:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f350:	e9c7 2306 	strd	r2, r3, [r7, #24]

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1f354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1f358:	f06f 0001 	mvn.w	r0, #1
   1f35c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f360:	1a84      	subs	r4, r0, r2
   1f362:	eb61 0503 	sbc.w	r5, r1, r3
   1f366:	2d00      	cmp	r5, #0
   1f368:	db0e      	blt.n	1f388 <sys_timepoint_calc+0x8e>
			timepoint.tick = Z_TICK_ABS(dt);
   1f36a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1f36e:	f06f 0001 	mvn.w	r0, #1
   1f372:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f376:	ebb0 0a02 	subs.w	sl, r0, r2
   1f37a:	eb61 0b03 	sbc.w	fp, r1, r3
   1f37e:	4652      	mov	r2, sl
   1f380:	465b      	mov	r3, fp
   1f382:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1f386:	e013      	b.n	1f3b0 <sys_timepoint_calc+0xb6>
		} else {
			timepoint.tick = sys_clock_tick_get() + MAX(1, dt);
   1f388:	f7f7 ffc0 	bl	1730c <sys_clock_tick_get>
   1f38c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1f390:	2a01      	cmp	r2, #1
   1f392:	f173 0400 	sbcs.w	r4, r3, #0
   1f396:	da03      	bge.n	1f3a0 <sys_timepoint_calc+0xa6>
   1f398:	f04f 0201 	mov.w	r2, #1
   1f39c:	f04f 0300 	mov.w	r3, #0
   1f3a0:	eb10 0802 	adds.w	r8, r0, r2
   1f3a4:	eb41 0903 	adc.w	r9, r1, r3
   1f3a8:	4642      	mov	r2, r8
   1f3aa:	464b      	mov	r3, r9
   1f3ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}
	}

	return timepoint;
   1f3b0:	68f9      	ldr	r1, [r7, #12]
   1f3b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1f3b6:	e9c1 2300 	strd	r2, r3, [r1]
}
   1f3ba:	68f8      	ldr	r0, [r7, #12]
   1f3bc:	3720      	adds	r7, #32
   1f3be:	46bd      	mov	sp, r7
   1f3c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0001f3c4 <sys_timepoint_timeout>:

k_timeout_t sys_timepoint_timeout(k_timepoint_t timepoint)
{
   1f3c4:	b5b0      	push	{r4, r5, r7, lr}
   1f3c6:	b088      	sub	sp, #32
   1f3c8:	af00      	add	r7, sp, #0
   1f3ca:	60f8      	str	r0, [r7, #12]
   1f3cc:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t now, remaining;

	if (timepoint.tick == UINT64_MAX) {
   1f3d0:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f3d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1f3d8:	bf08      	it	eq
   1f3da:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1f3de:	d107      	bne.n	1f3f0 <sys_timepoint_timeout+0x2c>
		return K_FOREVER;
   1f3e0:	68f9      	ldr	r1, [r7, #12]
   1f3e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f3e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f3ea:	e9c1 2300 	strd	r2, r3, [r1]
   1f3ee:	e02c      	b.n	1f44a <sys_timepoint_timeout+0x86>
	}
	if (timepoint.tick == 0) {
   1f3f0:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f3f4:	4313      	orrs	r3, r2
   1f3f6:	d107      	bne.n	1f408 <sys_timepoint_timeout+0x44>
		return K_NO_WAIT;
   1f3f8:	68f9      	ldr	r1, [r7, #12]
   1f3fa:	f04f 0200 	mov.w	r2, #0
   1f3fe:	f04f 0300 	mov.w	r3, #0
   1f402:	e9c1 2300 	strd	r2, r3, [r1]
   1f406:	e020      	b.n	1f44a <sys_timepoint_timeout+0x86>
	}

	now = sys_clock_tick_get();
   1f408:	f7f7 ff80 	bl	1730c <sys_clock_tick_get>
   1f40c:	4602      	mov	r2, r0
   1f40e:	460b      	mov	r3, r1
   1f410:	e9c7 2306 	strd	r2, r3, [r7, #24]
	remaining = (timepoint.tick > now) ? (timepoint.tick - now) : 0;
   1f414:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f418:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   1f41c:	4290      	cmp	r0, r2
   1f41e:	eb71 0303 	sbcs.w	r3, r1, r3
   1f422:	d207      	bcs.n	1f434 <sys_timepoint_timeout+0x70>
   1f424:	e9d7 0100 	ldrd	r0, r1, [r7]
   1f428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1f42c:	1a84      	subs	r4, r0, r2
   1f42e:	eb61 0503 	sbc.w	r5, r1, r3
   1f432:	e003      	b.n	1f43c <sys_timepoint_timeout+0x78>
   1f434:	f04f 0400 	mov.w	r4, #0
   1f438:	f04f 0500 	mov.w	r5, #0
   1f43c:	e9c7 4504 	strd	r4, r5, [r7, #16]
	return K_TICKS(remaining);
   1f440:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1f444:	68f9      	ldr	r1, [r7, #12]
   1f446:	e9c1 2300 	strd	r2, r3, [r1]
}
   1f44a:	68f8      	ldr	r0, [r7, #12]
   1f44c:	3720      	adds	r7, #32
   1f44e:	46bd      	mov	sp, r7
   1f450:	bdb0      	pop	{r4, r5, r7, pc}

0001f452 <sys_dlist_init>:
{
   1f452:	b480      	push	{r7}
   1f454:	b083      	sub	sp, #12
   1f456:	af00      	add	r7, sp, #0
   1f458:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   1f45a:	687b      	ldr	r3, [r7, #4]
   1f45c:	687a      	ldr	r2, [r7, #4]
   1f45e:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1f460:	687b      	ldr	r3, [r7, #4]
   1f462:	687a      	ldr	r2, [r7, #4]
   1f464:	605a      	str	r2, [r3, #4]
}
   1f466:	bf00      	nop
   1f468:	370c      	adds	r7, #12
   1f46a:	46bd      	mov	sp, r7
   1f46c:	bc80      	pop	{r7}
   1f46e:	4770      	bx	lr

0001f470 <sys_dnode_init>:
{
   1f470:	b480      	push	{r7}
   1f472:	b083      	sub	sp, #12
   1f474:	af00      	add	r7, sp, #0
   1f476:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   1f478:	687b      	ldr	r3, [r7, #4]
   1f47a:	2200      	movs	r2, #0
   1f47c:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   1f47e:	687b      	ldr	r3, [r7, #4]
   1f480:	2200      	movs	r2, #0
   1f482:	605a      	str	r2, [r3, #4]
}
   1f484:	bf00      	nop
   1f486:	370c      	adds	r7, #12
   1f488:	46bd      	mov	sp, r7
   1f48a:	bc80      	pop	{r7}
   1f48c:	4770      	bx	lr

0001f48e <sys_dnode_is_linked>:
{
   1f48e:	b480      	push	{r7}
   1f490:	b083      	sub	sp, #12
   1f492:	af00      	add	r7, sp, #0
   1f494:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   1f496:	687b      	ldr	r3, [r7, #4]
   1f498:	681b      	ldr	r3, [r3, #0]
   1f49a:	2b00      	cmp	r3, #0
   1f49c:	bf14      	ite	ne
   1f49e:	2301      	movne	r3, #1
   1f4a0:	2300      	moveq	r3, #0
   1f4a2:	b2db      	uxtb	r3, r3
}
   1f4a4:	4618      	mov	r0, r3
   1f4a6:	370c      	adds	r7, #12
   1f4a8:	46bd      	mov	sp, r7
   1f4aa:	bc80      	pop	{r7}
   1f4ac:	4770      	bx	lr

0001f4ae <sys_dlist_is_empty>:
{
   1f4ae:	b480      	push	{r7}
   1f4b0:	b083      	sub	sp, #12
   1f4b2:	af00      	add	r7, sp, #0
   1f4b4:	6078      	str	r0, [r7, #4]
	return list->head == list;
   1f4b6:	687b      	ldr	r3, [r7, #4]
   1f4b8:	681b      	ldr	r3, [r3, #0]
   1f4ba:	687a      	ldr	r2, [r7, #4]
   1f4bc:	429a      	cmp	r2, r3
   1f4be:	bf0c      	ite	eq
   1f4c0:	2301      	moveq	r3, #1
   1f4c2:	2300      	movne	r3, #0
   1f4c4:	b2db      	uxtb	r3, r3
}
   1f4c6:	4618      	mov	r0, r3
   1f4c8:	370c      	adds	r7, #12
   1f4ca:	46bd      	mov	sp, r7
   1f4cc:	bc80      	pop	{r7}
   1f4ce:	4770      	bx	lr

0001f4d0 <sys_dlist_peek_head>:
{
   1f4d0:	b580      	push	{r7, lr}
   1f4d2:	b082      	sub	sp, #8
   1f4d4:	af00      	add	r7, sp, #0
   1f4d6:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f4d8:	6878      	ldr	r0, [r7, #4]
   1f4da:	f7ff ffe8 	bl	1f4ae <sys_dlist_is_empty>
   1f4de:	4603      	mov	r3, r0
   1f4e0:	2b00      	cmp	r3, #0
   1f4e2:	d102      	bne.n	1f4ea <sys_dlist_peek_head+0x1a>
   1f4e4:	687b      	ldr	r3, [r7, #4]
   1f4e6:	681b      	ldr	r3, [r3, #0]
   1f4e8:	e000      	b.n	1f4ec <sys_dlist_peek_head+0x1c>
   1f4ea:	2300      	movs	r3, #0
}
   1f4ec:	4618      	mov	r0, r3
   1f4ee:	3708      	adds	r7, #8
   1f4f0:	46bd      	mov	sp, r7
   1f4f2:	bd80      	pop	{r7, pc}

0001f4f4 <z_object_init>:
{
   1f4f4:	b480      	push	{r7}
   1f4f6:	b083      	sub	sp, #12
   1f4f8:	af00      	add	r7, sp, #0
   1f4fa:	6078      	str	r0, [r7, #4]
}
   1f4fc:	bf00      	nop
   1f4fe:	370c      	adds	r7, #12
   1f500:	46bd      	mov	sp, r7
   1f502:	bc80      	pop	{r7}
   1f504:	4770      	bx	lr

0001f506 <k_uptime_ticks>:
{
   1f506:	b580      	push	{r7, lr}
   1f508:	af00      	add	r7, sp, #0
	return z_impl_k_uptime_ticks();
   1f50a:	f7ff feed 	bl	1f2e8 <z_impl_k_uptime_ticks>
   1f50e:	4602      	mov	r2, r0
   1f510:	460b      	mov	r3, r1
}
   1f512:	4610      	mov	r0, r2
   1f514:	4619      	mov	r1, r3
   1f516:	bd80      	pop	{r7, pc}

0001f518 <z_init_timeout>:
{
   1f518:	b580      	push	{r7, lr}
   1f51a:	b082      	sub	sp, #8
   1f51c:	af00      	add	r7, sp, #0
   1f51e:	6078      	str	r0, [r7, #4]
	sys_dnode_init(&to->node);
   1f520:	687b      	ldr	r3, [r7, #4]
   1f522:	4618      	mov	r0, r3
   1f524:	f7ff ffa4 	bl	1f470 <sys_dnode_init>
}
   1f528:	bf00      	nop
   1f52a:	3708      	adds	r7, #8
   1f52c:	46bd      	mov	sp, r7
   1f52e:	bd80      	pop	{r7, pc}

0001f530 <z_reschedule_unlocked>:
{
   1f530:	b580      	push	{r7, lr}
   1f532:	b082      	sub	sp, #8
   1f534:	af00      	add	r7, sp, #0
	__asm__ volatile(
   1f536:	f04f 0320 	mov.w	r3, #32
   1f53a:	f3ef 8211 	mrs	r2, BASEPRI
   1f53e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f542:	f3bf 8f6f 	isb	sy
   1f546:	607a      	str	r2, [r7, #4]
   1f548:	603b      	str	r3, [r7, #0]
	return key;
   1f54a:	687b      	ldr	r3, [r7, #4]
	(void) z_reschedule_irqlock(arch_irq_lock());
   1f54c:	4618      	mov	r0, r3
   1f54e:	f7ff fd38 	bl	1efc2 <z_reschedule_irqlock>
}
   1f552:	bf00      	nop
   1f554:	3708      	adds	r7, #8
   1f556:	46bd      	mov	sp, r7
   1f558:	bd80      	pop	{r7, pc}

0001f55a <z_waitq_init>:
{
   1f55a:	b580      	push	{r7, lr}
   1f55c:	b082      	sub	sp, #8
   1f55e:	af00      	add	r7, sp, #0
   1f560:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   1f562:	687b      	ldr	r3, [r7, #4]
   1f564:	4618      	mov	r0, r3
   1f566:	f7ff ff74 	bl	1f452 <sys_dlist_init>
}
   1f56a:	bf00      	nop
   1f56c:	3708      	adds	r7, #8
   1f56e:	46bd      	mov	sp, r7
   1f570:	bd80      	pop	{r7, pc}

0001f572 <z_waitq_head>:
{
   1f572:	b580      	push	{r7, lr}
   1f574:	b082      	sub	sp, #8
   1f576:	af00      	add	r7, sp, #0
   1f578:	6078      	str	r0, [r7, #4]
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1f57a:	687b      	ldr	r3, [r7, #4]
   1f57c:	4618      	mov	r0, r3
   1f57e:	f7ff ffa7 	bl	1f4d0 <sys_dlist_peek_head>
   1f582:	4603      	mov	r3, r0
}
   1f584:	4618      	mov	r0, r3
   1f586:	3708      	adds	r7, #8
   1f588:	46bd      	mov	sp, r7
   1f58a:	bd80      	pop	{r7, pc}

0001f58c <k_timer_init>:
{
   1f58c:	b580      	push	{r7, lr}
   1f58e:	b084      	sub	sp, #16
   1f590:	af00      	add	r7, sp, #0
   1f592:	60f8      	str	r0, [r7, #12]
   1f594:	60b9      	str	r1, [r7, #8]
   1f596:	607a      	str	r2, [r7, #4]
	timer->expiry_fn = expiry_fn;
   1f598:	68fb      	ldr	r3, [r7, #12]
   1f59a:	68ba      	ldr	r2, [r7, #8]
   1f59c:	621a      	str	r2, [r3, #32]
	timer->stop_fn = stop_fn;
   1f59e:	68fb      	ldr	r3, [r7, #12]
   1f5a0:	687a      	ldr	r2, [r7, #4]
   1f5a2:	625a      	str	r2, [r3, #36]	; 0x24
	timer->status = 0U;
   1f5a4:	68fb      	ldr	r3, [r7, #12]
   1f5a6:	2200      	movs	r2, #0
   1f5a8:	631a      	str	r2, [r3, #48]	; 0x30
		z_waitq_init(&timer->wait_q);
   1f5aa:	68fb      	ldr	r3, [r7, #12]
   1f5ac:	3318      	adds	r3, #24
   1f5ae:	4618      	mov	r0, r3
   1f5b0:	f7ff ffd3 	bl	1f55a <z_waitq_init>
	z_init_timeout(&timer->timeout);
   1f5b4:	68fb      	ldr	r3, [r7, #12]
   1f5b6:	4618      	mov	r0, r3
   1f5b8:	f7ff ffae 	bl	1f518 <z_init_timeout>
	timer->user_data = NULL;
   1f5bc:	68fb      	ldr	r3, [r7, #12]
   1f5be:	2200      	movs	r2, #0
   1f5c0:	635a      	str	r2, [r3, #52]	; 0x34
	z_object_init(timer);
   1f5c2:	68f8      	ldr	r0, [r7, #12]
   1f5c4:	f7ff ff96 	bl	1f4f4 <z_object_init>
}
   1f5c8:	bf00      	nop
   1f5ca:	3710      	adds	r7, #16
   1f5cc:	46bd      	mov	sp, r7
   1f5ce:	bd80      	pop	{r7, pc}

0001f5d0 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1f5d0:	b580      	push	{r7, lr}
   1f5d2:	b084      	sub	sp, #16
   1f5d4:	af00      	add	r7, sp, #0
   1f5d6:	6078      	str	r0, [r7, #4]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   1f5d8:	687b      	ldr	r3, [r7, #4]
   1f5da:	4618      	mov	r0, r3
   1f5dc:	f7f7 fcba 	bl	16f54 <z_abort_timeout>
   1f5e0:	4603      	mov	r3, r0
   1f5e2:	2b00      	cmp	r3, #0
   1f5e4:	bf14      	ite	ne
   1f5e6:	2301      	movne	r3, #1
   1f5e8:	2300      	moveq	r3, #0
   1f5ea:	73fb      	strb	r3, [r7, #15]

	if (inactive) {
   1f5ec:	7bfb      	ldrb	r3, [r7, #15]
   1f5ee:	2b00      	cmp	r3, #0
   1f5f0:	d116      	bne.n	1f620 <z_impl_k_timer_stop+0x50>
		return;
	}

	if (timer->stop_fn != NULL) {
   1f5f2:	687b      	ldr	r3, [r7, #4]
   1f5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f5f6:	2b00      	cmp	r3, #0
   1f5f8:	d003      	beq.n	1f602 <z_impl_k_timer_stop+0x32>
		timer->stop_fn(timer);
   1f5fa:	687b      	ldr	r3, [r7, #4]
   1f5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f5fe:	6878      	ldr	r0, [r7, #4]
   1f600:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1f602:	687b      	ldr	r3, [r7, #4]
   1f604:	3318      	adds	r3, #24
   1f606:	4618      	mov	r0, r3
   1f608:	f7f6 f9de 	bl	159c8 <z_unpend1_no_timeout>
   1f60c:	60b8      	str	r0, [r7, #8]

		if (pending_thread != NULL) {
   1f60e:	68bb      	ldr	r3, [r7, #8]
   1f610:	2b00      	cmp	r3, #0
   1f612:	d006      	beq.n	1f622 <z_impl_k_timer_stop+0x52>
			z_ready_thread(pending_thread);
   1f614:	68b8      	ldr	r0, [r7, #8]
   1f616:	f7f5 fd39 	bl	1508c <z_ready_thread>
			z_reschedule_unlocked();
   1f61a:	f7ff ff89 	bl	1f530 <z_reschedule_unlocked>
   1f61e:	e000      	b.n	1f622 <z_impl_k_timer_stop+0x52>
		return;
   1f620:	bf00      	nop
		}
	}
}
   1f622:	3710      	adds	r7, #16
   1f624:	46bd      	mov	sp, r7
   1f626:	bd80      	pop	{r7, pc}

0001f628 <boot_banner>:
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif
#endif

void boot_banner(void)
{
   1f628:	b480      	push	{r7}
   1f62a:	af00      	add	r7, sp, #0
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#ifdef CONFIG_BOOT_BANNER
	printk("*** " CONFIG_BOOT_BANNER_STRING " " BANNER_VERSION BANNER_POSTFIX " ***\n");
#endif /* CONFIG_BOOT_BANNER */
}
   1f62c:	bf00      	nop
   1f62e:	46bd      	mov	sp, r7
   1f630:	bc80      	pop	{r7}
   1f632:	4770      	bx	lr

0001f634 <strncpy>:
   1f634:	b510      	push	{r4, lr}
   1f636:	3901      	subs	r1, #1
   1f638:	4604      	mov	r4, r0
   1f63a:	b132      	cbz	r2, 1f64a <strncpy+0x16>
   1f63c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1f640:	3a01      	subs	r2, #1
   1f642:	f800 3b01 	strb.w	r3, [r0], #1
   1f646:	2b00      	cmp	r3, #0
   1f648:	d1f7      	bne.n	1f63a <strncpy+0x6>
   1f64a:	2100      	movs	r1, #0
   1f64c:	f000 f94c 	bl	1f8e8 <memset>
   1f650:	4620      	mov	r0, r4
   1f652:	bd10      	pop	{r4, pc}

0001f654 <strnlen>:
   1f654:	4602      	mov	r2, r0
   1f656:	4401      	add	r1, r0
   1f658:	b510      	push	{r4, lr}
   1f65a:	428a      	cmp	r2, r1
   1f65c:	4613      	mov	r3, r2
   1f65e:	d003      	beq.n	1f668 <strnlen+0x14>
   1f660:	781c      	ldrb	r4, [r3, #0]
   1f662:	3201      	adds	r2, #1
   1f664:	2c00      	cmp	r4, #0
   1f666:	d1f8      	bne.n	1f65a <strnlen+0x6>
   1f668:	1a18      	subs	r0, r3, r0
   1f66a:	bd10      	pop	{r4, pc}

0001f66c <strstr>:
   1f66c:	780a      	ldrb	r2, [r1, #0]
   1f66e:	b570      	push	{r4, r5, r6, lr}
   1f670:	b96a      	cbnz	r2, 1f68e <strstr+0x22>
   1f672:	bd70      	pop	{r4, r5, r6, pc}
   1f674:	429a      	cmp	r2, r3
   1f676:	d109      	bne.n	1f68c <strstr+0x20>
   1f678:	460c      	mov	r4, r1
   1f67a:	4605      	mov	r5, r0
   1f67c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1f680:	2b00      	cmp	r3, #0
   1f682:	d0f6      	beq.n	1f672 <strstr+0x6>
   1f684:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1f688:	429e      	cmp	r6, r3
   1f68a:	d0f7      	beq.n	1f67c <strstr+0x10>
   1f68c:	3001      	adds	r0, #1
   1f68e:	7803      	ldrb	r3, [r0, #0]
   1f690:	2b00      	cmp	r3, #0
   1f692:	d1ef      	bne.n	1f674 <strstr+0x8>
   1f694:	4618      	mov	r0, r3
   1f696:	e7ec      	b.n	1f672 <strstr+0x6>

0001f698 <__ultoa_invert>:
   1f698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f69c:	f1c3 0937 	rsb	r9, r3, #55	; 0x37
   1f6a0:	4607      	mov	r7, r0
   1f6a2:	4688      	mov	r8, r1
   1f6a4:	f003 051f 	and.w	r5, r3, #31
   1f6a8:	fa5f f989 	uxtb.w	r9, r9
   1f6ac:	4616      	mov	r6, r2
   1f6ae:	f04f 0a00 	mov.w	sl, #0
   1f6b2:	4638      	mov	r0, r7
   1f6b4:	4641      	mov	r1, r8
   1f6b6:	462a      	mov	r2, r5
   1f6b8:	4653      	mov	r3, sl
   1f6ba:	f7e8 fd43 	bl	8144 <__aeabi_uldivmod>
   1f6be:	4643      	mov	r3, r8
   1f6c0:	b2d4      	uxtb	r4, r2
   1f6c2:	463a      	mov	r2, r7
   1f6c4:	4688      	mov	r8, r1
   1f6c6:	4607      	mov	r7, r0
   1f6c8:	2c09      	cmp	r4, #9
   1f6ca:	bf84      	itt	hi
   1f6cc:	444c      	addhi	r4, r9
   1f6ce:	b2e4      	uxtbhi	r4, r4
   1f6d0:	42aa      	cmp	r2, r5
   1f6d2:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1f6d6:	eb73 030a 	sbcs.w	r3, r3, sl
   1f6da:	f806 4b01 	strb.w	r4, [r6], #1
   1f6de:	d2e8      	bcs.n	1f6b2 <__ultoa_invert+0x1a>
   1f6e0:	4630      	mov	r0, r6
   1f6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f6e6 <mulShiftAll64>:
   1f6e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f6ea:	1806      	adds	r6, r0, r0
   1f6ec:	b087      	sub	sp, #28
   1f6ee:	4699      	mov	r9, r3
   1f6f0:	4615      	mov	r5, r2
   1f6f2:	eb41 0401 	adc.w	r4, r1, r1
   1f6f6:	ab02      	add	r3, sp, #8
   1f6f8:	4630      	mov	r0, r6
   1f6fa:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   1f6fe:	4621      	mov	r1, r4
   1f700:	9300      	str	r3, [sp, #0]
   1f702:	f1a9 0a41 	sub.w	sl, r9, #65	; 0x41
   1f706:	e9d2 2300 	ldrd	r2, r3, [r2]
   1f70a:	f000 f8a6 	bl	1f85a <__umul128>
   1f70e:	ab04      	add	r3, sp, #16
   1f710:	4607      	mov	r7, r0
   1f712:	4688      	mov	r8, r1
   1f714:	4630      	mov	r0, r6
   1f716:	4621      	mov	r1, r4
   1f718:	9300      	str	r3, [sp, #0]
   1f71a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1f71e:	f000 f89c 	bl	1f85a <__umul128>
   1f722:	2200      	movs	r2, #0
   1f724:	e9dd 6302 	ldrd	r6, r3, [sp, #8]
   1f728:	1984      	adds	r4, r0, r6
   1f72a:	eb51 0603 	adcs.w	r6, r1, r3
   1f72e:	9b04      	ldr	r3, [sp, #16]
   1f730:	bf28      	it	cs
   1f732:	2201      	movcs	r2, #1
   1f734:	e9d5 0100 	ldrd	r0, r1, [r5]
   1f738:	18d2      	adds	r2, r2, r3
   1f73a:	9b05      	ldr	r3, [sp, #20]
   1f73c:	f143 0300 	adc.w	r3, r3, #0
   1f740:	1838      	adds	r0, r7, r0
   1f742:	eb48 0101 	adc.w	r1, r8, r1
   1f746:	42b8      	cmp	r0, r7
   1f748:	eb71 0108 	sbcs.w	r1, r1, r8
   1f74c:	e9d5 c102 	ldrd	ip, r1, [r5, #8]
   1f750:	bf34      	ite	cc
   1f752:	2001      	movcc	r0, #1
   1f754:	2000      	movcs	r0, #0
   1f756:	eb14 0c0c 	adds.w	ip, r4, ip
   1f75a:	f8cd a000 	str.w	sl, [sp]
   1f75e:	eb46 0101 	adc.w	r1, r6, r1
   1f762:	eb10 000c 	adds.w	r0, r0, ip
   1f766:	f141 0100 	adc.w	r1, r1, #0
   1f76a:	42a0      	cmp	r0, r4
   1f76c:	eb71 0c06 	sbcs.w	ip, r1, r6
   1f770:	bf34      	ite	cc
   1f772:	f04f 0c01 	movcc.w	ip, #1
   1f776:	f04f 0c00 	movcs.w	ip, #0
   1f77a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1f77e:	eb1c 0202 	adds.w	r2, ip, r2
   1f782:	f143 0300 	adc.w	r3, r3, #0
   1f786:	f000 f883 	bl	1f890 <__shiftright128>
   1f78a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f78c:	e9c3 0100 	strd	r0, r1, [r3]
   1f790:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1f792:	2b01      	cmp	r3, #1
   1f794:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1f798:	d129      	bne.n	1f7ee <mulShiftAll64+0x108>
   1f79a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   1f79e:	e9d5 c500 	ldrd	ip, r5, [r5]
   1f7a2:	1a20      	subs	r0, r4, r0
   1f7a4:	f8cd a000 	str.w	sl, [sp]
   1f7a8:	eb66 0101 	sbc.w	r1, r6, r1
   1f7ac:	4567      	cmp	r7, ip
   1f7ae:	eb78 0505 	sbcs.w	r5, r8, r5
   1f7b2:	bf34      	ite	cc
   1f7b4:	2501      	movcc	r5, #1
   1f7b6:	2500      	movcs	r5, #0
   1f7b8:	1b40      	subs	r0, r0, r5
   1f7ba:	f161 0100 	sbc.w	r1, r1, #0
   1f7be:	4284      	cmp	r4, r0
   1f7c0:	eb76 0501 	sbcs.w	r5, r6, r1
   1f7c4:	bf34      	ite	cc
   1f7c6:	2501      	movcc	r5, #1
   1f7c8:	2500      	movcs	r5, #0
   1f7ca:	1b52      	subs	r2, r2, r5
   1f7cc:	f163 0300 	sbc.w	r3, r3, #0
   1f7d0:	f000 f85e 	bl	1f890 <__shiftright128>
   1f7d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1f7d8:	e9cb 0100 	strd	r0, r1, [fp]
   1f7dc:	4620      	mov	r0, r4
   1f7de:	4631      	mov	r1, r6
   1f7e0:	f8cd a000 	str.w	sl, [sp]
   1f7e4:	f000 f854 	bl	1f890 <__shiftright128>
   1f7e8:	b007      	add	sp, #28
   1f7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7ee:	eb17 0e07 	adds.w	lr, r7, r7
   1f7f2:	eb48 0c08 	adc.w	ip, r8, r8
   1f7f6:	1920      	adds	r0, r4, r4
   1f7f8:	eb46 0106 	adc.w	r1, r6, r6
   1f7fc:	45be      	cmp	lr, r7
   1f7fe:	eb7c 0808 	sbcs.w	r8, ip, r8
   1f802:	bf34      	ite	cc
   1f804:	2701      	movcc	r7, #1
   1f806:	2700      	movcs	r7, #0
   1f808:	19c7      	adds	r7, r0, r7
   1f80a:	f141 0800 	adc.w	r8, r1, #0
   1f80e:	e9d5 0100 	ldrd	r0, r1, [r5]
   1f812:	4586      	cmp	lr, r0
   1f814:	eb7c 0c01 	sbcs.w	ip, ip, r1
   1f818:	bf34      	ite	cc
   1f81a:	2001      	movcc	r0, #1
   1f81c:	2000      	movcs	r0, #0
   1f81e:	e9d5 1502 	ldrd	r1, r5, [r5, #8]
   1f822:	1a38      	subs	r0, r7, r0
   1f824:	f168 0c00 	sbc.w	ip, r8, #0
   1f828:	1a40      	subs	r0, r0, r1
   1f82a:	eb6c 0105 	sbc.w	r1, ip, r5
   1f82e:	1892      	adds	r2, r2, r2
   1f830:	415b      	adcs	r3, r3
   1f832:	42a7      	cmp	r7, r4
   1f834:	eb78 0506 	sbcs.w	r5, r8, r6
   1f838:	bf34      	ite	cc
   1f83a:	2501      	movcc	r5, #1
   1f83c:	2500      	movcs	r5, #0
   1f83e:	1952      	adds	r2, r2, r5
   1f840:	f143 0300 	adc.w	r3, r3, #0
   1f844:	4287      	cmp	r7, r0
   1f846:	eb78 0801 	sbcs.w	r8, r8, r1
   1f84a:	bf34      	ite	cc
   1f84c:	2501      	movcc	r5, #1
   1f84e:	2500      	movcs	r5, #0
   1f850:	1b52      	subs	r2, r2, r5
   1f852:	f1a9 0540 	sub.w	r5, r9, #64	; 0x40
   1f856:	9500      	str	r5, [sp, #0]
   1f858:	e7b8      	b.n	1f7cc <mulShiftAll64+0xe6>

0001f85a <__umul128>:
   1f85a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f85c:	460f      	mov	r7, r1
   1f85e:	4604      	mov	r4, r0
   1f860:	fba0 0102 	umull	r0, r1, r0, r2
   1f864:	9e05      	ldr	r6, [sp, #20]
   1f866:	fba7 5202 	umull	r5, r2, r7, r2
   1f86a:	1949      	adds	r1, r1, r5
   1f86c:	fba3 4504 	umull	r4, r5, r3, r4
   1f870:	fba7 7303 	umull	r7, r3, r7, r3
   1f874:	f142 0200 	adc.w	r2, r2, #0
   1f878:	1861      	adds	r1, r4, r1
   1f87a:	f145 0400 	adc.w	r4, r5, #0
   1f87e:	19d2      	adds	r2, r2, r7
   1f880:	f143 0300 	adc.w	r3, r3, #0
   1f884:	1912      	adds	r2, r2, r4
   1f886:	f143 0300 	adc.w	r3, r3, #0
   1f88a:	e9c6 2300 	strd	r2, r3, [r6]
   1f88e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f890 <__shiftright128>:
   1f890:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f892:	9c05      	ldr	r4, [sp, #20]
   1f894:	f1c4 0740 	rsb	r7, r4, #64	; 0x40
   1f898:	f1c4 0620 	rsb	r6, r4, #32
   1f89c:	f1a4 0520 	sub.w	r5, r4, #32
   1f8a0:	40e0      	lsrs	r0, r4
   1f8a2:	fa02 f606 	lsl.w	r6, r2, r6
   1f8a6:	40bb      	lsls	r3, r7
   1f8a8:	fa22 f505 	lsr.w	r5, r2, r5
   1f8ac:	40ba      	lsls	r2, r7
   1f8ae:	4333      	orrs	r3, r6
   1f8b0:	f1c4 0620 	rsb	r6, r4, #32
   1f8b4:	432b      	orrs	r3, r5
   1f8b6:	fa01 f606 	lsl.w	r6, r1, r6
   1f8ba:	f1a4 0520 	sub.w	r5, r4, #32
   1f8be:	4330      	orrs	r0, r6
   1f8c0:	fa21 f505 	lsr.w	r5, r1, r5
   1f8c4:	40e1      	lsrs	r1, r4
   1f8c6:	4328      	orrs	r0, r5
   1f8c8:	4319      	orrs	r1, r3
   1f8ca:	4310      	orrs	r0, r2
   1f8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f8ce <__aeabi_memcpy>:
   1f8ce:	440a      	add	r2, r1
   1f8d0:	1e43      	subs	r3, r0, #1
   1f8d2:	4291      	cmp	r1, r2
   1f8d4:	d100      	bne.n	1f8d8 <__aeabi_memcpy+0xa>
   1f8d6:	4770      	bx	lr
   1f8d8:	b510      	push	{r4, lr}
   1f8da:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f8de:	4291      	cmp	r1, r2
   1f8e0:	f803 4f01 	strb.w	r4, [r3, #1]!
   1f8e4:	d1f9      	bne.n	1f8da <__aeabi_memcpy+0xc>
   1f8e6:	bd10      	pop	{r4, pc}

0001f8e8 <memset>:
   1f8e8:	4402      	add	r2, r0
   1f8ea:	4603      	mov	r3, r0
   1f8ec:	4293      	cmp	r3, r2
   1f8ee:	d100      	bne.n	1f8f2 <memset+0xa>
   1f8f0:	4770      	bx	lr
   1f8f2:	f803 1b01 	strb.w	r1, [r3], #1
   1f8f6:	e7f9      	b.n	1f8ec <memset+0x4>

0001f8f8 <__file_str_put>:
   1f8f8:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   1f8fc:	4293      	cmp	r3, r2
   1f8fe:	bf1e      	ittt	ne
   1f900:	1c5a      	addne	r2, r3, #1
   1f902:	610a      	strne	r2, [r1, #16]
   1f904:	7018      	strbne	r0, [r3, #0]
   1f906:	4770      	bx	lr

0001f908 <__aeabi_read_tp>:

GDATA(z_arm_tls_ptr)

SECTION_FUNC(TEXT, __aeabi_read_tp)
	/* Grab the TLS pointer and store in R0 */
	ldr r0, =z_arm_tls_ptr
   1f908:	4801      	ldr	r0, [pc, #4]	; (1f910 <__aeabi_read_tp+0x8>)
	ldr r0, [r0]
   1f90a:	6800      	ldr	r0, [r0, #0]
	bx lr
   1f90c:	4770      	bx	lr
   1f90e:	0000      	.short	0x0000
	ldr r0, =z_arm_tls_ptr
   1f910:	2000c8f0 	.word	0x2000c8f0
